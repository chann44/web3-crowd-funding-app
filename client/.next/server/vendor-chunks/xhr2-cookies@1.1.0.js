"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xhr2-cookies@1.1.0";
exports.ids = ["vendor-chunks/xhr2-cookies@1.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/errors.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/errors.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar SecurityError = /** @class */ function(_super) {\n    __extends(SecurityError, _super);\n    function SecurityError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return SecurityError;\n}(Error);\nexports.SecurityError = SecurityError;\nvar InvalidStateError = /** @class */ function(_super) {\n    __extends(InvalidStateError, _super);\n    function InvalidStateError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return InvalidStateError;\n}(Error);\nexports.InvalidStateError = InvalidStateError;\nvar NetworkError = /** @class */ function(_super) {\n    __extends(NetworkError, _super);\n    function NetworkError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NetworkError;\n}(Error);\nexports.NetworkError = NetworkError;\nvar SyntaxError = /** @class */ function(_super) {\n    __extends(SyntaxError, _super);\n    function SyntaxError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return SyntaxError;\n}(Error);\nexports.SyntaxError = SyntaxError; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0veGhyMi1jb29raWVzQDEuMS4wL25vZGVfbW9kdWxlcy94aHIyLWNvb2tpZXMvZGlzdC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsU0FBUyxJQUFLO0lBQ3hDLElBQUlDLGdCQUFnQkMsT0FBT0MsY0FBYyxJQUNwQztRQUFFQyxXQUFXLEVBQUU7SUFBQyxjQUFhQyxTQUFTLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUFJRCxFQUFFRixTQUFTLEdBQUdHO0lBQUcsS0FDMUUsU0FBVUQsQ0FBQyxFQUFFQyxDQUFDO1FBQUksSUFBSyxJQUFJQyxLQUFLRCxFQUFHLElBQUlBLEVBQUVFLGNBQWMsQ0FBQ0QsSUFBSUYsQ0FBQyxDQUFDRSxFQUFFLEdBQUdELENBQUMsQ0FBQ0MsRUFBRTtJQUFFO0lBQzdFLE9BQU8sU0FBVUYsQ0FBQyxFQUFFQyxDQUFDO1FBQ2pCTixjQUFjSyxHQUFHQztRQUNqQixTQUFTRztZQUFPLElBQUksQ0FBQ0MsV0FBVyxHQUFHTDtRQUFHO1FBQ3RDQSxFQUFFTSxTQUFTLEdBQUdMLE1BQU0sT0FBT0wsT0FBT1csTUFBTSxDQUFDTixLQUFNRyxDQUFBQSxHQUFHRSxTQUFTLEdBQUdMLEVBQUVLLFNBQVMsRUFBRSxJQUFJRixJQUFHO0lBQ3RGO0FBQ0o7QUFDQVIsOENBQTZDO0lBQUVjLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsSUFBSUMsZ0JBQWdCLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQy9DbEIsVUFBVWlCLGVBQWVDO0lBQ3pCLFNBQVNEO1FBQ0wsT0FBT0MsV0FBVyxRQUFRQSxPQUFPQyxLQUFLLENBQUMsSUFBSSxFQUFFQyxjQUFjLElBQUk7SUFDbkU7SUFDQSxPQUFPSDtBQUNYLEVBQUVJO0FBQ0ZOLHFCQUFxQixHQUFHRTtBQUN4QixJQUFJSyxvQkFBb0IsV0FBVyxHQUFJLFNBQVVKLE1BQU07SUFDbkRsQixVQUFVc0IsbUJBQW1CSjtJQUM3QixTQUFTSTtRQUNMLE9BQU9KLFdBQVcsUUFBUUEsT0FBT0MsS0FBSyxDQUFDLElBQUksRUFBRUMsY0FBYyxJQUFJO0lBQ25FO0lBQ0EsT0FBT0U7QUFDWCxFQUFFRDtBQUNGTix5QkFBeUIsR0FBR087QUFDNUIsSUFBSUMsZUFBZSxXQUFXLEdBQUksU0FBVUwsTUFBTTtJQUM5Q2xCLFVBQVV1QixjQUFjTDtJQUN4QixTQUFTSztRQUNMLE9BQU9MLFdBQVcsUUFBUUEsT0FBT0MsS0FBSyxDQUFDLElBQUksRUFBRUMsY0FBYyxJQUFJO0lBQ25FO0lBQ0EsT0FBT0c7QUFDWCxFQUFFRjtBQUNGTixvQkFBb0IsR0FBR1E7QUFDdkIsSUFBSUMsY0FBYyxXQUFXLEdBQUksU0FBVU4sTUFBTTtJQUM3Q2xCLFVBQVV3QixhQUFhTjtJQUN2QixTQUFTTTtRQUNMLE9BQU9OLFdBQVcsUUFBUUEsT0FBT0MsS0FBSyxDQUFDLElBQUksRUFBRUMsY0FBYyxJQUFJO0lBQ25FO0lBQ0EsT0FBT0k7QUFDWCxFQUFFSDtBQUNGTixtQkFBbUIsR0FBR1MsYUFDdEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL3hocjItY29va2llc0AxLjEuMC9ub2RlX21vZHVsZXMveGhyMi1jb29raWVzL2Rpc3QvZXJyb3JzLmpzPzVkMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTZWN1cml0eUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTZWN1cml0eUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNlY3VyaXR5RXJyb3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNlY3VyaXR5RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlNlY3VyaXR5RXJyb3IgPSBTZWN1cml0eUVycm9yO1xudmFyIEludmFsaWRTdGF0ZUVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnZhbGlkU3RhdGVFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbnZhbGlkU3RhdGVFcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZFN0YXRlRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLkludmFsaWRTdGF0ZUVycm9yID0gSW52YWxpZFN0YXRlRXJyb3I7XG52YXIgTmV0d29ya0Vycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOZXR3b3JrRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTmV0d29ya0Vycm9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBOZXR3b3JrRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLk5ldHdvcmtFcnJvciA9IE5ldHdvcmtFcnJvcjtcbnZhciBTeW50YXhFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ludGF4RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ludGF4RXJyb3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFN5bnRheEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5TeW50YXhFcnJvciA9IFN5bnRheEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImQiLCJiIiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2VjdXJpdHlFcnJvciIsIl9zdXBlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiRXJyb3IiLCJJbnZhbGlkU3RhdGVFcnJvciIsIk5ldHdvcmtFcnJvciIsIlN5bnRheEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction __export(m) {\n    for(var p in m)if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__export(__webpack_require__(/*! ./xml-http-request */ \"(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request.js\"));\nvar xml_http_request_event_target_1 = __webpack_require__(/*! ./xml-http-request-event-target */ \"(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js\");\nexports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0veGhyMi1jb29raWVzQDEuMS4wL25vZGVfbW9kdWxlcy94aHIyLWNvb2tpZXMvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLFNBQVNBLFNBQVNDLENBQUM7SUFDZixJQUFLLElBQUlDLEtBQUtELEVBQUcsSUFBSSxDQUFDRSxRQUFRQyxjQUFjLENBQUNGLElBQUlDLE9BQU8sQ0FBQ0QsRUFBRSxHQUFHRCxDQUFDLENBQUNDLEVBQUU7QUFDdEU7QUFDQUcsOENBQTZDO0lBQUVFLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RQLFNBQVNRLG1CQUFPQSxDQUFDLDRIQUFvQjtBQUNyQyxJQUFJQyxrQ0FBa0NELG1CQUFPQSxDQUFDLHNKQUFpQztBQUMvRUwsaUNBQWlDLEdBQUdNLGdDQUFnQ0MseUJBQXlCLEVBQzdGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS94aHIyLWNvb2tpZXNAMS4xLjAvbm9kZV9tb2R1bGVzL3hocjItY29va2llcy9kaXN0L2luZGV4LmpzP2YzYTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4veG1sLWh0dHAtcmVxdWVzdFwiKSk7XG52YXIgeG1sX2h0dHBfcmVxdWVzdF9ldmVudF90YXJnZXRfMSA9IHJlcXVpcmUoXCIuL3htbC1odHRwLXJlcXVlc3QtZXZlbnQtdGFyZ2V0XCIpO1xuZXhwb3J0cy5YTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0ID0geG1sX2h0dHBfcmVxdWVzdF9ldmVudF90YXJnZXRfMS5YTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9fZXhwb3J0IiwibSIsInAiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicmVxdWlyZSIsInhtbF9odHRwX3JlcXVlc3RfZXZlbnRfdGFyZ2V0XzEiLCJYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/progress-event.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/progress-event.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar ProgressEvent = /** @class */ function() {\n    function ProgressEvent(type) {\n        this.type = type;\n        this.bubbles = false;\n        this.cancelable = false;\n        this.loaded = 0;\n        this.lengthComputable = false;\n        this.total = 0;\n    }\n    return ProgressEvent;\n}();\nexports.ProgressEvent = ProgressEvent; //# sourceMappingURL=progress-event.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0veGhyMi1jb29raWVzQDEuMS4wL25vZGVfbW9kdWxlcy94aHIyLWNvb2tpZXMvZGlzdC9wcm9ncmVzcy1ldmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyxnQkFBZ0IsV0FBVyxHQUFJO0lBQy9CLFNBQVNBLGNBQWNDLElBQUk7UUFDdkIsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDQyxLQUFLLEdBQUc7SUFDakI7SUFDQSxPQUFPTjtBQUNYO0FBQ0FGLHFCQUFxQixHQUFHRSxlQUN4QiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0veGhyMi1jb29raWVzQDEuMS4wL25vZGVfbW9kdWxlcy94aHIyLWNvb2tpZXMvZGlzdC9wcm9ncmVzcy1ldmVudC5qcz9mNWM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFByb2dyZXNzRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJvZ3Jlc3NFdmVudCh0eXBlKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuYnViYmxlcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSAwO1xuICAgICAgICB0aGlzLmxlbmd0aENvbXB1dGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50b3RhbCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBQcm9ncmVzc0V2ZW50O1xufSgpKTtcbmV4cG9ydHMuUHJvZ3Jlc3NFdmVudCA9IFByb2dyZXNzRXZlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9ncmVzcy1ldmVudC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQcm9ncmVzc0V2ZW50IiwidHlwZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwibG9hZGVkIiwibGVuZ3RoQ29tcHV0YWJsZSIsInRvdGFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/progress-event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar XMLHttpRequestEventTarget = /** @class */ function() {\n    function XMLHttpRequestEventTarget() {\n        this.listeners = {};\n    }\n    XMLHttpRequestEventTarget.prototype.addEventListener = function(eventType, listener) {\n        eventType = eventType.toLowerCase();\n        this.listeners[eventType] = this.listeners[eventType] || [];\n        this.listeners[eventType].push(listener.handleEvent || listener);\n    };\n    XMLHttpRequestEventTarget.prototype.removeEventListener = function(eventType, listener) {\n        eventType = eventType.toLowerCase();\n        if (!this.listeners[eventType]) {\n            return;\n        }\n        var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);\n        if (index < 0) {\n            return;\n        }\n        this.listeners[eventType].splice(index, 1);\n    };\n    XMLHttpRequestEventTarget.prototype.dispatchEvent = function(event) {\n        var eventType = event.type.toLowerCase();\n        event.target = this; // TODO: set event.currentTarget?\n        if (this.listeners[eventType]) {\n            for(var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++){\n                var listener_1 = _a[_i];\n                listener_1.call(this, event);\n            }\n        }\n        var listener = this[\"on\" + eventType];\n        if (listener) {\n            listener.call(this, event);\n        }\n        return true;\n    };\n    return XMLHttpRequestEventTarget;\n}();\nexports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget; //# sourceMappingURL=xml-http-request-event-target.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0veGhyMi1jb29raWVzQDEuMS4wL25vZGVfbW9kdWxlcy94aHIyLWNvb2tpZXMvZGlzdC94bWwtaHR0cC1yZXF1ZXN0LWV2ZW50LXRhcmdldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyw0QkFBNEIsV0FBVyxHQUFJO0lBQzNDLFNBQVNBO1FBQ0wsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQztJQUN0QjtJQUNBRCwwQkFBMEJFLFNBQVMsQ0FBQ0MsZ0JBQWdCLEdBQUcsU0FBVUMsU0FBUyxFQUFFQyxRQUFRO1FBQ2hGRCxZQUFZQSxVQUFVRSxXQUFXO1FBQ2pDLElBQUksQ0FBQ0wsU0FBUyxDQUFDRyxVQUFVLEdBQUcsSUFBSSxDQUFDSCxTQUFTLENBQUNHLFVBQVUsSUFBSSxFQUFFO1FBQzNELElBQUksQ0FBQ0gsU0FBUyxDQUFDRyxVQUFVLENBQUNHLElBQUksQ0FBQ0YsU0FBU0csV0FBVyxJQUFJSDtJQUMzRDtJQUNBTCwwQkFBMEJFLFNBQVMsQ0FBQ08sbUJBQW1CLEdBQUcsU0FBVUwsU0FBUyxFQUFFQyxRQUFRO1FBQ25GRCxZQUFZQSxVQUFVRSxXQUFXO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUNMLFNBQVMsQ0FBQ0csVUFBVSxFQUFFO1lBQzVCO1FBQ0o7UUFDQSxJQUFJTSxRQUFRLElBQUksQ0FBQ1QsU0FBUyxDQUFDRyxVQUFVLENBQUNPLE9BQU8sQ0FBQ04sU0FBU0csV0FBVyxJQUFJSDtRQUN0RSxJQUFJSyxRQUFRLEdBQUc7WUFDWDtRQUNKO1FBQ0EsSUFBSSxDQUFDVCxTQUFTLENBQUNHLFVBQVUsQ0FBQ1EsTUFBTSxDQUFDRixPQUFPO0lBQzVDO0lBQ0FWLDBCQUEwQkUsU0FBUyxDQUFDVyxhQUFhLEdBQUcsU0FBVUMsS0FBSztRQUMvRCxJQUFJVixZQUFZVSxNQUFNQyxJQUFJLENBQUNULFdBQVc7UUFDdENRLE1BQU1FLE1BQU0sR0FBRyxJQUFJLEVBQUUsaUNBQWlDO1FBQ3RELElBQUksSUFBSSxDQUFDZixTQUFTLENBQUNHLFVBQVUsRUFBRTtZQUMzQixJQUFLLElBQUlhLEtBQUssR0FBR0MsS0FBSyxJQUFJLENBQUNqQixTQUFTLENBQUNHLFVBQVUsRUFBRWEsS0FBS0MsR0FBR0MsTUFBTSxFQUFFRixLQUFNO2dCQUNuRSxJQUFJRyxhQUFhRixFQUFFLENBQUNELEdBQUc7Z0JBQ3ZCRyxXQUFXQyxJQUFJLENBQUMsSUFBSSxFQUFFUDtZQUMxQjtRQUNKO1FBQ0EsSUFBSVQsV0FBVyxJQUFJLENBQUMsT0FBT0QsVUFBVTtRQUNyQyxJQUFJQyxVQUFVO1lBQ1ZBLFNBQVNnQixJQUFJLENBQUMsSUFBSSxFQUFFUDtRQUN4QjtRQUNBLE9BQU87SUFDWDtJQUNBLE9BQU9kO0FBQ1g7QUFDQUYsaUNBQWlDLEdBQUdFLDJCQUNwQyx5REFBeUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0veGhyMi1jb29raWVzQDEuMS4wL25vZGVfbW9kdWxlcy94aHIyLWNvb2tpZXMvZGlzdC94bWwtaHR0cC1yZXF1ZXN0LWV2ZW50LXRhcmdldC5qcz8xOWVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldCgpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgICB9XG4gICAgWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudFR5cGVdID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRUeXBlXSB8fCBbXTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRUeXBlXS5wdXNoKGxpc3RlbmVyLmhhbmRsZUV2ZW50IHx8IGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBldmVudFR5cGUgPSBldmVudFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1tldmVudFR5cGVdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRUeXBlXS5pbmRleE9mKGxpc3RlbmVyLmhhbmRsZUV2ZW50IHx8IGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50VHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICAgIFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IGV2ZW50LnR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZXZlbnQudGFyZ2V0ID0gdGhpczsgLy8gVE9ETzogc2V0IGV2ZW50LmN1cnJlbnRUYXJnZXQ/XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1tldmVudFR5cGVdKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRUeXBlXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJfMSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcl8xLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IHRoaXNbXCJvblwiICsgZXZlbnRUeXBlXTtcbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0O1xufSgpKTtcbmV4cG9ydHMuWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldCA9IFhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD14bWwtaHR0cC1yZXF1ZXN0LWV2ZW50LXRhcmdldC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0IiwibGlzdGVuZXJzIiwicHJvdG90eXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50VHlwZSIsImxpc3RlbmVyIiwidG9Mb3dlckNhc2UiLCJwdXNoIiwiaGFuZGxlRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZGlzcGF0Y2hFdmVudCIsImV2ZW50IiwidHlwZSIsInRhcmdldCIsIl9pIiwiX2EiLCJsZW5ndGgiLCJsaXN0ZW5lcl8xIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-upload.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-upload.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar xml_http_request_event_target_1 = __webpack_require__(/*! ./xml-http-request-event-target */ \"(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js\");\nvar XMLHttpRequestUpload = /** @class */ function(_super) {\n    __extends(XMLHttpRequestUpload, _super);\n    function XMLHttpRequestUpload() {\n        var _this = _super.call(this) || this;\n        _this._contentType = null;\n        _this._body = null;\n        _this._reset();\n        return _this;\n    }\n    XMLHttpRequestUpload.prototype._reset = function() {\n        this._contentType = null;\n        this._body = null;\n    };\n    XMLHttpRequestUpload.prototype._setData = function(data) {\n        if (data == null) {\n            return;\n        }\n        if (typeof data === \"string\") {\n            if (data.length !== 0) {\n                this._contentType = \"text/plain;charset=UTF-8\";\n            }\n            this._body = new Buffer(data, \"utf-8\");\n        } else if (Buffer.isBuffer(data)) {\n            this._body = data;\n        } else if (data instanceof ArrayBuffer) {\n            var body = new Buffer(data.byteLength);\n            var view = new Uint8Array(data);\n            for(var i = 0; i < data.byteLength; i++){\n                body[i] = view[i];\n            }\n            this._body = body;\n        } else if (data.buffer && data.buffer instanceof ArrayBuffer) {\n            var body = new Buffer(data.byteLength);\n            var offset = data.byteOffset;\n            var view = new Uint8Array(data.buffer);\n            for(var i = 0; i < data.byteLength; i++){\n                body[i] = view[i + offset];\n            }\n            this._body = body;\n        } else {\n            throw new Error(\"Unsupported send() data \" + data);\n        }\n    };\n    XMLHttpRequestUpload.prototype._finalizeHeaders = function(headers, loweredHeaders) {\n        if (this._contentType && !loweredHeaders[\"content-type\"]) {\n            headers[\"Content-Type\"] = this._contentType;\n        }\n        if (this._body) {\n            headers[\"Content-Length\"] = this._body.length.toString();\n        }\n    };\n    XMLHttpRequestUpload.prototype._startUpload = function(request) {\n        if (this._body) {\n            request.write(this._body);\n        }\n        request.end();\n    };\n    return XMLHttpRequestUpload;\n}(xml_http_request_event_target_1.XMLHttpRequestEventTarget);\nexports.XMLHttpRequestUpload = XMLHttpRequestUpload; //# sourceMappingURL=xml-http-request-upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-upload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = (void 0) && (void 0).__assign || Object.assign || function(t) {\n    for(var s, i = 1, n = arguments.length; i < n; i++){\n        s = arguments[i];\n        for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar os = __webpack_require__(/*! os */ \"os\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar progress_event_1 = __webpack_require__(/*! ./progress-event */ \"(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/progress-event.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/errors.js\");\nvar xml_http_request_event_target_1 = __webpack_require__(/*! ./xml-http-request-event-target */ \"(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js\");\nvar xml_http_request_upload_1 = __webpack_require__(/*! ./xml-http-request-upload */ \"(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request-upload.js\");\nvar Cookie = __webpack_require__(/*! cookiejar */ \"(ssr)/./node_modules/.pnpm/cookiejar@2.1.4/node_modules/cookiejar/cookiejar.js\");\nvar XMLHttpRequest = /** @class */ function(_super) {\n    __extends(XMLHttpRequest, _super);\n    function XMLHttpRequest(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this = _super.call(this) || this;\n        _this.UNSENT = XMLHttpRequest.UNSENT;\n        _this.OPENED = XMLHttpRequest.OPENED;\n        _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;\n        _this.LOADING = XMLHttpRequest.LOADING;\n        _this.DONE = XMLHttpRequest.DONE;\n        _this.onreadystatechange = null;\n        _this.readyState = XMLHttpRequest.UNSENT;\n        _this.response = null;\n        _this.responseText = \"\";\n        _this.responseType = \"\";\n        _this.status = 0; // TODO: UNSENT?\n        _this.statusText = \"\";\n        _this.timeout = 0;\n        _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();\n        _this.responseUrl = \"\";\n        _this.withCredentials = false;\n        _this._method = null;\n        _this._url = null;\n        _this._sync = false;\n        _this._headers = {};\n        _this._loweredHeaders = {};\n        _this._mimeOverride = null; // TODO: is type right?\n        _this._request = null;\n        _this._response = null;\n        _this._responseParts = null;\n        _this._responseHeaders = null;\n        _this._aborting = null; // TODO: type?\n        _this._error = null; // TODO: type?\n        _this._loadedBytes = 0;\n        _this._totalBytes = 0;\n        _this._lengthComputable = false;\n        _this._restrictedMethods = {\n            CONNECT: true,\n            TRACE: true,\n            TRACK: true\n        };\n        _this._restrictedHeaders = {\n            \"accept-charset\": true,\n            \"accept-encoding\": true,\n            \"access-control-request-headers\": true,\n            \"access-control-request-method\": true,\n            connection: true,\n            \"content-length\": true,\n            cookie: true,\n            cookie2: true,\n            date: true,\n            dnt: true,\n            expect: true,\n            host: true,\n            \"keep-alive\": true,\n            origin: true,\n            referer: true,\n            te: true,\n            trailer: true,\n            \"transfer-encoding\": true,\n            upgrade: true,\n            \"user-agent\": true,\n            via: true\n        };\n        _this._privateHeaders = {\n            \"set-cookie\": true,\n            \"set-cookie2\": true\n        };\n        _this._userAgent = \"Mozilla/5.0 (\" + os.type() + \" \" + os.arch() + \") node.js/\" + process.versions.node + \" v8/\" + process.versions.v8;\n        _this._anonymous = options.anon || false;\n        return _this;\n    }\n    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {\n        if (async === void 0) {\n            async = true;\n        }\n        method = method.toUpperCase();\n        if (this._restrictedMethods[method]) {\n            throw new XMLHttpRequest.SecurityError(\"HTTP method \" + method + \" is not allowed in XHR\");\n        }\n        ;\n        var xhrUrl = this._parseUrl(url, user, password);\n        if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {\n        // TODO(pwnall): terminate abort(), terminate send()\n        }\n        this._method = method;\n        this._url = xhrUrl;\n        this._sync = !async;\n        this._headers = {};\n        this._loweredHeaders = {};\n        this._mimeOverride = null;\n        this._setReadyState(XMLHttpRequest.OPENED);\n        this._request = null;\n        this._response = null;\n        this.status = 0;\n        this.statusText = \"\";\n        this._responseParts = [];\n        this._responseHeaders = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n    };\n    XMLHttpRequest.prototype.setRequestHeader = function(name, value) {\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n            throw new XMLHttpRequest.InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n        var loweredName = name.toLowerCase();\n        if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {\n            console.warn('Refused to set unsafe header \"' + name + '\"');\n            return;\n        }\n        value = value.toString();\n        if (this._loweredHeaders[loweredName] != null) {\n            name = this._loweredHeaders[loweredName];\n            this._headers[name] = this._headers[name] + \", \" + value;\n        } else {\n            this._loweredHeaders[loweredName] = name;\n            this._headers[name] = value;\n        }\n    };\n    XMLHttpRequest.prototype.send = function(data) {\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n            throw new XMLHttpRequest.InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n        if (this._request) {\n            throw new XMLHttpRequest.InvalidStateError(\"send() already called\");\n        }\n        switch(this._url.protocol){\n            case \"file:\":\n                return this._sendFile(data);\n            case \"http:\":\n            case \"https:\":\n                return this._sendHttp(data);\n            default:\n                throw new XMLHttpRequest.NetworkError(\"Unsupported protocol \" + this._url.protocol);\n        }\n    };\n    XMLHttpRequest.prototype.abort = function() {\n        if (this._request == null) {\n            return;\n        }\n        this._request.abort();\n        this._setError();\n        this._dispatchProgress(\"abort\");\n        this._dispatchProgress(\"loadend\");\n    };\n    XMLHttpRequest.prototype.getResponseHeader = function(name) {\n        if (this._responseHeaders == null || name == null) {\n            return null;\n        }\n        var loweredName = name.toLowerCase();\n        return this._responseHeaders.hasOwnProperty(loweredName) ? this._responseHeaders[name.toLowerCase()] : null;\n    };\n    XMLHttpRequest.prototype.getAllResponseHeaders = function() {\n        var _this = this;\n        if (this._responseHeaders == null) {\n            return \"\";\n        }\n        return Object.keys(this._responseHeaders).map(function(key) {\n            return key + \": \" + _this._responseHeaders[key];\n        }).join(\"\\r\\n\");\n    };\n    XMLHttpRequest.prototype.overrideMimeType = function(mimeType) {\n        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n            throw new XMLHttpRequest.InvalidStateError(\"overrideMimeType() not allowed in LOADING or DONE\");\n        }\n        this._mimeOverride = mimeType.toLowerCase();\n    };\n    XMLHttpRequest.prototype.nodejsSet = function(options) {\n        this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;\n        this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;\n        if (options.hasOwnProperty(\"baseUrl\")) {\n            if (options.baseUrl != null) {\n                var parsedUrl = url.parse(options.baseUrl, false, true);\n                if (!parsedUrl.protocol) {\n                    throw new XMLHttpRequest.SyntaxError(\"baseUrl must be an absolute URL\");\n                }\n            }\n            this.nodejsBaseUrl = options.baseUrl;\n        }\n    };\n    XMLHttpRequest.nodejsSet = function(options) {\n        XMLHttpRequest.prototype.nodejsSet(options);\n    };\n    XMLHttpRequest.prototype._setReadyState = function(readyState) {\n        this.readyState = readyState;\n        this.dispatchEvent(new progress_event_1.ProgressEvent(\"readystatechange\"));\n    };\n    XMLHttpRequest.prototype._sendFile = function(data) {\n        // TODO\n        throw new Error(\"Protocol file: not implemented\");\n    };\n    XMLHttpRequest.prototype._sendHttp = function(data) {\n        if (this._sync) {\n            throw new Error(\"Synchronous XHR processing not implemented\");\n        }\n        if (data && (this._method === \"GET\" || this._method === \"HEAD\")) {\n            console.warn(\"Discarding entity body for \" + this._method + \" requests\");\n            data = null;\n        } else {\n            data = data || \"\";\n        }\n        this.upload._setData(data);\n        this._finalizeHeaders();\n        this._sendHxxpRequest();\n    };\n    XMLHttpRequest.prototype._sendHxxpRequest = function() {\n        var _this = this;\n        if (this.withCredentials) {\n            var cookie = XMLHttpRequest.cookieJar.getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === \"https:\")).toValueString();\n            this._headers.cookie = this._headers.cookie2 = cookie;\n        }\n        var _a = this._url.protocol === \"http:\" ? [\n            http,\n            this.nodejsHttpAgent\n        ] : [\n            https,\n            this.nodejsHttpsAgent\n        ], hxxp = _a[0], agent = _a[1];\n        var requestMethod = hxxp.request.bind(hxxp);\n        var request = requestMethod({\n            hostname: this._url.hostname,\n            port: +this._url.port,\n            path: this._url.path,\n            auth: this._url.auth,\n            method: this._method,\n            headers: this._headers,\n            agent: agent\n        });\n        this._request = request;\n        if (this.timeout) {\n            request.setTimeout(this.timeout, function() {\n                return _this._onHttpTimeout(request);\n            });\n        }\n        request.on(\"response\", function(response) {\n            return _this._onHttpResponse(request, response);\n        });\n        request.on(\"error\", function(error) {\n            return _this._onHttpRequestError(request, error);\n        });\n        this.upload._startUpload(request);\n        if (this._request === request) {\n            this._dispatchProgress(\"loadstart\");\n        }\n    };\n    XMLHttpRequest.prototype._finalizeHeaders = function() {\n        this._headers = __assign({}, this._headers, {\n            Connection: \"keep-alive\",\n            Host: this._url.host,\n            \"User-Agent\": this._userAgent\n        }, this._anonymous ? {\n            Referer: \"about:blank\"\n        } : {});\n        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);\n    };\n    XMLHttpRequest.prototype._onHttpResponse = function(request, response) {\n        var _this = this;\n        if (this._request !== request) {\n            return;\n        }\n        if (this.withCredentials && (response.headers[\"set-cookie\"] || response.headers[\"set-cookie2\"])) {\n            XMLHttpRequest.cookieJar.setCookies(response.headers[\"set-cookie\"] || response.headers[\"set-cookie2\"]);\n        }\n        if ([\n            301,\n            302,\n            303,\n            307,\n            308\n        ].indexOf(response.statusCode) >= 0) {\n            this._url = this._parseUrl(response.headers.location);\n            this._method = \"GET\";\n            if (this._loweredHeaders[\"content-type\"]) {\n                delete this._headers[this._loweredHeaders[\"content-type\"]];\n                delete this._loweredHeaders[\"content-type\"];\n            }\n            if (this._headers[\"Content-Type\"] != null) {\n                delete this._headers[\"Content-Type\"];\n            }\n            delete this._headers[\"Content-Length\"];\n            this.upload._reset();\n            this._finalizeHeaders();\n            this._sendHxxpRequest();\n            return;\n        }\n        this._response = response;\n        this._response.on(\"data\", function(data) {\n            return _this._onHttpResponseData(response, data);\n        });\n        this._response.on(\"end\", function() {\n            return _this._onHttpResponseEnd(response);\n        });\n        this._response.on(\"close\", function() {\n            return _this._onHttpResponseClose(response);\n        });\n        this.responseUrl = this._url.href.split(\"#\")[0];\n        this.status = response.statusCode;\n        this.statusText = http.STATUS_CODES[this.status];\n        this._parseResponseHeaders(response);\n        var lengthString = this._responseHeaders[\"content-length\"] || \"\";\n        this._totalBytes = +lengthString;\n        this._lengthComputable = !!lengthString;\n        this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);\n    };\n    XMLHttpRequest.prototype._onHttpResponseData = function(response, data) {\n        if (this._response !== response) {\n            return;\n        }\n        this._responseParts.push(new Buffer(data));\n        this._loadedBytes += data.length;\n        if (this.readyState !== XMLHttpRequest.LOADING) {\n            this._setReadyState(XMLHttpRequest.LOADING);\n        }\n        this._dispatchProgress(\"progress\");\n    };\n    XMLHttpRequest.prototype._onHttpResponseEnd = function(response) {\n        if (this._response !== response) {\n            return;\n        }\n        this._parseResponse();\n        this._request = null;\n        this._response = null;\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress(\"load\");\n        this._dispatchProgress(\"loadend\");\n    };\n    XMLHttpRequest.prototype._onHttpResponseClose = function(response) {\n        if (this._response !== response) {\n            return;\n        }\n        var request = this._request;\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress(\"error\");\n        this._dispatchProgress(\"loadend\");\n    };\n    XMLHttpRequest.prototype._onHttpTimeout = function(request) {\n        if (this._request !== request) {\n            return;\n        }\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress(\"timeout\");\n        this._dispatchProgress(\"loadend\");\n    };\n    XMLHttpRequest.prototype._onHttpRequestError = function(request, error) {\n        if (this._request !== request) {\n            return;\n        }\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress(\"error\");\n        this._dispatchProgress(\"loadend\");\n    };\n    XMLHttpRequest.prototype._dispatchProgress = function(eventType) {\n        var event = new XMLHttpRequest.ProgressEvent(eventType);\n        event.lengthComputable = this._lengthComputable;\n        event.loaded = this._loadedBytes;\n        event.total = this._totalBytes;\n        this.dispatchEvent(event);\n    };\n    XMLHttpRequest.prototype._setError = function() {\n        this._request = null;\n        this._response = null;\n        this._responseHeaders = null;\n        this._responseParts = null;\n    };\n    XMLHttpRequest.prototype._parseUrl = function(urlString, user, password) {\n        var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);\n        var xhrUrl = url.parse(absoluteUrl, false, true);\n        xhrUrl.hash = null;\n        var _a = (xhrUrl.auth || \"\").split(\":\"), xhrUser = _a[0], xhrPassword = _a[1];\n        if (xhrUser || xhrPassword || user || password) {\n            xhrUrl.auth = (user || xhrUser || \"\") + \":\" + (password || xhrPassword || \"\");\n        }\n        return xhrUrl;\n    };\n    XMLHttpRequest.prototype._parseResponseHeaders = function(response) {\n        this._responseHeaders = {};\n        for(var name_1 in response.headers){\n            var loweredName = name_1.toLowerCase();\n            if (this._privateHeaders[loweredName]) {\n                continue;\n            }\n            this._responseHeaders[loweredName] = response.headers[name_1];\n        }\n        if (this._mimeOverride != null) {\n            this._responseHeaders[\"content-type\"] = this._mimeOverride;\n        }\n    };\n    XMLHttpRequest.prototype._parseResponse = function() {\n        var buffer = Buffer.concat(this._responseParts);\n        this._responseParts = null;\n        switch(this.responseType){\n            case \"json\":\n                this.responseText = null;\n                try {\n                    this.response = JSON.parse(buffer.toString(\"utf-8\"));\n                } catch (_a) {\n                    this.response = null;\n                }\n                return;\n            case \"buffer\":\n                this.responseText = null;\n                this.response = buffer;\n                return;\n            case \"arraybuffer\":\n                this.responseText = null;\n                var arrayBuffer = new ArrayBuffer(buffer.length);\n                var view = new Uint8Array(arrayBuffer);\n                for(var i = 0; i < buffer.length; i++){\n                    view[i] = buffer[i];\n                }\n                this.response = arrayBuffer;\n                return;\n            case \"text\":\n            default:\n                try {\n                    this.responseText = buffer.toString(this._parseResponseEncoding());\n                } catch (_b) {\n                    this.responseText = buffer.toString(\"binary\");\n                }\n                this.response = this.responseText;\n        }\n    };\n    XMLHttpRequest.prototype._parseResponseEncoding = function() {\n        return /;\\s*charset=(.*)$/.exec(this._responseHeaders[\"content-type\"] || \"\")[1] || \"utf-8\";\n    };\n    XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;\n    XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;\n    XMLHttpRequest.NetworkError = errors_1.NetworkError;\n    XMLHttpRequest.SecurityError = errors_1.SecurityError;\n    XMLHttpRequest.SyntaxError = errors_1.SyntaxError;\n    XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;\n    XMLHttpRequest.UNSENT = 0;\n    XMLHttpRequest.OPENED = 1;\n    XMLHttpRequest.HEADERS_RECEIVED = 2;\n    XMLHttpRequest.LOADING = 3;\n    XMLHttpRequest.DONE = 4;\n    XMLHttpRequest.cookieJar = Cookie.CookieJar();\n    return XMLHttpRequest;\n}(xml_http_request_event_target_1.XMLHttpRequestEventTarget);\nexports.XMLHttpRequest = XMLHttpRequest;\nXMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;\nXMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;\nXMLHttpRequest.prototype.nodejsBaseUrl = null; //# sourceMappingURL=xml-http-request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/xml-http-request.js\n");

/***/ })

};
;