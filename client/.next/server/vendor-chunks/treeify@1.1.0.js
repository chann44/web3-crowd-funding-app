"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/treeify@1.1.0";
exports.ids = ["vendor-chunks/treeify@1.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/treeify@1.1.0/node_modules/treeify/treeify.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/treeify@1.1.0/node_modules/treeify/treeify.js ***!
  \**************************************************************************/
/***/ ((module) => {

eval("\n//     treeify.js\n//     Luke Plaster <notatestuser@gmail.com>\n//     https://github.com/notatestuser/treeify.js\n// do the universal module definition dance\n(function(root, factory) {\n    if (true) {\n        module.exports = factory();\n    } else {}\n})(void 0, function() {\n    function makePrefix(key, last) {\n        var str = last ? \"└\" : \"├\";\n        if (key) {\n            str += \"─ \";\n        } else {\n            str += \"──┐\";\n        }\n        return str;\n    }\n    function filterKeys(obj, hideFunctions) {\n        var keys = [];\n        for(var branch in obj){\n            // always exclude anything in the object's prototype\n            if (!obj.hasOwnProperty(branch)) {\n                continue;\n            }\n            // ... and hide any keys mapped to functions if we've been told to\n            if (hideFunctions && typeof obj[branch] === \"function\") {\n                continue;\n            }\n            keys.push(branch);\n        }\n        return keys;\n    }\n    function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {\n        var line = \"\", index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);\n        if (lastStatesCopy.push([\n            root,\n            last\n        ]) && lastStates.length > 0) {\n            // based on the \"was last element\" states of whatever we're nested within,\n            // we need to append either blankness or a branch to our line\n            lastStates.forEach(function(lastState, idx) {\n                if (idx > 0) {\n                    line += (lastState[1] ? \" \" : \"│\") + \"  \";\n                }\n                if (!circular && lastState[0] === root) {\n                    circular = true;\n                }\n            });\n            // the prefix varies based on whether the key contains something to show and\n            // whether we're dealing with the last element in this collection\n            line += makePrefix(key, last) + key;\n            // append values and the circular reference indicator\n            showValues && (typeof root !== \"object\" || root instanceof Date) && (line += \": \" + root);\n            circular && (line += \" (circular ref.)\");\n            callback(line);\n        }\n        // can we descend into the next item?\n        if (!circular && typeof root === \"object\") {\n            var keys = filterKeys(root, hideFunctions);\n            keys.forEach(function(branch) {\n                // the last key is always printed with a different prefix, so we'll need to know if we have it\n                lastKey = ++index === keys.length;\n                // hold your breath for recursive action\n                growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);\n            });\n        }\n    }\n    ;\n    // --------------------\n    var Treeify = {};\n    // Treeify.asLines\n    // --------------------\n    // Outputs the tree line-by-line, calling the lineCallback when each one is available.\n    Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {\n        /* hideFunctions and lineCallback are curried, which means we don't break apps using the older form */ var hideFunctionsArg = typeof hideFunctions !== \"function\" ? hideFunctions : false;\n        growBranch(\".\", obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);\n    };\n    // Treeify.asTree\n    // --------------------\n    // Outputs the entire tree, returning it as a string with line breaks.\n    Treeify.asTree = function(obj, showValues, hideFunctions) {\n        var tree = \"\";\n        growBranch(\".\", obj, false, [], showValues, hideFunctions, function(line) {\n            tree += line + \"\\n\";\n        });\n        return tree;\n    };\n    // --------------------\n    return Treeify;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/treeify@1.1.0/node_modules/treeify/treeify.js\n");

/***/ })

};
;