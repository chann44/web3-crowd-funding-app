"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm";
exports.ids = ["vendor-chunks/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm/node_modules/@thirdweb-dev/react-core/dist/thirdweb-dev-react-core.esm.js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm/node_modules/@thirdweb-dev/react-core/dist/thirdweb-dev-react-core.esm.js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_ROLES: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ALL_ROLES),\n/* harmony export */   APPROVED_IMPLEMENTATIONS: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.APPROVED_IMPLEMENTATIONS),\n/* harmony export */   AbiObjectSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AbiObjectSchema),\n/* harmony export */   AbiSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AbiSchema),\n/* harmony export */   AbiTypeSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AbiTypeSchema),\n/* harmony export */   Account: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Account),\n/* harmony export */   AccountFactory: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AccountFactory),\n/* harmony export */   AddressOrEnsSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AddressOrEnsSchema),\n/* harmony export */   AddressSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AddressSchema),\n/* harmony export */   AdminFlag: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AdminFlag),\n/* harmony export */   AdminRoleMissingError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AdminRoleMissingError),\n/* harmony export */   Airdrop1155: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Airdrop1155),\n/* harmony export */   Airdrop20: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Airdrop20),\n/* harmony export */   Airdrop721: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Airdrop721),\n/* harmony export */   AssetNotFoundError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AssetNotFoundError),\n/* harmony export */   AuctionAlreadyStartedError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AuctionAlreadyStartedError),\n/* harmony export */   AuctionHasNotEndedError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.AuctionHasNotEndedError),\n/* harmony export */   BYOCContractMetadataSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.BYOCContractMetadataSchema),\n/* harmony export */   BaseSignaturePayloadInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.BaseSignaturePayloadInput),\n/* harmony export */   BigNumberSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.BigNumberSchema),\n/* harmony export */   BigNumberTransformSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.BigNumberTransformSchema),\n/* harmony export */   BigNumberishSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.BigNumberishSchema),\n/* harmony export */   COMMON_FACTORY: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.COMMON_FACTORY),\n/* harmony export */   CONTRACTS_MAP: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CONTRACTS_MAP),\n/* harmony export */   CONTRACT_ADDRESSES: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CONTRACT_ADDRESSES),\n/* harmony export */   CREATE2_FACTORY_BYTECODE: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CREATE2_FACTORY_BYTECODE),\n/* harmony export */   CallOverrideSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CallOverrideSchema),\n/* harmony export */   ChainId: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainId),\n/* harmony export */   ChainIdToAddressSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ChainIdToAddressSchema),\n/* harmony export */   ClaimConditionInputArray: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ClaimConditionInputArray),\n/* harmony export */   ClaimConditionInputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ClaimConditionInputSchema),\n/* harmony export */   ClaimConditionMetadataSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ClaimConditionMetadataSchema),\n/* harmony export */   ClaimConditionOutputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ClaimConditionOutputSchema),\n/* harmony export */   ClaimEligibility: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ClaimEligibility),\n/* harmony export */   CommonContractOutputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CommonContractOutputSchema),\n/* harmony export */   CommonContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CommonContractSchema),\n/* harmony export */   CommonPlatformFeeSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CommonPlatformFeeSchema),\n/* harmony export */   CommonPrimarySaleSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CommonPrimarySaleSchema),\n/* harmony export */   CommonRoyaltySchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CommonRoyaltySchema),\n/* harmony export */   CommonSymbolSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CommonSymbolSchema),\n/* harmony export */   CommonTrustedForwarderSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CommonTrustedForwarderSchema),\n/* harmony export */   CompilerMetadataFetchedSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CompilerMetadataFetchedSchema),\n/* harmony export */   ContractAppURI: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractAppURI),\n/* harmony export */   ContractDeployer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractDeployer),\n/* harmony export */   ContractEncoder: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractEncoder),\n/* harmony export */   ContractEvents: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractEvents),\n/* harmony export */   ContractInfoSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractInfoSchema),\n/* harmony export */   ContractInterceptor: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractInterceptor),\n/* harmony export */   ContractMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractMetadata),\n/* harmony export */   ContractOwner: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractOwner),\n/* harmony export */   ContractPlatformFee: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractPlatformFee),\n/* harmony export */   ContractPrimarySale: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractPrimarySale),\n/* harmony export */   ContractPublishedMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractPublishedMetadata),\n/* harmony export */   ContractRoles: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractRoles),\n/* harmony export */   ContractRoyalty: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractRoyalty),\n/* harmony export */   ContractVerifier: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ContractVerifier),\n/* harmony export */   CurrencySchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CurrencySchema),\n/* harmony export */   CurrencyValueSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CurrencyValueSchema),\n/* harmony export */   CustomContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CustomContractDeploy),\n/* harmony export */   CustomContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CustomContractInput),\n/* harmony export */   CustomContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CustomContractOutput),\n/* harmony export */   CustomContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CustomContractSchema),\n/* harmony export */   CustomFactoryInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.CustomFactoryInput),\n/* harmony export */   DEFAULT_PERMISSIONS: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PERMISSIONS),\n/* harmony export */   DEPLOYER_ABI: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DEPLOYER_ABI),\n/* harmony export */   DEPLOYER_BYTECODE: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DEPLOYER_BYTECODE),\n/* harmony export */   DelayedReveal: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DelayedReveal),\n/* harmony export */   DeployTransaction: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DeployTransaction),\n/* harmony export */   DeployTypeInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DeployTypeInput),\n/* harmony export */   DeploymentNetworkInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DeploymentNetworkInput),\n/* harmony export */   DropClaimConditions: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropClaimConditions),\n/* harmony export */   DropErc1155ClaimConditions: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc1155ClaimConditions),\n/* harmony export */   DropErc1155ContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc1155ContractDeploy),\n/* harmony export */   DropErc1155ContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc1155ContractInput),\n/* harmony export */   DropErc1155ContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc1155ContractOutput),\n/* harmony export */   DropErc1155ContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc1155ContractSchema),\n/* harmony export */   DropErc721ContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc721ContractDeploy),\n/* harmony export */   DropErc721ContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc721ContractInput),\n/* harmony export */   DropErc721ContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc721ContractOutput),\n/* harmony export */   DropErc721ContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DropErc721ContractSchema),\n/* harmony export */   DuplicateFileNameError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DuplicateFileNameError),\n/* harmony export */   DuplicateLeafsError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.DuplicateLeafsError),\n/* harmony export */   ERC1155WrappableSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ERC1155WrappableSchema),\n/* harmony export */   ERC20WrappableSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ERC20WrappableSchema),\n/* harmony export */   ERC721WrappableSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ERC721WrappableSchema),\n/* harmony export */   EditionDropInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.EditionDropInitializer),\n/* harmony export */   EditionInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.EditionInitializer),\n/* harmony export */   EditionMetadataInputOrUriSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.EditionMetadataInputOrUriSchema),\n/* harmony export */   EditionMetadataInputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.EditionMetadataInputSchema),\n/* harmony export */   EditionMetadataOutputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.EditionMetadataOutputSchema),\n/* harmony export */   EditionMetadataWithOwnerOutputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.EditionMetadataWithOwnerOutputSchema),\n/* harmony export */   EndDateSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.EndDateSchema),\n/* harmony export */   Erc1155: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Erc1155),\n/* harmony export */   Erc1155SignatureMintable: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Erc1155SignatureMintable),\n/* harmony export */   Erc20: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Erc20),\n/* harmony export */   Erc20SignatureMintable: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Erc20SignatureMintable),\n/* harmony export */   Erc721: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Erc721),\n/* harmony export */   Erc721WithQuantitySignatureMintable: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Erc721WithQuantitySignatureMintable),\n/* harmony export */   EventType: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.EventType),\n/* harmony export */   ExtensionManager: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ExtensionManager),\n/* harmony export */   ExtensionNotImplementedError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ExtensionNotImplementedError),\n/* harmony export */   ExtraPublishMetadataSchemaInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ExtraPublishMetadataSchemaInput),\n/* harmony export */   ExtraPublishMetadataSchemaOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ExtraPublishMetadataSchemaOutput),\n/* harmony export */   FactoryDeploymentSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.FactoryDeploymentSchema),\n/* harmony export */   FetchError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.FetchError),\n/* harmony export */   FileNameMissingError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.FileNameMissingError),\n/* harmony export */   FullPublishMetadataSchemaInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.FullPublishMetadataSchemaInput),\n/* harmony export */   FullPublishMetadataSchemaOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.FullPublishMetadataSchemaOutput),\n/* harmony export */   FunctionDeprecatedError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.FunctionDeprecatedError),\n/* harmony export */   GAS_LIMIT_FOR_DEPLOYER: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.GAS_LIMIT_FOR_DEPLOYER),\n/* harmony export */   GasCostEstimator: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.GasCostEstimator),\n/* harmony export */   GenericRequest: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.GenericRequest),\n/* harmony export */   InterfaceId_IERC1155: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.InterfaceId_IERC1155),\n/* harmony export */   InterfaceId_IERC721: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.InterfaceId_IERC721),\n/* harmony export */   InvalidAddressError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.InvalidAddressError),\n/* harmony export */   LINK_TOKEN_ADDRESS: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.LINK_TOKEN_ADDRESS),\n/* harmony export */   LOCAL_NODE_PKEY: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.LOCAL_NODE_PKEY),\n/* harmony export */   ListingNotFoundError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ListingNotFoundError),\n/* harmony export */   ListingType: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ListingType),\n/* harmony export */   MarketplaceContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceContractDeploy),\n/* harmony export */   MarketplaceContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceContractInput),\n/* harmony export */   MarketplaceContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceContractOutput),\n/* harmony export */   MarketplaceContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceContractSchema),\n/* harmony export */   MarketplaceInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceInitializer),\n/* harmony export */   MarketplaceV3DirectListings: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceV3DirectListings),\n/* harmony export */   MarketplaceV3EnglishAuctions: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceV3EnglishAuctions),\n/* harmony export */   MarketplaceV3Initializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceV3Initializer),\n/* harmony export */   MarketplaceV3Offers: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MarketplaceV3Offers),\n/* harmony export */   MerkleSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MerkleSchema),\n/* harmony export */   MintRequest1155: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MintRequest1155),\n/* harmony export */   MintRequest20: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MintRequest20),\n/* harmony export */   MintRequest721: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MintRequest721),\n/* harmony export */   MintRequest721withQuantity: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MintRequest721withQuantity),\n/* harmony export */   MissingOwnerRoleError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MissingOwnerRoleError),\n/* harmony export */   MissingRoleError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MissingRoleError),\n/* harmony export */   MultiwrapInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.MultiwrapInitializer),\n/* harmony export */   NATIVE_TOKENS: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.NATIVE_TOKENS),\n/* harmony export */   NATIVE_TOKEN_ADDRESS: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.NATIVE_TOKEN_ADDRESS),\n/* harmony export */   NFTCollectionInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.NFTCollectionInitializer),\n/* harmony export */   NFTDropInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.NFTDropInitializer),\n/* harmony export */   NotEnoughTokensError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.NotEnoughTokensError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.NotFoundError),\n/* harmony export */   OZ_DEFENDER_FORWARDER_ADDRESS: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.OZ_DEFENDER_FORWARDER_ADDRESS),\n/* harmony export */   OptionalPropertiesInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.OptionalPropertiesInput),\n/* harmony export */   PREBUILT_CONTRACTS_APPURI_MAP: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PREBUILT_CONTRACTS_APPURI_MAP),\n/* harmony export */   PREBUILT_CONTRACTS_MAP: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PREBUILT_CONTRACTS_MAP),\n/* harmony export */   PackContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PackContractDeploy),\n/* harmony export */   PackContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PackContractInput),\n/* harmony export */   PackContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PackContractOutput),\n/* harmony export */   PackContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PackContractSchema),\n/* harmony export */   PackInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PackInitializer),\n/* harmony export */   PackMetadataInputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PackMetadataInputSchema),\n/* harmony export */   PackRewardsOutputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PackRewardsOutputSchema),\n/* harmony export */   PackRewardsSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PackRewardsSchema),\n/* harmony export */   PartialClaimConditionInputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PartialClaimConditionInputSchema),\n/* harmony export */   PermissionSnapshotSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PermissionSnapshotSchema),\n/* harmony export */   PreDeployMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PreDeployMetadata),\n/* harmony export */   PreDeployMetadataFetchedSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PreDeployMetadataFetchedSchema),\n/* harmony export */   ProfileSchemaInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ProfileSchemaInput),\n/* harmony export */   ProfileSchemaOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ProfileSchemaOutput),\n/* harmony export */   ProposalOutputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ProposalOutputSchema),\n/* harmony export */   ProposalState: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ProposalState),\n/* harmony export */   PublishedContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.PublishedContractSchema),\n/* harmony export */   QuantityAboveLimitError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.QuantityAboveLimitError),\n/* harmony export */   RawDateSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.RawDateSchema),\n/* harmony export */   RestrictedTransferError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.RestrictedTransferError),\n/* harmony export */   RouterTypeInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.RouterTypeInput),\n/* harmony export */   SDKOptionsSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SDKOptionsSchema),\n/* harmony export */   SIGNATURE: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SIGNATURE),\n/* harmony export */   SUPPORTED_CHAIN_IDS: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_CHAIN_IDS),\n/* harmony export */   SUPPORTED_FEATURES: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_FEATURES),\n/* harmony export */   Signature1155PayloadInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature1155PayloadInput),\n/* harmony export */   Signature1155PayloadInputWithTokenId: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature1155PayloadInputWithTokenId),\n/* harmony export */   Signature1155PayloadOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature1155PayloadOutput),\n/* harmony export */   Signature20PayloadInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature20PayloadInput),\n/* harmony export */   Signature20PayloadOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature20PayloadOutput),\n/* harmony export */   Signature721PayloadInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature721PayloadInput),\n/* harmony export */   Signature721PayloadOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature721PayloadOutput),\n/* harmony export */   Signature721WithQuantityInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature721WithQuantityInput),\n/* harmony export */   Signature721WithQuantityOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Signature721WithQuantityOutput),\n/* harmony export */   SignatureDropInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SignatureDropInitializer),\n/* harmony export */   SignerPermissionRequest: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SignerPermissionRequest),\n/* harmony export */   SignerPermissionRequestV1: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SignerPermissionRequestV1),\n/* harmony export */   SignerPermissionsSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SignerPermissionsSchema),\n/* harmony export */   SnapshotEntryInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SnapshotEntryInput),\n/* harmony export */   SnapshotEntryWithProofSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SnapshotEntryWithProofSchema),\n/* harmony export */   SnapshotInfoSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SnapshotInfoSchema),\n/* harmony export */   SnapshotInputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SnapshotInputSchema),\n/* harmony export */   SnapshotSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SnapshotSchema),\n/* harmony export */   SplitInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SplitInitializer),\n/* harmony export */   SplitsContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SplitsContractDeploy),\n/* harmony export */   SplitsContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SplitsContractInput),\n/* harmony export */   SplitsContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SplitsContractOutput),\n/* harmony export */   SplitsContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.SplitsContractSchema),\n/* harmony export */   StartDateSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.StartDateSchema),\n/* harmony export */   StaticJsonRpcBatchProvider: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.StaticJsonRpcBatchProvider),\n/* harmony export */   Status: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Status),\n/* harmony export */   THIRDWEB_DEPLOYER: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.THIRDWEB_DEPLOYER),\n/* harmony export */   ThirdwebAuthProvider: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   ThirdwebConfigProvider: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   ThirdwebConnectedWalletProvider: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   ThirdwebProviderCore: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   ThirdwebSDK: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.ThirdwebSDK),\n/* harmony export */   ThirdwebSDKProvider: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bI),\n/* harmony export */   ThirdwebThemeContext: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.T),\n/* harmony export */   TokenDropInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenDropInitializer),\n/* harmony export */   TokenErc1155ContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc1155ContractDeploy),\n/* harmony export */   TokenErc1155ContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc1155ContractInput),\n/* harmony export */   TokenErc1155ContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc1155ContractOutput),\n/* harmony export */   TokenErc1155ContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc1155ContractSchema),\n/* harmony export */   TokenErc20ContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc20ContractDeploy),\n/* harmony export */   TokenErc20ContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc20ContractInput),\n/* harmony export */   TokenErc20ContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc20ContractOutput),\n/* harmony export */   TokenErc20ContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc20ContractSchema),\n/* harmony export */   TokenErc721ContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc721ContractDeploy),\n/* harmony export */   TokenErc721ContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc721ContractInput),\n/* harmony export */   TokenErc721ContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc721ContractOutput),\n/* harmony export */   TokenErc721ContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenErc721ContractSchema),\n/* harmony export */   TokenInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenInitializer),\n/* harmony export */   TokenMintInputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TokenMintInputSchema),\n/* harmony export */   Transaction: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.Transaction),\n/* harmony export */   TransactionError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.TransactionError),\n/* harmony export */   UploadError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.UploadError),\n/* harmony export */   UserWallet: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.UserWallet),\n/* harmony export */   VoteContractDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.VoteContractDeploy),\n/* harmony export */   VoteContractInput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.VoteContractInput),\n/* harmony export */   VoteContractOutput: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.VoteContractOutput),\n/* harmony export */   VoteContractSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.VoteContractSchema),\n/* harmony export */   VoteInitializer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.VoteInitializer),\n/* harmony export */   VoteSettingsInputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.VoteSettingsInputSchema),\n/* harmony export */   VoteSettingsOuputSchema: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.VoteSettingsOuputSchema),\n/* harmony export */   VoteType: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.VoteType),\n/* harmony export */   WrongListingTypeError: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.WrongListingTypeError),\n/* harmony export */   __DEV__: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__._),\n/* harmony export */   approveErc20Allowance: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.approveErc20Allowance),\n/* harmony export */   assertEnabled: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.assertEnabled),\n/* harmony export */   checkClientIdOrSecretKey: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.checkClientIdOrSecretKey),\n/* harmony export */   checkVerificationStatus: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.checkVerificationStatus),\n/* harmony export */   cleanCurrencyAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.cleanCurrencyAddress),\n/* harmony export */   compilerMetadata: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.X),\n/* harmony export */   computeCloneFactoryAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.computeCloneFactoryAddress),\n/* harmony export */   computeDeploymentAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.computeDeploymentAddress),\n/* harmony export */   computeDeploymentInfo: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.computeDeploymentInfo),\n/* harmony export */   computeEOAForwarderAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.computeEOAForwarderAddress),\n/* harmony export */   computeForwarderAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.computeForwarderAddress),\n/* harmony export */   computeNativeTokenAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.computeNativeTokenAddress),\n/* harmony export */   constructAbiFromBytecode: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.constructAbiFromBytecode),\n/* harmony export */   contractType: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.V),\n/* harmony export */   convertParamValues: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.convertParamValues),\n/* harmony export */   convertToReadableQuantity: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.convertToReadableQuantity),\n/* harmony export */   createSnapshot: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.createSnapshot),\n/* harmony export */   createTransactionBatches: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.createTransactionBatches),\n/* harmony export */   deployContractDeterministic: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.deployContractDeterministic),\n/* harmony export */   deployContractDeterministicRaw: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.deployContractDeterministicRaw),\n/* harmony export */   deployCreate2Factory: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.deployCreate2Factory),\n/* harmony export */   deployWithThrowawayDeployer: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.deployWithThrowawayDeployer),\n/* harmony export */   detectContractFeature: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.detectContractFeature),\n/* harmony export */   detectFeatures: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.detectFeatures),\n/* harmony export */   detectFeaturesFromBytecode: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.detectFeaturesFromBytecode),\n/* harmony export */   directDeployDeterministic: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.directDeployDeterministic),\n/* harmony export */   directDeployDeterministicPublished: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.directDeployDeterministicPublished),\n/* harmony export */   directDeployDeterministicWithUri: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.directDeployDeterministicWithUri),\n/* harmony export */   encodeConstructorParamsForImplementation: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.encodeConstructorParamsForImplementation),\n/* harmony export */   engineSendFunction: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.engineSendFunction),\n/* harmony export */   estimateGasForDeploy: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.estimateGasForDeploy),\n/* harmony export */   extractCommentFromMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractCommentFromMetadata),\n/* harmony export */   extractConstructorParams: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractConstructorParams),\n/* harmony export */   extractConstructorParamsFromAbi: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractConstructorParamsFromAbi),\n/* harmony export */   extractEventsFromAbi: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractEventsFromAbi),\n/* harmony export */   extractFunctionParamsFromAbi: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractFunctionParamsFromAbi),\n/* harmony export */   extractFunctions: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractFunctions),\n/* harmony export */   extractFunctionsFromAbi: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractFunctionsFromAbi),\n/* harmony export */   extractIPFSHashFromBytecode: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractIPFSHashFromBytecode),\n/* harmony export */   extractMinimalProxyImplementationAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.extractMinimalProxyImplementationAddress),\n/* harmony export */   fetchAbiFromAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchAbiFromAddress),\n/* harmony export */   fetchAndCacheDeployMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchAndCacheDeployMetadata),\n/* harmony export */   fetchContractMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchContractMetadata),\n/* harmony export */   fetchContractMetadataFromAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchContractMetadataFromAddress),\n/* harmony export */   fetchContractMetadataFromBytecode: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchContractMetadataFromBytecode),\n/* harmony export */   fetchCurrencyMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchCurrencyMetadata),\n/* harmony export */   fetchCurrencyValue: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchCurrencyValue),\n/* harmony export */   fetchExtendedReleaseMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchExtendedReleaseMetadata),\n/* harmony export */   fetchPreDeployMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchPreDeployMetadata),\n/* harmony export */   fetchPublishedContractFromPolygon: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchPublishedContractFromPolygon),\n/* harmony export */   fetchRawPredeployMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchRawPredeployMetadata),\n/* harmony export */   fetchSnapshotEntryForAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchSnapshotEntryForAddress),\n/* harmony export */   fetchSourceFilesFromMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.fetchSourceFilesFromMetadata),\n/* harmony export */   formatCompilerMetadata: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.formatCompilerMetadata),\n/* harmony export */   getAllDetectedExtensionNames: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getAllDetectedExtensionNames),\n/* harmony export */   getAllDetectedExtensions: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getAllDetectedExtensions),\n/* harmony export */   getAllDetectedExtensionsFromBytecode: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getAllDetectedExtensionsFromBytecode),\n/* harmony export */   getAllDetectedFeatureNames: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getAllDetectedFeatureNames),\n/* harmony export */   getAllDetectedFeatures: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getAllDetectedFeatures),\n/* harmony export */   getApprovedImplementation: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getApprovedImplementation),\n/* harmony export */   getBlock: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getBlock),\n/* harmony export */   getBlockNumber: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getBlockNumber),\n/* harmony export */   getBlockWithTransactions: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getBlockWithTransactions),\n/* harmony export */   getCachedAbiForContract: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getCachedAbiForContract),\n/* harmony export */   getChainId: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getChainId),\n/* harmony export */   getChainIdFromNetwork: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getChainIdFromNetwork),\n/* harmony export */   getChainIdOrName: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getChainIdOrName),\n/* harmony export */   getChainProvider: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getChainProvider),\n/* harmony export */   getCompositeABI: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getCompositeABI),\n/* harmony export */   getContract: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getContract),\n/* harmony export */   getContractAddressByChainId: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getContractAddressByChainId),\n/* harmony export */   getContractFromAbi: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getContractFromAbi),\n/* harmony export */   getContractMetadataFromCache: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getContractMetadataFromCache),\n/* harmony export */   getContractName: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getContractName),\n/* harmony export */   getContractPublisherAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getContractPublisherAddress),\n/* harmony export */   getContractTypeForRemoteName: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getContractTypeForRemoteName),\n/* harmony export */   getCreate2FactoryAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getCreate2FactoryAddress),\n/* harmony export */   getCreate2FactoryDeploymentInfo: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getCreate2FactoryDeploymentInfo),\n/* harmony export */   getDefaultGasOverrides: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getDefaultGasOverrides),\n/* harmony export */   getDefaultTrustedForwarders: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getDefaultTrustedForwarders),\n/* harmony export */   getDeployArguments: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getDeployArguments),\n/* harmony export */   getDeploymentInfo: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getDeploymentInfo),\n/* harmony export */   getDynamicFeeData: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getDynamicFeeData),\n/* harmony export */   getEncodedConstructorParamsForThirdwebContract: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getEncodedConstructorParamsForThirdwebContract),\n/* harmony export */   getErc1155: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bS),\n/* harmony export */   getErc20: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bU),\n/* harmony export */   getErc721: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bT),\n/* harmony export */   getErcs: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bR),\n/* harmony export */   getGasPrice: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getGasPrice),\n/* harmony export */   getInitBytecodeWithSalt: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getInitBytecodeWithSalt),\n/* harmony export */   getKeylessTxn: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getKeylessTxn),\n/* harmony export */   getMultichainRegistryAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getMultichainRegistryAddress),\n/* harmony export */   getNativeTokenByChainId: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getNativeTokenByChainId),\n/* harmony export */   getPolygonGasPriorityFee: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getPolygonGasPriorityFee),\n/* harmony export */   getProviderFromRpcUrl: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getProviderFromRpcUrl),\n/* harmony export */   getRoleHash: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getRoleHash),\n/* harmony export */   getRpcUrl: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getRpcUrl),\n/* harmony export */   getSaltHash: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getSaltHash),\n/* harmony export */   getSignerAndProvider: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getSignerAndProvider),\n/* harmony export */   getSupportedChains: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getSupportedChains),\n/* harmony export */   getThirdwebContractAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getThirdwebContractAddress),\n/* harmony export */   getTrustedForwarders: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.getTrustedForwarders),\n/* harmony export */   hasERC20Allowance: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.hasERC20Allowance),\n/* harmony export */   hasFunction: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.hasFunction),\n/* harmony export */   hasMatchingAbi: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.hasMatchingAbi),\n/* harmony export */   includesErrorMessage: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.includesErrorMessage),\n/* harmony export */   invalidateContractAndBalances: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bL),\n/* harmony export */   isChainConfig: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isChainConfig),\n/* harmony export */   isContractDeployed: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isContractDeployed),\n/* harmony export */   isDowngradeVersion: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isDowngradeVersion),\n/* harmony export */   isEIP155Enforced: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isEIP155Enforced),\n/* harmony export */   isEnsName: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bM),\n/* harmony export */   isExtensionEnabled: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isExtensionEnabled),\n/* harmony export */   isFeatureEnabled: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isFeatureEnabled),\n/* harmony export */   isIncrementalVersion: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isIncrementalVersion),\n/* harmony export */   isNativeToken: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isNativeToken),\n/* harmony export */   isPossibleEVMAddress: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bN),\n/* harmony export */   isProvider: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isProvider),\n/* harmony export */   isSigner: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isSigner),\n/* harmony export */   isVerifiedOnEtherscan: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.isVerifiedOnEtherscan),\n/* harmony export */   joinABIs: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.joinABIs),\n/* harmony export */   matchesAbiFromBytecode: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.matchesAbiFromBytecode),\n/* harmony export */   matchesPrebuiltAbi: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.matchesPrebuiltAbi),\n/* harmony export */   normalizeAmount: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.normalizeAmount),\n/* harmony export */   normalizePriceValue: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.normalizePriceValue),\n/* harmony export */   parseRevertReason: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.parseRevertReason),\n/* harmony export */   predictAddressDeterministic: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.predictAddressDeterministic),\n/* harmony export */   predictAddressDeterministicPublished: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.predictAddressDeterministicPublished),\n/* harmony export */   predictAddressDeterministicWithUri: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.predictAddressDeterministicWithUri),\n/* harmony export */   predictThirdwebContractAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.predictThirdwebContractAddress),\n/* harmony export */   prepareGaslessRequest: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.prepareGaslessRequest),\n/* harmony export */   resolveAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.resolveAddress),\n/* harmony export */   resolveContractUriAndBytecode: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.resolveContractUriAndBytecode),\n/* harmony export */   resolveContractUriFromAddress: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.resolveContractUriFromAddress),\n/* harmony export */   resolveEns: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.resolveEns),\n/* harmony export */   resolveImplementation: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.resolveImplementation),\n/* harmony export */   resolveMimeType: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   setErc20Allowance: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.setErc20Allowance),\n/* harmony export */   setSupportedChains: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.setSupportedChains),\n/* harmony export */   shortenAddress: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bO),\n/* harmony export */   shortenIfAddress: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bP),\n/* harmony export */   shortenString: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bQ),\n/* harmony export */   shouldNeverPersistQuery: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   signTypedDataInternal: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.signTypedDataInternal),\n/* harmony export */   toDisplayValue: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.toDisplayValue),\n/* harmony export */   toEther: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.toEther),\n/* harmony export */   toSemver: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.toSemver),\n/* harmony export */   toUnits: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.toUnits),\n/* harmony export */   toWei: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.toWei),\n/* harmony export */   useAcceptDirectListingOffer: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aA),\n/* harmony export */   useAccountAdmins: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bf),\n/* harmony export */   useAccountAdminsAndSigners: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bg),\n/* harmony export */   useAccountSigners: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ba),\n/* harmony export */   useAccounts: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b7),\n/* harmony export */   useAccountsForAddress: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b9),\n/* harmony export */   useActiveChain: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   useActiveClaimCondition: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   useActiveClaimConditionForWallet: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.I),\n/* harmony export */   useActiveListings: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.an),\n/* harmony export */   useAddAdmin: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bb),\n/* harmony export */   useAddress: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   useAirdropNFT: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aP),\n/* harmony export */   useAllRoleMembers: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aT),\n/* harmony export */   useAppURI: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bF),\n/* harmony export */   useAuctionWinner: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aq),\n/* harmony export */   useAuth: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bh),\n/* harmony export */   useBalance: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   useBalanceForAddress: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   useBatchesToReveal: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a7),\n/* harmony export */   useBidBuffer: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ar),\n/* harmony export */   useBurnNFT: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aQ),\n/* harmony export */   useBurnToken: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b4),\n/* harmony export */   useBuyDirectListing: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aE),\n/* harmony export */   useBuyNow: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aD),\n/* harmony export */   useCancelDirectListing: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aw),\n/* harmony export */   useCancelEnglishAuction: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ax),\n/* harmony export */   useCancelListing: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.av),\n/* harmony export */   useChain: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   useChainId: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   useClaimConditions: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   useClaimIneligibilityReasons: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.H),\n/* harmony export */   useClaimNFT: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a8),\n/* harmony export */   useClaimToken: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b1),\n/* harmony export */   useClaimedNFTSupply: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a6),\n/* harmony export */   useClaimedNFTs: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a4),\n/* harmony export */   useClaimerProofs: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   useCompilerMetadata: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.W),\n/* harmony export */   useConnect: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   useConnectedWallet: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   useConnectionStatus: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   useContract: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.Y),\n/* harmony export */   useContractEvents: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a0),\n/* harmony export */   useContractMetadata: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.Z),\n/* harmony export */   useContractMetadataUpdate: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.$),\n/* harmony export */   useContractRead: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a1),\n/* harmony export */   useContractType: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.U),\n/* harmony export */   useContractWrite: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a2),\n/* harmony export */   useCreateAccount: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b8),\n/* harmony export */   useCreateAuctionListing: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.au),\n/* harmony export */   useCreateDirectListing: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.at),\n/* harmony export */   useCreateDirectListingBatch: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aF),\n/* harmony export */   useCreateSessionKey: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bd),\n/* harmony export */   useCreateWalletInstance: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   useDelayedRevealLazyMint: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aa),\n/* harmony export */   useDirectListing: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ad),\n/* harmony export */   useDirectListings: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ag),\n/* harmony export */   useDirectListingsCount: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.al),\n/* harmony export */   useDisconnect: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   useENS: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bH),\n/* harmony export */   useEdition: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bn),\n/* harmony export */   useEditionDrop: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bm),\n/* harmony export */   useEnglishAuction: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ae),\n/* harmony export */   useEnglishAuctionWinningBid: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ap),\n/* harmony export */   useEnglishAuctions: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ai),\n/* harmony export */   useEnglishAuctionsCount: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.am),\n/* harmony export */   useExecuteAuctionSale: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aB),\n/* harmony export */   useGrantRole: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aX),\n/* harmony export */   useIsAccountDeployed: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b6),\n/* harmony export */   useIsAddressRole: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aV),\n/* harmony export */   useLazyMint: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a9),\n/* harmony export */   useListing: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ac),\n/* harmony export */   useListings: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.af),\n/* harmony export */   useListingsCount: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ak),\n/* harmony export */   useLogin: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bi),\n/* harmony export */   useLogout: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bj),\n/* harmony export */   useMakeBid: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ay),\n/* harmony export */   useMakeOffer: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.az),\n/* harmony export */   useMarketplace: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bp),\n/* harmony export */   useMetadata: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.R),\n/* harmony export */   useMinimumNextBid: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.as),\n/* harmony export */   useMintNFT: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aM),\n/* harmony export */   useMintNFTSupply: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aN),\n/* harmony export */   useMintToken: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b0),\n/* harmony export */   useMultiwrap: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bw),\n/* harmony export */   useNFT: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aG),\n/* harmony export */   useNFTBalance: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aL),\n/* harmony export */   useNFTCollection: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bq),\n/* harmony export */   useNFTDrop: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bo),\n/* harmony export */   useNFTs: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aH),\n/* harmony export */   useNetwork: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   useNetworkMismatch: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bA),\n/* harmony export */   useOffers: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aC),\n/* harmony export */   useOwnedNFTs: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aK),\n/* harmony export */   usePack: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.br),\n/* harmony export */   usePersonalWalletAddress: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   usePlatformFees: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.P),\n/* harmony export */   usePrimarySaleRecipient: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.L),\n/* harmony export */   useReadonlySDK: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bB),\n/* harmony export */   useRemoveAdmin: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bc),\n/* harmony export */   useResetClaimConditions: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.K),\n/* harmony export */   useRevealLazyMint: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ab),\n/* harmony export */   useRevokeRole: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aY),\n/* harmony export */   useRevokeSessionKey: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.be),\n/* harmony export */   useRoleMembers: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aU),\n/* harmony export */   useRoyaltySettings: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.N),\n/* harmony export */   useSDK: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bJ),\n/* harmony export */   useSDKChainId: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bK),\n/* harmony export */   useSetAllRoleMembers: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aW),\n/* harmony export */   useSetAppURI: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bG),\n/* harmony export */   useSetClaimConditions: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.J),\n/* harmony export */   useSetConnectedWallet: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   useSetConnectionStatus: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   useSetSharedMetadata: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aS),\n/* harmony export */   useSharedMetadata: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aR),\n/* harmony export */   useSignatureDrop: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bx),\n/* harmony export */   useSigner: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bC),\n/* harmony export */   useSplit: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bv),\n/* harmony export */   useStorage: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.by),\n/* harmony export */   useStorageUpload: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bz),\n/* harmony export */   useSupportedChains: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bD),\n/* harmony export */   useSupportedWallet: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bE),\n/* harmony export */   useSwitchAccount: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bl),\n/* harmony export */   useSwitchChain: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   useThirdwebAuthContext: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   useThirdwebConfigContext: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   useThirdwebConnectedWalletContext: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   useToken: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bs),\n/* harmony export */   useTokenBalance: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a_),\n/* harmony export */   useTokenDecimals: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a$),\n/* harmony export */   useTokenDrop: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bt),\n/* harmony export */   useTokenSupply: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aZ),\n/* harmony export */   useTotalCirculatingSupply: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aJ),\n/* harmony export */   useTotalCount: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aI),\n/* harmony export */   useTransferBatchToken: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b3),\n/* harmony export */   useTransferNFT: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aO),\n/* harmony export */   useTransferNativeToken: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b5),\n/* harmony export */   useTransferToken: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b2),\n/* harmony export */   useUnclaimedNFTSupply: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a5),\n/* harmony export */   useUnclaimedNFTs: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a3),\n/* harmony export */   useUpdateMetadata: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.S),\n/* harmony export */   useUpdatePlatformFees: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.Q),\n/* harmony export */   useUpdatePrimarySaleRecipient: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   useUpdateRoyaltySettings: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.O),\n/* harmony export */   useUser: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bk),\n/* harmony export */   useValidDirectListings: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ah),\n/* harmony export */   useValidEnglishAuctions: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.aj),\n/* harmony export */   useVote: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bu),\n/* harmony export */   useWallet: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   useWalletConfig: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   useWalletConnectHandler: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   useWalletContext: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   useWallets: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   useWatchTransactions: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.bV),\n/* harmony export */   useWinningBid: () => (/* reexport safe */ _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__.ao),\n/* harmony export */   verify: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.verify),\n/* harmony export */   verifyThirdwebPrebuiltImplementation: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.verifyThirdwebPrebuiltImplementation),\n/* harmony export */   watchBlock: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.watchBlock),\n/* harmony export */   watchBlockNumber: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.watchBlockNumber),\n/* harmony export */   watchBlockWithTransactions: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.watchBlockWithTransactions),\n/* harmony export */   watchTransactions: () => (/* reexport safe */ _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__.watchTransactions)\n/* harmony export */ });\n/* harmony import */ var _useTransactions_f4cc9f88_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useTransactions-f4cc9f88.esm.js */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm/node_modules/@thirdweb-dev/react-core/dist/useTransactions-f4cc9f88.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.esm.js\");\n/* harmony import */ var mime_lite_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mime/lite.js */ \"(ssr)/./node_modules/.pnpm/mime@3.0.0/node_modules/mime/lite.js\");\n/* harmony import */ var mime_lite_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mime_lite_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tiny-invariant */ \"(ssr)/./node_modules/.pnpm/tiny-invariant@1.3.1/node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _thirdweb_dev_sdk_evm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thirdweb-dev/sdk/evm */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/evm/dist/thirdweb-dev-sdk-evm.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk_evm_functions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @thirdweb-dev/sdk/evm/functions */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/evm/functions/dist/thirdweb-dev-sdk-evm-functions.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm/node_modules/@thirdweb-dev/react-core/dist/thirdweb-dev-react-core.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm/node_modules/@thirdweb-dev/react-core/dist/useTransactions-f4cc9f88.esm.js":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm/node_modules/@thirdweb-dev/react-core/dist/useTransactions-f4cc9f88.esm.js ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ useContractMetadataUpdate),\n/* harmony export */   A: () => (/* binding */ ThirdwebConfigProvider),\n/* harmony export */   B: () => (/* binding */ useThirdwebConfigContext),\n/* harmony export */   C: () => (/* binding */ ThirdwebConnectedWalletProvider),\n/* harmony export */   D: () => (/* binding */ useThirdwebConnectedWalletContext),\n/* harmony export */   E: () => (/* binding */ useActiveClaimCondition),\n/* harmony export */   F: () => (/* binding */ useClaimerProofs),\n/* harmony export */   G: () => (/* binding */ useClaimConditions),\n/* harmony export */   H: () => (/* binding */ useClaimIneligibilityReasons),\n/* harmony export */   I: () => (/* binding */ useActiveClaimConditionForWallet),\n/* harmony export */   J: () => (/* binding */ useSetClaimConditions),\n/* harmony export */   K: () => (/* binding */ useResetClaimConditions),\n/* harmony export */   L: () => (/* binding */ usePrimarySaleRecipient),\n/* harmony export */   M: () => (/* binding */ useUpdatePrimarySaleRecipient),\n/* harmony export */   N: () => (/* binding */ useRoyaltySettings),\n/* harmony export */   O: () => (/* binding */ useUpdateRoyaltySettings),\n/* harmony export */   P: () => (/* binding */ usePlatformFees),\n/* harmony export */   Q: () => (/* binding */ useUpdatePlatformFees),\n/* harmony export */   R: () => (/* binding */ useMetadata),\n/* harmony export */   S: () => (/* binding */ useUpdateMetadata),\n/* harmony export */   T: () => (/* binding */ ThirdwebThemeContext),\n/* harmony export */   U: () => (/* binding */ useContractType),\n/* harmony export */   V: () => (/* binding */ contractType),\n/* harmony export */   W: () => (/* binding */ useCompilerMetadata),\n/* harmony export */   X: () => (/* binding */ compilerMetadata),\n/* harmony export */   Y: () => (/* binding */ useContract),\n/* harmony export */   Z: () => (/* binding */ useContractMetadata),\n/* harmony export */   _: () => (/* binding */ __DEV__),\n/* harmony export */   a: () => (/* binding */ ThirdwebProviderCore),\n/* harmony export */   a$: () => (/* binding */ useTokenDecimals),\n/* harmony export */   a0: () => (/* binding */ useContractEvents),\n/* harmony export */   a1: () => (/* binding */ useContractRead),\n/* harmony export */   a2: () => (/* binding */ useContractWrite),\n/* harmony export */   a3: () => (/* binding */ useUnclaimedNFTs),\n/* harmony export */   a4: () => (/* binding */ useClaimedNFTs),\n/* harmony export */   a5: () => (/* binding */ useUnclaimedNFTSupply),\n/* harmony export */   a6: () => (/* binding */ useClaimedNFTSupply),\n/* harmony export */   a7: () => (/* binding */ useBatchesToReveal),\n/* harmony export */   a8: () => (/* binding */ useClaimNFT),\n/* harmony export */   a9: () => (/* binding */ useLazyMint),\n/* harmony export */   aA: () => (/* binding */ useAcceptDirectListingOffer),\n/* harmony export */   aB: () => (/* binding */ useExecuteAuctionSale),\n/* harmony export */   aC: () => (/* binding */ useOffers),\n/* harmony export */   aD: () => (/* binding */ useBuyNow),\n/* harmony export */   aE: () => (/* binding */ useBuyDirectListing),\n/* harmony export */   aF: () => (/* binding */ useCreateDirectListingBatch),\n/* harmony export */   aG: () => (/* binding */ useNFT),\n/* harmony export */   aH: () => (/* binding */ useNFTs),\n/* harmony export */   aI: () => (/* binding */ useTotalCount),\n/* harmony export */   aJ: () => (/* binding */ useTotalCirculatingSupply),\n/* harmony export */   aK: () => (/* binding */ useOwnedNFTs),\n/* harmony export */   aL: () => (/* binding */ useNFTBalance),\n/* harmony export */   aM: () => (/* binding */ useMintNFT),\n/* harmony export */   aN: () => (/* binding */ useMintNFTSupply),\n/* harmony export */   aO: () => (/* binding */ useTransferNFT),\n/* harmony export */   aP: () => (/* binding */ useAirdropNFT),\n/* harmony export */   aQ: () => (/* binding */ useBurnNFT),\n/* harmony export */   aR: () => (/* binding */ useSharedMetadata),\n/* harmony export */   aS: () => (/* binding */ useSetSharedMetadata),\n/* harmony export */   aT: () => (/* binding */ useAllRoleMembers),\n/* harmony export */   aU: () => (/* binding */ useRoleMembers),\n/* harmony export */   aV: () => (/* binding */ useIsAddressRole),\n/* harmony export */   aW: () => (/* binding */ useSetAllRoleMembers),\n/* harmony export */   aX: () => (/* binding */ useGrantRole),\n/* harmony export */   aY: () => (/* binding */ useRevokeRole),\n/* harmony export */   aZ: () => (/* binding */ useTokenSupply),\n/* harmony export */   a_: () => (/* binding */ useTokenBalance),\n/* harmony export */   aa: () => (/* binding */ useDelayedRevealLazyMint),\n/* harmony export */   ab: () => (/* binding */ useRevealLazyMint),\n/* harmony export */   ac: () => (/* binding */ useListing),\n/* harmony export */   ad: () => (/* binding */ useDirectListing),\n/* harmony export */   ae: () => (/* binding */ useEnglishAuction),\n/* harmony export */   af: () => (/* binding */ useListings),\n/* harmony export */   ag: () => (/* binding */ useDirectListings),\n/* harmony export */   ah: () => (/* binding */ useValidDirectListings),\n/* harmony export */   ai: () => (/* binding */ useEnglishAuctions),\n/* harmony export */   aj: () => (/* binding */ useValidEnglishAuctions),\n/* harmony export */   ak: () => (/* binding */ useListingsCount),\n/* harmony export */   al: () => (/* binding */ useDirectListingsCount),\n/* harmony export */   am: () => (/* binding */ useEnglishAuctionsCount),\n/* harmony export */   an: () => (/* binding */ useActiveListings),\n/* harmony export */   ao: () => (/* binding */ useWinningBid),\n/* harmony export */   ap: () => (/* binding */ useEnglishAuctionWinningBid),\n/* harmony export */   aq: () => (/* binding */ useAuctionWinner),\n/* harmony export */   ar: () => (/* binding */ useBidBuffer),\n/* harmony export */   as: () => (/* binding */ useMinimumNextBid),\n/* harmony export */   at: () => (/* binding */ useCreateDirectListing),\n/* harmony export */   au: () => (/* binding */ useCreateAuctionListing),\n/* harmony export */   av: () => (/* binding */ useCancelListing),\n/* harmony export */   aw: () => (/* binding */ useCancelDirectListing),\n/* harmony export */   ax: () => (/* binding */ useCancelEnglishAuction),\n/* harmony export */   ay: () => (/* binding */ useMakeBid),\n/* harmony export */   az: () => (/* binding */ useMakeOffer),\n/* harmony export */   b: () => (/* binding */ useConnect),\n/* harmony export */   b0: () => (/* binding */ useMintToken),\n/* harmony export */   b1: () => (/* binding */ useClaimToken),\n/* harmony export */   b2: () => (/* binding */ useTransferToken),\n/* harmony export */   b3: () => (/* binding */ useTransferBatchToken),\n/* harmony export */   b4: () => (/* binding */ useBurnToken),\n/* harmony export */   b5: () => (/* binding */ useTransferNativeToken),\n/* harmony export */   b6: () => (/* binding */ useIsAccountDeployed),\n/* harmony export */   b7: () => (/* binding */ useAccounts),\n/* harmony export */   b8: () => (/* binding */ useCreateAccount),\n/* harmony export */   b9: () => (/* binding */ useAccountsForAddress),\n/* harmony export */   bA: () => (/* binding */ useNetworkMismatch),\n/* harmony export */   bB: () => (/* binding */ useReadonlySDK),\n/* harmony export */   bC: () => (/* binding */ useSigner),\n/* harmony export */   bD: () => (/* binding */ useSupportedChains),\n/* harmony export */   bE: () => (/* binding */ useSupportedWallet),\n/* harmony export */   bF: () => (/* binding */ useAppURI),\n/* harmony export */   bG: () => (/* binding */ useSetAppURI),\n/* harmony export */   bH: () => (/* binding */ useENS),\n/* harmony export */   bI: () => (/* binding */ ThirdwebSDKProvider),\n/* harmony export */   bJ: () => (/* binding */ useSDK),\n/* harmony export */   bK: () => (/* binding */ useSDKChainId),\n/* harmony export */   bL: () => (/* binding */ invalidateContractAndBalances),\n/* harmony export */   bM: () => (/* binding */ isEnsName),\n/* harmony export */   bN: () => (/* binding */ isPossibleEVMAddress),\n/* harmony export */   bO: () => (/* binding */ shortenAddress),\n/* harmony export */   bP: () => (/* binding */ shortenIfAddress),\n/* harmony export */   bQ: () => (/* binding */ shortenString),\n/* harmony export */   bR: () => (/* binding */ getErcs),\n/* harmony export */   bS: () => (/* binding */ getErc1155),\n/* harmony export */   bT: () => (/* binding */ getErc721),\n/* harmony export */   bU: () => (/* binding */ getErc20),\n/* harmony export */   bV: () => (/* binding */ useWatchTransactions),\n/* harmony export */   ba: () => (/* binding */ useAccountSigners),\n/* harmony export */   bb: () => (/* binding */ useAddAdmin),\n/* harmony export */   bc: () => (/* binding */ useRemoveAdmin),\n/* harmony export */   bd: () => (/* binding */ useCreateSessionKey),\n/* harmony export */   be: () => (/* binding */ useRevokeSessionKey),\n/* harmony export */   bf: () => (/* binding */ useAccountAdmins),\n/* harmony export */   bg: () => (/* binding */ useAccountAdminsAndSigners),\n/* harmony export */   bh: () => (/* binding */ useAuth),\n/* harmony export */   bi: () => (/* binding */ useLogin),\n/* harmony export */   bj: () => (/* binding */ useLogout),\n/* harmony export */   bk: () => (/* binding */ useUser),\n/* harmony export */   bl: () => (/* binding */ useSwitchAccount),\n/* harmony export */   bm: () => (/* binding */ useEditionDrop),\n/* harmony export */   bn: () => (/* binding */ useEdition),\n/* harmony export */   bo: () => (/* binding */ useNFTDrop),\n/* harmony export */   bp: () => (/* binding */ useMarketplace),\n/* harmony export */   bq: () => (/* binding */ useNFTCollection),\n/* harmony export */   br: () => (/* binding */ usePack),\n/* harmony export */   bs: () => (/* binding */ useToken),\n/* harmony export */   bt: () => (/* binding */ useTokenDrop),\n/* harmony export */   bu: () => (/* binding */ useVote),\n/* harmony export */   bv: () => (/* binding */ useSplit),\n/* harmony export */   bw: () => (/* binding */ useMultiwrap),\n/* harmony export */   bx: () => (/* binding */ useSignatureDrop),\n/* harmony export */   by: () => (/* binding */ useStorage),\n/* harmony export */   bz: () => (/* binding */ useStorageUpload),\n/* harmony export */   c: () => (/* binding */ useConnectionStatus),\n/* harmony export */   d: () => (/* binding */ useCreateWalletInstance),\n/* harmony export */   e: () => (/* binding */ useDisconnect),\n/* harmony export */   f: () => (/* binding */ useSwitchChain),\n/* harmony export */   g: () => (/* binding */ useWallets),\n/* harmony export */   h: () => (/* binding */ useWalletConfig),\n/* harmony export */   i: () => (/* binding */ useSetConnectionStatus),\n/* harmony export */   j: () => (/* binding */ useSetConnectedWallet),\n/* harmony export */   k: () => (/* binding */ useNetwork),\n/* harmony export */   l: () => (/* binding */ useWalletContext),\n/* harmony export */   m: () => (/* binding */ usePersonalWalletAddress),\n/* harmony export */   n: () => (/* binding */ useWalletConnectHandler),\n/* harmony export */   o: () => (/* binding */ useBalance),\n/* harmony export */   p: () => (/* binding */ useConnectedWallet),\n/* harmony export */   q: () => (/* binding */ useAddress),\n/* harmony export */   r: () => (/* binding */ resolveMimeType),\n/* harmony export */   s: () => (/* binding */ useChainId),\n/* harmony export */   t: () => (/* binding */ useActiveChain),\n/* harmony export */   u: () => (/* binding */ useWallet),\n/* harmony export */   v: () => (/* binding */ useChain),\n/* harmony export */   w: () => (/* binding */ useBalanceForAddress),\n/* harmony export */   x: () => (/* binding */ shouldNeverPersistQuery),\n/* harmony export */   y: () => (/* binding */ useThirdwebAuthContext),\n/* harmony export */   z: () => (/* binding */ ThirdwebAuthProvider)\n/* harmony export */ });\n/* harmony import */ var mime_lite_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mime/lite.js */ \"(ssr)/./node_modules/.pnpm/mime@3.0.0/node_modules/mime/lite.js\");\n/* harmony import */ var mime_lite_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mime_lite_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+react-query@4.36.1_react-dom@18.0.0_react@18.0.0/node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+react-query@4.36.1_react-dom@18.0.0_react@18.0.0/node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+query-core@4.36.1/node_modules/@tanstack/query-core/build/lib/queryClient.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+react-query@4.36.1_react-dom@18.0.0_react@18.0.0/node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tiny-invariant */ \"(ssr)/./node_modules/.pnpm/tiny-invariant@1.3.1/node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.1.0_react-dom@18.0.0_react@18.0.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @thirdweb-dev/chains */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+chains@0.1.64/node_modules/@thirdweb-dev/chains/dist/thirdweb-dev-chains.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk_evm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thirdweb-dev/sdk/evm */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/evm/dist/thirdweb-dev-sdk-evm.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/sdk-37d37271.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-5c43511f.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/token-16ef3ae6.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/ListingType-e0156743.esm.js\");\n/* harmony import */ var _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thirdweb-dev/wallets */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/walletIds-edd30440.esm.js\");\n/* harmony import */ var _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @thirdweb-dev/wallets */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/thirdweb-dev-wallets.esm.js\");\n/* harmony import */ var _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @thirdweb-dev/wallets */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/base-b2e56252.esm.js\");\n/* harmony import */ var _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @thirdweb-dev/wallets */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/assertWindowEthereum-2bcf9787.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/bignumbers.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/@ethersproject+units@5.7.0/node_modules/@ethersproject/units/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/@ethersproject+providers@5.7.2/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _thirdweb_dev_auth__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @thirdweb-dev/auth */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+auth@4.1.24_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-sign_ho6wio3g7xy5fyf6q6ypqhnuki/node_modules/@thirdweb-dev/auth/dist/auth-3e6bcaed.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk_evm_functions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @thirdweb-dev/sdk/evm/functions */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/evm/functions/dist/thirdweb-dev-sdk-evm-functions.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n// TODO legacy remove this when possible\n/**\n * @internal\n */ async function resolveMimeType(url) {\n    if (!url) {\n        return undefined;\n    }\n    const mimeType = mime_lite_js__WEBPACK_IMPORTED_MODULE_0___default().getType(url);\n    if (mimeType) {\n        return mimeType;\n    }\n    const res = await fetch(url, {\n        method: \"HEAD\"\n    });\n    if (res.ok && res.headers.has(\"content-type\")) {\n        return res.headers.get(\"content-type\") || undefined;\n    }\n    // we failed to resolve the mime type, return null\n    return undefined;\n}\n/**\n * @internal\n */ const ThirdwebThemeContext = /* @__PURE__ */ /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * Secure storage interface for storing auth tokens.\n *\n * The implementation of this interface should provide a secure way to store values. Either by encrypting the values or by storing them in a secure location.\n * @auth\n */ /**\n * The configuration to use by the React and React Native SDKs with an [auth](https://portal.thirdweb.com/wallets/auth) server.\n * @auth\n */ const ThirdwebAuthContext = /* @__PURE__ */ /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n *\n * @internal\n */ function useThirdwebAuthContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebAuthContext);\n}\nconst isWalletConnectReceiverEnabled = (wallet)=>{\n    const options = wallet?.getOptions();\n    return options && \"walletConnectReceiver\" in options && options.walletConnectReceiver;\n};\nconst LAST_CONNECTED_WALLET_STORAGE_KEY = \"lastConnectedWallet\";\nlet lastConnectedWalletStorage;\n// maps wallet instance to it's wallet config\nconst walletInstanceToConfig = new Map();\n/**\n * Maps a personal wallet instance to it's wrapper wallet instance ( like smartWallet or safeWallet ) to know it's \"wrapper\" wallet\n *\n * This is used to implement the \"switch to personal wallet\" and \"switch to smart wallet\" feature\n */ const personalWalletToWrapperWallet = new Map();\nconst ThirdwebWalletContext = /* @__PURE__ */ /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * setup states and methods for wallet connection\n */ function useWalletConnectionSetup(data, initialValue) {\n    const { chains, chainToConnect, dAppMeta, clientId, activeChain } = data;\n    const [signer, setSigner] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    const [connectionStatus, setConnectionStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialValue.connectionStatus);\n    const [activeWallet, setActiveWallet] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [createdWalletInstance, setCreatedWalletInstance] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [activeWalletConfig, setActiveWalletConfig] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const [chainId, setChainId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    const [walletAddress, setWalletAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    const walletParams = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return {\n            chains: chains,\n            dappMetadata: dAppMeta,\n            chain: activeChain || chains[0],\n            clientId: clientId\n        };\n    }, [\n        chains,\n        dAppMeta,\n        activeChain,\n        clientId\n    ]);\n    const createWalletInstance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((walletConfig)=>{\n        const walletInstance = walletConfig.create(walletParams);\n        if (walletInstance.walletId === _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_6__.w.magicLink) {\n            // NOTE: removing this if statement causes the component to re-render\n            // Patch for magic link wallet in react native\n            // needed because we need to add a component to the view tree\n            // from the instance, right before calling connect.\n            // Check it out in RN's DappContextProvider.\n            setCreatedWalletInstance(walletInstance);\n        }\n        walletInstanceToConfig.set(walletInstance, walletConfig);\n        return walletInstance;\n    }, [\n        walletParams\n    ]);\n    const setConnectedWallet = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async function(wallet, connectParams) {\n        let isAutoConnect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        setActiveWallet(wallet);\n        const walletConfig = walletInstanceToConfig.get(wallet);\n        if (!walletConfig) {\n            throw new Error(\"Wallet config not found for given wallet instance. Do not create a wallet instance manually - use the useCreateWalletInstance() hook instead\");\n        }\n        setActiveWalletConfig(walletConfig);\n        setConnectionStatus(\"connected\");\n        const _signer = await wallet.getSigner();\n        setSigner(_signer);\n        // if personal wallet exists, we need to replace the connectParams.personalWallet to a stringifiable version\n        const personalWallet = wallet.getPersonalWallet();\n        personalWalletToWrapperWallet.set(personalWallet, wallet);\n        // it autoconnected, then the details is already saved in storage, no need to store again\n        if (isAutoConnect) {\n            return;\n        }\n        // save to storage\n        const walletInfo = {\n            walletId: walletConfig.id,\n            connectParams: connectParams || wallet.getConnectParams()\n        };\n        const personalWalletConfig = walletInstanceToConfig.get(personalWallet);\n        if (personalWallet && personalWalletConfig) {\n            walletInfo.connectParams = {\n                ...walletInfo.connectParams,\n                personalWallet: {\n                    walletId: personalWalletConfig.id,\n                    connectParams: personalWallet.getConnectParams()\n                }\n            };\n            saveLastConnectedWalletInfo(walletInfo);\n        } else {\n            saveLastConnectedWalletInfo(walletInfo);\n        }\n    }, []);\n    const storeLastActiveChainId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (_chainId)=>{\n        const lastConnectedWallet = await lastConnectedWalletStorage.getItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n        if (!lastConnectedWallet) {\n            return;\n        }\n        try {\n            const parsedWallet = JSON.parse(lastConnectedWallet);\n            if (parsedWallet.connectParams) {\n                parsedWallet.connectParams.chainId = _chainId;\n            } else {\n                parsedWallet.connectParams = {\n                    chainId: _chainId\n                };\n            }\n            await lastConnectedWalletStorage.setItem(LAST_CONNECTED_WALLET_STORAGE_KEY, JSON.stringify(parsedWallet));\n        } catch (error) {\n            console.error(`Error saving the last active chain: ${error}`);\n        }\n    }, []);\n    const switchChain = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (_chainId)=>{\n        if (!activeWallet) {\n            throw new Error(\"No active wallet\");\n        }\n        await activeWallet.switchChain(_chainId);\n        const _signer = await activeWallet.getSigner();\n        await storeLastActiveChainId(_chainId);\n        setSigner(_signer);\n    }, [\n        activeWallet,\n        storeLastActiveChainId\n    ]);\n    const connectWallet = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const [WalletObj, connectParams] = args;\n        const _connectedParams = {\n            chainId: chainToConnect?.chainId,\n            ...connectParams || {}\n        };\n        const wallet = createWalletInstance(WalletObj);\n        setConnectionStatus(\"connecting\");\n        try {\n            // if magic is using social login - it will redirect the page - so need to save walletInfo before connecting\n            // TODO: find a better way to handle this\n            if (WalletObj.id === _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_6__.w.magicLink) {\n                saveLastConnectedWalletInfo({\n                    walletId: WalletObj.id,\n                    connectParams: _connectedParams\n                });\n            }\n            await wallet.connect(_connectedParams);\n            setConnectedWallet(wallet, _connectedParams);\n        } catch (e) {\n            console.error(`Error connecting to wallet: ${e}`);\n            setConnectionStatus(\"disconnected\");\n            throw e;\n        }\n        return wallet;\n    }, [\n        createWalletInstance,\n        setConnectedWallet,\n        chainToConnect\n    ]);\n    const onWalletDisconnect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        await lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n        setConnectionStatus(\"disconnected\");\n        setSigner(undefined);\n        setActiveWallet(undefined);\n        setActiveWalletConfig(undefined);\n        setChainId(undefined);\n        setWalletAddress(undefined);\n    }, []);\n    const disconnectWallet = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        // if disconnect is called before the wallet is connected\n        if (!activeWallet) {\n            onWalletDisconnect();\n            return;\n        }\n        const personalWallet = activeWallet.getPersonalWallet();\n        await activeWallet.disconnect();\n        if (personalWallet) {\n            await personalWallet?.disconnect();\n        }\n        onWalletDisconnect();\n    }, [\n        activeWallet,\n        onWalletDisconnect\n    ]);\n    // handle wallet change event\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!activeWallet) {\n            setSigner(undefined);\n            setChainId(undefined);\n            setWalletAddress(undefined);\n            return;\n        }\n        const update = async ()=>{\n            activeWallet.getSigner().then(setSigner);\n            activeWallet.getChainId().then(setChainId);\n            activeWallet.getAddress().then(setWalletAddress);\n        };\n        update();\n        activeWallet.addListener(\"change\", update);\n        activeWallet.addListener(\"disconnect\", onWalletDisconnect);\n        return ()=>{\n            activeWallet.removeListener(\"change\", update);\n            activeWallet.removeListener(\"disconnect\", onWalletDisconnect);\n        };\n    }, [\n        activeWallet,\n        onWalletDisconnect\n    ]);\n    // if props.chains is updated, update the active wallet's chains\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (activeWallet) {\n            activeWallet.updateChains(chains);\n        }\n    }, [\n        activeWallet,\n        chains\n    ]);\n    return {\n        signer,\n        connectionStatus,\n        setConnectionStatus,\n        activeWallet,\n        createdWalletInstance,\n        activeWalletConfig,\n        createWalletInstance,\n        setConnectedWallet,\n        switchChain,\n        connectWallet,\n        disconnectWallet,\n        chainId,\n        address: walletAddress\n    };\n}\nfunction ThirdwebWalletProvider(props) {\n    // if autoSwitch is enabled - enforce connection to activeChain\n    const chainToConnect = props.autoSwitch ? props.activeChain : undefined;\n    const autoConnectTimeout = props.autoConnectTimeout || 15000;\n    const walletSetupData = {\n        chains: props.chains,\n        dAppMeta: props.dAppMeta,\n        activeChain: props.activeChain,\n        clientId: props.clientId,\n        chainToConnect\n    };\n    const { signer, connectionStatus, setConnectionStatus, activeWallet, createdWalletInstance, activeWalletConfig, createWalletInstance, setConnectedWallet, switchChain, connectWallet, disconnectWallet } = useWalletConnectionSetup(walletSetupData, {\n        connectionStatus: \"unknown\"\n    });\n    const personalWalletConnection = useWalletConnectionSetup(walletSetupData, {\n        connectionStatus: \"disconnected\"\n    });\n    /**\n   * This is used to know if auto connect is in progress\n   */ const [isAutoConnecting, setIsAutoConnecting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [walletConnectHandler, setWalletConnectHandler] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    if (!lastConnectedWalletStorage) {\n        lastConnectedWalletStorage = props.createWalletStorage(\"coordinatorStorage\");\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!activeWallet) {\n            return;\n        }\n        const initWCHandler = async ()=>{\n            const wcReceiverOptions = activeWallet?.getOptions();\n            const handler = new _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_7__.WalletConnectV2Handler({\n                walletConnectReceiver: {\n                    ...wcReceiverOptions?.walletConnectReceiver === true ? {} : wcReceiverOptions?.walletConnectReceiver\n                }\n            }, activeWallet);\n            await handler.init();\n            setWalletConnectHandler(handler);\n        };\n        if (isWalletConnectReceiverEnabled(activeWallet)) {\n            initWCHandler();\n        }\n    }, [\n        activeWallet\n    ]);\n    const autoConnectTriggered = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    // Auto Connect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (autoConnectTriggered.current) {\n            return;\n        }\n        autoConnectTriggered.current = true;\n        // do not auto connect if signerWallet is given\n        if (props.signerWallet) {\n            return;\n        }\n        if (activeWallet) {\n            // there's already an active wallet, don't auto connect\n            return;\n        }\n        if (connectionStatus !== \"unknown\") {\n            // only try to auto connect if we're in the unknown state\n            return;\n        }\n        // if explicitly set to false, don't auto connect\n        // by default, auto connect\n        if (props.shouldAutoConnect === false) {\n            setConnectionStatus(\"disconnected\");\n            return;\n        }\n        async function autoconnect() {\n            const walletInfo = await getLastConnectedWalletInfo();\n            if (!walletInfo) {\n                setConnectionStatus(\"disconnected\");\n                return;\n            }\n            const walletObj = props.supportedWallets.find((W)=>W.id === walletInfo.walletId);\n            if (!walletObj) {\n                // last connected wallet is no longer present in the supported wallets\n                setConnectionStatus(\"disconnected\");\n                return;\n            }\n            let _personalWalletInfo = walletInfo.connectParams?.personalWallet;\n            let shouldSetPersonalWalletAsActive = false;\n            // if the wallet requires a personal wallet (like smartWallet), but the saved data does not have it\n            // this can happen when user clicks on \"switch to personal wallet\" and reloads the page\n            // OR when user clicks on magic link social login\n            if (walletObj.personalWallets && !_personalWalletInfo) {\n                // for magicLink social login - don't switch to personal wallet because smartWallet did not have a chance to connect because of page change\n                if (walletInfo.walletId === _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_6__.w.magicLink && walletInfo.connectParams && \"oauthProvider\" in walletInfo.connectParams) {\n                    shouldSetPersonalWalletAsActive = false;\n                } else {\n                    shouldSetPersonalWalletAsActive = true;\n                }\n                // fix the connectParams by adding the personal wallet info\n                _personalWalletInfo = {\n                    walletId: walletInfo.walletId,\n                    connectParams: walletInfo.connectParams\n                };\n            }\n            const personalWalletInfo = _personalWalletInfo;\n            let personalWalletInstance;\n            if (personalWalletInfo) {\n                const personalWallets = walletObj.personalWallets || [];\n                const personalWalletObj = personalWallets.find((W)=>W.id === personalWalletInfo.walletId);\n                if (personalWalletObj) {\n                    // create a personal wallet instance and auto connect it\n                    personalWalletInstance = createWalletInstance(personalWalletObj);\n                    try {\n                        await timeoutPromise(personalWalletInstance.autoConnect(personalWalletInfo.connectParams), {\n                            ms: autoConnectTimeout,\n                            message: autoConnectTimeoutErrorMessage\n                        });\n                        if (shouldSetPersonalWalletAsActive) {\n                            setConnectedWallet(personalWalletInstance, personalWalletInfo.connectParams, true);\n                        }\n                    } catch (e) {\n                        console.error(\"Failed to auto connect personal wallet\");\n                        console.error(e);\n                        setConnectionStatus(\"disconnected\");\n                        return;\n                    }\n                    // set the personal wallet instance to the connectParams\n                    walletInfo.connectParams = {\n                        ...walletInfo.connectParams,\n                        personalWallet: personalWalletInstance\n                    };\n                } else {\n                    // last used personal wallet is no longer present in the supported wallets\n                    setConnectionStatus(\"disconnected\");\n                    return;\n                }\n            }\n            // create a wallet instance and auto connect it\n            const wallet = createWalletInstance(walletObj);\n            try {\n                setIsAutoConnecting(true);\n                setConnectionStatus(\"connecting\");\n                if (personalWalletInstance) {\n                    personalWalletToWrapperWallet.set(personalWalletInstance, wallet);\n                }\n                await timeoutPromise(wallet.autoConnect(walletInfo.connectParams), {\n                    ms: autoConnectTimeout,\n                    message: autoConnectTimeoutErrorMessage\n                });\n                if (!shouldSetPersonalWalletAsActive) {\n                    setConnectedWallet(wallet, walletInfo.connectParams, true);\n                }\n            } catch (e) {\n                console.error(\"Failed to auto connect wallet\");\n                console.error(e);\n                if (e instanceof Error && e.message === autoConnectTimeoutErrorMessage) {\n                    lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n                }\n                setConnectionStatus(\"disconnected\");\n            }\n            setIsAutoConnecting(false);\n        }\n        autoconnect();\n    }, [\n        createWalletInstance,\n        props.supportedWallets,\n        setConnectedWallet,\n        props.shouldAutoConnect,\n        activeWallet,\n        connectionStatus,\n        props.signerWallet,\n        setConnectionStatus,\n        autoConnectTimeout\n    ]);\n    // connect signerWallet immediately if it's passed\n    // and disconnect it if it's not passed\n    const signerConnected = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!props.signerWallet) {\n            if (signerConnected.current) {\n                disconnectWallet();\n                signerConnected.current = undefined;\n            }\n            return;\n        }\n        if (signerConnected.current === props.signerWallet) {\n            return;\n        }\n        const wallet = createWalletInstance(props.signerWallet);\n        setConnectedWallet(wallet);\n        signerConnected.current = props.signerWallet;\n    }, [\n        createWalletInstance,\n        props.supportedWallets,\n        setConnectedWallet,\n        props.signerWallet,\n        disconnectWallet\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebWalletContext.Provider, {\n        value: {\n            disconnect: disconnectWallet,\n            wallets: props.supportedWallets,\n            connect: connectWallet,\n            signer,\n            activeWallet,\n            activeWalletConfig,\n            connectionStatus,\n            setConnectionStatus,\n            createWalletInstance: createWalletInstance,\n            createdWalletInstance: createdWalletInstance,\n            createWalletStorage: props.createWalletStorage,\n            switchChain,\n            setConnectedWallet: setConnectedWallet,\n            activeChain: props.activeChain,\n            chainToConnect,\n            getWalletConfig: (walletInstance)=>{\n                return walletInstanceToConfig.get(walletInstance);\n            },\n            getWrapperWallet: (personalWallet)=>{\n                return personalWalletToWrapperWallet.get(personalWallet);\n            },\n            activeChainSetExplicitly: props.activeChainSetExplicitly,\n            clientId: props.clientId,\n            walletConnectHandler: walletConnectHandler,\n            personalWalletConnection,\n            isAutoConnecting\n        },\n        children: props.children\n    });\n}\n/**\n * @internal\n */ function useWalletContext() {\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebWalletContext);\n    if (!ctx) {\n        throw new Error(`useWalletContext() can only be used inside <ThirdwebProvider />`);\n    }\n    return ctx;\n}\n/**\n * Get WalletConnect handler instance\n */ function useWalletConnectHandler() {\n    const ctx = useWalletContext();\n    if (!ctx) {\n        throw new Error(`useWalletConnectHandler() can only be used inside <ThirdwebProvider />`);\n    }\n    return ctx.walletConnectHandler;\n}\nasync function getLastConnectedWalletInfo() {\n    const str = await lastConnectedWalletStorage.getItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n    if (!str) {\n        return null;\n    }\n    try {\n        return JSON.parse(str);\n    } catch  {\n        await lastConnectedWalletStorage.removeItem(LAST_CONNECTED_WALLET_STORAGE_KEY);\n        return null;\n    }\n}\nasync function saveLastConnectedWalletInfo(walletInfo) {\n    try {\n        await lastConnectedWalletStorage.setItem(LAST_CONNECTED_WALLET_STORAGE_KEY, JSON.stringify(walletInfo));\n    } catch (e) {\n        console.error(\"Error saving the last connected wallet info\", e);\n    }\n}\n/**\n * Timeout a promise with a given Error message if the promise does not resolve in given time\n *\n * @param promise - Promise to track for timeout\n * @param option - timeout options\n * @returns\n */ function timeoutPromise(promise, option) {\n    return new Promise((resolve, reject)=>{\n        const timeoutId = setTimeout(()=>{\n            reject(new Error(option.message));\n        }, option.ms);\n        promise.then((res)=>{\n            clearTimeout(timeoutId);\n            resolve(res);\n        }, (err)=>{\n            clearTimeout(timeoutId);\n            reject(err);\n        });\n    });\n}\nconst autoConnectTimeoutErrorMessage = `Failed to Auto connect. Auto connect timed out. You can increase the timeout duration using the autoConnectTimeout prop on <ThirdwebProvider />`;\n/**\n * @wallet\n */ /**\n * Hook to get the instance of the currently connected wallet.\n *\n * @example\n * ```jsx\n * import { useWallet } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const walletInstance = useWallet();\n * }\n * ```\n * @returns Currently connected `WalletInstance` , or `undefined` if no wallet is connected.\n * @walletConnection\n */ /**\n * Hook to get the instance of the currently connected wallet if it matches the given `walletId`.\n *\n * @example\n * ```jsx\n * import { useWallet } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const metamaskWalletInstance = useWallet('metamask');\n * }\n * ```\n *\n * @returns Currently connected `WalletInstance` with given `walletId` , or `undefined` if no wallet is connected or if the connected wallet does not match the given `walletId`.\n * @walletConnection\n */ function useWallet(walletId) {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useWallet() hook must be used within a <ThirdwebProvider/>\");\n    const activeWallet = context.activeWallet;\n    if (!activeWallet) {\n        return undefined;\n    }\n    // if walletId is provided, return the wallet instance only if it matches the walletId\n    if (walletId) {\n        if (activeWallet.walletId === walletId) {\n            return activeWallet;\n        } else {\n            return undefined;\n        }\n    }\n    return activeWallet;\n}\n/**\n *\n * Hook to get the `WalletConfig` object of the currently connected wallet.\n *\n * This is useful to get metadata about the connected wallet, such as the wallet name, logo, etc\n *\n * @example\n *\n * ```jsx\n * import { useWalletConfig } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const walletConfig = useWalletConfig();\n *\n *   const walletName = walletConfig?.meta.name;\n *   const walletLogo = walletConfig?.meta.iconURL;\n * }\n * ```\n *\n * @returns The current connected wallet's configuration object or `undefined` if no wallet is connected.\n *\n * @walletConnection\n */ function useWalletConfig() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useWallet() hook must be used within a <ThirdwebProvider/>\");\n    return context.activeWalletConfig;\n}\n/**\n * @internal\n * Get `supportedWallets` passed in the `<ThirdwebProvider/>`\n * @returns `supportedWallets` configured in the `<ThirdwebProvider/>`\n */ function useWallets() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useWallets() hook must be used within a <ThirdwebProvider/>\");\n    return context.wallets;\n}\n/**\n * Hook for connecting a wallet to your app.\n *\n * The wallet also needs to be added in `ThirdwebProvider`'s `supportedWallets` prop to enable auto-connection on page load.\n *\n * @example\n * ```jsx\n * import { useConnect, metamaskWallet } from \"@thirdweb-dev/react\";\n *\n * const metamaskConfig = metamaskWallet();\n *\n * function App() {\n *   const connect = useConnect();\n *\n *   return (\n *     <button\n *       onClick={async () => {\n *         const wallet = await connect(metamaskConfig, connectOptions);\n *         console.log(\"connected to \", wallet);\n *       }}\n *     >\n *       Connect to MetaMask\n *     </button>\n *   );\n * }\n * ```\n *\n * @returns A function to connect a wallet\n *\n * ```ts\n * const connect = useConnect();\n *\n * function handleConnect() {\n *  const wallet = await connect(walletConfig, connectOptions);\n * }\n * ```\n *\n * The function accepts two arguments: `walletConfig` and `connectOptions`\n *\n * #### walletConfig\n * The wallet to connect. Must be of type `WalletConfig`.\n *\n * [Learn more about the available wallet options](https://portal.thirdweb.com/react/v4/connecting-wallets).\n *\n * #### connectOptions\n * The typeof `connectOptions` object depends on the wallet you are connecting. For some wallets, it may be optional\n *\n * If you are using typescript, `connect` will automatically infer the type of `connectOptions` based on the `walletConfig` you pass in as the first argument and will show type errors if you pass in invalid options.\n *\n * @walletConnection\n */ function useConnect() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useConnect() hook must be used within a <ThirdwebProvider/>\");\n    return context.connect;\n}\n/**\n * Hook for disconnecting the currently connected wallet.\n *\n * @example\n * ```jsx\n * import { useDisconnect } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const disconnect = useDisconnect();\n *\n *   return <button onClick={disconnect}>Disconnect</button>;\n * }\n * ```\n *\n * @returns A function to disconnect from current connected wallet\n * @walletConnection\n */ function useDisconnect() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useDisconnect() hook must be used within a <ThirdwebProvider/>\");\n    return context.disconnect;\n}\n/**\n * Hook for checking whether your app is connected to a wallet or not.\n *\n * @example\n * ```jsx\n * import { useConnectionStatus } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const connectionStatus = useConnectionStatus();\n *\n *   if (connectionStatus === \"unknown\") return <p> Loading... </p>;\n *   if (connectionStatus === \"connecting\") return <p> Connecting... </p>;\n *   if (connectionStatus === \"connected\") return <p> You are connected </p>;\n *   if (connectionStatus === \"disconnected\")\n *     return <p> You are not connected to a wallet </p>;\n * }\n * ```\n *\n * @returns The wallet connection status\n *\n * It can be one of the following:\n * - `unknown`: connection status is not known yet. This is the initial state.\n * - `connecting`: wallet is being connected. Either because of a user action, or when the wallet is auto-connecting on page load.\n * - `connected`: the wallet is connected and ready to be used.\n * - `disconnected`: the wallet is not connected.\n *\n * @walletConnection\n */ function useConnectionStatus() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useConnectionStatus() must be used within a <ThirdwebProvider/>\");\n    return context.connectionStatus;\n}\n/**\n * Hook for setting the `connectionStatus` of the wallet which is returned by the `useConnectionStatus` hook\n *\n * This is only useful if you are manually connecting a wallet instance as mentioned in [Build your Wallet](https://portal.thirdweb.com/wallet-sdk/v2/build)\n *\n * @example\n *\n * ```ts\n * import {\n *   useCreateWalletInstance,\n *   useSetConnectionStatus,\n *   useSetConnectedWallet,\n *   metamaskWallet\n * } from \"@thirdweb-dev/react\";\n *\n * const walletConfig = metamaskWallet();\n *\n * function Example() {\n *   const createWalletInstance = useCreateWalletInstance();\n *   const setConnectionStatus = useSetConnectionStatus();\n *   const setConnectedWallet = useSetConnectedWallet();\n *\n *   // Call this function to connect your wallet\n *   const handleConnect = async () => {\n *     // 1. create instance\n *     const walletInstance = createWalletInstance(walletConfig);\n *     setConnectionStatus(\"connecting\");\n *\n *     try {\n *       // 2. Call `connect` method of your wallet\n *       await walletInstance.connect(\n *         connectOptions, // if your wallet.connect method accepts any options, specify it here\n *       );\n *\n *       // 3. Set connected wallet\n *       setConnectedWallet(walletInstance);\n *       props.close();\n *     } catch (e) {\n *       setConnectionStatus(\"disconnected\");\n *       console.error(\"failed to connect\", e);\n *     }\n *   };\n *\n *   return <div> ... </div>;\n * }\n * ```\n *\n * @returns A function that sets the `connectionStatus` of the wallet\n * @walletConnection\n */ function useSetConnectionStatus() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useSetConnectionStatus() must be used within a <ThirdwebProvider/>\");\n    return context.setConnectionStatus;\n}\n/**\n * Hook for creating a wallet instance from given `WalletConfig` object.\n *\n * If you just want to connect the wallet and don't need the wallet instance before connecting the wallet, use the `useConnect` hook instead.\n *\n * @example\n *\n * ```jsx\n * import { useConnect, metamaskWallet } from \"@thirdweb-dev/react\";\n *\n * const metamaskConfig = metamaskWallet();\n *\n * function App() {\n *   const createWalletInstance = useCreateWalletInstance();\n *\n *   return (\n *     <button\n *       onClick={() => {\n *         const metamaskWalletInstance = createWalletInstance(metamaskConfig);\n *         console.log(metamaskWalletInstance);\n *       }}\n *     >\n *       create wallet instance\n *     </button>\n *   );\n * }\n * ```\n *\n * @returns A function that creates a wallet instance for given `WalletConfig` object.\n *\n * @walletConnection\n */ function useCreateWalletInstance() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useCreateWalletInstance() must be used within a <ThirdwebProvider/>\");\n    return context.createWalletInstance;\n}\n/**\n * Hook for switching to a different network.\n *\n * @example\n * ```jsx\n * import { useSwitchChain } from \"@thirdweb-dev/react\";\n * import { Goerli } from \"@thirdweb-dev/chains\";\n *\n * function App() {\n *   const switchChain = useSwitchChain();\n *   return (\n *     <button onClick={() => switchChain(Goerli.chainId)}>\n *       Switch to Goerli\n *     </button>\n *   );\n * }\n * ```\n *\n * @returns A function to switch the network in the currently connected wallet to network with given `chainId`\n * @networkConnection\n */ function useSwitchChain() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useSwitchChain() must be used within a <ThirdwebProvider/>\");\n    return context.switchChain;\n}\n/**\n * Hook for setting a wallet instance as \"connected\" - once done, the wallet connection hooks like `useWallet`, `useAddress`, `useSigner`, `useConnectionStatus` etc will return the data for that wallet instance\n *\n * This is only useful if you are manually connecting a wallet instance as mentioned in [Build your Wallet](https://portal.thirdweb.com/wallet-sdk/v2/build)\n *\n * @example\n *\n * ```ts\n * import {\n *   useCreateWalletInstance,\n *   useSetConnectionStatus,\n *   useSetConnectedWallet,\n *   metamaskWallet\n * } from \"@thirdweb-dev/react\";\n *\n * const walletConfig = metamaskWallet();\n *\n * function Example() {\n *   const createWalletInstance = useCreateWalletInstance();\n *   const setConnectionStatus = useSetConnectionStatus();\n *   const setConnectedWallet = useSetConnectedWallet();\n *\n *   // Call this function to connect your wallet\n *   const handleConnect = async () => {\n *     // 1. create instance\n *     const walletInstance = createWalletInstance(walletConfig);\n *     setConnectionStatus(\"connecting\");\n *\n *     try {\n *       // 2. Call `connect` method of your wallet\n *       await walletInstance.connect(\n *         connectOptions, // if your wallet.connect method accepts any options, specify it here\n *       );\n *\n *       // 3. Set connected wallet\n *       setConnectedWallet(walletInstance);\n *       props.close();\n *     } catch (e) {\n *       setConnectionStatus(\"disconnected\");\n *       console.error(\"failed to connect\", e);\n *     }\n *   };\n *\n *   return <div> ... </div>;\n * }\n * ```\n *\n * @returns A function to set a wallet instance as \"connected\".\n * @walletConnection\n */ function useSetConnectedWallet() {\n    const context = useWalletContext();\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useSwitchChain() must be used within a <ThirdwebProvider/>\");\n    return context.setConnectedWallet;\n}\nconst AUTH_TOKEN_STORAGE_KEY = \"auth_token_storage_key\";\nconst TW_CACHE_KEY_PREFIX = \"tw-cache\";\n/**\n * @internal\n */ function enforceCachePrefix(input) {\n    return [\n        TW_CACHE_KEY_PREFIX,\n        ...input.filter((i)=>typeof i !== \"string\" || i !== TW_CACHE_KEY_PREFIX)\n    ];\n}\n/**\n * @internal\n */ function createContractCacheKey() {\n    let contractAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ethers__WEBPACK_IMPORTED_MODULE_8__.AddressZero;\n    let input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return enforceCachePrefix([\n        \"contract\",\n        contractAddress,\n        ...input\n    ]);\n}\n/**\n @internal\n */ function createCacheKeyWithNetwork(input, chainId) {\n    return enforceCachePrefix(cacheKeys.network.active(chainId).concat(input));\n}\n/**\n * @internal\n */ function invalidateContractAndBalances(queryClient, contractAddress, chainId) {\n    return Promise.all([\n        queryClient.invalidateQueries(enforceCachePrefix(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), chainId))),\n        invalidateBalances(queryClient, chainId)\n    ]);\n}\n/**\n * @internal\n */ function invalidateBalances(queryClient, chainId) {\n    return queryClient.invalidateQueries(enforceCachePrefix(createCacheKeyWithNetwork([\n        \"balance\"\n    ], chainId)));\n}\n/**\n @internal\n */ const cacheKeys = {\n    auth: {\n        user: ()=>enforceCachePrefix([\n                \"user\"\n            ])\n    },\n    network: {\n        active: (chainId)=>enforceCachePrefix([\n                \"chainId\",\n                chainId\n            ])\n    },\n    wallet: {\n        balance: (chainId, walletAddress, tokenAddress)=>enforceCachePrefix(createCacheKeyWithNetwork(enforceCachePrefix([\n                \"balance\",\n                {\n                    walletAddress,\n                    tokenAddress\n                }\n            ]), chainId))\n    },\n    contract: {\n        read: (contractAddress, fnIdentity)=>createContractCacheKey(contractAddress, [\n                \"read\",\n                fnIdentity\n            ]),\n        type: (contractAddress)=>createContractCacheKey(contractAddress, [\n                \"contract-type\"\n            ]),\n        compilerMetadata: (contractAddress)=>createContractCacheKey(contractAddress, [\n                \"publish-metadata\"\n            ]),\n        typeAndCompilerMetadata: (contractAddress)=>createContractCacheKey(contractAddress, [\n                \"contract-type-and-metadata\"\n            ]),\n        metadata: (contractAddress)=>createContractCacheKey(contractAddress, [\n                \"metadata\"\n            ]),\n        extractFunctions: (contractAddress)=>createContractCacheKey(contractAddress, [\n                \"extractFunctions\"\n            ]),\n        call: (contractAddress, functionName, args, overrides)=>createContractCacheKey(contractAddress, [\n                \"call\",\n                functionName,\n                args,\n                overrides\n            ]),\n        accountFactory: {\n            getAll: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"accountFactory\"\n                ]),\n            isAccountDeployed: (contractAdress, admin)=>createContractCacheKey(contractAdress, [\n                    \"isAccountDeployed\",\n                    admin\n                ]),\n            getAllForAddress: (contractAdress, address)=>createContractCacheKey(contractAdress, [\n                    \"getAllForAddress\",\n                    address\n                ])\n        },\n        account: {\n            signers: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"account\",\n                    \"signers\"\n                ])\n        },\n        app: {\n            get: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"appURI\"\n                ])\n        },\n        events: {\n            getEvents: (contractAddress, eventName)=>createContractCacheKey(contractAddress, [\n                    \"events\",\n                    \"getEvents\",\n                    {\n                        eventName\n                    }\n                ]),\n            getAllEvents: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"events\",\n                    \"getAllEvents\"\n                ])\n        },\n        // specific contract types\n        nft: {\n            get: (contractAddress, tokenId)=>createContractCacheKey(contractAddress, [\n                    \"get\",\n                    {\n                        tokenId\n                    }\n                ]),\n            balanceOf: (contractAddress, owner, tokenId)=>createContractCacheKey(contractAddress, [\n                    \"balanceOf\",\n                    {\n                        owner,\n                        tokenId\n                    }\n                ]),\n            query: {\n                all: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                        \"query\",\n                        \"all\",\n                        params\n                    ] : [\n                        \"query\",\n                        \"all\"\n                    ]),\n                totalCirculatingSupply: (contractAddress, tokenId)=>createContractCacheKey(contractAddress, [\n                        \"query\",\n                        \"totalCirculatingSupply\",\n                        tokenId ?? \"0\"\n                    ]),\n                totalCount: (contractAddress)=>createContractCacheKey(contractAddress, [\n                        \"query\",\n                        \"totalCount\"\n                    ]),\n                owned: {\n                    all: (contractAddress, owner)=>createContractCacheKey(contractAddress, [\n                            \"query\",\n                            \"owned\",\n                            \"all\",\n                            owner\n                        ])\n                }\n            },\n            sharedMetadata: {\n                get: (contractAddress)=>createContractCacheKey(contractAddress)\n            },\n            drop: {\n                getAllUnclaimed: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                        \"getAllUnclaimed\",\n                        params\n                    ] : [\n                        \"getAllUnclaimed\"\n                    ]),\n                getAllClaimed: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                        \"getAllClaimed\",\n                        params\n                    ] : [\n                        \"getAllClaimed\"\n                    ]),\n                totalUnclaimedSupply: (contractAddress)=>createContractCacheKey(contractAddress, [\n                        \"totalUnclaimedSupply\"\n                    ]),\n                totalClaimedSupply: (contractAddress)=>createContractCacheKey(contractAddress, [\n                        \"totalClaimedSupply\"\n                    ]),\n                revealer: {\n                    getBatchesToReveal: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                            \"getBatchesToReveal\",\n                            params\n                        ] : [\n                            \"getBatchesToReveal\"\n                        ])\n                }\n            }\n        },\n        token: {\n            totalSupply: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"totalSupply\"\n                ]),\n            decimals: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"decimals\"\n                ]),\n            balanceOf: (contractAddress, walletAddress)=>createContractCacheKey(contractAddress, [\n                    \"balanceOf\",\n                    {\n                        walletAddress\n                    }\n                ])\n        },\n        marketplace: {\n            getListing: (contractAddress, listingId)=>createContractCacheKey(contractAddress, [\n                    \"getListing\",\n                    {\n                        listingId\n                    }\n                ]),\n            getAllListings: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                    \"getAllListings\",\n                    params\n                ] : [\n                    \"getAllListings\"\n                ]),\n            getTotalCount: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"getTotalCount\"\n                ]),\n            getActiveListings: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                    \"getActiveListings\",\n                    params\n                ] : [\n                    \"getActiveListings\"\n                ]),\n            auction: {\n                getBidBufferBps: (contractAddress, listingId)=>createContractCacheKey(contractAddress, [\n                        \"auction\",\n                        \"getBidBufferBps\",\n                        {\n                            listingId\n                        }\n                    ]),\n                getWinningBid: (contractAddress, listingId)=>createContractCacheKey(contractAddress, [\n                        \"auction\",\n                        \"getWinningBid\",\n                        {\n                            listingId\n                        }\n                    ]),\n                getMinimumNextBid: (contractAddress, listingId)=>createContractCacheKey(contractAddress, [\n                        \"auction\",\n                        \"getMinimumNextBid\",\n                        {\n                            listingId\n                        }\n                    ]),\n                getWinner: (contractAddress, listingId)=>createContractCacheKey(contractAddress, [\n                        \"auction\",\n                        \"getWinner\",\n                        {\n                            listingId\n                        }\n                    ])\n            },\n            directListings: {\n                getAll: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                        \"directListings\",\n                        \"getAll\",\n                        params\n                    ] : [\n                        \"directListings\",\n                        \"getAll\"\n                    ]),\n                getAllValid: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                        \"directListings\",\n                        \"getAllValid\",\n                        params\n                    ] : [\n                        \"directListings\",\n                        \"getAllValid\"\n                    ]),\n                getListing: (contractAddress, listingId)=>createContractCacheKey(contractAddress, [\n                        \"directListings\",\n                        \"getListing\",\n                        {\n                            listingId\n                        }\n                    ]),\n                getTotalCount: (contractAddress)=>createContractCacheKey(contractAddress, [\n                        \"directListings\",\n                        \"getTotalCount\"\n                    ])\n            },\n            englishAuctions: {\n                getAll: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                        \"englishAuctions\",\n                        \"getAll\",\n                        params\n                    ] : [\n                        \"englishAuctions\",\n                        \"getAll\"\n                    ]),\n                getAllValid: (contractAddress, params)=>createContractCacheKey(contractAddress, params ? [\n                        \"englishAuctions\",\n                        \"getAllValid\",\n                        params\n                    ] : [\n                        \"englishAuctions\",\n                        \"getAllValid\"\n                    ]),\n                getAuction: (contractAddress, auctionId)=>createContractCacheKey(contractAddress, [\n                        \"englishAuctions\",\n                        \"getAuction\",\n                        {\n                            auctionId\n                        }\n                    ]),\n                getWinningBid: (contractAddress, auctionId)=>createContractCacheKey(contractAddress, [\n                        \"englishAuctions\",\n                        \"getWinningBid\",\n                        {\n                            auctionId\n                        }\n                    ]),\n                getTotalCount: (contractAddress)=>createContractCacheKey(contractAddress, [\n                        \"englishAuctions\",\n                        \"getTotalCount\"\n                    ])\n            }\n        }\n    },\n    // extensions\n    extensions: {\n        claimConditions: {\n            getActive: (contractAddress, tokenId, options)=>createContractCacheKey(contractAddress, tokenId ? [\n                    \"claimConditions\",\n                    \"getActive\",\n                    {\n                        tokenId\n                    },\n                    options\n                ] : [\n                    \"claimConditions\",\n                    \"getActive\",\n                    options\n                ]),\n            getAll: (contractAddress, tokenId, options)=>createContractCacheKey(contractAddress, tokenId ? [\n                    \"claimConditions\",\n                    \"getAll\",\n                    {\n                        tokenId\n                    },\n                    options\n                ] : [\n                    \"claimConditions\",\n                    \"getAll\",\n                    options\n                ]),\n            getClaimerProofs: (contractAddress, tokenId)=>createContractCacheKey(contractAddress, tokenId ? [\n                    \"claimConditions\",\n                    \"getClaimerProofs\",\n                    {\n                        tokenId\n                    }\n                ] : [\n                    \"claimConditions\",\n                    \"getClaimerProofs\"\n                ]),\n            getClaimIneligibilityReasons: (contractAddress, params, tokenId)=>createContractCacheKey(contractAddress, tokenId ? [\n                    \"claimConditions\",\n                    \"getIneligibilityReasons\",\n                    {\n                        tokenId\n                    },\n                    params\n                ] : [\n                    \"claimConditions\",\n                    \"getIneligibilityReasons\",\n                    params\n                ]),\n            // combinations of queries cache keys\n            useActiveClaimConditionForWallet: (contractAddress, walletAddress, tokenId)=>createContractCacheKey(contractAddress, tokenId ? [\n                    \"claimConditions\",\n                    \"useActiveClaimConditionForWallet\",\n                    {\n                        tokenId,\n                        walletAddress\n                    },\n                    , \n                ] : [\n                    \"claimConditions\",\n                    \"getIneligibilityReasons\",\n                    {\n                        walletAddress\n                    }\n                ])\n        },\n        // primary sale contracts\n        sales: {\n            getRecipient: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"sales\"\n                ])\n        },\n        // royalties\n        royalties: {\n            getDefaultRoyaltyInfo: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"royalties\"\n                ])\n        },\n        // platform fees\n        platformFees: {\n            get: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"platformFees\"\n                ])\n        },\n        // contract metadata\n        metadata: {\n            get: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"metadata\"\n                ])\n        },\n        roles: {\n            getAll: (contractAddress)=>createContractCacheKey(contractAddress, [\n                    \"roles\"\n                ]),\n            get: (contractAddress, role)=>createContractCacheKey(contractAddress, [\n                    \"roles\",\n                    {\n                        role\n                    }\n                ])\n        }\n    }\n};\n/**\n * Hook for signing out of a wallet after a user has logged in using `useLogin`\n *\n * @example\n * ```jsx\n * import { useLogout } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { logout, isLoading } = useLogout();\n *\n *   return (\n *     <button onClick={() => logout()}>\n *       {isLoading ? \"Logging out...\" : \"Logout\"}\n *     </button>\n *   );\n * }\n * ```\n *\n * @returns object containing a `logout` function and an `isLoading` state that indicates if the logout request is in progress\n *\n * @auth\n */ function useLogout() {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const authConfig = useThirdwebAuthContext();\n    const logout = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)({\n        mutationFn: async ()=>{\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n            await fetch(`${authConfig.authUrl}/logout`, {\n                method: \"POST\",\n                credentials: \"include\"\n            });\n            authConfig.secureStorage?.removeItem(AUTH_TOKEN_STORAGE_KEY);\n            queryClient.invalidateQueries(cacheKeys.auth.user());\n        }\n    });\n    return {\n        logout: logout.mutateAsync,\n        isLoading: logout.isLoading\n    };\n}\n/**\n * Hook to switch the account of the active wallet\n *\n * @example\n * ```ts\n * const { switchAccount, isLoading } = useSwitchAccount();\n *\n * const handleSwitchAccount = async (address: string) => {\n *  await switchAccount(address);\n * }\n * ```\n *\n * @returns A function to invoke to switch account and a boolean to indicate if it is in progress\n *\n * @auth\n */ function useSwitchAccount() {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const authConfig = useThirdwebAuthContext();\n    const switchAccount = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)({\n        mutationFn: async (address)=>{\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n            await fetch(`${authConfig.authUrl}/switch-account`, {\n                method: \"POST\",\n                credentials: \"include\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    address\n                })\n            });\n            queryClient.invalidateQueries(cacheKeys.auth.user());\n        }\n    });\n    return {\n        switchAccount: switchAccount.mutateAsync,\n        isLoading: switchAccount.isLoading\n    };\n}\nconst ThirdwebAuthProvider = (_ref)=>{\n    let { value, children } = _ref;\n    // Remove trailing slash from URL if present\n    const authContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!value) {\n            return undefined;\n        }\n        const context = {\n            ...value,\n            authUrl: value.authUrl?.replace(/\\/$/, \"\")\n        };\n        return context;\n    }, [\n        value\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(ThirdwebAuthContext.Provider, {\n        value: authContext,\n        children: [\n            children,\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ChangeActiveWalletOnAccountSwitch, {})\n        ]\n    });\n};\nfunction ChangeActiveWalletOnAccountSwitch() {\n    const wallet = useWallet();\n    const { logout } = useLogout();\n    const { switchAccount } = useSwitchAccount();\n    const authConfig = useThirdwebAuthContext();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    // When active wallet switches, switch the active account cookie and invalidate user query\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleSwitchAccount = async (data)=>{\n            if (!data.address) {\n                return;\n            }\n            try {\n                await switchAccount(data.address);\n            } catch (err) {\n                console.debug(`[Auth] Failed to switch account to ${data.address} with error:\\n`, err);\n            }\n        };\n        const handleLogout = async ()=>{\n            try {\n                await logout();\n            } catch (err) {\n                console.debug(`[Auth] Failed to logout with error:\\n`, err);\n            }\n        };\n        const shouldAddListener = !!wallet && authConfig && authConfig.authUrl;\n        if (shouldAddListener) {\n            wallet.addListener(\"connect\", handleSwitchAccount);\n            wallet.addListener(\"change\", handleSwitchAccount);\n            wallet.addListener(\"disconnect\", handleLogout);\n        }\n        return ()=>{\n            if (shouldAddListener) {\n                wallet.removeListener(\"connect\", handleSwitchAccount);\n                wallet.removeListener(\"change\", handleSwitchAccount);\n                wallet.removeListener(\"disconnect\", handleLogout);\n            }\n        };\n    }, [\n        wallet,\n        queryClient,\n        authConfig,\n        logout,\n        switchAccount\n    ]);\n    return null;\n}\nfunction useUpdateChainsWithClientId(supportedChains, activeChain, clientId) {\n    const supportedChainsWithKey = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return supportedChains.map((chain)=>(0,_thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__.updateChainRPCs)(chain, clientId));\n    }, [\n        supportedChains,\n        clientId\n    ]);\n    const activeChainIdOrObjWithKey = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!activeChain || typeof activeChain === \"string\" || typeof activeChain === \"number\") {\n            return activeChain;\n        }\n        return (0,_thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__.updateChainRPCs)(activeChain, clientId);\n    }, [\n        activeChain,\n        clientId\n    ]);\n    return [\n        supportedChainsWithKey,\n        activeChainIdOrObjWithKey\n    ];\n}\nconst QueryClientProviderWithDefault = (_ref)=>{\n    let { queryClient, children } = _ref;\n    const queryClientWithDefault = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return queryClient ? queryClient : new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.QueryClient();\n    }, [\n        queryClient\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.QueryClientProvider, {\n        client: queryClientWithDefault,\n        children: children\n    });\n};\nconst ThirdwebConfigContext = /* @__PURE__ */ /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * @internal\n */ const ThirdwebConfigProvider = (_ref)=>{\n    let { value, children } = _ref;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebConfigContext.Provider, {\n        value: value,\n        children: children\n    });\n};\n/**\n * @internal\n */ function useThirdwebConfigContext() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebConfigContext);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useThirdwebConfigContext() hook must be used within a <ThirdwebProvider/>\");\n    return context;\n}\nconst ThirdwebSDKContext = /* @__PURE__ */ /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\n/** @internal */ // eslint-disable-next-line turbo/no-undeclared-env-vars, better-tree-shaking/no-top-level-side-effects\nconst __DEV__ = \"development\" !== \"production\";\n/**\n * @internal\n */ function useSDKContext() {\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebSDKContext);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ctx._inProvider, \"useSDK must be called from within a ThirdwebProvider, did you forget to wrap your app in a <ThirdwebProvider />?\");\n    return ctx;\n}\n/**\n * Hook to get the instance of the `ThirdwebSDK` class being used by the `ThirdwebProvider` component.\n *\n * This gives access to all of the functionality of the TypeScript SDK in your React app.\n *\n * - If there is a connected wallet, the SDK is instantiated from the connected wallet’s signer. Meaning all transactions are initiated from the connected wallet.\n * - If there is no connected wallet, the SDK is in read-only mode on the activeChain.\n *\n * @example\n * ```tsx\n * import { useSDK } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const sdk = useSDK();\n *\n *   // Now you use all of the TypeScript SDK functionality\n *   // For example, deploy a new contract from the connected wallet.\n *   async function deployContract() {\n *     sdk?.deployer.deployNFTDrop({\n *       name: \"My NFT Drop\",\n *       primary_sale_recipient: \"{{wallet_address}}\",\n *     });\n *   }\n * }\n * ```\n */ function useSDK() {\n    const { sdk } = useSDKContext();\n    return sdk;\n}\n/**\n * @internal\n */ function useSDKChainId() {\n    const sdk = useSDK();\n    return sdk?._chainId;\n}\nconst INITIAL_CONTEXT_VALUE = {\n    wallet: undefined,\n    address: undefined,\n    chainId: undefined,\n    signer: undefined\n};\nconst ThirdwebConnectedWalletContext = /* @__PURE__ */ /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * @internal\n */ const ThirdwebConnectedWalletProvider = (_ref)=>{\n    let { signer, children } = _ref;\n    const { chains, clientId } = useThirdwebConfigContext();\n    const storage = useSDK()?.storage;\n    const [contextValue, setContextValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        ...INITIAL_CONTEXT_VALUE,\n        signer: signer ? signer : undefined\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setContextValue((val)=>({\n                ...val,\n                signer: signer ? signer : undefined\n            }));\n    }, [\n        signer\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!storage) {\n            return;\n        }\n        let s = signer;\n        if (signer) {\n            // just get both of these up front and keep them around with the context\n            Promise.all([\n                signer.getAddress(),\n                signer.getChainId()\n            ]).then((_ref2)=>{\n                let [address, chainId] = _ref2;\n                const chain = chains.find((c)=>c.chainId === chainId);\n                let rpcUrl = undefined;\n                if (chain) {\n                    try {\n                        rpcUrl = (0,_thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__.getValidChainRPCs)(chain, clientId)[0];\n                    } catch (e) {\n                        // failed to get a viable rpc url, nothing we can do\n                        console.error(e);\n                    }\n                }\n                // only if the signer is still the same!\n                if (signer === s) {\n                    const wallet = new _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_13__.U(signer, {\n                        readonlySettings: rpcUrl ? {\n                            rpcUrl,\n                            chainId\n                        } : undefined\n                    }, storage);\n                    setContextValue({\n                        wallet,\n                        address,\n                        chainId,\n                        signer\n                    });\n                }\n            }).catch((err)=>{\n                if (__DEV__) {\n                    console.warn(\"failed to get wallet instance in `<ThirdwebConnectedWalletProvider />`\", err);\n                }\n            });\n        } else {\n            // if signer is not provided, re-set the context value to initial values\n            setContextValue(INITIAL_CONTEXT_VALUE);\n        }\n        return ()=>{\n            // set the previous signer to undefined because it is invalid now\n            s = undefined;\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        signer,\n        clientId\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebConnectedWalletContext.Provider, {\n        value: contextValue,\n        children: children\n    });\n};\n/**\n *\n * @internal\n */ function useThirdwebConnectedWalletContext() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebConnectedWalletContext);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useThirdwebConnectedWalletContext() hook must be used within a <ThirdwebProvider/>\");\n    return context;\n}\nconst WrappedThirdwebSDKProvider = (_ref)=>{\n    let { sdkOptions = {}, storageInterface, supportedChains, activeChain, signer, children, clientId, secretKey } = _ref;\n    const activeChainId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!activeChain) {\n            return supportedChains[0]?.chainId;\n        }\n        if (typeof activeChain === \"number\") {\n            return activeChain;\n        }\n        if (typeof activeChain === \"string\") {\n            return supportedChains.find((c)=>c.slug === activeChain)?.chainId;\n        }\n        return activeChain.chainId;\n    }, [\n        activeChain,\n        supportedChains\n    ]);\n    const sdk = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        // on the server we can't do anything (?)\n        if (true) {\n            return undefined;\n        }\n        let chainId = activeChainId;\n        const supportedChain = supportedChains.find((c)=>c.chainId === chainId);\n        if (!supportedChain && chainId !== undefined) {\n            console.warn(`The chainId ${chainId} is not in the configured chains, please add it to the ThirdwebProvider`);\n            // reset the chainId as to not trigger an error in the sdk constructor\n            chainId = undefined;\n        }\n        let readonlySettings = undefined;\n        if (supportedChain && supportedChain.rpc.length > 0) {\n            try {\n                const rpcUrl = (0,_thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__.getValidChainRPCs)(supportedChain, clientId)[0];\n                readonlySettings = {\n                    chainId: supportedChain.chainId,\n                    rpcUrl\n                };\n            } catch (e) {\n            // no-op\n            }\n        }\n        // TODO: find a better way to fix the type error\n        const mergedOptions = {\n            readonlySettings,\n            ...sdkOptions,\n            supportedChains: supportedChains\n        };\n        let sdk_ = undefined;\n        if (chainId) {\n            // sdk from chainId\n            sdk_ = new _thirdweb_dev_sdk_evm__WEBPACK_IMPORTED_MODULE_4__.ThirdwebSDK(chainId, {\n                ...mergedOptions,\n                clientId,\n                secretKey\n            }, storageInterface);\n        }\n        // if we still have no sdk fall back to the first element in chains\n        if (!sdk_) {\n            if (supportedChains.length > 0) {\n                chainId = supportedChains[0].chainId;\n                sdk_ = new _thirdweb_dev_sdk_evm__WEBPACK_IMPORTED_MODULE_4__.ThirdwebSDK(chainId, mergedOptions, storageInterface);\n            } else {\n                console.error(\"No chains configured, please pass a chain or chains to the ThirdwebProvider\");\n                return undefined;\n            }\n        }\n        // set the chainId on the sdk instance to compare things later\n        sdk_._chainId = chainId;\n        return sdk_;\n    }, [\n        activeChainId,\n        supportedChains,\n        sdkOptions,\n        storageInterface,\n        clientId,\n        secretKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // if we have an sdk and a signer update the signer\n        if (sdk && sdk._chainId === activeChainId) {\n            if (signer) {\n                sdk.updateSignerOrProvider(signer);\n            } else if (activeChainId) {\n                sdk.updateSignerOrProvider(activeChainId);\n            }\n        }\n    // we know what we're doing\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        sdk,\n        sdk?._chainId,\n        signer,\n        activeChainId\n    ]);\n    const ctxValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            sdk: sdk && sdk._chainId === activeChainId ? sdk : undefined,\n            _inProvider: true\n        }), [\n        activeChainId,\n        sdk\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebSDKContext.Provider, {\n        value: ctxValue,\n        children: children\n    });\n};\n/**\n * The `ThirdwebSDKProvider` is used when you want to provide your own wallet connection logic and just use the thirdweb SDK to interact with smart contracts and the blockchain.\n * This means you can use everything in the SDK except for wallet connection-related components and hooks. if you need those please use the `ThirdwebProvider` instead.\n *\n * `ThirdwebSDKProvider` allows you to set a provider & signer to the Thirdweb SDK.\n *\n * @example\n * Wrap your app in the ThirdwebSDKProvider to access the SDK’s functionality from anywhere in your app.\n *\n * ```tsx\n * import { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\n * import { ethers } from \"ethers\";\n *\n * // Example shows how to get the signer from the injected provider ( wallet extension )\n * function Example() {\n *  return (\n *    <ThirdwebSDKProvider\n *      activeChain=\"ethereum\"\n *      clientId=\"YOUR_CLIENT_ID\"\n *      signer={new ethers.providers.Web3Provider(window.ethereum).getSigner()}\n *    >\n *      <App />\n *    </ThirdwebSDKProvider>\n *  )\n * }\n * ```\n *\n * @param props -\n * The props for the ThirdwebSDKProvider component\n *\n * ### clientId (optional)\n * The clientId prop is required to use the thirdweb infrastructure services with the SDK.\n *\n * ### activeChain (optional)\n * The activeChain prop determines which chain you want your app to be operating on.\n *\n * There are 1000+ chains available in the `@thirdweb-dev/chains` package. Import the chain you want and pass it to the `activeChain` prop.\n *\n * You can override the imported object or pass a custom chain object with required properties.\n *\n * You can get a client ID by creating an API key on [thirdweb dashboard](https://thirdweb.com/dashboard/settings/api-keys)\n *\n * ### supportedChains (optional)\n * An array of chains supported by your app.\n * There are 1000+ chains available in the `@thirdweb-dev/chains` package. You can import the chain you want and pass it to the `supportedChains` prop in an array.\n *\n * If not provided, it will default to the default supported chains supported by the thirdweb SDK.\n *\n * ```tsx\n * import { Ethereum, Polygon } from \"@thirdweb-dev/chains\";\n *\n * function Example() {\n *  return (\n *    <ThirdwebSDKProvider supportedChains={[ Ethereum, Polygon ]} activeChain={Ethereum}>\n *       <App />\n *    </ThirdwebSDKProvider>\n *  )\n * }\n * ```\n *\n * ### signer (optional)\n * A signer is an abstraction of an Ethereum Account, which can be used to sign messages and initiate transactions.\n *\n * Since the ThirdwebSDKProvider is used when you want to provide your own wallet connection logic, you will need to provide a signer prop to inform the SDK of the wallet you want to use to sign transactions.\n *\n * Libraries such as ethers.js, web3.js, wagmi, etc. all provide ways to get a signer.\n *\n * To use this signer with the SDK, pass it to the `signer` prop. If the signer is connected, the SDK will use this wallet to sign transactions for all write operations on the blockchain.\n *\n * ### sdkOptions (optional)\n * The thirdweb SDK Options to pass to the thirdweb SDK which includes Gas settings, gasless transactions, RPC configuration, and more.\n *\n * This Overrides any of the default values for the SDK. If not provided, it uses sensible defaults.\n *\n * ### storageInterface (optional)\n * Override the default [Storage](https://portal.thirdweb.com/infrastructure/storage/overview) interface used by the SDK.\n *\n * It allows you to create an instance of `ThirdwebStorage` with your own customized config, and pass it to the SDK.\n *\n * *This requires the `@thirdweb-dev/storage` package to be installed.*\n *\n * ```tsx\n * import { ThirdwebSDKProvider } from \"@thirdweb-dev/react\";\n * import {\n *   ThirdwebStorage,\n *   StorageDownloader,\n *   IpfsUploader,\n * } from \"@thirdweb-dev/storage\";\n *\n * // Configure a custom ThirdwebStorage instance\n * const gatewayUrls = {\n *   \"ipfs://\": [\n *     \"https://gateway.ipfscdn.io/ipfs/\",\n *     \"https://cloudflare-ipfs.com/ipfs/\",\n *     \"https://ipfs.io/ipfs/\",\n *   ],\n * };\n * const downloader = new StorageDownloader();\n * const uploader = new IpfsUploader();\n * const storage = new ThirdwebStorage({ uploader, downloader, gatewayUrls });\n *\n * // Provide the custom storage instance to the SDK\n * function MyApp() {\n *   return (\n *     <ThirdwebSDKProvider\n *       storageInterface={storage}\n *     >\n *       <YourApp />\n *     </ThirdwebSDKProvider>\n *   );\n * }\n * ```\n *\n * ### authConfig (optional)\n * The configuration object for setting up [Auth](https://portal.thirdweb.com/wallets/auth); allowing users to sign in with their wallet.\n *\n * ### secretKey (optional)\n * secretKey for thirdweb services. This is only required if server side rendering is being used.\n *\n * @public\n */ const ThirdwebSDKProvider = (props)=>{\n    const { signer, children, queryClient, supportedChains: _supportedChains, activeChain, clientId, ...restProps } = props;\n    if (!clientId) {\n        (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_13__.c)(\"No API key. Please provide a clientId. It is required to access thirdweb's services. You can create a key at https://thirdweb.com/create-api-key\", clientId, undefined);\n    }\n    const supportedChains = _supportedChains || _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__.defaultChains;\n    const supportedChainsNonNull = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const isActiveChainObject = typeof activeChain === \"object\" && activeChain !== null;\n        if (!isActiveChainObject) {\n            return supportedChains;\n        }\n        const isActiveChainInSupportedChains = supportedChains.find((c)=>c.chainId === activeChain.chainId);\n        // if activeChain is not in supportedChains - add it\n        if (!isActiveChainInSupportedChains) {\n            return [\n                ...supportedChains,\n                activeChain\n            ];\n        }\n        // if active chain is in supportedChains - replace it with object in activeChain\n        return supportedChains.map((c)=>c.chainId === activeChain.chainId ? activeChain : c);\n    }, [\n        supportedChains,\n        activeChain\n    ]);\n    const [supportedChainsWithKey, activeChainIdOrObjWithKey] = useUpdateChainsWithClientId(supportedChainsNonNull, activeChain || supportedChainsNonNull[0], clientId);\n    const mergedChains = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!activeChainIdOrObjWithKey || typeof activeChainIdOrObjWithKey === \"string\" || typeof activeChainIdOrObjWithKey === \"number\") {\n            return supportedChainsWithKey;\n        }\n        const _mergedChains = [\n            ...supportedChainsWithKey.filter((c)=>c.chainId !== activeChainIdOrObjWithKey.chainId),\n            activeChainIdOrObjWithKey\n        ];\n        // return a _mergedChains uniqued by chainId key\n        return _mergedChains.filter((chain, index, self)=>index === self.findIndex((c)=>c.chainId === chain.chainId));\n    }, [\n        supportedChainsWithKey,\n        activeChainIdOrObjWithKey\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebConfigProvider, {\n        value: {\n            chains: mergedChains,\n            clientId\n        },\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(QueryClientProviderWithDefault, {\n            queryClient: queryClient,\n            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(WrappedThirdwebSDKProvider, {\n                signer: signer,\n                supportedChains: mergedChains,\n                clientId: clientId,\n                activeChain: activeChainIdOrObjWithKey,\n                ...restProps,\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebConnectedWalletProvider, {\n                    signer: signer,\n                    children: children\n                })\n            })\n        })\n    });\n};\n/**\n * @internal\n */ const ThirdwebProviderCore = (props)=>{\n    const { activeChain, createWalletStorage = _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_14__.c } = props;\n    const supportedChains = props.supportedChains || _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__.defaultChains;\n    const supportedChainsNonNull = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const isActiveChainObject = typeof activeChain === \"object\" && activeChain !== null;\n        if (!isActiveChainObject) {\n            return supportedChains;\n        }\n        const isActiveChainInSupportedChains = supportedChains.find((c)=>c.chainId === activeChain.chainId);\n        // if activeChain is not in supportedChains - add it\n        if (!isActiveChainInSupportedChains) {\n            return [\n                ...supportedChains,\n                activeChain\n            ];\n        }\n        // if active chain is in supportedChains - replace it with object in activeChain\n        return supportedChains.map((c)=>c.chainId === activeChain.chainId ? activeChain : c);\n    }, [\n        supportedChains,\n        activeChain\n    ]);\n    const [supportedChainsWithKey, activeChainIdOrObjWithKey] = useUpdateChainsWithClientId(supportedChainsNonNull, props.activeChain || supportedChainsNonNull[0], props.clientId);\n    const activeChainWithKey = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (typeof activeChainIdOrObjWithKey === \"number\") {\n            const resolveChain = supportedChainsWithKey.find((chain)=>chain.chainId === activeChainIdOrObjWithKey);\n            if (!resolveChain) {\n                throw new Error(`Invalid chainId: ${activeChainIdOrObjWithKey}. It is not one of supportedChains`);\n            }\n            return resolveChain;\n        }\n        if (typeof activeChainIdOrObjWithKey === \"string\") {\n            const resolvedChain = supportedChainsWithKey.find((chain)=>chain.slug === activeChainIdOrObjWithKey);\n            if (!resolvedChain) {\n                throw new Error(`Invalid chain: \"${activeChainIdOrObjWithKey}\". It is not one of supportedChains`);\n            }\n            return resolvedChain;\n        }\n        return activeChainIdOrObjWithKey;\n    }, [\n        activeChainIdOrObjWithKey,\n        supportedChainsWithKey\n    ]);\n    const dAppMeta = props.dAppMeta;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebThemeContext.Provider, {\n        value: props.theme,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebWalletProvider, {\n            chains: supportedChainsWithKey,\n            supportedWallets: props.supportedWallets,\n            shouldAutoConnect: props.autoConnect,\n            createWalletStorage: createWalletStorage,\n            dAppMeta: dAppMeta,\n            activeChain: activeChainWithKey,\n            autoSwitch: props.autoSwitch,\n            autoConnectTimeout: props.autoConnectTimeout,\n            clientId: props.clientId,\n            activeChainSetExplicitly: !!props.activeChain,\n            signerWallet: props.signerWallet,\n            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebSDKProviderWrapper, {\n                queryClient: props.queryClient,\n                sdkOptions: props.sdkOptions,\n                supportedChains: supportedChainsWithKey,\n                activeChain: activeChainWithKey,\n                storageInterface: props.storageInterface,\n                authConfig: props.authConfig,\n                clientId: props.clientId,\n                secretKey: props.secretKey,\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebAuthProvider, {\n                    value: props.authConfig,\n                    children: props.children\n                })\n            })\n        })\n    });\n};\nconst ThirdwebSDKProviderWrapper = (_ref)=>{\n    let { children, ...props } = _ref;\n    const signer = useWalletContext()?.signer;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ThirdwebSDKProvider, {\n        signer: signer,\n        ...props,\n        children: children\n    });\n};\n/**\n * Hook to get the `supportedChains` which returns the array passed to the `supportedChains` prop of the `ThirdwebProvider` or the default supported chains if not specified.\n *\n * If `activeChain` is set in the `ThirdwebProvider` then it is also added to the `supportedChains` array\n *\n */ function useSupportedChains() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebConfigContext);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useSupportedChains() hook must be used within a <ThirdwebProvider/>\");\n    return context.chains;\n}\n/**\n * Hook for getting a wallet's current balance of native or (optional) ERC20 token balance\n *\n * @example\n *\n * ### get the balance of the native token\n *\n * ```jsx\n * import { useBalance } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { data, isLoading } = useBalance();\n * }\n * ```\n *\n * ### get the balance of any other token\n *\n * ```jsx\n * import { useBalance } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { data, isLoading } = useBalance(tokenAddress);\n * }\n * ```\n *\n * @param tokenAddress - The address of the token contract, if not provided, it defaults to the native token\n *\n * @returns\n * The hook's `data` property contains the token's balance in the `value` property as a `BigNumber` object.\n *\n * @token\n */ function useBalance(tokenAddress) {\n    const walletAddress = useAddress();\n    const { wallet, address, chainId } = useThirdwebConnectedWalletContext();\n    const cacheKey = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return cacheKeys.wallet.balance(chainId || -1, address, tokenAddress);\n    }, [\n        chainId,\n        tokenAddress,\n        address\n    ]);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__.useQuery)(cacheKey, ()=>{\n        return wallet?.balance(tokenAddress);\n    }, {\n        // if user is not logged in no reason to try to fetch\n        enabled: !!wallet && !!walletAddress && !!chainId,\n        retry: true,\n        keepPreviousData: false\n    });\n}\n/**\n * This hook is similar to the `useBalance` hook, but it for fetching the native token balance of any given wallet address.\n *\n * This hook only fetches the native token balance of the given wallet address. If you want to get the ERC20 balance from a given wallet, use `useTokenBalance`\n *\n * @example\n * ```ts\n * const { data, isLoading } = useBalanceForAddress(walletAddress)\n * ```\n *\n * @param walletAddress - The address of the wallet that you want to get the native balance\n *\n * @returns\n * The hook's `data` property contains the native token's balance in the `value` property as a `BigNumber` object.\n *\n * @token\n */ function useBalanceForAddress(walletAddress) {\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"wallet address is not provided\");\n    const { activeChain } = useWalletContext();\n    const chainId = activeChain.chainId;\n    const sdk = useSDK();\n    const cacheKey = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return cacheKeys.wallet.balance(chainId, walletAddress);\n    }, [\n        chainId,\n        walletAddress\n    ]);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__.useQuery)(cacheKey, async ()=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sdk, \"SDK is not initialized\");\n        return await sdk.getBalance(walletAddress);\n    });\n}\n/**\n * @internal\n */ function useConnectedWallet() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebConnectedWalletContext);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useConnectedWallet() hook must be used within a <ThirdwebProvider/>\");\n    return context.signer;\n}\n/**\n * Get the address of the connected wallet.\n *\n * Returns `undefined` if no wallet is connected.\n *\n * @example\n * ```tsx\n * import { useAddress } from \"@thirdweb-dev/react\"\n *\n * function Example() {\n *   const address = useAddress()\n *\n *   return <div>{address}</div>\n * }\n * ```\n *\n * @walletConnection\n */ function useAddress() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebConnectedWalletContext);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useAddress() hook must be used within a <ThirdwebProvider/>\");\n    return context.address;\n}\n/**\n * Hook for accessing the chain ID of the network the current wallet is connected to\n *\n * ```javascript\n * import { useChainId } from \"@thirdweb-dev/react\"\n * ```\n *\n * @example\n * ```javascript\n * import { useChainId } from \"@thirdweb-dev/react\"\n *\n * const App = () => {\n *   const chainId = useChainId()\n *\n *   return <div>{chainId}</div>\n * }\n * ```\n *\n * @returns\n * A `number` representing the current chain id, or `undefined` if the user is not connected to a wallet.\n *\n * For Example, if the user is connected to the Ethereum Mainnet, the return value will be `1`.\n *\n * @networkConnection\n */ function useChainId() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebConnectedWalletContext);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useChainId() hook must be used within a <ThirdwebProvider/>\");\n    return context.chainId;\n}\n/**\n * Hook for getting the `Chain` object of the network that the user is connected - but only if\n * it's a supported network (added in the `ThirdwebProvider`'s `supportedChains` or one of default chains\n *\n * Returns `undefined` if the network is not supported or the user is not connected to a wallet. You can use the `useConnectionStatus` hook to check if the user is connected to a wallet or not to differentiate between the two cases.\n *\n * If you only want to get the chain id of the network the user is connected to regardless of whether it's supported or not, use `useChainId` instead.\n *\n * ```jsx\n * import { useChain } from \"@thirdweb-dev/react\";\n *\n * const chain = useChain();\n * ```\n *\n * @example\n *\n * ```jsx\n * import { useChain, useConnectionStatus } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const chain = useChain();\n *   const status = useConnectionStatus();\n *\n *   if (status === \"unknown\") return <div> Loading... </div>;\n *   if (status === \"disconnected\") return <div> disconnected </div>;\n *   if (status === \"connecting\") return <div> connecting... </div>;\n *\n *   if (chain) {\n *     return <p> Connected to {chain.name} </p>;\n *   }\n *\n *   return <p> Connected to an unsupported network </p>;\n * }\n * ```\n *\n * @returns\n * An object of type `Chain` from [`@thirdweb-dev/chains`](https://www.npmjs.com/package/\\@thirdweb-dev/chains) package containing various information about the network, or `undefined` if the network is not supported or user is not connected to a wallet.\n *\n * @networkConnection\n */ function useChain() {\n    const chainId = useChainId();\n    const chains = useSupportedChains();\n    const chain = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return chains.find((_chain)=>_chain.chainId === chainId);\n    }, [\n        chainId,\n        chains\n    ]);\n    const unknownChain = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!chain) {\n            return _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__.defaultChains.find((c)=>c.chainId === chainId);\n        }\n    }, [\n        chainId,\n        chain\n    ]);\n    return chain || unknownChain;\n}\n/**\n * @internal\n * @deprecated\n *\n * This hook is renamed to `useChain`\n *\n * use the `useChain` hook instead\n */ function useActiveChain() {\n    return useChain();\n}\n// this hook is only for backwards compatibility\n/**\n *\n *\n * Hook for getting metadata about the network the current wallet is connected to and switching networks\n *\n * It's important to note that some wallet apps do not support programmatic network switching and switchNetwork will be undefined.\n * For those situations, you can typically switch networks in the wallet app this hook will still work.\n *\n * Hook for getting information about the current network and switching to a different network.\n *\n * Returns an array value containing two elements.\n *\n * 1. An object containing the following properties:\n *\n *    - `data` object contains information about the wallet's current and supported networks.\n *    - `loading` indicates if the switch network request is in progress.\n *    - `error` holds the `Error` object if there was an error when attempting to switch network.\n *\n * 2. A function to switch to a different network.\n *\n * @example\n * ```javascript\n * import { useNetwork } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const [{ data, error, loading }, switchNetwork] = useNetwork();\n *\n *   return (\n *     <button\n *       onClick={async () => {\n *         if (!switchNetwork) {\n *           console.log(\"can not switch network\");\n *           return;\n *         }\n *\n *         const result = await switchNetwork(80001);\n *         if (result.data) {\n *           console.log(\"Switched to Mumbai testnet successfully\");\n *         } else {\n *           console.log(\"Error switching to Mumbai testnet\", result.error);\n *         }\n *       }}\n *     >\n *       Switch to Mumbai\n *     </button>\n *   );\n * }\n * ```\n *\n * @returns\n *\n * ```ts\n * const [{ data, error, loading }, switchNetwork] = useNetwork();\n * ```\n * #### data\n *\n * If wallet is connected to a network that is one of `supportedChains` provided in `ThirdwebProvider` or one of the default supported chains, `data` object will contain the following:\n *\n * ```ts\n * {\n *   chain: Chain; // The connected network\n *   chains: Chain[]; // All supported networks\n * }\n * ```\n *\n * If wallet is connected to a network that is NOT one of `supportedChains` provided in `ThirdwebProvider` or default supported, `data` object will contain the following:\n *\n * ```ts\n * {\n *   // chainId of current connected network + unsupported flag\n *   chain: { chainId: number, unsupported: true };\n *   // All supported networks\n *   chains: Chain[];\n * }\n * ```\n *\n * If wallet is not connected, `data` object will contain the following:\n *\n * ```ts\n * {\n *   chain: undefined;\n *   chains: []; // Empty array\n * }\n * ```\n *\n * #### error\n *\n * `error` contains an `Error` object if there was an error when attempting to switch network using the `switchNetwork` function\n *\n * `undefined` if there is no switch network error\n *\n * ```ts\n * Error | undefined;\n * ```\n *\n * #### loading\n *\n * `loading` is `true` when switching network using the `switchNetwork` function, and `false` otherwise.\n *\n *\n * #### switchNetwork\n *\n * `switchNetwork` is a function to switch to a different network. It takes a `chainId` as an argument and returns a promise that resolves to an object containing `data` and `error` properties.\n *\n * If switching network was successful, `data` will contain the new network information. and `error` will be `undefined`. If switching network failed, `data` will be `undefined` and `error` will contain an `Error` object.\n *\n * `switchNetwork` is `undefined` if not connected to a wallet or if the connected wallet does not allow programmatic switching.\n *\n * ```ts\n * type SwitchNetwork = undefined | (chainId: number) => Promise<\n *   | {\n *       data: Chain | undefined;\n *       error: undefined;\n *     }\n *   | {\n *       data: undefined;\n *       error: Error;\n *     }>\n * ```\n *\n * @deprecated use `useChain`, `useSwitchChain`, `useChainId` instead\n * @internal\n */ function useNetwork() {\n    const chain = useChain();\n    const chainId = useChainId();\n    const switchChain = useSwitchChain();\n    const supportedChains = useSupportedChains();\n    const wallet = useWallet();\n    const isMetamaskInstalled = (0,_thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_16__.a)(globalThis.window) ? globalThis.window.ethereum.isMetaMask : false;\n    const isCoinbaseInstalled = (0,_thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_16__.a)(globalThis.window) ? globalThis.window.ethereum.isCoinbaseWallet : false;\n    // switch not supported if connected to a mobile wallet\n    const switchChainNotSupported = !wallet || wallet.walletId === _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_6__.w.walletConnectV1 || wallet.walletId === _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_6__.w.walletConnect || wallet.walletId === _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_6__.w.metamask && !isMetamaskInstalled || wallet.walletId === _thirdweb_dev_wallets__WEBPACK_IMPORTED_MODULE_6__.w.coinbase && !isCoinbaseInstalled;\n    // error when switching network\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    // loading: true when switching network\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const switchNetwork = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (_chainId)=>{\n        // reset error and loading\n        setLoading(true);\n        setError(undefined);\n        try {\n            await switchChain(_chainId);\n        } catch (e) {\n            setError(e);\n            setLoading(false);\n            return {\n                data: undefined,\n                error: e\n            };\n        }\n        setLoading(false);\n        return {\n            data: supportedChains.find((c)=>c.chainId === _chainId) || _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_11__.defaultChains.find((c)=>c.chainId === _chainId),\n            error: undefined\n        };\n    }, [\n        switchChain,\n        supportedChains\n    ]);\n    return [\n        {\n            data: {\n                chain: chainId === undefined ? undefined : chain || {\n                    chainId,\n                    unsupported: true\n                },\n                chains: wallet ? supportedChains : []\n            },\n            error: error,\n            loading\n        },\n        switchChainNotSupported ? undefined : switchNetwork\n    ];\n}\n/**\n * Hook for getting the address of the personal wallet connected to the current wallet connection.\n *\n * This is only relevant if the current connected wallet uses a personal wallet - For Example - Smart Wallet and Safe.\n * @walletConnection\n */ const usePersonalWalletAddress = ()=>{\n    const [personalWalletAddress, setPersonalWalletAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const activeWallet = useWallet();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        (async ()=>{\n            const possiblePersonalWallet = activeWallet?.getPersonalWallet();\n            if (!possiblePersonalWallet) {\n                setPersonalWalletAddress(undefined);\n                return;\n            }\n            const address = await (await possiblePersonalWallet?.getSigner())?.getAddress();\n            setPersonalWalletAddress(address);\n        })();\n    }, [\n        activeWallet\n    ]);\n    return personalWalletAddress;\n};\n// we prefix all our query keys with this to avoid possible collisions with user-defined queries that share the same query client\n// marker to make sure the query will not get stored in local storage by a query persister\nconst NEVER_PERSIST_QUERY_POSTFIX = {\n    persist: false\n};\nfunction neverPersist(key) {\n    return [\n        ...key,\n        NEVER_PERSIST_QUERY_POSTFIX\n    ];\n}\n/**\n * @internal\n */ function shouldNeverPersistQuery(key) {\n    return key[key.length - 1] === NEVER_PERSIST_QUERY_POSTFIX;\n}\n/**\n * Makes a parameter required to be passed, but still allows it to be null or undefined.\n * @internal\n */ function requiredParamInvariant(condition, message) {\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(condition !== null || condition !== undefined, message);\n}\n/**\n * @internal\n */ /**\n * A wallet address.\n * @walletConnection\n */ /**\n * A contract address.\n */ /**\n * The parameters to pass to the mint and transfer functions.\n * @token\n */ /**\n * The parameters to pass to the burn function.\n * @token\n */ // NFTS //\n/**\n * The possible NFT contract types.\n * @nft\n */ /**\n * The possible Token contract types.\n * @token\n */ /**\n * Possible NFT contract types.\n * @internal\n */ /**\n * The params to pass to `useTransferNFT`.\n * @nft\n */ /**\n * The params to pass to `useTransferBatchNFT`.\n * @nft\n */ /**\n * The params to pass to `useMintNFTSupply`.\n * @nft\n */ /**\n * The params for the `useMintNFT` hook mutation.\n * @nft\n */ /**\n * The return type of the `useMintNFT` hook.\n * @nft\n */ /**\n * The params for the `useBurnNFT` hook mutation.\n *\n * @nft\n */ // DROPS //\n/**\n * The possible DROP contract types.\n * @nftDrop\n */ /**\n * The possible revealable contract types.\n * @delayedReveal\n */ /**\n * The params for the {@link useDelayedRevealLazyMint} hook mutation.\n * @delayedReveal\n */ /**\n * The params for the {@link useRevealLazyMint} hook mutation.\n * @delayedReveal\n */ /**\n * The params for the `useClaimNFT` hook mutation.\n * @nftDrop\n */ /**\n * The return type of the `useClaimNFT` hook.\n * @nftDrop\n */ // MARKETPLACE //\n/**\n * @marketplace\n */ /**\n * @marketplace\n */ /**\n * @marketplace\n */ /**\n * @marketplace\n */ /**\n * @marketplace\n */ // TOKEN DROP //\n/**\n * @token\n */ // Helpers\n/**\n * @internal\n */ function getErcs(contract) {\n    return {\n        erc1155: getErc1155(contract),\n        erc721: getErc721(contract),\n        erc20: getErc20(contract)\n    };\n}\n/**\n * @internal\n */ function getErc1155(contract) {\n    if (!contract) {\n        return undefined;\n    }\n    try {\n        if (\"erc1155\" in contract) {\n            return contract.erc1155;\n        }\n    } catch (error) {\n        return undefined;\n    }\n    return undefined;\n}\n/**\n * @internal\n */ function getErc721(contract) {\n    if (!contract) {\n        return undefined;\n    }\n    try {\n        if (\"erc721\" in contract) {\n            return contract.erc721;\n        }\n    } catch (error) {\n        return undefined;\n    }\n    return undefined;\n}\n/**\n * @internal\n */ function getErc20(contract) {\n    if (!contract) {\n        return undefined;\n    }\n    try {\n        if (\"erc20\" in contract) {\n            return contract.erc20;\n        }\n    } catch (error) {\n        return undefined;\n    }\n    return undefined;\n}\n/** @internal */ function useQueryWithNetwork(queryKey, queryFn, options) {\n    const activeChainId = useSDKChainId();\n    const mergedOptions = {\n        ...options,\n        enabled: !!(activeChainId && options?.enabled)\n    };\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__.useQuery)(createCacheKeyWithNetwork(queryKey, activeChainId), queryFn, mergedOptions);\n}\n/**\n * The options to be passed as the second parameter to the `useClaimIneligibilityReasons` hook.\n * @claimConditions\n */ /**\n * The params for the {@link useSetClaimConditions} hook mutation.\n * @claimConditions\n */ /** **********************/ /**     READ  HOOKS     **/ /** **********************/ /**\n * Hook for getting the active claim condition for a given drop contract.\n *\n * Available for contracts that implement the \"ClaimConditions\" interface;\n * such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n *\n * @example\n * ```javascript\n * import { useActiveClaimCondition, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useActiveClaimCondition(contract);\n * }\n * ```\n *\n * @param contract -\n * Instance of contract that implement the \"ClaimConditions\" interface;\n * such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n *\n * @param tokenId -\n * When using the hook with ERC1155 contracts such as the [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), pass the `tokenId` as the second parameter; as each token can have unique claim conditions.\n *\n * Pass `undefined`, or leave this field out if you are using ERC721 or ERC20 drop contracts.\n *\n * ```tsx\n * import { useActiveClaimCondition, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *\n *   // \"data\" now includes a \"snapshot\" property that contains the allowlist.\n *   const { data, isLoading, error } = useActiveClaimCondition(\n *     contract,\n *     0, // Token ID required for ERC1155 contracts here.\n *   );\n * }\n * ```\n *\n * @param options - Additional options to pass to the claim condition fetch\n *\n * #### withAllowlist\n *\n * By default, the hook will not include the allowlist or \"snapshot\" in the returned data. To include the allowlist in the returned data, pass `withAllowlist: true` in options object.\n *\n * This will add a snapshot property to the returned data, which contains the allowlist in an array.\n *\n * ```tsx\n * import { useActiveClaimCondition, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *\n *   // \"data\" now includes a \"snapshot\" property that contains the allowlist.\n *   const { data, isLoading, error } = useActiveClaimCondition(\n *     contract,\n *     undefined, // Token ID required for ERC1155 contracts here.\n *     {\n *       withAllowlist: true,\n *     },\n *   );\n * }\n * ```\n *\n * @returns A query result object with the currently active claim condition\n *\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @claimConditions\n */ function useActiveClaimCondition(contract, tokenId, options) {\n    const contractAddress = contract?.getAddress();\n    const { erc1155, erc721, erc20 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getActive(contractAddress, tokenId, options), ()=>{\n        if (erc1155) {\n            requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n            return erc1155.claimConditions.getActive(tokenId, options);\n        }\n        if (erc721) {\n            return erc721.claimConditions.getActive(options);\n        }\n        if (erc20) {\n            return erc20.claimConditions.getActive(options);\n        }\n        throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n    }, {\n        // Checks that happen here:\n        // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n        // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n        enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n    });\n}\n/**\n * Hook to get the claimer proofs for an address for [ERC20](https://portal.thirdweb.com/contracts/build/base-contracts/erc-20/drop), [ERC721](https://portal.thirdweb.com/contracts/build/base-contracts/erc-721/drop), and [ERC1155](https://portal.thirdweb.com/contracts/build/base-contracts/erc-1155/drop) drop contracts.\n *\n * A claimer proof is a set of data about a claimer's claim condition, including the claimer's address, the claimer's proof, and the claimer's max claimable amount, price, and currency address.\n *\n * This is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n *\n * @example\n * ```javascript\n * import { useClaimerProofs, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *\n *   const {\n *     data: proof,\n *     isLoading,\n *     error,\n *   } = useClaimerProofs(contract, \"{{claimer_address}}\");\n * }\n * ```\n *\n * @param contract -\n * Instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the \"ClaimConditions\" extension.\n *\n * @param claimerAddress -\n * This is the address of the user you want to get the proof for.\n *\n * Likely, you will want to check proofs of the currently connected wallet address. You can use the `useAddress` hook to get this value.\n *\n * @param tokenId -\n * When using the hook with ERC1155 contracts, pass the `tokenId`; as each token can have unique claim conditions.\n *\n * Pass `undefined`, or leave this field out if you are using ERC721 or ERC20 drop contracts.\n *\n * @param claimConditionId -\n * This is the ID of the claim condition you want to get the proof for.\n *\n * @returns Query result object with the snapshot for the provided address\n *\n * @claimConditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n */ function useClaimerProofs(contract, claimerAddress, tokenId, claimConditionId) {\n    const contractAddress = contract?.getAddress();\n    const { erc1155, erc721, erc20 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getClaimerProofs(contractAddress, tokenId), ()=>{\n        if (erc1155) {\n            requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n            return erc1155.claimConditions.getClaimerProofs(tokenId, claimerAddress, claimConditionId);\n        }\n        if (erc721) {\n            return erc721.claimConditions.getClaimerProofs(claimerAddress, claimConditionId);\n        }\n        if (erc20) {\n            return erc20.claimConditions.getClaimerProofs(claimerAddress, claimConditionId);\n        }\n        throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n    }, {\n        // Checks that happen here:\n        // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n        // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n        enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n    });\n}\n/**\n * Hook for fetching all claim conditions for a given drop contract.\n *\n * This is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n *\n * @example\n * ```javascript\n * import { useClaimConditions, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useClaimConditions(contract);\n * }\n * ```\n *\n * @param contract - Instance of a contract that extends the ERC721, ERC1155 or ERC20 spec and implements the \"ClaimConditions\" extension.\n *\n * @param tokenId -\n * When using the hook with ERC1155 contracts, pass the `tokenId` parameter; as each token can have unique claim conditions.\n *\n * Pass `undefined`, or leave this field out if you are using ERC721 or ERC20 drop contracts.\n *\n * ```tsx\n * import { useClaimConditions, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *\n *   const { data, isLoading, error } = useClaimConditions(\n *     contract,\n *     0, // Token ID required for ERC1155 contracts here.\n *   );\n * }\n * ```\n *\n * @param options - additional options to pass to the claim condition fetch\n *\n * #### withAllowlist\n *\n * By default, the hook will not include the allowlist in the returned data. To include the allowlist in the returned data, set the `withAllowlist` option to true.\n *\n * This will add a `snapshot` property to the returned data, which contains the allowlist in an array.\n *\n * ```tsx\n * import { useClaimConditions, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *\n *   // \"data\" now includes a \"snapshot\" property that contains the allowlist.\n *   const { data, isLoading, error } = useClaimConditions(\n *     contract,\n *     undefined, // Token ID required for ERC1155 contracts here.\n *     {\n *       withAllowlist: true,\n *     },\n *   );\n * }\n * ```\n *\n * @returns Query Result object with the list of claim conditions\n *\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @claimConditions\n */ function useClaimConditions(contract, tokenId, options) {\n    const contractAddress = contract?.getAddress();\n    const { erc1155, erc721, erc20 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getAll(contractAddress, tokenId, options), ()=>{\n        if (erc1155) {\n            requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n            return erc1155.claimConditions.getAll(tokenId, options);\n        }\n        if (erc721) {\n            return erc721.claimConditions.getAll(options);\n        }\n        if (erc20) {\n            return erc20.claimConditions.getAll(options);\n        }\n        throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n    }, {\n        // Checks that happen here:\n        // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n        // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n        enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n    });\n}\n/**\n * Hook for fetching the reasons a wallet is not eligible to claim tokens from a drop, if any.\n *\n * This is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n *\n * @example\n * ```javascript\n * import { useClaimIneligibilityReasons, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useClaimIneligibilityReasons(contract, {\n *     walletAddress: \"0x123...\", // Use useAddress hook to get the user's wallet address\n *     quantity: 1, // Quantity to check eligibility for\n *   });\n * }\n * ```\n *\n * @param contract - Instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the \"ClaimConditions\" extension.\n *\n * @param params -\n * The conditions to check eligibility for. The `walletAddress` and `quantity` properties are required.\n *\n * Use the `useAddress` hook to get the connected wallet address.\n *\n * @param tokenId -\n * When using ERC1155 contracts, provide a third argument to specify the token ID.\n *\n * ```tsx\n * import { useClaimIneligibilityReasons, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useClaimIneligibilityReasons(\n *     contract,\n *     {\n *       walletAddress: \"0x123..\",\n *       quantity: 1,\n *     },\n *     tokenId,\n *   );\n * }\n * ```\n *\n * @returns\n * The hook's `data` property, once loaded, contains an array of `ClaimEligibility` strings, which may be empty.\n *\n * For example, if the user is not in the allowlist, this hook will return `[\"This address is not on the allowlist.\"]`.\n *\n * If the user is eligible to claim tokens, the hook will return an empty array.\n *\n * @claimConditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n */ function useClaimIneligibilityReasons(contract, params, tokenId) {\n    const contractAddress = contract?.getAddress();\n    const { erc1155, erc721, erc20 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.extensions.claimConditions.getClaimIneligibilityReasons(contractAddress, params, tokenId), ()=>{\n        if (erc1155) {\n            requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim ineligibility reasons\");\n            return erc1155.claimConditions.getClaimIneligibilityReasons(tokenId, params.quantity, params.walletAddress);\n        }\n        if (erc721) {\n            return erc721.claimConditions.getClaimIneligibilityReasons(params.quantity, params.walletAddress);\n        }\n        if (erc20) {\n            return erc20.claimConditions.getClaimIneligibilityReasons(params.quantity, params.walletAddress);\n        }\n        throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n    }, {\n        // Checks that happen here:\n        // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n        // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n        // 3. has a params object been passed?\n        // 4. does params have an address in it?\n        enabled: (erc1155 ? tokenId !== undefined : !!erc721 || !!erc20) && !!params && !!params.walletAddress\n    });\n}\n/**\n * Hook for getting the active claim condition on a drop contract for a specific wallet address.\n *\n * Each wallet address can have unique claim conditions at any given time. This hook allows you to get the active claim condition for a specific wallet address at this time.\n *\n * This is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n *\n *  ---\n *\n * - Returns the claim condition specific to the wallet address if found in the claimer snapshot.\n * - Returns the default claim condition on the contract if the address is not found in the claimer snapshot.\n * - Populates the error field if there is no active claim condition on the contract.\n *\n * @example\n * ```javascript\n * import {\n *   useActiveClaimConditionForWallet,\n *   useContract,\n *   useAddress,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const address = useAddress();\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useActiveClaimConditionForWallet(\n *     contract,\n *     address,\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a contract that extends the  ERC20, ERC721 or ERC1155 spec and implements the \"ClaimConditions\" extension.\n *\n * @param walletAddress -\n * The wallet address to check the active claim condition for. You can use the `useAddress` hook to get the currently connected wallet's address.\n *\n * @param tokenId -\n * When using the hook with ERC1155 contracts, pass the `tokenId` as the third parameter; as each token can have unique claim conditions.\n *\n * Pass `undefined`, or leave this field out if you are using ERC721 or ERC20 drop contracts.\n *\n * @returns The active claim condition for the wallet address or `null` if there is no active claim condition\n *\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @claimConditions\n */ function useActiveClaimConditionForWallet(contract, walletAddress, tokenId) {\n    const sdk = useSDK();\n    const contractAddress = contract?.getAddress();\n    const { erc1155, erc721, erc20 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.extensions.claimConditions.useActiveClaimConditionForWallet(contractAddress, walletAddress || \"_NO_WALLET_\", tokenId), async ()=>{\n        // if we do not have a walletAddress just do the same logic as basic useClaimCondition\n        if (!walletAddress) {\n            if (erc1155) {\n                requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n                return erc1155.claimConditions.getActive(tokenId);\n            }\n            if (erc721) {\n                return erc721.claimConditions.getActive();\n            }\n            if (erc20) {\n                return erc20.claimConditions.getActive();\n            }\n            throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sdk, \"sdk is required\");\n        let activeGeneralClaimCondition = null;\n        let claimerProofForWallet = null;\n        if (erc1155) {\n            requiredParamInvariant(tokenId, \"tokenId is required for ERC1155\");\n            const [cc, cp] = await Promise.all([\n                erc1155.claimConditions.getActive(tokenId),\n                erc1155.claimConditions.getClaimerProofs(tokenId, walletAddress)\n            ]);\n            activeGeneralClaimCondition = cc;\n            claimerProofForWallet = cp;\n        }\n        if (erc721) {\n            const [cc, cp] = await Promise.all([\n                erc721.claimConditions.getActive(),\n                erc721.claimConditions.getClaimerProofs(walletAddress)\n            ]);\n            activeGeneralClaimCondition = cc;\n            claimerProofForWallet = cp;\n        }\n        if (erc20) {\n            const [cc, cp] = await Promise.all([\n                erc20.claimConditions.getActive(),\n                erc20.claimConditions.getClaimerProofs(walletAddress)\n            ]);\n            activeGeneralClaimCondition = cc;\n            claimerProofForWallet = cp;\n        }\n        // if there is no active claim condition nothing matters, return null\n        if (!activeGeneralClaimCondition) {\n            return null;\n        }\n        // if there is no claimer proof then just fall back to the active general claim condition\n        if (!claimerProofForWallet) {\n            return activeGeneralClaimCondition;\n        }\n        const { maxClaimable, currencyAddress, price } = claimerProofForWallet;\n        const currencyWithOverride = currencyAddress || activeGeneralClaimCondition.currencyAddress;\n        const currencyMetadata = await (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_17__.f)(sdk.getProvider(), currencyWithOverride);\n        const normalizedPrize = price ? price === \"unlimited\" ? ethers__WEBPACK_IMPORTED_MODULE_18__.MaxUint256 : ethers__WEBPACK_IMPORTED_MODULE_19__.parseUnits(price, currencyMetadata.decimals) : null;\n        const priceWithOverride = normalizedPrize || activeGeneralClaimCondition.price;\n        const maxClaimableWithOverride = maxClaimable || activeGeneralClaimCondition.maxClaimablePerWallet;\n        const currencyValueWithOverride = await (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_17__.a)(sdk.getProvider(), currencyWithOverride, priceWithOverride);\n        return {\n            // inherit the entire claim condition\n            ...activeGeneralClaimCondition,\n            // overwrite all keys that could be changed based on overwrites\n            maxClaimablePerWallet: maxClaimableWithOverride,\n            price: priceWithOverride,\n            currency: currencyWithOverride,\n            currencyAddress: currencyWithOverride,\n            currencyMetadata: currencyValueWithOverride\n        };\n    }, {\n        // Checks that happen here:\n        // 1. if the contract is based on ERC1155 contract => tokenId cannot be `undefined`\n        // 2. if the contract is NOT based on ERC1155 => we have to have either an ERC721 or ERC20 contract\n        enabled: erc1155 ? tokenId !== undefined : !!erc721 || !!erc20\n    });\n}\n/** **********************/ /**     WRITE HOOKS     **/ /** **********************/ /**\n * Hook for setting claim conditions on a drop contract.\n *\n * This is available for available for contracts that implement the \"ClaimConditions\" interface; such as [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721), [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155), and [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n *\n * When using an ERC1155 contract, you must also provide the token ID of the NFT you want to set claim conditions on as the second parameter to the hook.\n *\n * @example\n * ```tsx\n * import {\n *   useSetClaimConditions,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: setClaimConditions,\n *     isLoading,\n *     error,\n *   } = useSetClaimConditions(contract);\n *\n *   const claimConditions = {\n *     phases: [\n *       {\n *         metadata: {\n *           name: \"Phase 1\", // The name of the phase\n *         },\n *         currencyAddress: \"0x...\", // The address of the currency you want users to pay in\n *         price: 1, // The price of the token in the currency specified above\n *         maxClaimablePerWallet: 1, // The maximum number of tokens a wallet can claim\n *         maxClaimableSupply: 100, // The total number of tokens that can be claimed in this phase\n *         startTime: new Date(), // When the phase starts (i.e. when users can start claiming tokens)\n *         waitInSeconds: 60 * 60 * 24 * 7, // The period of time users must wait between repeat claims\n *         snapshot: [\n *           {\n *             address: \"0x...\", // The address of the wallet\n *             currencyAddress: \"0x...\", // Override the currency address this wallet pays in\n *             maxClaimable: 5, // Override the maximum number of tokens this wallet can claim\n *             price: 0.5, // Override the price this wallet pays\n *           },\n *         ],\n *         merkleRootHash: \"0x...\", // The merkle root hash of the snapshot\n *       },\n *     ],\n *   }\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() => setClaimConditions(claimConditions)}\n *     >\n *       Set Claim Conditions\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a {@link DropContract}\n * @returns\n *\n * A Mutation object to set claim conditions\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useSetClaimConditions(contract);\n *\n * function setPhases(phases) {\n *  mutateAsync({\n *    phases,\n *  });\n * }\n *\n * function reset() {\n *  mutateAsync({\n *    reset: true,\n *  })\n * }\n * ```\n *\n * ### options\n *\n * The mutation function takes an object with two possible properties:\n *\n * 1. `reset` - A boolean that determines whether to reset the claim conditions. This means you reset any previous claim conditions that existed and allow users to claim again as if the drop had just started.\n * 2. `phases` - An array of claim phases that occur in chronological order. You can only have one phase occur at a time. All properties of a phase are optional, with the default being a free, open, unlimited claim, in the native currency, starting immediately.\n *\n * ---\n *\n * #### reset (optional)\n *\n * A boolean value that determines whether to reset the claim conditions or to keep the existing state.\n *\n * By resetting them, any previous claims that were made will be ignored by the claim condition restrictions.\n *\n * For example, if you had a limit of 1 token per wallet, and a user claimed a token, then you reset the claim conditions, that user will be able to claim another token.\n *\n * Default value is `false`.\n *\n * ---\n *\n * #### phases (required)\n *\n * Provide an array of phases that occur in chronological order. All properties of a phase are optional and are described below:\n *\n * ##### metadata\n *\n * An object representing the metadata of the phase. This is only for display purposes in the dashboard and isn’t used elsewhere.\n *\n * ```js\n * {\n *   name: string;\n * }\n * ```\n *\n * ##### currencyAddress\n *\n * The address of the currency you want users to pay in.\n *\n * This can be any ERC20 token value. If you want users to pay in the native currency (e.g. Ether on Ethereum), you can import the `NATIVE_TOKEN_ADDRESS` constant from `@thirdweb-dev/sdk`. The default value is `NATIVE_TOKEN_ADDRESS`.\n *\n * ##### price\n *\n * The price per token in the currency specified above. The default value is `0`.\n *\n * ##### maxClaimablePerWallet\n *\n * The maximum number of tokens a wallet can claim. The default value is `\"unlimited\"`\n *\n * ##### maxClaimableSupply\n *\n * The total number of tokens that can be claimed in this phase.\n *\n * For example, if you lazy mint 1000 tokens and set the `maxClaimableSupply` to 100, then only 100 tokens will be claimable in this phase, leaving 900 tokens to be claimed in the next phases (if you have any).\n *\n * This is useful for \"early bird\" use cases, where you allow users to claim a limited number of tokens at a discounted price during the first X amount of time.\n *\n * ##### startTime\n *\n * When the phase starts (i.e. when users can start claiming tokens).\n *\n * The default value is `\"immediately\"`.\n *\n * ##### waitInSeconds\n *\n * The amount of time between claims a wallet must wait before they can claim again.\n *\n * The default value is `0`, meaning users can claim again immediately after claiming.\n *\n * ##### snapshot\n *\n * A list of wallets that you want to override the default claim conditions for.\n *\n * Wallet addresses within this list can be set to pay in a different currency, have a different price, and have a different maximum claimable amount.\n *\n * ```jsx\n * {\n *   address: string;\n *   currencyAddress?: string;\n *   maxClaimable?: number;\n *   price?: number;\n * }\n * ```\n *\n * [Learn more about improving claim conditions](https://blog.thirdweb.com/announcing-improved-claim-conditions/)\n *\n * ##### merkleRootHash\n *\n * If you want to provide your own merkle tree for your snapshot, provide the merkle root hash here. This is only recommended for advanced use cases.\n *\n * @claimConditions\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n */ function useSetClaimConditions(contract, tokenId) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const { erc1155, erc721, erc20 } = getErcs(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        const { phases, reset = false } = data;\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(phases, 'No \"phases\" provided');\n        if (erc1155) {\n            requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n            return erc1155.claimConditions.set(tokenId, phases, reset);\n        }\n        if (erc721) {\n            return erc721.claimConditions.set(phases, reset);\n        }\n        if (erc20) {\n            return erc20.claimConditions.set(phases, reset);\n        }\n        throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n    }, {\n        onSettled: ()=>{\n            invalidateContractAndBalances(queryClient, contractAddress, activeChainId);\n        }\n    });\n}\n/**\n * Hook for resetting the claim conditions on a drop contract.\n *\n * Available to use on contracts that implement\n * [`ERC721ClaimableWithConditions`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721ClaimConditions),\n * [`ERC1155ClaimableWithConditions`](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155ClaimConditions) or\n * [`ERC20ClaimableWithConditions`](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20ClaimConditions).\n *\n * @example\n * ```jsx\n * import {\n *   useContract,\n *   useResetClaimConditions,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   // Contract must be a drop contract that implements claim conditions\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: resetClaimConditions,\n *     isLoading,\n *     error,\n *   } = useResetClaimConditions(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() => resetClaimConditions()}\n *     >\n *       Reset Claim Conditions\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `DropContract`\n * @param tokenId - For ERC1155 NFTs, provide the token ID of the NFT as the second argument to the hook.\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1 | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @nftDrop\n */ function useResetClaimConditions(contract, tokenId) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const { erc1155, erc721, erc20 } = getErcs(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async ()=>{\n        const cleanConditions = async (conditions)=>{\n            return conditions.map((c)=>({\n                    ...c,\n                    price: c.currencyMetadata.displayValue\n                }));\n        };\n        if (erc1155) {\n            requiredParamInvariant(tokenId, \"tokenId is required for ERC1155 claim conditions\");\n            const claimConditions = await erc1155.claimConditions.getAll(tokenId, {\n                withAllowList: true\n            });\n            return erc1155.claimConditions.set(tokenId, await cleanConditions(claimConditions || []), true);\n        }\n        if (erc721) {\n            const claimConditions = await erc721.claimConditions.getAll({\n                withAllowList: true\n            });\n            return await erc721.claimConditions.set(await cleanConditions(claimConditions || []), true);\n        }\n        if (erc20) {\n            const claimConditions = await erc20.claimConditions.getAll({\n                withAllowList: true\n            });\n            return await erc20.claimConditions.set(await cleanConditions(claimConditions || []), true);\n        }\n        throw new Error(\"Contract must be ERC721, ERC1155 or ERC20\");\n    }, {\n        onSettled: ()=>{\n            invalidateContractAndBalances(queryClient, contractAddress, activeChainId);\n        }\n    });\n}\n// primary sales\n/**\n * Hook for getting the primary sales recipient of a smart contract.\n *\n * Available to use on contracts that implement the [`PrimarySale`](https://portal.thirdweb.com/contracts/build/extensions/general/PrimarySale) interface.\n *\n * @example\n * ```jsx\n * import { useContract, usePrimarySaleRecipient } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = usePrimarySaleRecipient(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @returns The hook's `data` property, once loaded, is a `string` with the wallet address of the primary sales recipient.\n *\n * @twfeature PrimarySale\n * @platformFees\n */ function usePrimarySaleRecipient(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.extensions.sales.getRecipient(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"sales\" in contract && contract.sales, \"Contract does not support primarySale\");\n        return contract.sales.getRecipient();\n    }, {\n        enabled: !!contract || !!contractAddress\n    });\n}\n/**\n * Hook for updating the primary sale recipient on a smart contract.\n *\n * Available to use on smart contracts that implement the [`PrimarySale`](https://portal.thirdweb.com/contracts/build/extensions/general/PrimarySale) interface.\n *\n * The wallet that initiates this transaction must have the required permissions to change the primary sale recipient (defaults to `\"admin\"` level).\n *\n * @example\n * ```jsx\n * import {\n *   useUpdatePrimarySaleRecipient,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: updatePrimarySaleRecipient,\n *     isLoading,\n *     error,\n *   } = useUpdatePrimarySaleRecipient(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() => updatePrimarySaleRecipient(\"{{wallet_address}}\")}\n *     >\n *       Update Primary Sale Recipient\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n * @returns A mutation object to update the primary sales recipient\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useUpdatePrimarySaleRecipient(contract);\n * ```\n *\n * ### options\n *\n * The mutation function takes a `walletAddress` as argument:\n *\n * #### walletAddress\n *\n * The wallet address to set as the primary sale recipient.\n *\n * @twfeature PrimarySale\n * @platformFees\n */ function useUpdatePrimarySaleRecipient(contract) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const contractAddress = contract?.getAddress();\n    const activeChainId = useSDKChainId();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((newRecipient)=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"sales\" in contract && contract.sales, \"Contract does not support primarySale\");\n        return contract.sales.setRecipient(newRecipient);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n// end primary sales\n// royalties\n/**\n * Hook for retrieving royalty settings of a smart contract.\n *\n * Available to use on contracts that implement the [`Royalty`](https://portal.thirdweb.com/contracts/build/extensions/general/Royalty) interface.\n *\n * @example\n * ```jsx\n * import { useContract, useRoyaltySettings } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useRoyaltySettings(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @returns\n * The hook's `data` property, once loaded, is an object with two properties:\n *\n * ```ts\n * {\n *   seller_fee_basis_points: number;\n *   fee_recipient: string;\n * }\n * ```\n *\n * - The `seller_fee_basis_points` is the royalty amount (in basis points) that the seller\n *   will receive for each token sale on secondary markets.\n * - The `fee_recipient` is the wallet address that will receive the royalty payments.\n *\n * @twfeature Royalty\n * @platformFees\n */ function useRoyaltySettings(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.extensions.royalties.getDefaultRoyaltyInfo(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"royalties\" in contract && contract.royalties, \"Contract does not support royalties\");\n        return contract.royalties.getDefaultRoyaltyInfo();\n    }, {\n        enabled: !!contract || !!contractAddress\n    });\n}\n/**\n * Hook for updating royalty settings on a smart contract.\n *\n * Available to use on smart contracts that implement the [`Royalty`](https://portal.thirdweb.com/contracts/build/extensions/general/Royalty) interface.\n *\n * @example\n * ```jsx\n * import {\n *   useUpdateRoyaltySettings,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: updateRoyaltySettings,\n *     isLoading,\n *     error,\n *   } = useUpdateRoyaltySettings(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         updateRoyaltySettings({\n *           seller_fee_basis_points: 0,\n *           fee_recipient: \"{{wallet_address}}\",\n *         })\n *       }\n *     >\n *       Update Royalty Settings\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @returns\n * A mutation object to update the royalty settings\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useUpdateRoyaltySettings(contract);\n * ```\n *\n * ### options\n *\n * The mutation function takes an object with below properties:\n *\n * #### seller_fee_basis_points\n *\n * The `seller_fee_basis_points` property is a `number` between `0` - `10000` that defines the fee rate.\n *\n * This number is in percentage points. i.e. `100` is a 1% fee and `10000` is a 100% fee.\n *\n * #### fee_recipient\n *\n * The `fee_recipient` property is the address of the wallet that will receive the fees.\n *\n * @twfeature Royalty\n * @platformFees\n */ function useUpdateRoyaltySettings(contract) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const contractAddress = contract?.getAddress();\n    const activeChainId = useSDKChainId();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((updatePayload)=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"royalties\" in contract && contract.royalties, \"Contract does not support royalties\");\n        return contract.royalties.setDefaultRoyaltyInfo(updatePayload);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n// end royalties\n// platformFees\n/**\n * Hook for getting the platform fee settings of a contract.\n *\n * Available to use on contracts that implement the [`PlatformFee`](https://portal.thirdweb.com/contracts/build/extensions/general/PlatformFee) interface.\n *\n * @example\n *\n * ```jsx\n * import { useContract, usePlatformFees } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = usePlatformFees(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @returns\n * The hook's `data` property, once loaded, is an object containing two fields:\n *\n * - `platform_fee_basis_points`: the platform fee basis points set on the contract\n * - `platform_fee_recipient`: the wallet address of the platform fee recipient\n *\n * _Note_: The basis points are in percentage format, meaning that a value of `500` is equivalent to a `5%` fee.\n *\n * ```ts\n * {\n *   platform_fee_basis_points: number;\n *   platform_fee_recipient: string;\n * }\n * ```\n *\n * @twfeature PlatformFee\n * @platformFees\n */ function usePlatformFees(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.extensions.platformFees.get(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"platformFees\" in contract && contract.platformFees, \"Contract does not support platformFees\");\n        return contract.platformFees.get();\n    }, {\n        enabled: !!contract || !!contractAddress\n    });\n}\n/**\n * Hook for updating platform fees on a smart contract.\n *\n * Available to use on smart contracts that implement the [`PlatformFee`](https://portal.thirdweb.com/contracts/build/extensions/general/PlatformFee) interface.\n *\n * ```jsx\n * import {\n *   useUpdatePlatformFees,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: updatePlatformFees,\n *     isLoading,\n *     error,\n *   } = useUpdatePlatformFees(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         updatePlatformFees({\n *           platform_fee_basis_points: 0,\n *           fee_recipient: \"{{wallet_address}}\",\n *         })\n *       }\n *     >\n *       Update Platform Fees\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @returns A mutation object to update the platform fees settings\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useUpdatePlatformFees(contract);\n * ```\n *\n * ### options\n *\n * The mutation function takes an object with below properties:\n *\n * #### platform_fee_basis_points\n *\n * The `platform_fee_basis_points` property is a `number` between `0` - `10000` that defines the fee rate.\n *\n * This number is in percentage points. i.e. `100` is a 1% fee and `10000` is a 100% fee.\n *\n * #### fee_recipient\n *\n * The `fee_recipient` property is the address of the wallet that will receive the fees.\n *\n * Use the `useAddress` hook to get the current wallet address.\n *\n * @twfeature PlatformFee\n * @platformFees\n */ function useUpdatePlatformFees(contract) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const contractAddress = contract?.getAddress();\n    const activeChainId = useSDKChainId();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((updatePayload)=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"platformFees\" in contract && contract.platformFees, \"Contract does not support platformFees\");\n        return contract.platformFees.set(updatePayload);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n// end platformFees\n// metadata\n/**\n * Hook for getting the metadata associated with a smart contract.\n *\n * Available to use on contracts that implement the [Contract Metadata](https://portal.thirdweb.com/contracts/build/extensions/general/ContractMetadata) interface.\n *\n * @example\n * ```jsx\n * import { useContract, useMetadata } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useMetadata(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n * @returns\n * A `CustomContractMetadata` object containing the metadata\n *\n * The hook's `data` property, once loaded, is an object containing the contract's metadata.\n *\n * ```ts\n * CustomContractMetadata | undefined;\n * ```\n *\n * ```ts\n * interface CustomContractMetadata {\n *   // The name of the contract.\n *   name: string;\n *   // A description of the contract.\n *   description?: string;\n *   // The image associated with the contract.\n *   image?: any;\n *   // An external link associated with the contract.\n *   external_link?: string;\n * }\n * ```\n *\n * @metadata\n */ function useMetadata(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.extensions.metadata.get(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"metadata\" in contract && contract.metadata, \"Contract does not support metadata\");\n        return contract.metadata.get();\n    }, {\n        enabled: !!contract || !!contractAddress\n    });\n}\n/**\n * Hook for updating the metadata of a smart contract.\n *\n * Available to use on smart contracts that implement the `ContractMetadata` interface.\n *\n * The wallet initiating this transaction must have the required permissions to update the metadata, (`admin` permissions required by default).\n *\n * Provide your contract instance from the `useContract` hook as the first argument, and\n * an object fitting the [contract-level metadata standards](https://docs.opensea.io/docs/contract-level-metadata) of\n * the new metadata as the second argument, including:\n *\n * - `name`: A `string` for the name of the smart contract (required).\n * - `description`: A `string` to describe the smart contract (optional).\n * - `image`: A `string` or `File` object containing the URL or file data of an image to associate with the contract (optional).\n * - `external_link`: A `string` containing a URL to view the smart contract on your website (optional).\n *\n * @example\n *\n * ```jsx\n * import {\n *   useUpdateMetadata,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: updateMetadata,\n *     isLoading,\n *     error,\n *   } = useUpdateMetadata(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         updateMetadata({\n *           name: \"My App\",\n *           description: \"My awesome Ethereum App\",\n *           image: \"/path/to/image.jpg\", // URL, URI, or File object\n *           external_link: \"https://myapp.com\",\n *         })\n *       }\n *     >\n *       Update Metadata\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n * @returns Mutation object that to update the metadata\n * @metadata\n */ function useUpdateMetadata(contract) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const contractAddress = contract?.getAddress();\n    const activeChainId = useSDKChainId();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((updatePayload)=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"metadata\" in contract && contract.metadata, \"Contract does not support metadata\");\n        return contract.metadata.update(updatePayload);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n// end metadata\n// contract type\nasync function fetchContractType(contractAddress, sdk) {\n    if (!contractAddress || !sdk) {\n        return null;\n    }\n    try {\n        return await sdk.resolveContractType(contractAddress);\n    } catch (err) {\n        console.error(\"failed to resolve contract type\", err);\n        // this error can happen if the contract is a custom contract -> assume \"custom\"\n        return \"custom\";\n    }\n}\n/**\n * Hook for determining the type of contract for a contract address.\n *\n * This is useful if you want to determine if a contract is a [prebuilt contract](https://portal.thirdweb.com/pre-built-contracts).\n *\n * @example\n * ```jsx\n * import { useContractType } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { data, isLoading, error } = useContractType(contractAddress);\n * }\n * ```\n *\n * @param contractAddress - The address of the contract\n * @returns Query result containing the type of the contract in the `data` property\n * @metadata\n */ function useContractType(contractAddress) {\n    const sdk = useSDK();\n    return useQueryWithNetwork(cacheKeys.contract.type(contractAddress), ()=>fetchContractType(contractAddress, sdk), // is immutable, so infinite stale time\n    {\n        cacheTime: Infinity,\n        staleTime: Infinity,\n        enabled: !!contractAddress && !!sdk\n    });\n}\n/**\n * @internal\n */ const contractType = {\n    cacheKey: (contractAddress, chainId)=>createCacheKeyWithNetwork(cacheKeys.contract.type(contractAddress), chainId),\n    useQuery: useContractType,\n    fetchQuery: fetchContractType\n};\n// end contract type\n// contract compiler metadata\nfunction fetchCompilerMetadata(contractAddress, sdk) {\n    if (!contractAddress || !sdk) {\n        return null;\n    }\n    try {\n        return sdk.getPublisher().fetchCompilerMetadataFromAddress(contractAddress);\n    } catch (err) {\n        // if we fail to get contract metadata just return null;\n        return null;\n    }\n}\n/**\n * Hook for retrieving information such as the ABI, license, and metadata of a smart contract using it's contract address.\n *\n * @example\n * ```jsx\n * import { useCompilerMetadata } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { data, isLoading, error } = useCompilerMetadata(contractAddress);\n * }\n *\n * export default App;\n * ```\n *\n * @param contractAddress - The address of the deployed contract\n * @returns Query result containing the compiler metadata of the deployed contract in the `data` property\n *\n * @metadata\n */ function useCompilerMetadata(contractAddress) {\n    const sdk = useSDK();\n    return useQueryWithNetwork(cacheKeys.contract.compilerMetadata(contractAddress), ()=>fetchCompilerMetadata(contractAddress, sdk), // is immutable, so infinite stale time\n    {\n        cacheTime: Infinity,\n        staleTime: Infinity,\n        enabled: !!contractAddress && !!sdk\n    });\n}\n/**\n * @internal\n */ const compilerMetadata = {\n    cacheKey: (contractAddress, chainId)=>createCacheKeyWithNetwork(cacheKeys.contract.compilerMetadata(contractAddress), chainId),\n    useQuery: useCompilerMetadata,\n    fetchQuery: fetchCompilerMetadata\n};\n// end compiler metadata\n// useContract\n/**\n * @contract\n */ /**\n * Hook for connecting to a smart contract.\n *\n * Provide your smart contract address as the first parameter. Once connected, the `contract` will be an instance of your smart contract.\n *\n * The ABI of the smart contract is resolved automatically for contracts deployed or imported using the [thirdweb dashboard](https://thirdweb.com/dashboard).\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(contractAddress);\n * ```\n *\n * @remarks\n *\n * To cache the ABI of the smart contract, use [thirdweb generate](https://portal.thirdweb.com/cli/generate). This is recommended to improve performance and provide type-safety when interacting with your smart contract.\n *\n *\n * @param contractAddress - The address of the deployed contract\n * @returns Query result object that includes the contract once it is resolved\n * @contract\n */ /**\n * If your contract is a prebuilt contract, it is strongly recommended you provide the contract's name as the second argument to gain access to improved top-level functions and type inference.\n *\n * Available contract types are:\n * - `\"nft-drop\"`\n * - `\"signature-drop\"`\n * - `\"edition-drop\"`\n * - `\"nft-collection\"`\n * - `\"edition\"`\n * - `\"multiwrap\"`\n * - `\"pack\"`\n * - `\"token-drop\"`\n * - `\"token\"`\n * - `\"marketplace\"`\n * - `\"marketplace-v3\"`\n * - `\"split\"`\n * - `\"vote\"`\n *\n * When a contract type is provided, the contract object will be typed as the contract's class.\n * For example, if you provide the contract type `\"pack\"`, the contract object will be returned typed as an instance of the `Pack` class, unlocking all of the top-level functions specific to the pack.\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(contractAddress, \"pack\");\n * ```\n *\n * @param contractAddress - The address of the deployed contract\n * @param _contractType - The type of the contract\n * @returns Query result object that includes the contract once it is resolved\n * @public\n */ /**\n * Optionally, (if you don’t want to use the dashboard import feature),\n * you can provide your smart contract’s ABI to the second parameter of the useContract hook.\n * This is useful when developing on a local node, where it may be faster to use the ABI than to import the contract using the dashboard.\n *\n * The ABI is only necessary if you have not deployed your contract with, or imported your contract to the [thirdweb dashboard](https://thirdweb.com/dashboard).\n *\n * @example\n * ```javascript\n * const { contract, isLoading, error } = useContract(contractAddress, contractAbi);\n * ```\n *\n * @param contractAddress - The address of the deployed contract\n * @param _abi - The ABI of the contract to use\n * @returns Query result object that includes the contract once it is resolved\n */ // TODO: add JSDoc for this signature\nfunction useContract(contractAddress, contractTypeOrABI) {\n    const sdk = useSDK();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const activeChainId = useSDKChainId();\n    const wallet = useAddress();\n    const walletChainId = useChainId();\n    // it's there because we put it there.\n    const sdkTimestamp = sdk?._constructedAt;\n    const contractQuery = useQueryWithNetwork(// need to add the wallet and walletChainId into the query key so this gets refreshed when the wallet / chain changes!\n    neverPersist([\n        \"contract-instance\",\n        contractAddress,\n        {\n            wallet,\n            walletChainId,\n            sdkTimestamp\n        }\n    ]), async ()=>{\n        requiredParamInvariant(contractAddress, \"contract address is required\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sdk, \"SDK not initialized\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(activeChainId, \"active chain id is required\");\n        // if we don't have a contractType or ABI then we will have to resolve it regardless\n        // we also handle it being \"custom\" just in case...\n        if (!contractTypeOrABI || contractTypeOrABI === \"custom\") {\n            // First check local ABI cache\n            const cachedAbi = (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_20__.g)(contractAddress);\n            if (cachedAbi) {\n                return sdk.getContract(contractAddress, cachedAbi);\n            }\n            // we just resolve here (sdk does this internally anyway)\n            const resolvedContractType = await queryClient.fetchQuery(contractType.cacheKey(contractAddress, activeChainId), ()=>contractType.fetchQuery(contractAddress, sdk), {\n                cacheTime: Infinity,\n                staleTime: Infinity\n            });\n            let abi;\n            if (resolvedContractType === \"custom\") {\n                abi = (await queryClient.fetchQuery(compilerMetadata.cacheKey(contractAddress, activeChainId), ()=>compilerMetadata.fetchQuery(contractAddress, sdk), {\n                    cacheTime: Infinity,\n                    staleTime: Infinity,\n                    retry: 0\n                }))?.abi;\n            }\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(resolvedContractType, \"failed to resolve contract type\");\n            // just let the sdk handle the rest\n            // if we have resolved an ABI for a custom contract, use that otherwise use contract type\n            return sdk.getContract(contractAddress, abi || resolvedContractType);\n        }\n        // every other case can just be handled by the sdk directly\n        return sdk.getContract(contractAddress, contractTypeOrABI);\n    }, {\n        // keep the previous value around while we fetch the new one\n        // this is important because otherwise it can lead to flickering (because we need to re-fetch the contract when sdk things change)\n        keepPreviousData: true,\n        // is immutable, so infinite cache & stale time (for a given key)\n        cacheTime: Infinity,\n        staleTime: Infinity,\n        enabled: !!contractAddress && !!sdk && !!activeChainId,\n        // never retry\n        retry: 0\n    });\n    // const previousCountract = usePrevious(contractQuery.data);\n    return {\n        ...contractQuery,\n        data: contractQuery.data,\n        contract: contractQuery.data\n    };\n}\n/**\n * Get the metadata of given contract\n *\n * @example\n * ```javascript\n * const { data: contractMetadata, isLoading } = useContractMetadata(contract);\n * ```\n *\n * @param contract - The `ValidContractInstance` instance of the contract to get the metadata for\n * @returns A Query result object that includes the contract metadata of the deployed contract\n * @twfeature ContractMetadata\n * @metadata\n */ function useContractMetadata(contract) {\n    return useQueryWithNetwork(cacheKeys.contract.metadata(contract?.getAddress()), async ()=>{\n        requiredParamInvariant(contract, \"contract is required\");\n        return await contract.metadata.get(); // FIXME types\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Update the metadata of the given contract\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: updateContractMetadata,\n *     isLoading,\n *     error,\n *   } = useContractMetadataUpdate(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update contract metadata\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => updateContractMetadata({ name: \"New name\", description: \"New description\" })}\n *     >\n *       Update contract metadata\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - The `ValidContractInstance` instance of the contract to get the metadata for\n * @returns Mutation object to update the contract metadata\n * @twfeature ContractMetadata\n * @metadata\n */ function useContractMetadataUpdate(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (metadata)=>{\n        requiredParamInvariant(contract, \"contract must be defined\");\n        return contract.metadata.update(metadata);\n    }, {\n        onSettled: ()=>queryClient.invalidateQueries(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), activeChainId))\n    });\n}\n/**\n * CONTRACT EVENTS\n */ /**\n * Hook for reading events emitted by a smart contract, including new events as they are emitted (optional).\n *\n * By default, it reads all events emitted by the smart contract.\n *\n * @example\n * ```tsx\n * import { useContractEvents, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useContractEvents(contract);\n * }\n * ```\n *\n * @param contract - The contract instance of the contract to listen to events for\n *\n * @param eventName -\n * The name of the event to query for.\n *\n * For example, if your smart contract emits an event called `MyEvent`, you would pass `\"MyEvent\"` to this parameter.\n *\n * Omit this parameter or provide undefined to query for all events emitted by the smart contract.\n *\n * @param options -\n * An object containing options to filter the events being queried.\n *\n * Available options include\n * - `queryFilter` to refine which events you want to read,\n * - a boolean `subscribe` flag to subscribe to new events as they are emitted.\n *\n * ### Example\n * ```tsx\n * import {\n *   useContractEvents,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useContractEvents(\n *     contract,\n *     \"MyEvent\",\n *     {\n *       queryFilter: {\n *         filters: {\n *           tokenId: 123, // e.g. Only events where tokenId = 123\n *         },\n *         fromBlock: 0, // Events starting from this block\n *         toBlock: 100, // Events up to this block\n *         order: \"asc\", // Order of events (\"asc\" or \"desc\")\n *       },\n *       subscribe: true, // Subscribe to new events\n *     },\n *   );\n * ```\n *\n * @returns The hook's `data` property, once loaded, contains an array of `ContractEvent` objects\n * @contract\n *\n */ function useContractEvents(contract, eventName) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        subscribe: true\n    };\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const activeChainId = useSDKChainId();\n    const cacheKey = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createCacheKeyWithNetwork(eventName ? cacheKeys.contract.events.getEvents(contractAddress, eventName) : cacheKeys.contract.events.getAllEvents(contractAddress), activeChainId), [\n        activeChainId,\n        contractAddress,\n        eventName\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // if we're not subscribing or query is not enabled yet we can early exit\n        if (!options.subscribe || !contract || !contract) {\n            return;\n        }\n        const cleanupListener = contract.events.listenToAllEvents((contractEvent)=>{\n            // if we have a specific event name we are looking for we can early exist if it doesn't match\n            if (eventName && eventName !== contractEvent.eventName) {\n                return;\n            }\n            // insert new event to the front of the array (no duplicates, though)\n            queryClient.setQueryData(cacheKey, (oldData)=>{\n                if (!oldData) {\n                    return [\n                        contractEvent\n                    ];\n                }\n                const eventIsNotAlreadyInEventsList = oldData.findIndex((e)=>e.transaction.transactionHash === contractEvent.transaction.transactionHash && e.transaction.logIndex === contractEvent.transaction.logIndex) === -1;\n                if (eventIsNotAlreadyInEventsList) {\n                    return [\n                        contractEvent,\n                        ...oldData\n                    ];\n                }\n                return oldData;\n            });\n        });\n        // cleanup listener on unmount\n        return cleanupListener;\n    }, [\n        options.subscribe,\n        cacheKey,\n        contract,\n        queryClient,\n        eventName\n    ]);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__.useQuery)(cacheKey, ()=>{\n        requiredParamInvariant(contract, \"contract must be defined\");\n        if (eventName) {\n            return contract.events.getEvents(eventName, options.queryFilter);\n        }\n        return contract.events.getAllEvents(options.queryFilter);\n    }, {\n        enabled: !!contract,\n        // we do not need to re-fetch if we're subscribing\n        refetchOnWindowFocus: !options.subscribe,\n        refetchOnMount: true,\n        refetchOnReconnect: true\n    });\n}\n/**\n * Generic hook for reading any data from a smart contract via it’s function/view/variable name.\n *\n * ```javascript\n * const { contract } = useContract(\"{{contract_address}}\");\n * const { data, isLoading, error } = useContractRead(contract, \"functionName\", args);\n * ```\n *\n * @example\n * Provide your smart contract instance from `useContract`, a function name and the arguments to pass to the function (if any).\n *\n * For example, to read the value of a view on your smart contract called `getName` you would do the following:\n *\n * ```tsx\n * import { useContractRead, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useContractRead(contract, \"getName\");\n * }\n * ```\n *\n * @remarks\n * If you have cached the ABI of your smart contract using [thirdweb generate](https://portal.thirdweb.com/cli/generate), the functionName and args parameters are strongly typed according to your smart contract’s ABI.\n *\n * @param contract - The contract instance of the contract to call a function on\n *\n * @param functionName - The name of the function to call in the smart contract. This can be any function, view, variable, etc. that does not require a transaction to occur.\n *\n * @param args - The arguments to pass to the function (if any)\n *\n * @param overrides -\n * `CallOverrides` object to send with your request.\n *\n * To include the sender's address (msg.sender) when calling view functions within your smart contract, include the property `{from: 0X123}` passing the relevant address.\n *\n * ```ts\n * const { data, isLoading, error } = useContractRead(contract, \"getName\", [\"arg1\", \"arg2\"], {\n *     blockTag: 123,\n *     from: \"0x123\",\n *   });\n * ```\n *\n * @returns Query result object that includes the data returned by the function call\n * @contract\n */ function useContractRead(contract, functionName, args, overrides) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.call(contractAddress, functionName, args, overrides), ()=>{\n        requiredParamInvariant(contract, \"contract must be defined\");\n        requiredParamInvariant(functionName, \"function name must be provided\");\n        return contract.call(functionName, args, overrides);\n    }, {\n        enabled: !!contract && !!functionName\n    });\n}\n/**\n * Generic hook for calling any smart contract function that requires a transaction to take place.\n *\n * Provide your smart contract instance returned from the `useContract` hook, along with the name of the function you wish to call on your smart contract as arguments to the hook.\n *\n * Then call the `mutate` or `mutateAsync` function returned by the hook, providing an array of arguments to send to your smart contract function.\n *\n * If you provide too many or too few arguments, the `error` property will be populated with an error message.\n *\n * If your function has no arguments, provide an empty array by calling the function with `{ args: [] }`\n *\n * @example\n * ```javascript\n * import { useContractWrite, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync, isLoading, error } = useContractWrite(\n *     contract,\n *     \"setName\",\n *   );\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       // Calls the \"setName\" function on your smart contract with \"My Name\" as the first argument\n *       action={() => mutateAsync({ args: [\"My Name\"] })}\n *     >\n *       Send Transaction\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @remarks\n *\n * If you have cached the ABI of your smart contract using [thirdweb generate](https://portal.thirdweb.com/cli/generate), the functionName and args parameters are strongly typed according to your smart contract’s ABI.\n *\n *\n * @param contract - The contract instance of the contract to call a function on\n * @param functionName - The name of the function to call in the smart contract.\n * @returns A mutation object that includes the write function to call\n * @contract\n */ function useContractWrite(contract, functionName) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (_ref)=>{\n        let { args, overrides } = _ref;\n        requiredParamInvariant(contract, \"contract must be defined\");\n        requiredParamInvariant(functionName, \"function name must be provided\");\n        return contract.call(functionName, args, overrides);\n    }, {\n        onSettled: ()=>queryClient.invalidateQueries(createCacheKeyWithNetwork(createContractCacheKey(contractAddress), activeChainId))\n    });\n}\n/** **********************/ /**       READ HOOKS    **/ /** **********************/ /**\n * Hook for fetching information about all NFTs that haven't been claimed yet from an NFT Drop contract.\n *\n * Available to use on contracts that extends the ERC721 spec\n *\n * @example\n *\n * ```jsx\n * import { useUnclaimedNFTs, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useUnclaimedNFTs(contract);\n * }\n * ```\n *\n * @param contract - Instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n *\n * @param queryParams -\n * query params to pass to the query for the sake of pagination\n * By default, the hook returns the first 100 unclaimed NFTs from the contract.\n *\n * Paginate the results by providing a `queryParams` object as the second argument.\n *\n * ```jsx\n * import { useUnclaimedNFTs, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useUnclaimedNFTs(\n *     contract,\n *     {\n *       count: 10, // Limit the number of results\n *       start: 0, // Start from the nth result (useful for pagination)\n *     },\n *   );\n * }\n * ```\n *\n * @returns\n * The hook's `data` property, once loaded, contains an array of `NFT` objects.\n *\n * @twfeature ERC721LazyMintable\n * @nftDrop\n */ function useUnclaimedNFTs(contract, queryParams) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.nft.drop.getAllUnclaimed(contractAddress, queryParams), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        // TODO make this work for custom contracts (needs ABI change)\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.getAllUnclaimed, \"Contract instance does not support getAllUnclaimed\");\n        const data = contract.getAllUnclaimed(queryParams);\n        return data;\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Hook for fetching all claimed NFTs from a given NFT Drop contract.\n *\n * Available to use on contracts that implement [`ERC721Claimable`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Claimable),\n * such as the [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721).\n *\n * @example\n *\n * ```jsx\n * import { useClaimedNFTs, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"nft-drop\");\n *   const { data: nfts, isLoading, error } = useClaimedNFTs(contract);\n * }\n * ```\n *\n * @param contract - Instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n *\n * @param queryParams -\n * By default, the hook will return the first `100` claimed NFTs\n *\n * You can use the `queryParams` argument to paginate the NFTs that are returned.\n *\n * ```jsx\n * import { useClaimedNFTs, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"nft-drop\");\n *   const { data, isLoading, error } = useClaimedNFTs(\n *     contract,\n *     {\n *       // For example, to only return the first 50 claimed NFTs in the collection\n *       // in order of token ID\n *       count: 50,\n *       start: 0,\n *     },\n *   );\n * }\n * ```\n *\n * @returns Query Result object that includes an array of NFTs that are claimed in the `data` property\n * @twfeature ERC721LazyMintable\n * @nftDrop\n */ function useClaimedNFTs(contract, queryParams) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.nft.drop.getAllClaimed(contractAddress, queryParams), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        // TODO make this work for custom contracts (needs ABI change)\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.getAllClaimed, \"Contract instance does not support getAllClaimed\");\n        return contract.getAllClaimed(queryParams);\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Hook for fetching the number of unclaimed NFTs from an NFT/Edition Drop contract.\n *\n * Unclaimed NFTs are tokens that were lazy-minted but have not yet been claimed by a user.\n *\n * Available to use on contracts that implement the [`LazyMint`](https://portal.thirdweb.com/contracts/build/extensions/general/LazyMint) extension;\n * such as the [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721) contract.\n *\n * @example\n *\n * ```jsx\n * import { useUnclaimedNFTSupply, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"nftDrop\");\n *   const { data, isLoading, error } = useUnclaimedNFTSupply(contract);\n * }\n * ```\n *\n * @param contract - Instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n *\n * @returns\n * The hook's `data` property, once loaded, contains a `BigNumber` representing the number of unclaimed NFTs.\n *\n *\n * @twfeature ERC721LazyMintable\n *\n * @nftDrop\n */ function useUnclaimedNFTSupply(contract) {\n    const contractAddress = contract?.getAddress();\n    const { erc721 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.drop.totalUnclaimedSupply(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (erc721) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc721, \"No ERC721 Contract instance provided\");\n            return erc721.totalUnclaimedSupply();\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Contract is not an instance of ERC721\");\n    }, {\n        enabled: !!erc721\n    });\n}\n/**\n * Hook for retrieving the total supply of NFTs claimed from an NFT Drop contract.\n *\n * Available to use on contracts that implement [`ERC721Claimable`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Claimable).\n *\n * @example\n *\n * ```jsx\n * import { useClaimedNFTSupply, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading } = useClaimedNFTSupply(contract);\n * }\n * ```\n *\n * @param contract - Instance of a contract that extends the ERC721 spec (NFT drop, Signature Drop, or any custom contract that extends the ERC721 spec)\n *\n * @returns\n * The hook's `data` property, once loaded, is a `BigNumber` representing the total supply of NFTs claimed from the NFT drop contract so far.\n *\n * @twfeature ERC721LazyMintable\n * @nftDrop\n */ function useClaimedNFTSupply(contract) {\n    const contractAddress = contract?.getAddress();\n    const { erc721 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.drop.totalClaimedSupply(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (erc721) {\n            return erc721.totalClaimedSupply();\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Contract is not an instance of ERC721\");\n    }, {\n        enabled: !!erc721\n    });\n}\n/**\n * Hook for fetching batches of lazy-minted NFTs that were set to be revealed at a later date, but have not yet been revealed.\n *\n * Available to use on contracts that implement the [ERC721Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Revealable)\n * or [ERC1155Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155Revealable) interfaces,\n * such as the [NFT Drop](https://thirdweb.com/thirdweb.eth/DropERC721)\n * and [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155) smart contracts.\n *\n * @example\n * ```tsx\n * import { useBatchesToReveal, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data: batches, isLoading, error } = useBatchesToReveal(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `RevealableContract`\n *\n * @returns The hook's `data` property, once loaded, contains an array of batches that need to be revealed.\n *\n * Each batch is an object with the following properties:\n *\n * ```ts\n * {\n *   batchId: BigNumber;\n *   batchUri: string;\n *   placeholderMetadata: NFTMetadata;\n * }\n * ```\n *\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @delayedReveal\n */ function useBatchesToReveal(contract) {\n    const contractAddress = contract?.getAddress();\n    const { erc721, erc1155 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.drop.revealer.getBatchesToReveal(contractAddress), ()=>{\n        if (erc721) {\n            return erc721.revealer.getBatchesToReveal();\n        }\n        if (erc1155) {\n            return erc1155.revealer.getBatchesToReveal();\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Contract instance does not support getBatchesToReveal\");\n    }, {\n        enabled: !!erc721 || !!erc1155\n    });\n}\n/** **********************/ /**     WRITE HOOKS     **/ /** **********************/ /**\n * Hook for claiming an NFT from a smart contract.\n *\n * Available to use on smart contracts that implement a  `Claimable` interface, and follow either the `ERC721`or `ERC1155` standard.\n *\n * @example\n * ```jsx\n * import { useContract, useClaimNFT, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: claimNft, isLoading, error } = useClaimNFT(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         claimNft({\n *           to: \"{{wallet_address}}\", // Use useAddress hook to get current wallet address\n *           quantity: 1,\n *         })\n *       }\n *     >\n *       Claim NFT\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `DropContract`\n *\n * @returns A mutation object to claim a NFT to the wallet specified in the params\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useClaimNFT(contract);\n * ```\n *\n * ### options\n *\n * The mutation function takes an object as argument with below properties:\n *\n * #### to\n *\n * The wallet address to mint the NFT(s) to.\n *\n * Use the `useAddress` hook to get the currently connected wallet address.\n *\n * #### quantity\n *\n * The number of NFTs you wish to claim.\n *\n * - With ERC721 contracts, this represents the number of unique tokens you wish to claim.\n * - With ERC1155 contracts, this represents the quantity of the specific `tokenId` you wish to claim.\n *\n * #### tokenId\n *\n * For ERC1155 contracts, you must specify a specific `tokenId` to claim.\n *\n * #### options (optional)\n *\n * Customizable `ClaimOptions` object to override the default behaviour of the hook.\n *\n * There are three options available:\n *\n * - `checkERC20Allowance` - Whether to check the ERC20 allowance of the sender, defaults to true.\n * - `currencyAddress` - The currency to pay for each token claimed, defaults to `NATIVE_TOKEN_ADDRESS` for native currency.\n * - `pricePerToken` - The price to pay for each token claimed. Not relevant when using claim conditions.\n *\n * ```jsx\n * import { useContract, useClaimNFT, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutate: claimNft, isLoading, error } = useClaimNFT(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         claimNft({\n *           to: \"{{wallet_address}}\",\n *           quantity: 1,\n *           options: {\n *             checkERC20Allowance: true,\n *             currencyAddress: \"{{erc20_address}}\",\n *             pricePerToken: 0,\n *           },\n *         })\n *       }\n *     >\n *       Claim NFT\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @twfeature ERC721Claimable | ERC1155Claimable | ERC721ClaimPhasesV2 | ERC721ClaimPhasesV1 | ERC721ClaimConditionsV2 | ERC721ClaimConditionsV1 | ERC1155ClaimPhasesV2 | ERC1155ClaimPhasesV1 | ERC1155ClaimConditionsV2 | ERC1155ClaimConditionsV1\n * @nftDrop\n */ function useClaimNFT(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const { erc721, erc1155 } = getErcs(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        requiredParamInvariant(contract, \"contract is undefined\");\n        if (erc1155) {\n            requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n            if (!data.to) {\n                return await erc1155.claim(data.tokenId, data.quantity, data.options);\n            }\n            return await erc1155.claimTo(data.to, data.tokenId, data.quantity, data.options);\n        }\n        if (erc721) {\n            if (!data.to) {\n                return await erc721.claim(data.quantity, data.options);\n            }\n            return await erc721.claimTo(data.to, data.quantity, data.options);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"contract is not an Erc721 or Erc1155\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for lazy minting a batch of NFTs on a drop contract.\n *\n * Available to use on smart contracts that implement the \"Drop\" extension, and\n * follow either the `ERC721` or `ERC1155` standard.\n *\n * @example\n *\n * Provide your drop contract (ERC721 or ERC1155) as the argument to the hook, and an array\n * of metadata objects to lazy-mint.\n *\n * ```jsx\n * import { useContract, useLazyMint, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: lazyMint, isLoading, error } = useLazyMint(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         lazyMint({\n *           // Metadata of the NFTs to upload\n *           metadatas: [\n *             {\n *               name: \"My NFT\",\n *               description: \"An example NFT\",\n *               image: \"{{image_url}}\",\n *             },\n *           ],\n *         })\n *       }\n *     >\n *       Lazy Mint NFTs\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract` with the drop extension\n *\n * @param onProgress - Optional callback that will be called with the progress of the upload\n *\n * @returns A mutation object to lazy mint a batch of NFTs\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useLazyMint(contract);\n * ```\n *\n * ### options\n *\n * The mutation function takes an object as argument with below properties:\n *\n * #### metadatas\n * An array of objects containing the metadata of the NFTs to lazy mint.\n *\n * Your metadata objects must follow the [Metadata standards](https://docs.opensea.io/docs/metadata-standards#metadata-structure).\n *\n * ```jsx\n * import { useContract, useLazyMint, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: lazyMint, isLoading, error } = useLazyMint(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         lazyMint({\n *           // Metadata of the NFTs to upload\n *           metadatas: [\n *             {\n *               name: \"My NFT\",\n *               description: \"An example NFT\",\n *               image: \"{{image_url}}\",\n *             },\n *           ],\n *         })\n *       }\n *     >\n *       Lazy Mint NFTs\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @twfeature ERC721LazyMintable | ERC1155LazyMintable\n * @nftDrop\n */ function useLazyMint(contract, onProgress) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const { erc721, erc1155 } = getErcs(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        requiredParamInvariant(contract, \"contract is undefined\");\n        let options;\n        if (onProgress) {\n            options = {\n                onProgress\n            };\n        }\n        if (erc721) {\n            return erc721.lazyMint(data.metadatas, options);\n        }\n        if (erc1155) {\n            return erc1155.lazyMint(data.metadatas, options);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"contract is not an Erc721 or Erc1155\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook to lazy-mint a batch of NFTs with [delayed reveal](https://portal.thirdweb.com/glossary/delayed-reveal);\n * allowing the owner to set placeholder metadata and reveal the metadata of the NFTs at a later time.\n *\n * Available to use on contracts that implement the\n * [ERC721Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Revealable)\n * or [ERC1155Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155Revealable)\n * interfaces.\n *\n * @example\n * ```tsx\n * import {\n *   useDelayedRevealLazyMint,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: mintNft,\n *     isLoading,\n *     error,\n *   } = useDelayedRevealLazyMint(contract);\n *\n *   const nftData = {\n *     placeholder: {\n *       name: \"My NFT\",\n *       description: \"This is my NFT\",\n *       image: \"ipfs://example.com/my-nft.png\", // Accepts any URL or File type\n *     },\n *     metadatas: [\n *       {\n *         name: \"My NFT\",\n *         description: \"This is my NFT\",\n *         image: \"ipfs://example.com/my-nft.png\", // Accepts any URL or File type\n *       },\n *     ],\n *     password: \"{{password}}\", // Password to be used for encryption\n *   };\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() => mintNft(nftData)}\n *     >\n *       Mint NFTs\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a {@link DropContract}\n * @param onProgress - an optional callback that will be called with the progress of the upload\n * @returns Mutation object to lazy mint a batch of NFTs\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useDelayedRevealLazyMint(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object as argument with below properties:\n *\n * #### metadatas\n * An array of metadata objects, representing the metadata of the NFTs to be lazy-minted. Each metadata object must conform to the [standard metadata properties](https://docs.opensea.io/docs/metadata-standards).\n *\n * #### password\n * The password used to encrypt the metadatas.\n *\n * __The password CANNOT be recovered once it is set. If you lose the password, you will not be able to reveal the metadata.__\n *\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @delayedReveal\n */ function useDelayedRevealLazyMint(contract, onProgress) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        requiredParamInvariant(contract, \"contract is undefined\");\n        let options;\n        if (onProgress) {\n            options = {\n                onProgress\n            };\n        }\n        const { erc721, erc1155 } = getErcs(contract);\n        if (erc721) {\n            return await erc721.revealer.createDelayedRevealBatch(data.placeholder, data.metadatas, data.password, options);\n        }\n        if (erc1155) {\n            return await erc1155.revealer.createDelayedRevealBatch(data.placeholder, data.metadatas, data.password, options);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"contract is not an Erc721 or Erc1155\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for revealing a batch of delayed reveal NFTs using [delayed reveal](https://portal.thirdweb.com/glossary/delayed-reveal).\n *\n * Available to use on contracts that implement the\n * [ERC721Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Revealable)\n * or [ERC1155Revealable](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155Revealable)\n * interfaces.\n *\n * ```jsx\n * import { useRevealLazyMint } from \"@thirdweb-dev/react\";\n *\n * const { mutateAsync, isLoading, error } = useRevealLazyMint(contract);\n * ```\n *\n * @example\n * ```tsx\n * import {\n *   useContract,\n *   useRevealLazyMint,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   // Contract must be an ERC-721 or ERC-1155 contract that implements the ERC721Revealable or ERC1155Revealable interface\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: revealLazyMint,\n *     isLoading,\n *     error,\n *   } = useRevealLazyMint(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         revealLazyMint({\n *           batchId: \"{{batch_id}}\", // ID of the batch to reveal (use useBatchesToReveal to get the batch IDs)\n *           password: \"{{password}}\", // Password to reveal the batch\n *         })\n *       }\n *     >\n *       Reveal Lazy Mint\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `RevealableContract`\n * @twfeature ERC721Revealable | ERC1155Revealable\n * @delayedReveal\n */ function useRevealLazyMint(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        requiredParamInvariant(contract, \"contract is undefined\");\n        const { erc721, erc1155 } = getErcs(contract);\n        if (erc721) {\n            return await erc721.revealer.reveal(data.batchId, data.password);\n        }\n        if (erc1155) {\n            return await erc1155.revealer.reveal(data.batchId, data.password);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"contract is not an Erc721 or Erc1155\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/** **********************/ /**     READ  HOOKS     **/ /** **********************/ /**\n * Hook for getting a specific listing on a `Marketplace` contract.\n *\n * __This hook is only available for `Marketplace` contracts__\n *\n * If you are using [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3),\n * use `useDirectListing` or `useEnglishAuction` instead.\n *\n * @example\n *\n * ```jsx\n * import { useContract, useListing } from \"@thirdweb-dev/react\";\n *\n * const listingId = 0;\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data, isLoading, error } = useListing(contract, listingId);\n * }\n * ```\n *\n *\n * @param contract - Instance of a marketplace contract\n * @param listingId - The listing id to check\n *\n * @returns\n * Query Result object that includes the desired listing.\n *\n * The hook's `data` property, once loaded, is an object containing the desired listing data.\n *\n * The exact shape of the object depends on the type of listing.\n *\n * For auctions, it will be a\n * `AuctionListing` object.\n * For direct listings, it will be a `DirectListing` object.\n *\n * ```jsx\n * AuctionListing | DirectListing | undefined;\n * ```\n *\n * You can use the shared `type` property to determine which type of listing is being returned.\n *\n * ```ts\n * interface AuctionListing {\n *   // The id of the listing\n *   id: string;\n *\n *   // The address of the asset being listed.\n *   assetContractAddress: string;\n *\n *   // The ID of the token to list.\n *   tokenId: BigNumberish;\n *\n *   // The asset being listed.\n *   asset: NFTMetadata;\n *\n *   // The start time of the listing.\n *   startTimeInEpochSeconds: BigNumberish;\n *\n *   // Number of seconds until the auction expires.\n *   endTimeInEpochSeconds: BigNumberish;\n *\n *   // The quantity of tokens to include in the listing.\n *   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: BigNumberish;\n *\n *   // The address of the currency to accept for the listing.\n *   currencyContractAddress: string;\n *\n *   // The reserve price is the minimum price that a bid must be in order to be accepted.\n *   reservePrice: BigNumber;\n *\n *   // The buyout price of the listing.\n *   buyoutPrice: BigNumber;\n *\n *   // The `CurrencyValue` of the buyout price listing.\n *   // Useful for displaying the price information.\n *   buyoutCurrencyValuePerToken: CurrencyValue;\n *\n *   // The `CurrencyValue` of the reserve price.\n *   // Useful for displaying the price information.\n *   reservePriceCurrencyValuePerToken: CurrencyValue;\n *\n *   // The address of the seller.\n *   sellerAddress: string;\n *\n *   // The type of listing.\n *   type: ListingType.Auction;\n * }\n *\n * interface DirectListing {\n *   // The id of the listing.\n *   id: string;\n *\n *   // The address of the asset being listed.\n *   assetContractAddress: string;\n *\n *   // The ID of the token to list.\n *   tokenId: BigNumberish;\n *\n *   // The asset being listed.\n *   asset: NFTMetadata;\n *\n *   // The start time of the listing.\n *   startTimeInSeconds: BigNumberish;\n *\n *   // Number of seconds until the listing expires.\n *   secondsUntilEnd: BigNumberish;\n *\n *   // The quantity of tokens to include in the listing.\n *   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: BigNumberish;\n *\n *   // The address of the currency to accept for the listing.\n *   currencyContractAddress: string;\n *\n *   // The `CurrencyValue` of the listing. Useful for displaying the price information.\n *   buyoutCurrencyValuePerToken: CurrencyValue;\n *\n *   // The buyout price of the listing.\n *   buyoutPrice: BigNumber;\n *\n *   // The address of the seller.\n *   sellerAddress: string;\n *\n *   // The type of listing.\n *   type: ListingType.Direct;\n * }\n * ```\n *\n * @marketplace\n */ function useListing(contract, listingId) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.getListing(contractAddress, listingId), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(listingId, \"No listing id provided\");\n        return contract.getListing(listingId);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook to get a specific direct listing from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * __This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n *\n * For `Marketplace` contracts, use `useListing` instead.\n *\n * @example\n * ```jsx\n * import { useDirectListing, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: directListing,\n *     isLoading,\n *     error,\n *   } = useDirectListing(contract, listingId);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace v3 contract\n * @param listingId - The ID of the listing to get. If the listing is not found (or is not a direct listing), the `error` property will be set in the return value of the hook.\n *\n * @returns\n * The hook's data property, once loaded, is a `DirectListingV3` object, containing the following properties:\n *\n * ```ts\n * {\n *   // The id of the listing.\n *   id: string;\n *   // The address of the creator of listing.\n *   creatorAddress: string;\n *   // The address of the asset being listed.\n *   assetContractAddress: string;\n *   // The ID of the token to list.\n *   tokenId: string;\n *   // The quantity of tokens to include in the listing.\n *   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: string;\n *   // The address of the currency to accept for the listing.\n *   currencyContractAddress: string;\n *   // The `CurrencyValue` of the listing. Useful for displaying the price information.\n *   currencyValuePerToken: CurrencyValue;\n *   // The price to pay per unit of NFTs listed.\n *   pricePerToken: string;\n *   // The asset being listed.\n *   asset: NFTMetadata;\n *   // The start time of the listing.\n *   startTimeInSeconds: number;\n *   // The end time of the listing.\n *   endTimeInSeconds: number;\n *   // Whether the listing is reserved to be bought from a specific set of buyers.\n *   isReservedListing: boolean;\n *   // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n *   status: Status;\n * }\n * ```\n * @twfeature DirectListings\n * @marketplace\n */ function useDirectListing(contract, listingId) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getListing(contractAddress, listingId), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(listingId, \"No listing id provided\");\n        return contract.directListings.getListing(listingId);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook to get an english auction listing from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * **Note: This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.**\n *\n * For `Marketplace`\n * contracts, use `useListing` instead.\n *\n * @example\n * ```jsx\n * import { useEnglishAuction, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: englishAuction,\n *     isLoading,\n *     error,\n *   } = useEnglishAuction(contract, listingId);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace v3 contract\n * @param auctionId -\n * the auction id to check.  If the listing with this ID cannot be found (or is not an auction), the `error` property will be set.\n *\n * @returns\n * The hook's `data` property, once loaded, will be an `EnglishAuction` object, containing the following properties:\n *\n * ```ts\n * {\n *   // The id of the auction\n *   id: string;\n *   // The address of the creator of auction.\n *   creatorAddress: string;\n *   // The address of the asset being auctioned.\n *   assetContractAddress: string;\n *   // The ID of the token to auction.\n *   tokenId: string;\n *   // The quantity of tokens to include in the auction.\n *   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: string;\n *   // The address of the currency to accept for the auction.\n *   currencyContractAddress: string;\n *   // The minimum price that a bid must be in order to be accepted.\n *   minimumBidAmount: string;\n *   // The `CurrencyValue` of the minimum bid amount.\n *   // Useful for displaying the price information.\n *   minimumBidCurrencyValue: CurrencyValue;\n *   // The buyout price of the auction.\n *   buyoutBidAmount: string;\n *   // The `CurrencyValue` of the buyout price.\n *   // Useful for displaying the price information.\n *   buyoutCurrencyValue: CurrencyValue;\n *   // This is a buffer e.g. x seconds.\n *   // If a new winning bid is made less than x seconds before expirationTimestamp, the\n *   // expirationTimestamp is increased by x seconds.\n *   timeBufferInSeconds: number;\n *   // This is a buffer in basis points e.g. x%.\n *   // To be considered as a new winning bid, a bid must be at least x% greater than\n *   // the current winning bid.\n *   bidBufferBps: number;\n *   // The start time of the auction.\n *   startTimeInSeconds: number;\n *   // The end time of the auction.\n *   endTimeInSeconds: number;\n *   // The asset being auctioned.\n *   asset: NFTMetadata;\n *   // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n *   status: Status;\n * }\n * ```\n *\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useEnglishAuction(contract, auctionId) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAuction(contractAddress, auctionId), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(auctionId, \"No auction id provided\");\n        return contract.englishAuctions.getAuction(auctionId);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook for getting all listings (including expired ones) from a `Marketplace` contract.\n *\n * __This hook is only available for `Marketplace` contracts__\n *\n * If you are using [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3),\n * use `useDirectListings` or `useEnglishAuctions` instead.\n *\n * @example\n * ```jsx\n * import { useContract, useListings } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data, isLoading, error } = useListings(contract);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace contract\n *\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * ```jsx\n * import { useContract, useListings } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data, isLoading, error } = useListings(\n *     contract,\n *     {\n *       count: 100, // number of listings to fetch\n *       offeror: \"{{offeror_address}}\", // only show listings with offers from this address\n *       seller: \"{{seller_address}}\", // only show listings where this address is the seller\n *       start: 0, // start at this listing index (pagination)\n *       tokenContract: \"{{token_contract_address}}\", // only show listings from this collection\n *       tokenId: \"{{token_id}}\", // only show listings for this token\n *     },\n *   );\n * }\n * ```\n *\n * @returns Query result object that includes an array of listings\n *\n * The hook's `data` property, once loaded, is an array of listing objects.\n *\n * The exact shape of each object depends on the type of listing.\n *\n * For auctions, it will be a\n * `AuctionListing` object.\n * For direct listings, it will be a `DirectListing` object.\n *\n * ```ts\n * (AuctionListing | DirectListing)[] | undefined;\n * ```\n *\n * You can use the shared `type` property to determine which type of listing is being returned.\n *\n * ```ts\n * interface AuctionListing {\n *\n *    // The id of the listing\n *   id: string;\n *\n *    // The address of the asset being listed.\n *   assetContractAddress: string;\n *\n *    // The ID of the token to list.\n *   tokenId: BigNumberish;\n *\n *    // The asset being listed.\n *   asset: NFTMetadata;\n *\n *    // The start time of the listing.\n *   startTimeInEpochSeconds: BigNumberish;\n *\n *    // Number of seconds until the auction expires.\n *   endTimeInEpochSeconds: BigNumberish;\n *\n *    // The quantity of tokens to include in the listing.\n *    // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: BigNumberish;\n *\n *    // The address of the currency to accept for the listing.\n *   currencyContractAddress: string;\n *\n *    // The reserve price is the minimum price that a bid must be in order to be accepted.\n *   reservePrice: BigNumber;\n *\n *    // The buyout price of the listing.\n *   buyoutPrice: BigNumber;\n *\n *    // The `CurrencyValue` of the buyout price listing.\n *    // Useful for displaying the price information.\n *   buyoutCurrencyValuePerToken: CurrencyValue;\n *\n *    // The `CurrencyValue` of the reserve price.\n *    // Useful for displaying the price information.\n *   reservePriceCurrencyValuePerToken: CurrencyValue;\n *\n *    // The address of the seller.\n *   sellerAddress: string;\n *\n *   // type of listing\n *   type: ListingType.Auction;\n * }\n *\n * interface DirectListing {\n *\n *    // The id of the listing.\n *   id: string;\n *\n *    // The address of the asset being listed.\n *   assetContractAddress: string;\n *\n *    // The ID of the token to list.\n *   tokenId: BigNumberish;\n *\n *    // The asset being listed.\n *   asset: NFTMetadata;\n *\n *    // The start time of the listing.\n *   startTimeInSeconds: BigNumberish;\n *\n *    // Number of seconds until the listing expires.\n *   secondsUntilEnd: BigNumberish;\n *\n *    // The quantity of tokens to include in the listing.\n *    // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: BigNumberish;\n *\n *    // The address of the currency to accept for the listing.\n *   currencyContractAddress: string;\n *\n *    // The `CurrencyValue` of the listing. Useful for displaying the price information.\n *   buyoutCurrencyValuePerToken: CurrencyValue;\n *\n *    // The buyout price of the listing.\n *   buyoutPrice: BigNumber;\n *\n *    // The address of the seller.\n *   sellerAddress: string;\n *\n *   // type of listing\n *   type: ListingType.Direct;\n * ```\n *\n * @marketplace\n */ function useListings(contract, filter) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.getAllListings(contractAddress, filter), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.getAllListings(filter);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook to get all the direct listings from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * __This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n *\n * For `Marketplace` contracts, use `useListings` instead.\n *\n * @example\n * ```jsx\n * import { useDirectListings, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: directListings,\n *     isLoading,\n *     error,\n *   } = useDirectListings(contract);\n * }\n * ```\n *\n *\n * @param contract - Instance of a `MarketplaceV3` contract\n *\n * @param filter -\n * filter to pass to the query for the sake of pagination & filtering\n *\n * ```tsx\n * import { useDirectListings, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: directListings,\n *     isLoading,\n *     error,\n *   } = useDirectListings(\n *     contract,\n *     {\n *       count: 100, // Number of listings to fetch\n *       offeror: \"{{offeror_address}}\", // Has offers from this address\n *       seller: \"{{seller_address}}\", // Being sold by this address\n *       start: 0, // Start from this index (pagination)\n *       tokenContract: \"{{token_contract_address}}\", // Only show listings for NFTs from this collection\n *       tokenId: \"{{token_id}}\", // Only show listings with this NFT ID\n *     },\n *   );\n * }\n * ```\n *\n * @returns\n * The hook's data property, once loaded, is a `DirectListingV3` object, containing the following properties:\n *\n * ```ts\n * {\n *   // The id of the listing.\n *   id: string;\n *   // The address of the creator of listing.\n *   creatorAddress: string;\n *   // The address of the asset being listed.\n *   assetContractAddress: string;\n *   // The ID of the token to list.\n *   tokenId: string;\n *   // The quantity of tokens to include in the listing.\n *   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: string;\n *   // The address of the currency to accept for the listing.\n *   currencyContractAddress: string;\n *   // The `CurrencyValue` of the listing. Useful for displaying the price information.\n *   currencyValuePerToken: CurrencyValue;\n *   // The price to pay per unit of NFTs listed.\n *   pricePerToken: string;\n *   // The asset being listed.\n *   asset: NFTMetadata;\n *   // The start time of the listing.\n *   startTimeInSeconds: number;\n *   // The end time of the listing.\n *   endTimeInSeconds: number;\n *   // Whether the listing is reserved to be bought from a specific set of buyers.\n *   isReservedListing: boolean;\n *   // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n *   status: Status;\n * }\n * ```\n *\n * @twfeature DirectListings\n * @marketplace\n */ function useDirectListings(contract, filter) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getAll(contractAddress, filter), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.directListings.getAll(filter);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook to get a list of valid direct listings from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * A listing is considered valid if the:\n *\n * - Seller still owns the NFT\n * - Listing has not expired (time is before `endTimeInSeconds`)\n * - Listing has not been canceled\n * - Listing has not been bought out (all `quantity` of the NFTs have not been purchased)\n *\n *\n * **Note: This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.**\n *\n * For `Marketplace` contracts, use `useActiveListings` instead.\n *\n * @example\n * ```jsx\n * import { useValidDirectListings, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: directListings,\n *     isLoading,\n *     error,\n *   } = useValidDirectListings(contract);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace v3 contract\n *\n * @param filter - filter to pass to the query for the sake of pagination & filtering\n * ```jsx\n * import { useValidDirectListings, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: directListings,\n *     isLoading,\n *     error,\n *   } = useValidDirectListings(\n *     contract,\n *     {\n *       count: 100, // Number of listings to fetch\n *       offeror: \"{{offeror_address}}\", // Has offers from this address\n *       seller: \"{{seller_address}}\", // Being sold by this address\n *       start: 0, // Start from this index (pagination)\n *       tokenContract: \"{{token_contract_address}}\", // Only show NFTs from this collection\n *       tokenId: \"{{token_id}}\", // Only show NFTs with this token ID\n *     },\n *   );\n * }\n * ```\n *\n * @returns\n * The hook's `data` property, once loaded, is an array of `DirectListingV3` objects, each containing the following properties:\n *\n * ```ts\n * Array<{\n *   // The id of the listing.\n *   id: string;\n *\n *   // The address of the creator of listing.\n *   creatorAddress: string;\n *\n *   // The address of the asset being listed.\n *   assetContractAddress: string;\n *\n *   // The ID of the token to list.\n *   tokenId: string;\n *\n *   // The quantity of tokens to include in the listing.\n *   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: string;\n *\n *   // The address of the currency to accept for the listing.\n *   currencyContractAddress: string;\n *\n *   // The `CurrencyValue` of the listing. Useful for displaying the price information.\n *   currencyValuePerToken: CurrencyValue;\n *\n *   // The price to pay per unit of NFTs listed.\n *   pricePerToken: string;\n *\n *   // The asset being listed.\n *   asset: NFTMetadata;\n *\n *   // The start time of the listing.\n *   startTimeInSeconds: number;\n *\n *   // The end time of the listing.\n *   endTimeInSeconds: number;\n *\n *   // Whether the listing is reserved to be bought from a specific set of buyers.\n *   isReservedListing: boolean;\n *\n *   // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n *   status: Status;\n * }>;\n * ```\n *\n * @twfeature DirectListings\n * @marketplace\n */ function useValidDirectListings(contract, filter) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getAllValid(contractAddress, filter), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.directListings.getAllValid(filter);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook to get a list of all English auctions from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * **Note: This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.**\n *\n * For `Marketplace` contracts, use `useListings` instead.\n *\n * @example\n *\n * ```jsx\n * import { useEnglishAuctions, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: englishAuctions,\n *     isLoading,\n *     error,\n *   } = useEnglishAuctions(contract);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace v3 contract\n *\n * @param filter -\n * filter to pass to the query for the sake of pagination & filtering\n *\n * ```ts\n * import { useEnglishAuctions, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: englishAuctions,\n *     isLoading,\n *     error,\n *   } = useEnglishAuctions(\n *     contract,\n *     {\n *       count: 100, // Number of auctions to fetch\n *       offeror: \"{{offeror_address}}\", // Has offers from this address\n *       seller: \"{{seller_address}}\", // Being sold by this address\n *       start: 0, // Start from this index (pagination)\n *       tokenContract: \"{{token_contract_address}}\", // Only show NFTs from this collection\n *       tokenId: \"{{token_id}}\", // Only show NFTs with this ID\n *     },\n *   );\n * }\n * ```\n *\n * @returns\n * The hook's data property, once loaded, is an array of EnglishAuction objects, each containing the following properties:\n *\n * ```ts\n * Array<{\n *   // The id of the auction\n *   id: string;\n *\n *   // The address of the creator of auction.\n *   creatorAddress: string;\n *\n *   // The address of the asset being auctioned.\n *   assetContractAddress: string;\n *\n *   // The ID of the token to auction.\n *   tokenId: string;\n *\n *   // The quantity of tokens to include in the auction.\n *   //  For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: string;\n *\n *   // The address of the currency to accept for the auction.\n *   currencyContractAddress: string;\n *\n *   // The minimum price that a bid must be in order to be accepted.\n *   minimumBidAmount: string;\n *\n *   // The `CurrencyValue` of the minimum bid amount.\n *   // Useful for displaying the price information.\n *   minimumBidCurrencyValue: CurrencyValue;\n *\n *   // The buyout price of the auction.\n *   buyoutBidAmount: string;\n *\n *   // The `CurrencyValue` of the buyout price.\n *   // Useful for displaying the price information.\n *   buyoutCurrencyValue: CurrencyValue;\n *\n *   // This is a buffer e.g. x seconds.\n *   // If a new winning bid is made less than x seconds before expirationTimestamp, the\n *   // expirationTimestamp is increased by x seconds.\n *   timeBufferInSeconds: number;\n *\n *   // This is a buffer in basis points e.g. x%.\n *   // To be considered as a new winning bid, a bid must be at least x% greater than\n *   // the current winning bid.\n *   bidBufferBps: number;\n *\n *   // The start time of the auction.\n *   startTimeInSeconds: number;\n *\n *   // The end time of the auction.\n *   endTimeInSeconds: number;\n *\n *   // The asset being auctioned.\n *   asset: NFTMetadata;\n *\n *   // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n *   status: Status;\n * }>;\n * ```\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useEnglishAuctions(contract, filter) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAll(contractAddress, filter), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.englishAuctions.getAll(filter);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook to get all valid English auctions from a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * A listing is considered valid if the:\n *\n * - Auction has not expired (i.e. current time is before the end time of the auction)\n * - Auction has not been canceled\n * - Auction has not been bought out (all quantity has been sold)\n *\n * __This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n *\n * For [Marketplace](https://thirdweb.com/thirdweb.eth/Marketplace)\n * contracts, use [useActiveListings](/react/react.useactivelistings) instead.\n *\n * @example\n *\n * ```jsx\n * import { useValidEnglishAuctions, useContract } from \"@thirdweb-dev/react\";\n *\n * // Your smart contract address\n * const contractAddress = \"{{contract_address}}\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: englishAuctions,\n *     isLoading,\n *     error,\n *   } = useValidEnglishAuctions(contract);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace v3 contract\n *\n * @param filter -\n * The `filter` object allows you to filter the auctions returned by the hook.\n *\n * ```jsx\n * import { useEnglishAuctions, useContract } from \"@thirdweb-dev/react\";\n *\n * // Your smart contract address\n * const contractAddress = \"{{contract_address}}\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: englishAuctions,\n *     isLoading,\n *     error,\n *   } = useEnglishAuctions(\n *     contract,\n *     // highlight-start\n *     {\n *       count: 100, // Number of auctions to fetch\n *       offeror: \"{{offeror_address}}\", // Has offers from this address\n *       seller: \"{{seller_address}}\", // Being sold by this address\n *       start: 0, // Start from this index (pagination)\n *       tokenContract: \"{{token_contract_address}}\", // Only show NFTs from this collection\n *       tokenId: \"{{token_id}}\", // Only show NFTs with this ID\n *     },\n *     // highlight-end\n *   );\n * }\n * ```\n *\n * @returns A Query Result object that includes an array of english auctions\n * The hook's `data` property, once loaded, is an\n * array of `EnglishAuction` objects, each containing the following properties:\n *\n * ```ts\n * Array<{\n *   // The id of the auction\n *   id: string;\n *\n *   // The address of the creator of auction.\n *   creatorAddress: string;\n *\n *   // The address of the asset being auctioned.\n *   assetContractAddress: string;\n *\n *   // The ID of the token to auction.\n *   tokenId: string;\n *\n *   // The quantity of tokens to include in the auction.\n *   // For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n *   quantity: string;\n *\n *   // The address of the currency to accept for the auction.\n *   currencyContractAddress: string;\n *\n *   // The minimum price that a bid must be in order to be accepted.\n *   minimumBidAmount: string;\n *\n *   // The `CurrencyValue` of the minimum bid amount.\n *   // Useful for displaying the price information.\n *   minimumBidCurrencyValue: CurrencyValue;\n *\n *   // The buyout price of the auction.\n *   buyoutBidAmount: string;\n *\n *   // The `CurrencyValue` of the buyout price.\n *   // Useful for displaying the price information.\n *   buyoutCurrencyValue: CurrencyValue;\n *\n *   // This is a buffer e.g. x seconds.\n *   // If a new winning bid is made less than x seconds before expirationTimestamp, the\n *   // expirationTimestamp is increased by x seconds.\n *   timeBufferInSeconds: number;\n *\n *   // This is a buffer in basis points e.g. x%.\n *   // To be considered as a new winning bid, a bid must be at least x% greater than\n *   // the current winning bid.\n *   bidBufferBps: number;\n *\n *   // The start time of the auction.\n *   startTimeInSeconds: number;\n *\n *   // The end time of the auction.\n *   endTimeInSeconds: number;\n *\n *   // The asset being auctioned.\n *   asset: NFTMetadata;\n *\n *   // Whether the listing is CREATED, COMPLETED, or CANCELLED.\n *   status: Status;\n * }>;\n * ```\n *\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useValidEnglishAuctions(contract, filter) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getAllValid(contractAddress, filter), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.englishAuctions.getAllValid(filter);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook for getting the total number of listings on a `Marketplace` contract.\n *\n * __This hook is only available for `Marketplace` contracts__\n *\n * If you are using [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3),\n * use `useDirectListingsCount` or `useEnglishAuctionsCount` instead.\n *\n * @example\n * ```jsx\n * import { useContract, useListingsCount } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data: listingsCount, isLoading, error } = useListingsCount(contract);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace contract\n *\n * @returns\n * The hook's `data` property, once loaded, is a `BigNumber` containing the total number of listings on the contract.\n *\n * @marketplace\n */ function useListingsCount(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.getTotalCount(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.getTotalCount();\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Hook to get the total number of direct listings on a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * __This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n *\n * For `Marketplace` contracts, use `useListingsCount` instead.\n *\n * @example\n * ```jsx\n * import { useDirectListingsCount, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: listingsCount,\n *     isLoading,\n *     error,\n *   } = useDirectListingsCount(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `MarketplaceV3` contract\n *\n * @returns\n * The hook's `data` property, once loaded, is a `BigNumber` containing the number of direct listings on the Marketplace V3 contract.\n *\n * @twfeature DirectListings\n * @marketplace\n */ function useDirectListingsCount(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.directListings.getTotalCount(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.directListings.getTotalCount();\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Hook to get the total number of direct listings on a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * __This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n *\n * For `Marketplace` contracts, use `useListingsCount` instead.\n *\n * @example\n * ```jsx\n * import { useEnglishAuctionsCount, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: englishAuctionsCount,\n *     isLoading,\n *     error,\n *   } = useEnglishAuctionsCount(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `MarketplaceV3` contract\n *\n * @returns\n * The hook's `data` property, once loaded, is a `BigNumber` representing the number of direct listings on the Marketplace V3 contract.\n *\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useEnglishAuctionsCount(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getTotalCount(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.englishAuctions.getTotalCount();\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Hook for fetching all active listings from a `Marketplace` contract.\n *\n * __Note: This hook is only for Marketplace contracts. For Marketplace V3 contracts, use `useValidDirectListings` or `useValidEnglishAuctions` instead__\n *\n *\n * @example\n * ```javascript\n * import { useActiveListings, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data, isLoading, error } = useActiveListings(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `Marketplace` contract\n * @param filter -\n * By default, the hook returns all active listings from the marketplace.\n *\n * You can filter the results by providing a filter object as the second argument for the sake of pagination & filtering\n *\n * ```tsx\n * import { useActiveListings, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *\n *   const { data, isLoading, error } = useActiveListings(\n *     contract,\n *     {\n *       seller: \"{{wallet_address}}\", // Filter by seller\n *       tokenContract: \"{{contract_address}}\", // Filter by token contract\n *       offeror: \"{{wallet_address}}\", // Filter by offeror\n *       tokenId: \"{{token_id}}\", // Filter by token ID\n *       count: 10, // Limit the number of results\n *       start: 0, // Start from the nth result (useful for pagination)\n *     },\n *   );\n * }\n * ```\n *\n * @returns\n * The hook's `data` property, once loaded, returns an array containing both `AuctionListing` and `DirectListing` objects.\n *\n * Use the `type` property to determine which type of listing each one is.\n *\n * #### AuctionListing\n *\n * ```ts\n * {\n *     // The id of the listing\n *     id: string;\n *\n *     // The address of the asset being listed.\n *     assetContractAddress: string;\n *\n *     // The ID of the token to list.\n *     tokenId: BigNumberish;\n *\n *     // The asset being listed.\n *     asset: NFTMetadata;\n *\n *     // The start time of the listing.\n *     startTimeInEpochSeconds: BigNumberish;\n *\n *     // Number of seconds until the auction expires.\n *     endTimeInEpochSeconds: BigNumberish;\n *\n *     // The quantity of tokens in the listing.\n *     // For ERC721s, this value should always be 1\n *     quantity: BigNumberish;\n *\n *     // The address of the currency to accept for the listing.\n *     currencyContractAddress: string;\n *\n *     // The reserve price is the minimum price that a bid must be in order to be accepted.\n *     reservePrice: BigNumber;\n *\n *     // The buyout price of the listing.\n *     buyoutPrice: BigNumber;\n *\n *     // The `CurrencyValue` of the buyout price listing.\n *     // Useful for displaying the price information.\n *     buyoutCurrencyValuePerToken: CurrencyValue;\n *\n *     // The `CurrencyValue` of the reserve price.\n *     // Useful for displaying the price information.\n *     reservePriceCurrencyValuePerToken: CurrencyValue;\n *\n *     // The address of the seller.\n *     sellerAddress: string;\n *\n *     // Listing type Enum\n *     type: ListingType.Auction;\n * }\n * ```\n *\n * ### DirectListing\n *\n * ```ts\n * {\n *     // The id of the listing.\n *     id: string;\n *\n *     //The address of the asset being listed.\n *     assetContractAddress: string;\n *\n *     // The ID of the token to list.\n *     tokenId: BigNumberish;\n *\n *     //The asset being listed.\n *     asset: NFTMetadata;\n *\n *     //The start time of the listing.\n *     startTimeInSeconds: BigNumberish;\n *\n *     //Number of seconds until the listing expires.\n *     secondsUntilEnd: BigNumberish;\n *\n *     // The quantity of tokens to include in the listing.\n *     // For ERC721s, this value should always be 1\n *     quantity: BigNumberish;\n *\n *     // The address of the currency to accept for the listing.\n *     currencyContractAddress: string;\n *\n *     // The `CurrencyValue` of the listing. Useful for displaying the price information.\n *     buyoutCurrencyValuePerToken: CurrencyValue;\n *\n *     // The buyout price of the listing.\n *     buyoutPrice: BigNumber;\n *\n *     // The address of the seller.\n *     sellerAddress: string;\n *\n *     // Listing type Enum\n *     type: ListingType.Direct;\n * }\n * ```\n *\n * @marketplace\n */ function useActiveListings(contract, filter) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.getActiveListings(contractAddress, filter), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return contract.getActiveListings(filter);\n    }, {\n        enabled: !!contract,\n        keepPreviousData: true\n    });\n}\n/**\n * Hook for getting the winning bid of an auction listing on a `Marketplace` contract.\n *\n * @example\n *\n * ```jsx\n * import { useContract, useWinningBid } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data, isLoading, error } = useWinningBid(contract, listingId);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace contract\n *\n * @param listingId -\n * The ID of the listing to get the winning bid for.\n * If the listing cannot be found, is not an auction listing, or is not active, the `error` property will be set.\n *\n * @returns\n * Query result object that includes the `Offer` that is winning the auction\n * The hook's `data` property, once loaded, is an object of type `Offer`, or `undefined` if no winning bid exists.\n *\n * ```ts\n * {\n *    // The id of the listing.\n *   listingId: BigNumberish;\n *\n *    // The address of the buyer who made the offer.\n *   buyerAddress: string;\n *\n *    // The quantity of tokens to be bought.\n *   quantityDesired: BigNumberish;\n *\n *    // The amount of coins offered per token.\n *   pricePerToken: BigNumber;\n *\n *    // The `CurrencyValue` of the listing. Useful for displaying the price information.\n *   currencyValue: CurrencyValue;\n *\n *    // The currency contract address of the offer token.\n *   currencyContractAddress: string;\n * } | undefined;\n * ```\n *\n * @marketplace\n */ function useWinningBid(contract, listingId) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getWinningBid(contractAddress, listingId), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(listingId, \"No listing id provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.auction.getWinningBid, \"contract does not support auction.getWinningBid\");\n        return contract.auction.getWinningBid(listingId);\n    }, {\n        enabled: !!contract && listingId !== undefined\n    });\n}\n/**\n * Hook to get the winning bid for an English auction listing from a\n * [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * @example\n * ```jsx\n * import { useEnglishAuctionWinningBid, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     data: winningBid,\n *     isLoading,\n *     error,\n *   } = useEnglishAuctionWinningBid(contract, listingId);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace contract\n *\n * @param auctionId - The auction id to check\n * If the listing cannot be found, or is not an English auction, the `error` property will be set.\n *\n * @returns\n * If there are no bids, the `data` property will be `undefined`. Use the `isLoading` property to differentiate between\n * the loading state and the no bids state.\n *\n * If there is a bid, the hook's `data` property, once loaded, will be an object of type `Bid`, containing the following properties:\n *\n * ```ts\n * {\n *   // The id of the auction.\n *   auctionId: string;\n *   // The address of the buyer who made the offer.\n *   bidderAddress: string;\n *   // The currency contract address of the offer token.\n *   currencyContractAddress: string;\n *   // The amount of coins offered per token.\n *   bidAmount: string;\n *   // The `CurrencyValue` of the listing. Useful for displaying the price information.\n *   bidAmountCurrencyValue: {\n *     symbol: string;\n *     value: BigNumber;\n *     name: string;\n *     decimals: number;\n *     displayValue: string;\n *   }\n * }\n * ```\n *\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useEnglishAuctionWinningBid(contract, auctionId) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.englishAuctions.getWinningBid(contractAddress, auctionId), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(auctionId, \"No auction id provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.englishAuctions.getWinningBid, \"contract does not support englishAuctions.getWinningBid\");\n        return contract.englishAuctions.getWinningBid(auctionId);\n    }, {\n        enabled: !!contract && auctionId !== undefined\n    });\n}\n/**\n * Hook for getting the winner of an auction (or english auction) on a `Marketplace` or [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * @example\n * ```javascript\n * import { useAuctionWinner, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data, isLoading, error } = useAuctionWinner(\n *     contract,\n *     listingId, // The listing id of the item that you want to get the auction winner for\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Marketplace` or `MarketplaceV3` contract\n *\n * @param listingId -\n * The listing ID of the item that you want to get the auction winner for.\n *\n * The listing must be an auction (or english auction) listing, the hook will populate the error property if it is not.\n *\n * @returns\n * The hook's `data` property, once loaded, contains a `string` representing the address of the auction winner, or `undefined` if there is no winner.\n *\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useAuctionWinner(contract, listingId) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getWinner(contractAddress, listingId), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(listingId, \"No listing id provided\");\n        const isV1 = isMarketplaceV1(contract);\n        if (isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.auction.getWinner, \"contract does not support auction.getWinner\");\n            return contract.auction.getWinner(listingId);\n        } else if (!isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.englishAuctions.getWinner, \"contract does not support englishAuctions.getWinner\");\n            return contract.englishAuctions.getWinner(listingId);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Contract is not a valid marketplace contract\");\n    }, {\n        enabled: !!contract && listingId !== undefined\n    });\n}\n/**\n * Hook for determining the current bid buffer on a `Marketplace` or [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * The bid buffer is what percentage higher the next bid must be than the current highest bid, or the starting price if there are no bids.\n *\n * @example\n * ```javascript\n * import { useBidBuffer, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const {\n *     data: bidBuffer,\n *     isLoading,\n *     error,\n *   } = useBidBuffer(contract, listingId);\n * ```\n *\n * @param contract - Instance of a `Marketplace` or `MarketplaceV3` contract\n *\n * @param listingId -\n * The listing ID of the item that you want to get the bid buffer for.\n * The listing must be an auction (or english auction) listing, the hook will populate the `error` property if it is not.\n *\n * @returns\n * The hook's `data` property, once loaded, returns a `BigNumber` value representing the current bid buffer.\n *\n * The `bidBuffer` value returned is in percentage format.\n * For example, a value of `500` means that the next bid must be 5% higher than the current highest bid.\n *\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useBidBuffer(contract, listingId) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getBidBufferBps(contractAddress, listingId), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        const isV1 = isMarketplaceV1(contract);\n        if (isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.getBidBufferBps, \"contract does not support getBidBufferBps\");\n            return contract.getBidBufferBps();\n        } else if (!isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.englishAuctions.getBidBufferBps, \"contract does not support englishAuctions.getBidBufferBps\");\n            requiredParamInvariant(listingId, \"No listing id provided\");\n            return ethers__WEBPACK_IMPORTED_MODULE_21__.BigNumber.from(contract.englishAuctions.getBidBufferBps(listingId));\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Contract is not a valid marketplace contract\");\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Hook for getting the minimum value a bid must be to be valid\n * in an auction listing on a `Marketplace` or\n * [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * Takes into account the current highest bid, or the reserve price if there is no bid,\n * and increments it by the bid buffer to calculate the minimum next bid.\n *\n * @example\n * ```jsx\n * import { useContract, useMinimumNextBid } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data, isLoading, error } = useMinimumNextBid(contract, listingId);\n * }\n * ```\n *\n * @param contract - Instance of a marketplace contract\n *\n * @param listingId -\n * The ID of the listing to get the minimum next bid for.\n *\n * If the listing cannot be found, is not an auction listing, or is not active, the `error` property will be set.\n *\n * @returns Query result object that includes the minimum next bid for the auction listing\n * @twfeature EnglishAuction\n * @marketplace\n */ function useMinimumNextBid(contract, listingId) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.marketplace.auction.getMinimumNextBid(contractAddress, listingId), async ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(listingId, \"No listing id provided\");\n        const isV1 = isMarketplaceV1(contract);\n        if (isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.auction.getMinimumNextBid, \"contract does not support auction.getMinimumNextBid\");\n            return contract.auction.getMinimumNextBid(listingId);\n        } else if (!isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.englishAuctions.getMinimumNextBid, \"contract does not support englishAuctions.getMinimumNextBid\");\n            return contract.englishAuctions.getMinimumNextBid(listingId);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Contract is not a valid marketplace contract\");\n    }, {\n        enabled: !!contract && listingId !== undefined\n    });\n}\n/**\n * Hook for getting all of the offers made on a\n * direct listing on a `Marketplace` contract.\n *\n * @example\n * ```jsx\n * import { useOffers, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { data: offers, isLoading, error } = useOffers(contract, listingId);\n * }\n * ```\n *\n * @param contract - Instance of a Marketplace contract\n *\n * @param listingId - The id of the listing to fetch offers for\n * If the listing cannot be found, is not a direct listing, or is not active, the `error` property will be set.\n *\n * @returns\n * This hook uses the `useEvents` hook under the hood to fetch `NewOffer` events for the given listing ID.\n *\n * The return value is an array of `NewOffer` event objects. Each event object has the following properties:\n *\n * ```ts\n * {\n *   offeror: string;\n *   offerId: BigNumber;\n *   assetContract: string;\n *   offer: {\n *     offerId: BigNumber;\n *     offeror: string;\n *     assetContract: string;\n *     tokenId: BigNumber;\n *     quantity: BigNumber;\n *     currency: string;\n *     totalPrice: BigNumber;\n *     expirationTimestamp: BigNumber;\n *     tokenType: \"ERC721\" | \"ERC1155\";\n *     status: \"UNSET\" | \"CREATED\" | \"COMPLETED\" | \"CANCELLED\";\n *   }\n * }\n * ```\n *\n * @marketplace\n */ function useOffers(contract, listingId) {\n    const result = useContractEvents(contract, \"NewOffer\");\n    return {\n        ...result,\n        data: result.data?.filter((ev)=>ev.data.listingId.eq(listingId))?.map((ev)=>ev.data)\n    };\n}\n/** **********************/ /**     WRITE HOOKS     **/ /** **********************/ /**\n * Hook for creating a new direct listing on a `Marketplace`\n * or [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) smart contract.\n *\n * Direct listings require the user to approve the marketplace to transfer the NFTs on their behalf as part of the listing creation process.\n * This is because the marketplace needs permission to execute sales and transfer the NFTs to the buyer when a sale is made.\n *\n * @example\n * ```jsx\n * import {\n *   useCreateDirectListing,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     mutateAsync: createDirectListing,\n *     isLoading,\n *     error,\n *   } = useCreateDirectListing(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         createDirectListing({\n *           assetContractAddress: \"{{asset_contract_address}}\",\n *           tokenId: \"{{token_id}}\",\n *           pricePerToken: \"{{price_per_token}}\",\n *           currencyContractAddress: \"{{currency_contract_address}}\",\n *           isReservedListing: false,\n *           quantity: \"{{quantity}}\",\n *           startTimestamp: new Date(),\n *           endTimestamp: new Date(\n *             new Date().getTime() + 7 * 24 * 60 * 60 * 1000,\n *           ),\n *         })\n *       }\n *     >\n *       Create Direct Listing\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a Marketplace contract\n *\n * @returns Mutation object to create a new direct listing\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useCreateDirectListing(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object as an argument with the following properties:\n *\n * #### assetContractAddress (required)\n * The address of the NFT smart contract that you want to list.\n *\n * #### tokenId (required)\n * The token ID of the NFT that you want to list.\n *\n * #### pricePerToken (required)\n * The price to **buy** each token in the listing.\n *\n * - For ERC721 NFTs, this is the price to buy the NFT outright.\n * - For ERC1155 NFTs, this is the price to `1` quantity of the NFT.\n *\n * #### currencyContractAddress (optional)\n * The address of the currency you want users to pay with and make bids in.\n *\n * You likely want to use the token native to the chain you are on, e.g. Ether on Ethereum.\n *\n * To do that, you can import the `NATIVE_TOKEN_ADDRESS` constant from `@thirdweb-dev/sdk`.\n *\n * The default value is `NATIVE_TOKEN_ADDRESS`.\n *\n * #### isReservedListing (optional)\n * When set to true, the seller must explicitly approve which wallet addresses can buy the NFT.\n *\n * #### quantity (optional)\n * How many tokens to include in the listing.\n *\n * - For ERC721 NFTs, this is always `1`.\n * - For ERC1155 NFTs, this is the quantity of tokens to include in the listing.\n *\n * #### startTimestamp (optional)\n * A `Date` object for the start time of the listing.\n *\n * The default value is `new Date()`, which is the current time.\n *\n * #### endTimestamp (optional)\n * A `Date` object for the end time of the listing (when the listing will expire).\n *\n * @twfeature DirectListings\n * @marketplace\n */ function useCreateDirectListing(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"No wallet connected, cannot create listing\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        const isV1 = isMarketplaceV1(contract);\n        if (isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.direct.createListing, \"contract does not support direct.createListing\");\n            return await contract.direct.createListing(data);\n        } else if (!isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.directListings.createListing, \"contract does not support directListings.createListing\");\n            return await contract.directListings.createListing(data);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Contract is not a valid marketplace contract\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Create multiple direct listings in one batch\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: createDirectListingBatch,\n *     isLoading,\n *     error,\n *   } = useCreateDirectListingBatch(contract);\n *\n *   if (error) {\n *     console.error(\"failed to create direct listing batch\", error);\n *   }\n *   \n *   // Sample data\n *   const directListingData = [\n *     {\n *       assetContractAddress: \"nft-contract-address\",\n *       tokenId: \"token-id-1\",\n *       quantity: \"quantity-1\",\n *       currencyContractAddress: \"currency-address\",\n *       pricePerToken: 1\n *     },\n *     {\n *       assetContractAddress: \"nft-contract-address\",\n *       tokenId: \"token-id-2\",\n *       quantity: 1,\n *       currencyContractAddress: \"currency-address\",\n *       pricePerToken: 0\n *     },\n *   ];\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createDirectListingBatch(directListingData)}\n *     >\n *       Create batch Direct Listing!\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - an instance of a Marketplace contract\n * @returns a mutation object that can be used to create a new batch of direct listings\n * @twfeature DirectListings\n */ function useCreateDirectListingBatch(contract) {\n    const contractAddress = contract?.getAddress();\n    const activeChainId = useSDKChainId();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"No wallet connected, cannot create listing\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.directListings.createListingsBatch, \"contract does not support directListings.createListingsBatch\");\n        return await contract.directListings.createListingsBatch(data);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for creating an auction listing on a `Marketplace` or\n * [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) smart contract.\n *\n * Auction listings hold the NFTs in escrow; requiring the seller to transfer the NFTs to the marketplace contract\n * as part of the listing creation process.\n *\n * Provide your `Marketplace`\n * or\n * [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3)\n * contract as the argument to the hook.\n *\n * Then, provide the information about the listing you want to create as the argument to the mutation.\n *\n * @example\n * ```jsx\n * import {\n *   useCreateAuctionListing,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n * import { NATIVE_TOKEN_ADDRESS } from \"@thirdweb-dev/sdk\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     mutateAsync: createAuctionListing,\n *     isLoading,\n *     error,\n *   } = useCreateAuctionListing(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         createAuctionListing({\n *           tokenId: \"{{token_id}}\", // The ID of the token to list.\n *           assetContractAddress: \"{{asset_contract_address}}\", // The contract address of the asset being listed.\n *           currencyContractAddress: NATIVE_TOKEN_ADDRESS, // The address of the currency to accept for the listing.\n *           quantity: \"{{quantity}}\",\n *           startTimestamp: new Date(),\n *           buyoutBidAmount: \"{{buyout_bid_amount}}\",\n *           minimumBidAmount: \"{{minimum_bid_amount}}\",\n *           endTimestamp: new Date(),\n *           bidBufferBps: \"{{bid_buffer_bps}}\",\n *           timeBufferInSeconds: \"{{time_buffer_in_seconds}}\",\n *         })\n *       }\n *     >\n *       Create Auction Listing\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Marketplace` contract\n *\n * @returns\n * A mutation object to create a new auction listing.\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useCreateAuctionListing(contract);\n * ```\n *\n * ### options\n *\n * The mutation function takes an object of type `NewAuctionListing` or `EnglishAuctionInputParams` as its argument which contains the following properties:\n *\n * #### tokenId (required)\n * The token ID of the NFT you are listing for auction.\n *\n * #### assetContractAddress (required)\n * The smart contract address of the NFT you are listing for auction.\n *\n * #### buyoutBidAmount (required)\n * The price to **buy** each token in the listing.\n *\n * - For ERC721 NFTs, this is the price to buy the NFT outright.\n * - For ERC1155 NFTs, this is the price to `1` quantity of the NFT.\n *\n * #### currencyContractAddress (optional)\n * The address of the currency you want users to pay with and make bids in.\n *\n * You likely want to use the token native to the chain you are on, e.g. Ether on Ethereum.\n *\n * To do that, you can import the `NATIVE_TOKEN_ADDRESS` constant from `@thirdweb-dev/sdk`.\n *\n * The default value is `NATIVE_TOKEN_ADDRESS`.\n *\n *\n * #### quantity (optional)\n * How many tokens to include in the listing.\n *\n * - For ERC721 NFTs, this is always `1`.\n * - For ERC1155 NFTs, this is the quantity of tokens to include in the listing.\n *\n * The default value is `1`.\n *\n * #### minimumBidAmount (required)\n * The minimum price that a bid must be in order to be placed on the listing, per token.\n *\n * Bids that are lower than the reserve price will be rejected by the contract.\n *\n * The default value is `0`.\n *\n *\n * #### startTimestamp (optional)\n * A `Date` object for the start time of the listing.\n *\n * The default value is `new Date()`, which is the current time.\n *\n *\n * #### endTimestamp (optional)\n * A `Date` object for the end time of the listing (when the listing will expire).\n *\n * #### bidBufferBps (optional)\n * Bid buffer in basis points (1/100th of a percent).\n *\n * The bid buffer is what percentage higher the next bid must be than the current highest bid.\n *\n * For example, if you set a bid buffer of `100`, then the next bid must be at least `1%` higher than the current highest bid.\n *\n * #### timeBufferInSeconds (optional)\n * Time buffer in seconds.\n *\n * The time buffer is how much time is added to the listing when a new bid is placed.\n *\n * This is to prevent users from placing a bid at the last second and winning the auction.\n *\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useCreateAuctionListing(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot create listing\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        const isV1 = isMarketplaceV1(contract);\n        if (isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.auction.createListing, \"contract does not support auction.createListing\");\n            return await contract.auction.createListing(data);\n        } else if (!isV1) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.englishAuctions.createAuction, \"contract does not support englishAuctions.createAuction\");\n            return await contract.englishAuctions.createAuction(data);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Contract is not a valid marketplace contract\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for canceling an existing auction or listing on a `Marketplace` contract.\n *\n * __Auction listings cannot be canceled if a bid has been placed__\n *\n * __This hook is only for `Marketplace` contracts.__\n *\n * For [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3)\n * contracts, use `useCancelDirectListing` or `useCancelEnglishAuction` instead.\n *\n * @example\n * ```jsx\n * import { useCancelListing, useContract, Web3Button } from \"@thirdweb-dev/react\";\n * import { ListingType } from \"@thirdweb-dev/sdk\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const {\n *     mutateAsync: cancelListing,\n *     isLoading,\n *     error,\n *   } = useCancelListing(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         cancelListing({\n *           id: \"{{listing_id}}\",\n *           type: ListingType.Direct, // Direct (0) or Auction (1)\n *         })\n *       }\n *     >\n *       Cancel Listing\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a Marketplace contract\n * @returns\n * Mutation object to cancel a listing.\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useCancelListing(contract);\n * ```\n *\n * The `error` property is set if the listing is not active, or was not created by the wallet.\n *\n * ### options\n *\n * The mutation function takes an object with the following properties as an argument:\n *\n * #### listingId\n * The ID of the listing you want to cancel.\n *\n * #### listingType\n * The type of listing you are canceling. Either `ListingType.Direct` (0) or `ListingType.Auction` (1).\n *\n * @marketplace\n */ function useCancelListing(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot create listing\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (data.type === _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_22__.L.Auction) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.auction.cancelListing, \"contract does not support auction.cancelListing\");\n            return await contract.auction.cancelListing(data.id);\n        } else {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.direct.cancelListing, \"contract does not support direct.cancelListing\");\n            return await contract.direct.cancelListing(data.id);\n        }\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for canceling a direct listing on a [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * Direct listings can be canceled at any time, (unless the listing has already been sold).\n * Only the creator of the listing can cancel it.\n *\n * __Note: This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n *\n * For `Marketplace` contracts, use `useCancelListing` instead.\n *\n * @example\n * ```jsx\n * import {\n *   useCancelDirectListing,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n * import { ListingType } from \"@thirdweb-dev/sdk\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     mutateAsync: cancelDirectListing,\n *     isLoading,\n *     error,\n *   } = useCancelDirectListing(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() => cancelDirectListing(listingId)}\n *     >\n *       Cancel Direct Listing\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `MarketplaceV3` contract\n * @returns Mutation object to cancel a direct listing by passing the ID of the listing you want to cancel.\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useCancelDirectListing(contract);\n * ```\n *\n * The mutation function takes the `listingId` as an argument.\n *\n * The `error` property is set if the listing is not active, or was not created by the wallet\n *\n * ### listingId\n *\n * The ID of the listing you want to cancel.\n *\n * @twfeature DirectListings\n * @marketplace\n */ function useCancelDirectListing(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (listingId)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot create listing\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(listingId, \"No listing id provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.directListings.cancelListing, \"contract does not support directListings.cancelListing\");\n        return await contract.directListings.cancelListing(listingId);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for canceling an english auction on a [MarketplaceV3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contract.\n *\n * __English auctions cannot be canceled if a bid has been placed__\n *\n * __This hook is only for [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) contracts.__\n *\n * For `Marketplace` contracts, use `useCancelListing` instead.\n *\n * @example\n * ```jsx\n * import {\n *   useCancelEnglishAuction,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     mutateAsync: cancelEnglishAuction,\n *     isLoading,\n *     error,\n *   } = useCancelEnglishAuction(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() => cancelEnglishAuction(listingId)}\n *     >\n *       Cancel English Auction\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `MarketplaceV3` contract\n *\n * @returns\n * Mutation object to cancel an english auction\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useCancelEnglishAuction(contract);\n * ```\n *\n * The mutation function takes the `listingId` as an argument.\n *\n * The `error` property is set if the listing is not active, cannot be canceled, or was not created by the wallet.\n *\n * ### listingId\n *\n * The ID of the listing you want to cancel.\n *\n * @twfeature EnglishAuctions\n * @marketplace\n */ function useCancelEnglishAuction(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (auctionId)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot create listing\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        requiredParamInvariant(auctionId, \"No auction id provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.englishAuctions.cancelAuction, \"contract does not support englishAuctions.cancelAuction\");\n        return await contract.englishAuctions.cancelAuction(auctionId);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for placing a bid on a `Marketplace` auction listing.\n *\n * Bids have several important properties:\n *\n * - Cannot be canceled once placed.\n * - Are automatically refunded if they are outbid.\n * - Must be higher than the current highest bid by the percentage defined in the bid buffer.\n * - Must be higher than the reserve price (if there is no bid yet).\n *\n * @example\n * ```jsx\n * import { useMakeBid, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { mutateAsync: makeBid, isLoading, error } = useMakeBid(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         makeBid({\n *           listingId: \"1\", // ID of the listing to bid on. Must be an auction.\n *           bid: \"1\", // Uses the currencyContractAddress of the listing.\n *         })\n *       }\n *     >\n *       Make Bid\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Marketplace` contract\n *\n * @returns\n * Mutation object to make a bid on an auction listing\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useMakeBid(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object as an argument with the following properties:\n *\n * #### listingId\n * The ID of the listing to bid on. Must be an auction type listing.\n * (Use `useMakeOffer` for direct listings).\n *\n * If the listing cannot be found, is not an auction, or is not active, the `error` property will be set.\n *\n * #### bid\n * The amount to bid on the listing. Uses the `currencyContractAddress` of the listing.\n *\n * For example, if the listing uses the `NATIVE_TOKEN_ADDRESS` on Ethereum, the bid amount is the amount of ETH to bid. Can be\n * in the form of a number, string, or BigNumber.\n *\n * The bid value **must** be either:\n *\n * - Greater than or equal to the reserve price if there is no current bid.\n * - Greater than the current highest bid by the percentage defined in the bid buffer.\n *\n * Use the `useNextMinimumBid` hook to get the next minimum bid amount required.\n *\n * @marketplace\n */ function useMakeBid(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot make bid\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.auction.makeBid, \"contract does not support auction.makeBid\");\n        return await contract.auction.makeBid(data.listingId, data.bid);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for placing an offer on a `Marketplace` direct listing.\n *\n * @example\n *\n * ```jsx\n * import { useMakeOffer, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { mutateAsync: makeOffer, isLoading, error } = useMakeOffer(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         makeOffer({\n *           listingId: 1, // ID of the listing to make an offer on\n *           pricePerToken: 1, // Price per token to offer (in the listing's currency)\n *           quantity: 1, // Number of NFTs you want to buy (used for ERC1155 NFTs)\n *         })\n *       }\n *     >\n *       Make Bid\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Marketplace` contract\n *\n * @returns Mutation object to make a bid on an auction listing\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useMakeOffer(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object as an argument with the following properties:\n *\n * #### listingId (required)\n * The ID of the listing to make an offer on.\n *\n * If the listing cannot be found, is not a direct listing, or is not active, the `error` property will be set.\n *\n * #### pricePerToken (required)\n * The price to offer per token.\n *\n * - For ERC1155, this is the price to offer per quantity of the NFT (see [`quantity`](#quantity) below).\n * - For ERC721, this is the price to offer to buy the NFT.\n *\n * #### quantity (optional)\n * Used for ERC1155 NFTs, where multiple quantity of the same NFT can be bought at once.\n *\n * This field works with the `pricePerToken` field to calculate the total price of the offer.\n * For example, if you want to buy 5 NFTs at a price of 1 ETH each, you would set `pricePerToken` to `1` and `quantity` to `5`, for a total of `5` ETH as the offer.\n *\n * For ERC721 NFTs, this value is ignored and `1` is used instead.\n *\n * The default value is `1`.\n *\n * @marketplace\n */ function useMakeOffer(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot make bid\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        return await contract.makeOffer(data.listingId, data.pricePerToken, data.quantity);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for accepting an offer from a direct listing on a `Marketplace` contract.\n *\n * Allows the seller (the user who listed the NFT for sale) to accept an offer on their listing, triggering a sale event, meaning the:\n * - NFT(s) are transferred from the seller to the buyer.\n * - Funds from the offeror are sent to the seller.\n *\n * @example\n * ```tsx\n * import {\n *   useAcceptDirectListingOffer,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const {\n *     mutateAsync: acceptDirectOffer,\n *     isLoading,\n *     error,\n *   } = useAcceptDirectListingOffer(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         acceptDirectOffer({\n *           listingId: \"{{listing_id}}\",\n *           addressOfOfferor: \"{{offeror_address}}\",\n *         })\n *       }\n *     >\n *       Accept Offer\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Marketplace` contract\n * @returns  Mutation object to accept an offer on a direct listing\n * ```ts\n * const { mutateAsync, isLoading, error } = useAcceptDirectListingOffer(contract);\n * ```\n *\n * ### options\n *\n * The mutation function accepts an object as argument with the following properties:\n *\n * #### listingId\n * The `listingId` of the listing you wish to accept.\n *\n * #### addressOfOfferor\n * The wallet address of the user who made the offer you wish to accept.\n *\n * The `useContractEvents` hook can be used to read all `NewOffer` events on your `Marketplace` contract.\n *\n * @marketplace\n */ function useAcceptDirectListingOffer(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot make bid\");\n        requiredParamInvariant(contract?.direct, \"No Direct instance provided\");\n        return await contract.direct.acceptOffer(data.listingId, data.addressOfOfferor);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for executing a sale of an auction listing on a `Marketplace` contract.\n *\n * Triggers a new sale, transferring the NFT(s) to the buyer and the funds to the seller.\n *\n * A sale must be executed when an auction ends, and the auction has a winning bid that was below the buyout price. This means the\n * auction has finished, and the highest bidder has won the auction. **Any wallet** can now execute the sale, transferring the NFT(s)\n * to the buyer and the funds to the seller.\n *\n * @example\n * ```jsx\n * import {\n *   useExecuteAuctionSale,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const {\n *     mutateAsync: executeAuctionSale,\n *     isLoading,\n *     error,\n *   } = useExecuteAuctionSale(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         executeAuctionSale({\n *           // The listingId of the auction to execute\n *           listingId: \"{{listing_id}}\",\n *         })\n *       }\n *     >\n *       Execute Auction Sale\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Marketplace` contract\n *\n * @returns Mutation object to accept an offer on a direct listing\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useExecuteAuctionSale(contract);\n * ```\n *\n * ### options\n * The mutation function accepts an object as argument with the following properties:\n *\n * #### listingId\n * The ID of the auction listing to execute the sale on. If the listing cannot be found, is not an auction, or is not ready to be executed, the `error` property will be set.\n *\n * @marketplace\n */ function useExecuteAuctionSale(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot make bid\");\n        requiredParamInvariant(contract?.auction, \"No Auction marketplace instance provided\");\n        return await contract.auction.executeSale(data.listingId);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for buying a listing on a `Marketplace` smart contract.\n *\n * If the listing is in a currency that is not native to the chain (e.g. not Ether on Ethereum), the hook will prompt the user\n * to approve the marketplace contract to spend the currency on their behalf before performing the buy.\n *\n * __This hook is only for `Marketplace` contracts. Not for `MarketplaceV3`__\n *\n * @example\n * ```jsx\n * import { useBuyNow, useContract, Web3Button } from \"@thirdweb-dev/react\";\n * import { ListingType } from \"@thirdweb-dev/sdk\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace\");\n *   const { mutateAsync: buyNow, isLoading, error } = useBuyNow(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         buyNow({\n *           id: \"{{listing_id}}\", // ID of the listing to buy\n *           type: ListingType.Direct, // Direct (0) or Auction (1)\n *           buyAmount: \"{{buy_amount}}\", // Amount to buy\n *           buyForWallet: \"{{wallet_address}}\", // Wallet to buy for, defaults to current wallet\n *         })\n *       }\n *     >\n *       Buy Now\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Marketplace` contract\n * @returns Mutation object to buy out an auction listing\n * ```ts\n * const { mutateAsync, isLoading, error } = useBuyNow(contract);\n * ```\n *\n * ## Options\n *\n * The mutation function accepts an object as argument with the following properties:\n *\n * ### id\n *\n * The ID of the listing you want to buy.\n *\n * ### type\n *\n * The type of listing. Either `ListingType.Direct` (0) or `ListingType.Auction` (1).\n *\n * ### buyAmount\n *\n * The amount of tokens you want to buy from the listing.\n *\n * Applicable for ERC1155 listings only, should always be 1 for ERC721 listings.\n *\n * ### buyForWallet (optional)\n *\n * Optionally, specify a different wallet address to buy the listing for.\n *\n * @marketplace\n */ function useBuyNow(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot make bid\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (data.type === _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_22__.L.Direct) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.direct.buyoutListing, \"contract does not support direct.buyoutListing\");\n            return await contract.direct.buyoutListing(data.id, data.buyAmount, data.buyForWallet);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.auction.buyoutListing, \"contract does not support auction.buyoutListing\");\n        return await contract.auction.buyoutListing(data.id);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for buying a direct listing on a [Marketplace V3](https://thirdweb.com/thirdweb.eth/MarketplaceV3) smart contract.\n *\n * If the listing is in a currency that is not native to the chain (e.g. not Ether on Ethereum), the hook will prompt the user\n * to approve the marketplace contract to spend the currency on their behalf before performing the buy.\n *\n * ```jsx\n * import { useBuyDirectListing } from \"@thirdweb-dev/react\";\n *\n * const { mutateAsync, isLoading, error } = useBuyDirectListing(contract);\n * ```\n *\n * @example\n * ```jsx\n * import {\n *   useBuyDirectListing,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n * import { ListingType } from \"@thirdweb-dev/sdk\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"marketplace-v3\");\n *   const {\n *     mutateAsync: buyDirectListing,\n *     isLoading,\n *     error,\n *   } = useBuyDirectListing(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         buyDirectListing({\n *           listingId: \"{{listing_id}}\", // ID of the listing to buy\n *           quantity: \"1\",\n *           buyer: \"{{wallet_address}}\", // Wallet to buy for\n *         })\n *       }\n *     >\n *       Buy Now\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `MarketplaceV3` contract\n * @returns Mutation object to buy out a direct listing\n * ```ts\n * const { mutateAsync, isLoading, error } = useBuyDirectListing(contract);\n * ```\n *\n * ## Options\n *\n * The mutation function accepts an object as argument with the following properties:\n *\n * ### listingId\n *\n * The ID of the direct listing you want to buy.\n *\n * ### quantity\n *\n * The amount of tokens you want to buy from the listing.\n *\n * Applicable for ERC1155 listings only, should always be `1` for ERC721 listings.\n *\n * ### buyer\n *\n * Specify a different wallet address to buy the listing for.\n *\n * @marketplace\n */ function useBuyDirectListing(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const walletAddress = useAddress();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"no wallet connected, cannot buy from listing\");\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.directListings.buyFromListing, \"contract does not support directListings.buyFromListing\");\n        return await contract.directListings.buyFromListing(data.listingId, data.quantity, data.buyer);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\nfunction isMarketplaceV1(contract) {\n    return contract.getAllListings !== undefined;\n}\n/** **********************/ /**     READ  HOOKS     **/ /** **********************/ /**\n * Hook for fetching information about an NFT from a smart contract.\n *\n * Available to use on smart contracts that implement the [`ERC721`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\n * or [`ERC1155`](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n *\n * NFT metadata is automatically fetched from where the `tokenUri` is hosted (e.g. IPFS), and makes the `image`\n * property available as a URL through our IPFS gateway (if the image is hosted on IPFS).\n *\n * @example\n *\n * Provide your NFT collection contract object and the token ID of the NFT you want to fetch as\n * arguments.\n *\n * ```jsx\n * import { useContract, useNFT } from \"@thirdweb-dev/react\";\n *\n * // The token ID of the NFT you want to fetch\n * const tokenId = 0;\n *\n * function App() {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const { data: nft, isLoading, error } = useNFT(contract, tokenId);\n *\n *   if (isLoading) return <div>Fetching NFT…</div>;\n *   if (error) return <div>Error fetching NFT</div>;\n *   if (!nft) return <div>NFT not found</div>;\n *   return <div>NFT: {nft.metadata.name}</div>;\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n *\n * @param tokenId - The token ID of the NFT you want to fetch.\n * ```jsx\n * import { useContract, useNFT } from \"@thirdweb-dev/react\";\n *\n * // The token ID of the NFT you want to fetch\n * const tokenId = 0;\n *\n * function App() {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     data: nft,\n *     isLoading,\n *     error,\n *   } = useNFT(\n *     contract,\n *     tokenId,\n *   );\n * }\n * ```\n *\n * @returns Query result object that includes the metadata for the given tokenId in `data` property\n * @twfeature ERC721 | ERC1155\n * @nft\n */ function useNFT(contract, tokenId) {\n    const contractAddress = contract?.getAddress();\n    const { erc721, erc1155 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.get(contractAddress, tokenId), async ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (erc1155) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc1155.get, \"Contract instance does not support get\");\n            return await erc1155.get(ethers__WEBPACK_IMPORTED_MODULE_21__.BigNumber.from(tokenId || 0));\n        }\n        if (erc721) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc721.get, \"Contract instance does not support get\");\n            return await erc721.get(ethers__WEBPACK_IMPORTED_MODULE_21__.BigNumber.from(tokenId || 0));\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        enabled: !!erc721 || !!erc1155 && tokenId !== undefined\n    });\n}\n/**\n * Hook to query all NFTs associated with a smart contract.\n *\n * Available to use on smart contracts that implement the [`ERC721`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\n * or [`ERC1155`](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n *\n * NFT metadata is automatically fetched from where the `tokenUri` is hosted (e.g. IPFS), and makes the `image`\n * property available as a URL through our IPFS gateway (if the image is hosted on IPFS).\n *\n * By default, only returns the first `100` NFTs in the collection. You can use the `queryParams` argument to\n * filter the NFTs that are returned or to paginate through the collection.\n *\n * @example\n *\n * ```jsx\n * import { useNFTs, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useNFTs(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n *\n * @param queryParams -\n * By default, the hook will return the first 100 NFTs associated with the contract.\n *\n * You can use the `queryParams` argument to paginate the NFTs that are returned.\n *\n * @returns Query result object that includes an array of `NFT` objects\n * @twfeature ERC721Supply | ERC721Enumerable | ERC1155Enumerable\n * @nft\n */ function useNFTs(contract, queryParams) {\n    const contractAddress = contract?.getAddress();\n    const { erc721, erc1155 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.query.all(contractAddress, queryParams), async ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (erc721) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc721.getAll, \"Contract instance does not support getAll\");\n            return await erc721.getAll(queryParams);\n        }\n        if (erc1155) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc1155.getAll, \"Contract instance does not support getAll\");\n            return await erc1155.getAll(queryParams);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        enabled: !!erc721 || !!erc1155\n    });\n}\n/**\n * Hook to get the total count of **unique** NFTs minted on a smart contract.\n *\n * Available to use on smart contracts that implement the [`ERC721`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\n * or [`ERC1155`](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n *\n * When used for ERC1155 contracts, the total count is the number of unique token IDs minted, _not_ the total supply of all tokens in circulation.\n *\n * @example\n * ```jsx\n * import { useTotalCount, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data: totalCount, isLoading, error } = useTotalCount(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n * @returns A `BigNumber` that includes the total count of NFTs\n * @twfeature ERC721Supply | ERC1155Enumerable\n * @nft\n */ function useTotalCount(contract) {\n    const contractAddress = contract?.getAddress();\n    const { erc721, erc1155 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.query.totalCount(contractAddress), async ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (erc1155) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc1155.totalCount, \"Contract instance does not support totalCount\");\n            return await erc1155.totalCount();\n        }\n        if (erc721) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc721.totalCount, \"Contract instance does not support totalCount\");\n            return await erc721.totalCount();\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        enabled: !!erc721 || !!erc1155\n    });\n}\n/**\n * Hook for fetching the total number of NFTs in circulation for a given smart contract.\n *\n * This takes into account the increase in supply due to minting and the decrease in supply due to burning.\n *\n * Available to use on contracts that implement either the [ERC721](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\n * or [ERC1155](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n *\n * @example\n *\n * ```jsx\n * import { useTotalCirculatingSupply, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useTotalCirculatingSupply(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n *\n * @param tokenId - Required for ERC1155, the tokenId to look up. This will return the total quantity of the given token ID in circulation.\n * ```ts\n * import { useTotalCirculatingSupply, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useTotalCirculatingSupply(\n *     contract,\n *     \"{{token_id}}\",\n *   );\n * }\n * ```\n *\n * @returns A `BigNumber` representing the total circulating supply.\n *\n * @twfeature ERC721Supply | ERC1155Enumerable\n * @nft\n */ function useTotalCirculatingSupply(contract, tokenId) {\n    const contractAddress = contract?.getAddress();\n    const { erc721, erc1155 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.query.totalCirculatingSupply(contractAddress, tokenId ?? undefined), async ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (erc1155) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc1155.totalCirculatingSupply, \"Contract instance does not support totalCirculatingSupply\");\n            requiredParamInvariant(tokenId, \"No tokenId provided\");\n            return await erc1155.totalCirculatingSupply(tokenId);\n        }\n        if (erc721) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc721.totalCirculatingSupply, \"Contract instance does not support totalCirculatingSupply\");\n            return await erc721.totalCirculatingSupply();\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        enabled: !!erc721 || !!erc1155 && tokenId !== undefined\n    });\n}\n/**\n * Hook for accessing a list of NFTs owned by a single wallet address.\n *\n * Available to use on smart contracts that implement either ERC721Enumerable, ERC1155Enumerable, or ERC721Supply extensions.\n *\n * @example\n *\n * ```jsx\n * import { useOwnedNFTs, useContract, useAddress } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const address = useAddress();\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useOwnedNFTs(contract, address);\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n * @param ownerWalletAddress -\n * The wallet address to get owned tokens for. Likely, you will want to view the connected wallet’s NFTs. use the `useAddress` hook to get this value.\n *\n * @param queryParams - \n * Paginate the results by providing a `queryParams` object as an argument.\n *\n * ```jsx\n * import { useOwnedNFTs, useContract, useAddress } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const address = useAddress();\n *   const { data, isLoading, error } = useOwnedNFTs(\n *     contract,\n *     address\n *     {\n *       count: 10, // Limit the number of results\n *       start: 0, // Start from the nth result (useful for pagination)\n *     },\n *   );\n * }\n * ```\n * \n * @returns Query result object that includes the list of owned `NFT` objects\n *\n * @twfeature ERC721Enumerable | ERC1155Enumerable | ERC721Supply\n * @nft\n */ function useOwnedNFTs(contract, ownerWalletAddress, queryParams) {\n    const contractAddress = contract?.getAddress();\n    const { erc721, erc1155 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.query.owned.all(contractAddress, ownerWalletAddress), async ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ownerWalletAddress, \"No wallet address provided\");\n        if (erc721) {\n            return await erc721.getOwned(ownerWalletAddress, queryParams);\n        }\n        if (erc1155) {\n            return await erc1155.getOwned(ownerWalletAddress, queryParams);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        enabled: (!!erc721 || !!erc1155) && !!ownerWalletAddress\n    });\n}\n/**\n * Hook to get the quantity a user owns of a specific [ERC1155](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) NFT.\n *\n * Available to use on smart contracts that implement the [`ERC1155`](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n *\n * @example\n * ```jsx\n * import { useNFTBalance, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { isLoading, data, error } = useNFTBalance(\n *     contract,\n *     \"{{wallet_address}}\",\n *     \"{{token_id}}\",\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n * @param ownerWalletAddress - The wallet address to check the balance of. Use the `useAddress` hook to get the current wallet address.\n * @param tokenId - Required for ERC1155, the tokenId to look up\n * @returns The hook's `data` property, once loaded, returns a `BigNumber` representing the quantity of the NFT owned by the wallet.\n * @twfeature ERC721 | ERC1155\n * @nft\n */ function useNFTBalance(contract, ownerWalletAddress, tokenId) {\n    const contractAddress = contract?.getAddress();\n    const { erc721, erc1155 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.balanceOf(contractAddress, ownerWalletAddress, tokenId), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(ownerWalletAddress, \"No owner wallet address provided\");\n        if (erc1155) {\n            requiredParamInvariant(tokenId, \"No tokenId provided\");\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc1155.balanceOf, \"Contract instance does not support balanceOf\");\n            return erc1155.balanceOf(ownerWalletAddress, tokenId);\n        }\n        if (erc721) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc721.balanceOf, \"Contract instance does not support balanceOf\");\n            return erc721.balanceOf(ownerWalletAddress);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        enabled: !!erc721 || !!erc1155 && !!ownerWalletAddress\n    });\n}\n/**\n * Get the shared metadata of an Open Edition NFT contract\n *\n * @example\n * ```javascript\n * const { data: sharedMetadata, isLoading, error } = useSharedMetadata(contract);\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n * @returns Query result object that includes the shared metadata of the contract\n * @twfeature ERC721SharedMetadata\n * @nft\n */ function useSharedMetadata(contract) {\n    const contractAddress = contract?.getAddress();\n    const { erc721 } = getErcs(contract);\n    return useQueryWithNetwork(cacheKeys.contract.nft.sharedMetadata.get(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (erc721) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc721.sharedMetadata.get, \"Contract instance does not support sharedMetadata.get\");\n            return erc721.sharedMetadata.get();\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        enabled: !!contract\n    });\n}\n/** **********************/ /**     WRITE HOOKS     **/ /** **********************/ /**\n * Hook for minting a new NFT on a smart contract.\n *\n * Available to use on smart contracts that implement the [`ERC721`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\n * or [`ERC1155`](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n *\n * By default, the process uploads and pins the NFT metadata to IPFS before minting.\n *\n * @example\n * ```jsx\n * import { useMintNFT, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: mintNft, isLoading, error } = useMintNFT(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         mintNft({\n *           metadata: {\n *             name: \"My NFT\",\n *             description: \"This is my NFT\",\n *             image: \"ipfs://example.com/my-nft.png\", // Accepts any URL or File type\n *           },\n *           to: \"{{wallet_address}}\", // Use useAddress hook to get current wallet address\n *         })\n *       }\n *     >\n *       Mint NFT\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n * @returns Mutation object that to mint a new NFT token to the connected wallet\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useMintNFT(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object with the following properties:\n *\n * #### metadata\n * The metadata of the NFT to mint.\n *\n * By default, the `metadata` object is uploaded and pinned to IPFS before minting.\n *\n * You can override this behavior by providing a `string` to the metadata property. The string must be a URL that points to a valid JSON object containing [standard metadata properties](https://docs.opensea.io/docs/metadata-standards)\n *\n * ```jsx\n * import { useMintNFT, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * // Your smart contract address\n * const contractAddress = \"{{contract_address}}\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: mintNft, isLoading, error } = useMintNFT(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         mintNft({\n *           // Any valid IPFS or HTTP URL that points to a JSON object\n *           metadata: \"https://<url>/<to>/<your>/<metadata>.json\",\n *           to: \"{{wallet_address}}\",\n *         })\n *       }\n *     >\n *       Mint NFT\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * #### to (required)\n * The wallet address to mint the NFT to.\n *\n * Likely, you will want to mint the NFT to the currently connected wallet address.\n * Use the `useAddress` hook to get this value.\n *\n * @twfeature ERC721Mintable | ERC1155Mintable\n * @nft\n */ function useMintNFT(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const { erc1155, erc721 } = getErcs(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(data.to, 'No \"to\" address provided');\n        requiredParamInvariant(contract, \"contract is undefined\");\n        if (erc1155) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"supply\" in data, \"supply not provided\");\n            const { to, metadata, supply } = data;\n            return await erc1155.mintTo(to, {\n                metadata,\n                supply: ethers__WEBPACK_IMPORTED_MODULE_21__.BigNumber.from(supply || 1)\n            });\n        }\n        if (erc721) {\n            return await erc721.mintTo(data.to, data.metadata);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for minting additional supply to an _existing_ ERC-1155 token.\n *\n * Available to use on contracts that implement the\n * [ERC1155Mintable](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155Mintable)\n * interface, such as the [Edition](https://thirdweb.com/thirdweb.eth/TokenERC1155) or [Edition Drop](https://thirdweb.com/thirdweb.eth/DropERC1155).\n *\n * The wallet address that initiates this transaction must have minting permissions on the contract.\n *\n * @example\n *\n * ```jsx\n * import { useContract, useMintNFTSupply, Web3Button } from \"@thirdweb-dev/react\";\n *\n * const contractAddress = \"{{contract_address}}\";\n * const walletAddress = \"{{wallet_address}}\";\n * const tokenId = \"{{token_id}}\";\n * const additionalSupply = \"{{additional_supply}}\";\n *\n * function App() {\n *   // Contract must be an ERC-1155 contract that implements the ERC1155Mintable interface\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: mintNftSupply,\n *     isLoading,\n *     error,\n *   } = useMintNFTSupply(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         mintNftSupply({\n *           additionalSupply: additionalSupply, // Quantity to mint\n *           to: walletAddress, // Address to mint to\n *           tokenId: tokenId, // Token ID to add supply to\n *         })\n *       }\n *     >\n *       Mint NFT Supply\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Erc1155`\n *\n * @returns Mutation object to mint a more supply of a token id to the provided wallet\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useMintNFTSupply(contract);\n * ```\n *\n * ### options\n *\n * The mutation function takes an object with the following properties:\n *\n * #### additionalSupply\n * The quantity of additional supply to mint.\n *\n * For example, if you have 10 quantity so far, and you want to mint 5 more, set `additionalSupply` to `5`.\n *\n * Can be a `string` or `number`.\n *\n *\n * #### to\n * The wallet address to mint the new supply to.\n *\n * To use the connected wallet address, use the `useAddress` hook.\n *\n *\n * #### tokenId\n * The token ID of the NFT to mint additional supply to.\n *\n * Can be a `string` or `number`.\n *\n * @twfeature ERC1155Mintable\n * @nft\n */ function useMintNFTSupply(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(data.to, 'No \"to\" address provided');\n        requiredParamInvariant(contract, \"contract is undefined\");\n        requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"additionalSupply\" in data, \"additionalSupply not provided\");\n        const { to, tokenId, additionalSupply } = data;\n        return await contract.mintAdditionalSupplyTo(to, tokenId, additionalSupply);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for transferring ERC721 or ERC1155 NFTs to another wallet address.\n *\n * Available to use on contracts that implement either the\n * [ERC721](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\n * and [ERC1155](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155)\n * interfaces, such as the [Edition](https://thirdweb.com/thirdweb.eth/TokenERC1155)\n * or [NFT Collection](https://thirdweb.com/thirdweb.eth/TokenERC721).\n *\n * The wallet address that initiates this transaction must have transfer permissions on the contract (i.e. the tokens are not soulbound).\n * It also must have the required amount of token(s) available to transfer.\n *\n * @example\n *\n * ```jsx\n * import { useContract, useTransferNFT, Web3Button } from \"@thirdweb-dev/react\";\n *\n * // Your NFT collection contract address\n * const contractAddress = \"{{contract_address}}\";\n * const walletAddress = \"{{wallet_address}}\";\n * const tokenId = \"{{token_id}}\";\n *\n * function App() {\n *   // Contract must be an ERC-721 or ERC-1155 contract\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutateAsync: transferNFT,\n *     isLoading,\n *     error,\n *   } = useTransferNFT(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         transferNFT({\n *           to: walletAddress, // Address to transfer the token to\n *           tokenId: tokenId, // Token ID to transfer\n *         })\n *       }\n *     >\n *       Transfer\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n *\n * @returns Mutation object to transfer NFTs\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useTransferNFT(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object with the following properties:\n *\n * #### to\n * The wallet address to transfer the token(s) to.\n *\n * To use the connected wallet address, use the `useAddress` hook.\n *\n *\n * #### tokenId\n * The token ID of the NFT to transfer.\n *\n * Can be a `string` or `number`.\n *\n * #### amount (ERC1155 only)\n * If you are using an ERC1155 contract, specify the amount of tokens to transfer.\n *\n * @twfeature ERC721 | ERC1155\n * @nft\n */ function useTransferNFT(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const { erc1155, erc721 } = getErcs(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"to\" in data, \"to not provided\");\n        if (erc1155) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc1155.transfer, \"contract does not support transfer\");\n            requiredParamInvariant(data.tokenId, \"tokenId not provided\");\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"amount\" in data, \"amount not provided\");\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return erc1155.transfer(data.to, data.tokenId, data.amount);\n        }\n        if (erc721) {\n            return erc721.transfer(data.to, data.tokenId);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for airdropping [`ERC1155`](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) NFT tokens to multiple wallet addresses at once.\n *\n * Available to use on smart contracts that implement the `ERC1155` standard.\n *\n * Performs a batch transfer from the connected wallet to the specified addresses.\n * This means you need to have the total number of tokens you wish to airdrop available in the wallet that performs this transaction.\n *\n * @example\n * ```jsx\n * import { useAirdropNFT, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: airdropNft, isLoading, error } = useAirdropNFT(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         airdropNft({\n *           addresses: [\n *             {\n *               address: \"0x123\",\n *               quantity: 1,\n *             },\n *           ],\n *           tokenId: tokenId,\n *         })\n *       }\n *     >\n *       Airdrop NFT\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `Erc1155`\n * @returns Mutation object that to transfer batch NFTs\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useAirdropNFT(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object with the following properties:\n *\n * #### tokenId\n * The token ID of the NFT to airdrop.\n *\n * #### addresses\n * An array of objects containing an `address` and `quantity` of NFTs to airdrop to each address.\n *\n * @twfeature ERC1155\n * @nft\n */ function useAirdropNFT(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((_ref)=>{\n        let { tokenId, addresses } = _ref;\n        requiredParamInvariant(contract, \"contract is undefined\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.airdrop, \"contract does not support airdrop\");\n        return contract.airdrop(tokenId, addresses);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for burning a NFT on a smart contract.\n *\n * Available to use on smart contracts that implement the [`ERC721`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721)\n * or [`ERC1155`](https://portal.thirdweb.com/contracts/build/extensions/erc-1155/ERC1155) standard.\n *\n * @example\n *\n * ```jsx\n * import { useBurnNFT, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * const contractAddress = \"{{contract_address}}\";\n * // The tokenId of the NFT you want to burn\n * const tokenIdToBurn = \"{{tokenId}}}}\";\n * const amount = 1;\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: burnNft, isLoading, error } = useBurnNFT(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         burnNft({\n *           tokenId: tokenIdToBurn,\n *           amount: amount,\n *         })\n *       }\n *     >\n *       Burn NFT\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `NFTContract`\n * @returns Mutation object that to burn an NFT token from the connected wallet\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useBurnNFT(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object with the following properties:\n *\n * #### tokenId\n * The token ID of the NFT you want to burn.\n *\n * #### amount (optional)\n * When using ERC1155 NFTs, you can specify the quantity you want to burn.\n *\n * Defaults value is `1`\n *\n * @twfeature ERC721Burnable | ERC1155Burnable\n * @nft\n */ function useBurnNFT(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const { erc1155, erc721 } = getErcs(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        requiredParamInvariant(data.tokenId, \"No tokenId provided\");\n        requiredParamInvariant(contract, \"contract is undefined\");\n        if (erc1155) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"amount\" in data, \"amount not provided\");\n            const { tokenId, amount } = data;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return await erc1155.burn(tokenId, amount);\n        }\n        if (erc721) {\n            const { tokenId } = data;\n            return await erc721.burn(tokenId);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Set shared metadata\n * TODO add docs\n * @internal\n */ function useSetSharedMetadata(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const { erc721 } = getErcs(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        if (erc721) {\n            return await erc721.sharedMetadata.set(data);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Unknown NFT type\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/** **********************/ /**         UTILS       **/ /** **********************/ /**\n * @internal\n */ /**\n * @permissionControl\n */ /**\n * @internal\n */ /** **********************/ /**     READ  HOOKS     **/ /** **********************/ /**\n * Hook for getting all wallet addresses that have a role in a smart contract.\n *\n * Available to use on contracts that implement [`Permissions`](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions).\n *\n * @example\n *\n * ```jsx\n * import { useAllRoleMembers, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useAllRoleMembers(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @returns\n * The hook's `data` property, once loaded, is an object, where the keys are the role names and the values are arrays of wallet addresses that have that role.\n *\n * For example, if the contract has two roles, `admin` and `transfer`, and the `admin` role has two members, the `data` property will look like this:\n *\n * ```ts\n * {\n *   admin: [\"0x1234\", \"0x5678\"],\n *   transfer: [],\n * }\n * ```\n *\n * #### Type\n *\n * ```ts\n * Record<\n *   | \"admin\"\n *   | \"transfer\"\n *   | \"minter\"\n *   | \"pauser\"\n *   | \"lister\"\n *   | \"asset\"\n *   | \"unwrap\"\n *   | \"factory\"\n *   | (string & {}),\n *   string[]\n * > | undefined;\n * ```\n *\n * @twfeature PermissionsEnumerable\n * @permissionControl\n */ function useAllRoleMembers(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.extensions.roles.getAll(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.roles, \"Contract does not support roles\");\n        // have to cast to any because of role bs, type is defined in the useQueryWithNetwork definition above\n        return contract.roles.getAll();\n    }, {\n        enabled: !!contract && !!contractAddress\n    });\n}\n/**\n * Hook for getting all wallet addresses that have a specific role in a smart contract.\n *\n * Available to use on contracts that implement the [`Permissions`](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions) interface.\n *\n * @example\n * ```jsx\n * import { useContract, useRoleMembers } from \"@thirdweb-dev/react\";\n *\n * // Your smart contract address (must implement permission controls)\n * const contractAddress = \"{{contract_address}}\";\n *\n * const roleName = \"admin\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { data, isLoading, error } = useRoleMembers(contract, roleName);\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n * @param role -\n *  The name of the role to get the members of\n *\n * Can be any custom role, or a built-in role, such as:\n * - `\"admin\"`\n * - `\"transfer\"`\n * - `\"minter\"`\n * - `\"pauser\"`\n * - `\"lister\"`\n * - `\"asset\"`\n * - `\"unwrap\"`\n * - `\"factory\"`\n *\n * @returns The hook's `data` property, once loaded, is an array of wallet addresses that have the specified role\n *\n * @twfeature Permissions\n * @permissionControl\n */ function useRoleMembers(contract, role) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.extensions.roles.get(contractAddress, role), ()=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.roles, \"Contract does not support roles\");\n        return contract.roles.get(role);\n    }, {\n        enabled: !!contract && !!contractAddress && !!role\n    });\n}\n/**\n * Hook to check if an address is a member of a role on a smart contract.\n *\n * Available to use on contracts that implement [`Permissions`](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions) interface\n *\n * Provide the following arguments to the hook:\n *\n * 1. `contract` - The contract instance to check the role on.\n * 2. `roleName` - The name of the role to check.\n * 3. `address` - The wallet address to see if it is a member of the role.\n *\n * @example\n *\n * ```jsx\n * import { useIsAddressRole, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const isMember = useIsAddressRole(contract, roleName, walletAddress);\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @param role - The name of the role to check. Can be any custom role, or a built-in role, such as:\n * - `\"admin\"`\n * - `\"transfer\"`\n * - `\"minter\"`\n * - `\"pauser\"`\n * - `\"lister\"`\n * - `\"asset\"`\n * - `\"unwrap\"`\n * - `\"factory\"`\n *\n * @param walletAddress -\n * The wallet address to check if it is a member of the role.\n * Use the `useAddress` hook to get the current wallet address.\n *\n * @returns `true` if the address is a member of the role, or `false` if not\n *\n * @twfeature PermissionsEnumerable\n * @permissionControl\n */ function useIsAddressRole(contract, role, walletAddress) {\n    // TODO this might be possible to do with `verify` fn instead?\n    const contractHasRoles = !!(contract && contract.roles);\n    const { data } = useRoleMembers(contractHasRoles ? contract : undefined, role);\n    // if the contract does not have roles then everything is allowed === true\n    if (contractHasRoles === false) {\n        return true;\n    }\n    // switch logic (if address 0 is in the role list then anyone has permissions to it)\n    if (data?.includes(ethers__WEBPACK_IMPORTED_MODULE_8__.AddressZero)) {\n        return true;\n    }\n    // actual role check logic\n    return !!(walletAddress && data?.includes(walletAddress));\n}\n/** **********************/ /**     WRITE HOOKS     **/ /** **********************/ /**\n * Overwrite the list of members for specific roles\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: overwriteRoles,\n *     isLoading,\n *     error,\n *   } = useSetAllRoleMembers(contract);\n *\n *   if (error) {\n *     console.error(\"failed to overwrite roles\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => overwriteRoles({ rolesWithAddresses: { minter: [\"{{wallet_address}\"] } })}\n *     >\n *       Overwrite Roles\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n * @returns A mutation object to overwrite all roles on the contract\n * @twfeature Permissions\n * @permissionControl\n */ function useSetAllRoleMembers(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (rolesWithAddresses)=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.roles, \"Contract does not support roles\");\n        await contract.roles.setAll(rolesWithAddresses);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for granting a role on a smart contract.\n *\n * Available to use on smart contracts that implement the [`Permissions`](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions) interface.\n *\n * @example\n * ```jsx\n * import { useGrantRole, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * const contractAddress = \"{{contract_address}}\";\n * const roleToGrant = \"{{role}}\";\n * const walletAddressToGrant = \"{{wallet_address}}\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: grantRole, isLoading, error } = useGrantRole(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         grantRole({\n *           role: roleToGrant, // name of your role.\n *           address: walletAddressToGrant, // address to grant the role to.\n *         })\n *       }\n *     >\n *       Grant Role\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @returns A mutation object to grant a member of a role on the contract\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useGrantRole(contract);\n * ```\n *\n * ### options\n * The mutation function accepts an object with the following properties:\n *\n * #### role\n * The name of the role to grant the address.\n *\n * Accepts any `string` value to include custom-defined roles.\n *\n * Also accepts the default roles available on the [prebuilt contracts](https://portal.thirdweb.com/pre-built-contracts):\n *\n * ```ts\n *  string |\n *  \"admin\" |\n *  \"minter\" |\n *  \"transfer\" |\n *  \"lister\" |\n *  \"asset\" |\n *  \"unwrap\" |\n *  \"pauser\" |\n *  \"factory\";\n * ```\n *\n * #### address\n * The address to grant the role to.\n *\n * To use the address of the connected wallet, use the `useAddress` hook.\n *\n * @twfeature Permissions | PermissionsEnumerable\n * @permissionControl\n */ function useGrantRole(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (params)=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.roles, \"Contract does not support roles\");\n        await contract.roles.grant(params.role, params.address);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for revoking a wallet address from a role on a smart contract.\n *\n * Available to use on contracts that implement [`Permissions`](https://portal.thirdweb.com/contracts/build/extensions/general/Permissions) interface\n *\n * The wallet address that initiates this transaction must have the relevant permissions on the contract to remove the role from the wallet address (typically `\"admin\"` level required).\n *\n * ```jsx\n * import { useContract, useRevokeRole, Web3Button } from \"@thirdweb-dev/react\";\n *\n * // Your smart contract address (must implement permission controls)\n * const contractAddress = \"{{contract_address}}\";\n * const walletAddress = \"{{wallet_address}}\";\n *\n * function App() {\n *   // Contract must be a contract that implements the Permission Controls interface\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: revokeRole, isLoading, error } = useRevokeRole(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         revokeRole({\n *           role: \"admin\",\n *           address: walletAddress,\n *         })\n *       }\n *     >\n *       Revoke Role\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n *\n * @returns A mutation object to revoke a role from a member on the contract\n * #### role (required)\n *\n * The role to revoke from the wallet address.\n *\n * Can be any custom role, or a built-in role, such as:\n * - `\"admin\"`\n * - `\"transfer\"`\n * - `\"minter\"`\n * - `\"pauser\"`\n * - `\"lister\"`\n * - `\"asset\"`\n * - `\"unwrap\"`\n * - `\"factory\"`\n *\n * #### address\n *\n * The wallet address to revoke the role from.\n *\n * To use the connected wallet address, use the `useAddress` hook.\n *\n * @twfeature Permissions | PermissionsEnumerable\n * @permissionControl\n */ function useRevokeRole(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (params)=>{\n        requiredParamInvariant(contract, \"No contract provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.roles, \"Contract does not support roles\");\n        await contract.roles.revoke(params.role, params.address);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/** **********************/ /**     READ  HOOKS     **/ /** **********************/ /**\n * Hook for fetching the total supply of an ERC20 token.\n *\n * This takes into account the increase and decrease in supply when tokens are minted and burned.\n *\n * @example\n * ```jsx\n * import { useTokenSupply } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { data, isLoading, error } = useTokenSupply(contractAddress);\n * }\n * ```\n *\n * @param contract - Instance of a `TokenContract`\n *\n * @returns Hook's `data` object includes the total supply of the token in the `value` property as a `BigNumber` object.\n *\n * @twfeature ERC20\n * @token\n */ function useTokenSupply(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.token.totalSupply(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        const erc20 = getErc20(contract);\n        if (erc20) {\n            return erc20.totalSupply();\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Smart contract is not a valid erc20 contract\");\n    }, {\n        enabled: !!contract || !!contractAddress\n    });\n}\n/**\n * Hook for fetching the balance a wallet has for a specific ERC20 token.\n *\n * __This hook is for _custom_ ERC20 tokens. For native tokens such as Ether, use `useBalance` or `useBalanceForAddress`__\n *\n * Available to use on contracts that implement the ERC20 interface.\n *\n * @example\n * ```jsx\n * import { useTokenBalance, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"token\");\n *   const { data, isLoading, error } = useTokenBalance(contract, walletAddress);\n * }\n * ```\n *\n * @param contract - Instance of a `TokenContract`\n *\n * @returns Hook's `data` object includes the token balance for given wallet address\n *\n * @twfeature ERC20\n * @token\n */ function useTokenBalance(contract, walletAddress) {\n    const contractAddress = contract?.getAddress();\n    const erc20 = getErc20(contract);\n    return useQueryWithNetwork(cacheKeys.contract.token.balanceOf(contractAddress, walletAddress), async ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(walletAddress, \"No address provided\");\n        if (erc20) {\n            return await erc20.balanceOf(walletAddress);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Smart contract is not a valid erc20 contract\");\n    }, {\n        enabled: !!walletAddress && !!contract\n    });\n}\n/**\n * Hook for fetching the [decimals](https://docs.openzeppelin.com/contracts/3.x/erc20#a-note-on-decimals)\n * of an [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20) token.\n *\n * Tokens usually opt for a value of `18`, imitating the relationship between Ether and Wei.\n * Therefore, `18` is the default value returned by this function, unless your ERC20 contract explicitly overrides it.\n *\n * @example\n *\n * ```jsx\n * import { useTokenDecimals, useContract } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"token\");\n *   const { data, isLoading, error } = useTokenDecimals(contract);\n * }\n * ```\n *\n * @param contract - Instance of a `TokenContract`\n *\n * @returns The hook's `data` property, once loaded, contains the `number` that represents the number of decimals of the ERC20 token.\n *\n * @twfeature ERC20\n * @token\n */ function useTokenDecimals(contract) {\n    const contractAddress = contract?.getAddress();\n    const erc20 = getErc20(contract);\n    return useQueryWithNetwork(cacheKeys.contract.token.decimals(contractAddress), async ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        if (erc20) {\n            return (await erc20.get()).decimals;\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Smart contract is not a valid erc20 contract\");\n    }, {\n        enabled: !!contract\n    });\n}\n/** **********************/ /**     WRITE HOOKS     **/ /** **********************/ /**\n * Hook for minting new tokens in an ERC20 smart contract.\n *\n * Available to use on contracts that implement the [ERC20Mintable](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20BatchMintable)\n * interface, such as the [Token](https://thirdweb.com/thirdweb.eth/TokenERC20) contract.\n *\n * The wallet address that initiates this transaction must have minting permissions on the contract.\n *\n * @example\n *\n * ```jsx\n * import { useContract, useMintToken, Web3Button } from \"@thirdweb-dev/react\";\n *\n * const contractAddress = \"{{contract_address}}\";\n * const walletAddress = \"{{wallet_address}}\";\n * const tokenAmount = \"{{token_amount}}\";\n *\n * function App() {\n *   // Contract must be an ERC-20 contract that implements the ERC20Mintable interface\n *   const { contract } = useContract(contractAddress, \"token\");\n *   const { mutateAsync: mintToken, isLoading, error } = useMintToken(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         mintToken({\n *           amount: tokenAmount, // Quantity to mint\n *           to: walletAddress, // Address to mint to\n *         })\n *       }\n *     >\n *       Mint Token\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `TokenContract`\n *\n * @returns A mutation object to mint new tokens to the connected wallet\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useMintToken(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object as an argument with the following properties:\n *\n * #### amount\n * The quantity of tokens to mint. Can be a `string` or `number`.\n *\n * #### to\n * The wallet address to mint the new tokens to.\n *\n * To use the connected wallet address, use the `useAddress` hook.\n *\n * @twfeature ERC20Mintable\n * @token\n */ function useMintToken(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const erc20 = getErc20(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((data)=>{\n        const { to, amount } = data;\n        requiredParamInvariant(contract, \"contract is undefined\");\n        if (erc20) {\n            return erc20.mintTo(to, amount);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Smart contract is not a valid erc20 contract\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for claiming a ERC20 tokens from a smart contract.\n *\n * Available to use on smart contracts that implement both the [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20) interface\n * and the [`claim`](https://portal.thirdweb.com/contracts/build/extensions/erc-721/ERC721Claimable) function,\n * such as the [Token Drop](https://thirdweb.com/thirdweb.eth/DropERC20).\n *\n * @example\n *\n * ```jsx\n * import { useClaimToken, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: claimToken, isLoading, error } = useClaimToken(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         claimToken({\n *           to: \"{{wallet_address}}\", // Use useAddress hook to get current wallet address\n *           amount: 100, // Amount of token to claim\n *         })\n *       }\n *     >\n *       Claim Token\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `TokenContract`\n *\n * @returns A mutation object to tokens to the wallet specified in the params\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useClaimToken(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object as an argument with the following properties:\n *\n * #### to (required)\n * Likely, you will want to claim the token to the currently connected wallet address.\n *\n * You can use the `useAddress` hook to get this value.\n *\n * #### amount (required)\n * The amount of tokens to be claimed.\n *\n * #### checkERC20Allowance (optional)\n * Boolean value to check whether the current wallet has enough allowance to pay for claiming the tokens before\n * attempting to claim the tokens.\n *\n * Defaults to `true`.\n *\n * @twfeature ERC20ClaimPhasesV2 | ERC20ClaimPhasesV1 | ERC20ClaimConditionsV2 | ERC20ClaimConditionsV1\n * @token\n */ function useClaimToken(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const erc20 = getErc20(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (data)=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(data.to, 'No \"to\" address provided');\n        if (erc20) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc20?.claimTo, \"contract does not support claimTo\");\n            return await erc20.claimTo(data.to, data.amount, {\n                checkERC20Allowance: data.checkERC20Allowance\n            });\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Smart contract is not a valid erc20 contract\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for transferring tokens on an ERC20 contract.\n *\n * Available to use on contracts that implement the [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20)\n * interface, such as the [Token](https://thirdweb.com/thirdweb.eth/TokenERC20) contract.\n *\n * The wallet address that initiates this transaction must have a balance of tokens\n * greater than or equal to the amount being transferred.\n *\n * @example\n * ```jsx\n * import { useContract, useTransferToken, Web3Button } from \"@thirdweb-dev/react\";\n *\n * const contractAddress = \"{{contract_address}}\";\n * const toAddress = \"{{to_address}}\";\n * const amount = \"{{amount}}\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const {\n *     mutate: transferTokens,\n *     isLoading,\n *     error,\n *   } = useTransferToken(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         transferTokens({\n *           to: toAddress, // Address to transfer to\n *           amount: amount, // Amount to transfer\n *         })\n *       }\n *     >\n *       Transfer\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `TokenContract`\n *\n * @returns A mutation object to transfer tokens\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useTransferToken(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object as an argument with the following properties:\n *\n * #### to\n * The wallet address to transfer tokens to.\n *\n * #### amount\n * The quantity of tokens to transfer. Can be a `string` or `number`.\n *\n * @twfeature ERC20\n * @token\n */ function useTransferToken(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const erc20 = getErc20(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((data)=>{\n        const { to, amount } = data;\n        if (erc20) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc20?.transfer, \"contract does not support transfer\");\n            return erc20.transfer(to, amount);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Smart contract is not a valid erc20 contract\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * A hook to transfer native token (of the active chain) to another wallet\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: transferNativeToken,\n *     isLoading,\n *     error,\n *   } = useTransferNativeToken();\n *\n *   if (error) {\n *     console.error(\"failed to transfer tokens\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => transferNativeToken({ to: \"{{wallet_address}}\", amount: \"0.1\" })}\n *     >\n *       Transfer\n *     </button>\n *   );\n * };\n * ```\n *\n * @returns A Mutation object to transfer native tokens\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useTransferNativeToken();\n * ```\n *\n * ### options\n * The mutation function takes an object containing `to` and `amount` properties.\n *\n * - `to` - The wallet address to transfer tokens to. Must be a `string`.\n * - `amount` - The amount of tokens to transfer. Must be a `number`.\n *\n * @token\n */ function useTransferNativeToken() {\n    const sdk = useSDK();\n    const activeChainId = useSDKChainId();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((data)=>{\n        const { to, amount } = data;\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sdk, \"SDK is not initialized\");\n        return sdk.wallet.transfer(to, amount);\n    }, {\n        onSettled: ()=>invalidateBalances(queryClient, activeChainId)\n    });\n}\n/**\n * Hook for transferring ERC20 tokens to multiple recipients in a single transaction (i.e. airdrop).\n *\n * Available to use on contracts that implement the [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20) interface.\n *\n * The wallet that initiates this transaction must have sufficient balance to cover the total amount of tokens being transferred\n * and must have transfer permissions on the contract, i.e. tokens are not soulbound.\n *\n * @example\n *\n * Provide your token contract instance from the `useContract` hook to the hook.\n *\n * Then, provide an array of objects with the `to` and `amount` properties to the function.\n *\n * ```jsx\n * import {\n *   useTransferBatchToken,\n *   useContract,\n *   Web3Button,\n * } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress, \"token\");\n *   const {\n *     mutateAsync: transferBatchToken,\n *     isLoading,\n *     error,\n *   } = useTransferBatchToken(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         transferBatchToken([\n *           {\n *             to: \"{{wallet_address}}\", // Transfer 10 tokens to a wallet\n *             amount: 10,\n *           },\n *           {\n *             to: \"{{wallet_address}}\", // Transfer 20 tokens to another wallet\n *             amount: 20,\n *           },\n *         ])\n *       }\n *     >\n *       Transfer Batch Tokens\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `TokenContract`\n *\n * @returns A Mutation object to transfer batch tokens\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useTransferBatchToken(contract);\n * ```\n *\n * ### options\n *\n * The mutation function takes an array of objects containing `to` and `amount` properties.\n *\n * - `to` - The wallet address to transfer tokens to. Must be a `string`.\n * - `amount` - The amount of tokens to transfer. Must be a `number`.\n *\n * @twfeature ERC20\n * @token\n */ function useTransferBatchToken(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const erc20 = getErc20(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((data)=>{\n        if (erc20) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc20.transferBatch, \"contract does not support transferBatch\");\n            const convertedData = data.map((token)=>({\n                    toAddress: token.to,\n                    amount: token.amount\n                }));\n            return erc20.transferBatch(convertedData);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Smart contract is not a valid erc20 contract\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n * Hook for burning ERC20 tokens on a smart contract.\n *\n * Available to use on smart contracts that implement the [ERC20](https://portal.thirdweb.com/contracts/build/extensions/erc-20/ERC20) standard.\n *\n * @example\n *\n * ```jsx\n * import { useBurnToken, useContract, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { contract } = useContract(contractAddress);\n *   const { mutateAsync: burnToken, isLoading, error } = useBurnToken(contract);\n *\n *   return (\n *     <Web3Button\n *       contractAddress={contractAddress}\n *       action={() =>\n *         burnToken({\n *           amount: \"10\", // Amount of tokens to burn\n *         })\n *       }\n *     >\n *       Burn Token\n *     </Web3Button>\n *   );\n * }\n * ```\n *\n * @param contract - Instance of a `TokenContract`\n *\n * @returns\n * A mutation object to burn tokens from the connected wallet\n * ```ts\n * const { mutateAsync, isLoading, error } = useBurnToken(contract);\n * ```\n *\n * ### options\n * The mutation function takes an object as an argument with the following properties:\n *\n * #### amount (required)\n * The amount of tokens to burn.\n *\n * The wallet initiating this transaction must have at least this amount of tokens.\n *\n * @twfeature ERC20Burnable\n * @token\n */ function useBurnToken(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const erc20 = getErc20(contract);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((data)=>{\n        const { amount } = data;\n        requiredParamInvariant(contract, \"contract is undefined\");\n        if (erc20) {\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(erc20.burn, \"contract does not support burn\");\n            return erc20.burn(amount);\n        }\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"Smart contract is not a valid erc20 contract\");\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/** **********************/ /**       READ HOOKS    **/ /** **********************/ /**\n * Get all accounts\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccounts(contract);\n * ```\n *\n * @param contract - Instance of a account factory contract\n * @returns Query result object that includes an array of all accounts with their associated admin\n * @twfeature AccountFactory\n * @smartWallet\n */ function useAccounts(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.accountFactory.getAll(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.accountFactory.getAllAccounts, \"Contract instance does not support contract.accountFactory.getAllAccounts\");\n        return contract.accountFactory.getAllAccounts();\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Get all accounts associated with the provided address\n *\n * @example\n * ```javascript\n * const { data: accountsForAddress, isLoading, error } = useAccountsForAddress(contract, \"{{account_address}}\");\n * ```\n *\n * @param contract - Instance of a account factory contract\n * @param address - The address to get associated accounts for\n * @returns Query result object that includes an array of all accounts associated with the address\n *\n * @twfeature AccountFactory\n * @smartWallet\n */ function useAccountsForAddress(contract, address) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.accountFactory.getAllForAddress(contractAddress, address), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.accountFactory.getAssociatedAccounts, \"Contract instance does not support contract.accountFactory.getAssociatedAccounts\");\n        return contract.accountFactory.getAssociatedAccounts(address || \"\");\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Check if a account has been deployed for the given admin in the account factory contract\n *\n * @example\n * ```javascript\n * const { data: isAccountDeployed, isLoading, error } = useIsAccountDeployed(contract);\n * ```\n *\n * @param contract - Instance of a account factory contract\n * @returns A boolean indicating if a account has been deployed for the given admin\n * @twfeature AccountFactory\n * @smartWallet\n */ function useIsAccountDeployed(contract, admin, extraData) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.accountFactory.isAccountDeployed(contractAddress, admin), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.accountFactory.isAccountDeployed, \"Contract instance does not support contract.accountFactory.getAllAccounts\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(admin, \"No account address provided\");\n        return contract.accountFactory.isAccountDeployed(admin, extraData);\n    }, {\n        enabled: !!contract\n    });\n}\n/** **********************/ /**     WRITE HOOKS     **/ /** **********************/ /**\n * Create a account in the account factory contract\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const { contract } = useContract(\"{{contract_address}}\");\n *   const {\n *     mutate: createAccount,\n *     isLoading,\n *     error,\n *   } = useCreateAccount(contract);\n *\n *   if (error) {\n *     console.error(\"failed to create account\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => createAccount(\"0x...\")}\n *     >\n *       Create Account\n *     </button>\n *   );\n * };\n * ```\n *\n * @param contract - Instance of a account factory contract\n * @returns A mutation object to create a account\n * @twfeature AccountFactory\n * @smartWallet\n */ function useCreateAccount(contract) {\n    const activeChainId = useSDKChainId();\n    const contractAddress = contract?.getAddress();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (admin, extraData)=>{\n        requiredParamInvariant(contract, \"contract is undefined\");\n        return contract.accountFactory.createAccount(admin, extraData);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/** **********************/ /**       READ HOOKS    **/ /** **********************/ /**\n * Get all signers of account\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccountSigners(contract);\n * ```\n *\n * @param contract - Instance of a `SmartContract`\n * @returns hook's `data` property contains an array of all signers\n * @twfeature Account\n * @smartWallet\n */ function useAccountSigners(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.account.getAllSigners, \"Contract instance does not support contract.account.getAllSigners\");\n        return contract.account.getAllSigners();\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Get all the admins on a smart wallet account\n *\n * @example\n * ```javascript\n * const { data: accounts, isLoading, error } = useAccountAdmins(contract);\n * ```\n *\n * @param contract - Instance of `SmartContract`\n * @returns The hook's `data` property, once loaded, contains an array of all admins of the provided account\n * @twfeature Account\n * @smartWallet\n */ function useAccountAdmins(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.account.getAllAdmins, \"Contract instance does not support contract.account.getAllAdmins\");\n        return contract.account.getAllAdmins();\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Get all signers and admins on a smart wallet account.\n *\n * ```jsx\n * import { useAccountAdminsAndSigners } from \"@thirdweb-dev/react\";\n *\n * const { data: accounts, isLoading, error } = useAccountAdminsAndSigners(contract);\n * ```\n *\n * @param contract - Instance of `SmartContract`\n * @returns hook's `data` property containing an array of all admins and signers\n *\n * @twfeature Account\n * @smartWallet\n */ function useAccountAdminsAndSigners(contract) {\n    const contractAddress = contract?.getAddress();\n    return useQueryWithNetwork(cacheKeys.contract.account.signers(contractAddress), ()=>{\n        requiredParamInvariant(contract, \"No Contract instance provided\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.account.getAllAdminsAndSigners, \"Contract instance does not support contract.account.getAllAdminsAndSigners\");\n        return contract.account.getAllAdminsAndSigners();\n    }, {\n        enabled: !!contract\n    });\n}\n/** **********************/ /**     WRITE HOOKS     **/ /** **********************/ /**\n * Create and add a session key for the smart wallet account\n *\n * @example\n * ```jsx\n *  const Component = () => {\n *    const {\n *      mutate: createSessionKey,\n *      isLoading,\n *      error,\n *    } = useCreateSessionKey();\n *\n *    if (error) {\n *      console.error(\"failed to create session key\", error);\n *    }\n *\n *    return (\n *      <button\n *        disabled={isLoading}\n *        onClick={() => createSessionKey(\n *          keyAddress,\n *          {\n *            approvedCallTargets: [\"0x...\"], // the addresses of contracts that the session key can call\n *            nativeTokenLimitPerTransaction: 0.1, // the maximum amount of native token (in ETH) that the session key can spend per transaction\n *            startDate: new Date(), // the date when the session key becomes active\n *            expirationDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // the date when the session key expires\n *          }\n *         )}\n *      >\n *        Create Session Key\n *      </button>\n *    );\n *  };\n * ```\n *\n * @twfeature Account\n *\n * @returns  Mutation object to create and add a session key for the smart wallet\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useCreateSessionKey();\n * ```\n *\n * ### options\n * The mutation function takes an object with the following properties as argument:\n *\n * #### address\n * The address to add as an admin on the account as a `string`.\n *\n * #### approvedCallTargets\n * An array of addresses that the session key can call as a `string[]`.\n *\n * #### nativeTokenLimitPerTransaction\n * The maximum amount of native token (in ETH) that the session key can spend per transaction as a `number`.\n *\n * #### startDate\n * The date when the session key becomes active as a `Date`.\n *\n * #### startDate\n * The date when the session key expires as a `Date`.\n *\n * @smartWallet\n */ function useCreateSessionKey() {\n    const smartWallet = useWallet(\"smartWallet\");\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (args)=>{\n        requiredParamInvariant(smartWallet, \"wallet is not connected\");\n        return smartWallet.createSessionKey(args.keyAddress, args.permissions);\n    });\n}\n/**\n * Revoke a session key (or signer) on the smart wallet account\n *\n * @example\n * ```jsx\n * import { useRevokeSessionKey } from \"@thirdweb-dev/react\";\n *\n * // Your ERC20 token smart contract address\n * const keyAddress = \"{{key_address}}\";\n *\n * const Component = () => {\n *   const { mutate: revokeSessionKey, isLoading, error } = useRevokeSessionKey();\n *\n *   if (error) {\n *     console.error(\"failed to revoke session key\", error);\n *   }\n *\n *   return (\n *     <button disabled={isLoading} onClick={() => revokeSessionKey(keyAddress)}>\n *       Revoke Session Key\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n * @returns\n * Mutation object to revoke a session key (or signer) on the smart wallet\n *\n * ```ts\n * const { mutateAsync, isLoading, error } = useRevokeSessionKey();\n * ```\n *\n * The mutation function takes an address of type `string` to remove as an admin.\n *\n * @smartWallet\n */ function useRevokeSessionKey() {\n    const smartWallet = useWallet(\"smartWallet\");\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (keyAddress)=>{\n        requiredParamInvariant(smartWallet, \"wallet is not connected\");\n        return smartWallet.revokeSessionKey(keyAddress);\n    });\n}\n/**\n * Add an additional admin on the smart wallet account\n *\n * @example\n * ```jsx\n * import { useAddAdmin } from \"@thirdweb-dev/react\";\n *\n * const adminAddress = \"{{admin_address}}\";\n *\n * const Component = () => {\n *   const { mutate: addAdmin, isLoading, error } = useAddAdmin();\n *\n *   if (error) {\n *     console.error(\"failed to add admin\", error);\n *   }\n *\n *   return (\n *     <button disabled={isLoading} onClick={() => addAdmin(adminAddress)}>\n *       Add admin\n *     </button>\n *   );\n * };\n * ```\n *\n * @returns  mutation object to add given address as an admin\n *\n * @twfeature Account\n * @smartWallet\n */ function useAddAdmin() {\n    const smartWallet = useWallet(\"smartWallet\");\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (adminAddress)=>{\n        requiredParamInvariant(smartWallet, \"wallet is not connected\");\n        return smartWallet.addAdmin(adminAddress);\n    });\n}\n/**\n * Remove an admin on the smart wallet account. This action has to be performed by an admin on the account.\n *\n * ```jsx\n * import { useRemoveAdmin } from \"@thirdweb-dev/react\";\n *\n * const adminAddress = \"{{admin_address}}\";\n *\n * const Component = () => {\n *   const { mutate: removeAdmin, isLoading, error } = useRemoveAdmin();\n *\n *   if (error) {\n *     console.error(\"failed to remove admin\", error);\n *   }\n *\n *   return (\n *     <button disabled={isLoading} onClick={() => removeAdmin(adminAddress)}>\n *       Remove admin\n *     </button>\n *   );\n * };\n * ```\n *\n * @twfeature Account\n * @returns  mutation object to remove given address as an admin\n * @smartWallet\n */ function useRemoveAdmin() {\n    const smartWallet = useWallet(\"smartWallet\");\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (adminAddress)=>{\n        requiredParamInvariant(smartWallet, \"wallet is not connected\");\n        return smartWallet.removeAdmin(adminAddress);\n    });\n}\n/**\n * Hook to get `ThirdwebAuth` instance\n * @auth\n */ function useAuth() {\n    const wallet = useWallet();\n    const authConfig = useThirdwebAuthContext();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!authConfig?.domain) {\n            return undefined;\n        }\n        if (!wallet) {\n            return undefined;\n        }\n        return new _thirdweb_dev_auth__WEBPACK_IMPORTED_MODULE_23__.T(wallet, authConfig.domain);\n    }, [\n        wallet,\n        authConfig?.domain\n    ]);\n}\n/**\n * Hook to prompt the user to sign in with their wallet using [auth](https://portal.thirdweb.com/wallets/auth)\n *\n * Requires the `authConfig` prop to be configured on the `ThirdwebProvider`\n *\n * @example\n *\n * ```jsx\n * import { useLogin } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { isLoading, login } = useLogin();\n *\n *   return (\n *     <button onClick={() => login()}>\n *       {isLoading ? \"Loading...\" : \"Sign in with Ethereum\"}\n *     </button>\n *   );\n * }\n * ```\n *\n * @returns  A function to invoke to login with the connected wallet, and an `isLoading` state that indicates if the login request is in progress\n *\n * ### login\n *\n * The `login` function accepts an optional `LoginOptions` object as an argument.\n *\n * This configuration follows the [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) Sign in with Ethereum standard.\n *\n * ```jsx\n * import { useLogin, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { login, isLoading } = useLogin();\n *\n *   const loginOptions = {\n *     domain: \"https://your-domain.com\", // Your dapp domain\n *     statement: \"My statement\", // Text that the user will sign\n *     uri: \"https://your-domain.com/login\", // RFC 3986 URI referring to the resource that is the subject of the signing\n *     version: \"1.0\", // The current version of the message, which MUST be 1 for this specification.\n *     chainId: \"mainnet\", // Chain ID to which the session is bound\n *     nonce: \"my-nonce\", // randomized token typically used to prevent replay attacks\n *     expirationTime: new Date(2021, 1, 1), // When this message expires\n *     invalidBefore: new Date(2020, 12, 1), // When this message becomes valid\n *     resources: [\"balance\", \"history\", \"info\"], // A list of information or references to information the user wishes to have resolved\n *   };\n *\n *   return <Web3Button action={() => login(loginOptions)}>Login</Web3Button>;\n * }\n * ```\n *\n * @auth\n */ function useLogin() {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const authConfig = useThirdwebAuthContext();\n    const wallet = useWallet();\n    const login = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)({\n        mutationFn: async ()=>{\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(wallet, \"You need a connected wallet to login.\");\n            (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n            const address = await wallet.getAddress();\n            const chainId = await wallet.getChainId();\n            let res = await fetch(`${authConfig.authUrl}/payload`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    address,\n                    chainId: chainId.toString()\n                })\n            });\n            if (!res.ok) {\n                throw new Error(`Failed to get payload with status code ${res.status}`);\n            }\n            let payloadData;\n            try {\n                ({ payload: payloadData } = await res.json());\n            } catch  {\n                throw new Error(`Failed to get payload`);\n            }\n            const payload = await (0,_thirdweb_dev_auth__WEBPACK_IMPORTED_MODULE_23__.s)({\n                wallet,\n                payload: payloadData\n            });\n            res = await fetch(`${authConfig.authUrl}/login`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    payload\n                }),\n                credentials: \"include\"\n            });\n            if (!res.ok) {\n                const data = await res.json();\n                if (data.error) {\n                    throw new Error(data.error);\n                }\n                throw new Error(`Login request failed with status code ${res.status}`);\n            }\n            const { token } = await res.json();\n            await authConfig.secureStorage?.setItem(AUTH_TOKEN_STORAGE_KEY, token);\n            queryClient.invalidateQueries(cacheKeys.auth.user());\n            return token;\n        }\n    });\n    return {\n        login: ()=>login.mutateAsync(),\n        isLoading: login.isLoading\n    };\n}\n/**\n * @auth\n */ /**\n * Hook for retrieving information about the currently signed-in user using [auth](https://portal.thirdweb.com/wallets/auth).\n *\n * Useful to get the user's address and session data, or `undefined` if no user is signed in.\n *\n * ```jsx\n * import { useUser } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { user, isLoggedIn, isLoading } = useUser();\n * }\n * ```\n *\n * @auth\n *\n */ function useUser() {\n    const authConfig = useThirdwebAuthContext();\n    const { data: user, isLoading } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__.useQuery)(cacheKeys.auth.user(), async ()=>{\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(authConfig, \"Please specify an authConfig in the ThirdwebProvider\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(authConfig.authUrl, \"Please specify an authUrl in the authConfig.\");\n        const token = await authConfig.secureStorage?.getItem(AUTH_TOKEN_STORAGE_KEY);\n        // We include credentials so we can getUser even if API is on different URL\n        const params = {\n            credentials: \"include\",\n            ...token ? {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            } : {}\n        };\n        const res = await fetch(`${authConfig.authUrl}/user`, params);\n        return await res.json();\n    }, {\n        enabled: !!authConfig\n    });\n    return {\n        user,\n        isLoggedIn: !!user,\n        isLoading\n    };\n}\nconst warnSet = new Set();\nfunction showDeprecationWarning(deprecated, replacement) {\n    // deprecation warnings only in dev only in dev\n    if (__DEV__) {\n        if (warnSet.has(`${deprecated}:${replacement}`)) {\n            return;\n        }\n        warnSet.add(`${deprecated}:${replacement}`);\n        console.warn(`\\`${deprecated}\\` is deprecated and will be removed in a future major version. Please use \\`${replacement}\\` instead.`);\n    }\n}\n/**\n * Hook for getting an instance of an `EditionDrop` contract. This contract is used to interface with ERC1155 compliant NFTs that can be lazily minted.\n * @param contractAddress - The address of the Edition Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition-drop\")\n *\n *   // Now you can use the edition drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(tokenId, quantity) {\n *     await contract.claim(tokenId, quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const editionDrop = useEditionDrop(\"0x1234...\");\n * + const editionDrop = useContract(\"0x1234...\", \"edition-drop\").contract;\n * ```\n * @internal\n */ function useEditionDrop(contractAddress) {\n    showDeprecationWarning(`useEditionDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"edition-drop\")`);\n    return useContract(contractAddress, \"edition-drop\").contract;\n}\n/**\n *\n * Hook for getting an instance of an `Edition` contract. This contract is used to interface with ERC1155 compliant NFTs.\n * @param contractAddress - The address of the Edition contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"edition\")\n *\n *   // Now you can use the edition contract in the rest of the component\n *\n *   // For example, this function will return all the NFTs on this contract\n *   async function getNFTs() {\n *     const nfts = await contract.getAll()\n *     return nfts\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const edition = useEdition(\"0x1234...\");\n * + const edition = useContract(\"0x1234...\", \"edition\").contract;\n * ```\n * @internal\n */ function useEdition(contractAddress) {\n    showDeprecationWarning(`useEdition(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"edition\")`);\n    return useContract(contractAddress, \"edition\").contract;\n}\n/**\n * Hook for getting an instance of an `NFTDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n * @param contractAddress - The address of the NFT Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-drop\")\n *\n *   // Now you can use the nft drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(quantity) {\n *     await contract.claim(quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const nftDrop = useNFTDrop(\"0x1234...\");\n * + const nftDrop = useContract(\"0x1234...\", \"nft-drop\").contract;\n * ```\n * @internal\n */ function useNFTDrop(contractAddress) {\n    showDeprecationWarning(`useNFTDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"nft-drop\")`);\n    return useContract(contractAddress, \"nft-drop\").contract;\n}\n/**\n * Hook for getting an instance of a `Marketplace` contract. This contract is used to support marketplace for purchase and sale of on-chain assets.\n * @param contractAddress - The address of the Marketplace contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"marketplace\")\n *\n *   // Now you can use the marketplace contract in the rest of the component\n *\n *   // For example, this function will return all the listings on the marketplace\n *   async function getListings() {\n *     const listings = await contract.getAll()\n *     return listings\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const marketplace = useMarketplace(\"0x1234...\");\n * + const marketplace = useContract(\"0x1234...\", \"marketplace\").contract;\n * ```\n * @internal\n */ function useMarketplace(contractAddress) {\n    showDeprecationWarning(`useMarketplace(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"marketplace\")`);\n    return useContract(contractAddress, \"marketplace\").contract;\n}\n/**\n * Hook for getting an instance of an `NFTCollection` contract. This contract is meant to interface with ERC721 compliant NFTs.\n * @param contractAddress - The address of the NFT Collection contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract, isLoading, error } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"nft-collection\")\n *\n *   // Now you can use the nftCollection contract in the rest of the component\n *\n *   // For example, this function will return all the NFTs on this contract\n *   async function getNFTs() {\n *     const nfts = await contract.getAll()\n *     return nfts\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const nftCollection = useNFTCollection(\"0x1234...\");\n * + const nftCollection = useContract(\"0x1234...\", \"nft-collection\").contract;\n * ```\n * @internal\n */ function useNFTCollection(contractAddress) {\n    showDeprecationWarning(`useNFTCollection(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"nft-collection\")`);\n    return useContract(contractAddress, \"nft-collection\").contract;\n}\n/**\n * Hook for getting an instance of a `Pack` contract. This contract supports the creation of on-chain luck-based lootboxes.\n * @param contractAddress - The address of the Pack contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = usePack(\"<YOUR-CONTRACT-ADDRESS>\", \"pack\")\n *\n *   // Now you can use the pack contract in the rest of the component\n *\n *   // For example, this function will get all the packs on this contract\n *   async function getPacks() {\n *     const packs = await contract.getAll()\n *     return packs\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const pack = usePack(\"0x1234...\");\n * + const pack = useContract(\"0x1234...\", \"pack\").contract;\n * ```\n *\n * @internal\n */ function usePack(contractAddress) {\n    showDeprecationWarning(`usePack(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"pack\")`);\n    return useContract(contractAddress, \"pack\").contract;\n}\n/**\n * Hook for getting an instance of a `Token` contract. This contract supports ERC20 compliant tokens.\n * @param contractAddress - The address of the Token contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token\")\n *\n *   // Now you can use the token contract in the rest of the component\n *\n *   // For example, this function will get the connected wallets token balance\n *   async function balance() {\n *     const balance = await contract.balance()\n *     return balance\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const token = useToken(\"0x1234...\");\n * + const token = useContract(\"0x1234...\", \"token\").contract;\n * ```\n *\n * @internal\n */ function useToken(contractAddress) {\n    showDeprecationWarning(`useToken(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"token\")`);\n    return useContract(contractAddress, \"token\").contract;\n}\n/**\n * Hook for getting an instance of a `Token Drop` contract.\n * @param contractAddress - The address of the Token Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"token-drop\")\n *\n *   // Now you can use the token drop contract in the rest of the component\n *\n *   // For example, this function will get the connected wallets token balance\n *   async function balance() {\n *     const balance = await contract.balance()\n *     return balance\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const token = useTokenDrop(\"0x1234...\");\n * + const token = useContract(\"0x1234...\", \"token-drop\").contract;\n * ```\n *\n * @token\n * @internal\n */ function useTokenDrop(contractAddress) {\n    showDeprecationWarning(`useTokenDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"token-drop\")`);\n    return useContract(contractAddress, \"token-drop\").contract;\n}\n/**\n * Hook for getting an instance of an `Vote` contract. This contract enables fully featured voting-based decentralized governance systems.\n * @param contractAddress - The address of the Vote contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"vote\")\n *\n *   // Now you can use the vote contract in the rest of the component\n *\n *   // For example, this function will get all the proposals on this contract\n *   async function getProposals() {\n *     const proposals = await contract.getAll()\n *     return proposals\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const vote = useVote(\"0x1234...\");\n * + const vote = useContract(\"0x1234...\", \"vote\").contract;\n * ```\n *\n * @internal\n */ function useVote(contractAddress) {\n    showDeprecationWarning(`useVote(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"vote\")`);\n    return useContract(contractAddress, \"vote\").contract;\n}\n/**\n * Hook for getting an instance of a `Split` contract. This contract supports fund distribution to multiple parties.\n * @param contractAddress - The address of the Split contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"split\")\n *\n *   // Now you can use the split contract in the rest of the component\n *\n *   // For example, this function will return all the recipients of the split\n *   async function getRecipients() {\n *     const recipients = await contract.getAllRecipients()\n *     return recipients\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const split = useSplit(\"0x1234...\");\n * + const split = useContract(\"0x1234...\", \"split\").contract;\n * ```\n * @internal\n */ function useSplit(contractAddress) {\n    showDeprecationWarning(`useSplit(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"split\")`);\n    return useContract(contractAddress, \"split\").contract;\n}\n/**\n * Hook for getting an instance of an `Multiwrap` contract. This contract is an ERC721 in which you can wrap ERC721, ERC1155 and ERC20 tokens.\n * @param contractAddress - The address of the Multiwrap contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"multiwrap\")\n *\n *   // Now you can use the multiwrap contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet wrap tokens\n *   async function wrap(tokensToWrap, wrappedNFTMetadata) {\n *     await contract.wrap(tokensToWrap, wrappedNFTMetadata)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const multiwrap = useMultiwrap(\"0x1234...\");\n * + const multiwrap = useContract(\"0x1234...\", \"multiwrap\").contract;\n * ```\n * @internal\n */ function useMultiwrap(contractAddress) {\n    showDeprecationWarning(`useMultiwrap(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"multiwrap\")`);\n    return useContract(contractAddress, \"multiwrap\").contract;\n}\n/**\n * Hook for getting an instance of an `SignatureDrop` contract. This contract is meant to interface with ERC721 compliant NFTs that can be lazily minted.\n * @param contractAddress - The address of the NFT Drop contract, found in your thirdweb dashboard\n *\n * @example\n * ```javascript\n * import { useContract } from '@thirdweb-dev/react'\n *\n * export default function Component() {\n *   const { contract } = useContract(\"<YOUR-CONTRACT-ADDRESS>\", \"signature-drop\")\n *\n *   // Now you can use the Signature drop contract in the rest of the component\n *\n *   // For example, this function will let the connected wallet claim a new NFT\n *   async function claim(quantity) {\n *     await contract.claim(quantity)\n *   }\n *\n *   ...\n * }\n * ```\n * @public\n * @deprecated\n * This hook is deprecated and will be removed in a future major version. You should use {@link useContract} instead.\n * ```diff\n * - const signatureDrop = useSignatureDrop(\"0x1234...\");\n * + const signatureDrop = useContract(\"0x1234...\", \"signature-drop\").contract;\n * ```\n * @internal\n */ function useSignatureDrop(contractAddress) {\n    showDeprecationWarning(`useSignatureDrop(\"${contractAddress || \"0x...\"}\")`, `useContract(\"${contractAddress || \"0x...\"}\", \"signature-drop\")`);\n    return useContract(contractAddress, \"signature-drop\").contract;\n}\n/**\n * Get the instance of the `ThirdwebStorage` class being used by the `ThirdwebProvider`\n *\n * Allows you to use the TypeScript SDK functionality of [Storage](https://portal.thirdweb.com/infrastructure/storage/overview) in your React app.\n *\n * @example\n *\n * ```jsx\n * import { useStorage } from \"@thirdweb-dev/react\";\n *\n * export default function Component() {\n *   const storage = useStorage();\n *\n *   // Now you can use the functionality of the ThirdwebStorage class:\n *   storage?.download(); // Download a file from IPFS\n *   storage?.upload(); // Upload a file to IPFS\n * }\n * ```\n *\n * @remarks\n *\n * ### API Key\n *\n * You will require an API key to use thirdweb’s storage services with the SDK. If you haven’t created a key yet you can do so for free from the [**thirdweb dashboard**](https://thirdweb.com/create-api-key).\n *\n * You can then obtain a `clientId` from the API key which you will need to pass to the `ThirdwebProvider` component:\n *\n *\n * ```jsx\n * import { ThirdwebProvider } from \"@thirdweb-dev/react\";\n *\n * const App = () => {\n *   return (\n *     <ThirdwebProvider clientId=\"YOUR_CLIENT_ID\">\n *       <YourApp />\n *     </ThirdwebProvider>\n *   );\n * };\n * ```\n *\n * Storage can also be configured using the `storageInterface` prop on `ThirdwebProvider`\n *\n * @storage\n */ function useStorage() {\n    const sdk = useSDK();\n    return sdk?.storage;\n}\n/**\n * Hook for uploading files to IPFS and retrieving the IPFS URI.\n *\n * @example\n * ```jsx\n * import { useStorageUpload } from \"@thirdweb-dev/react\";\n *\n * export default function Component() {\n *   const { mutateAsync: upload, isLoading } = useStorageUpload();\n *\n *   async function uploadData() {\n *     const filesToUpload = [...];\n *     const uris = await upload({ data: files });\n *     console.log(uris);\n *   }\n *\n *   return (\n *     <button onClick={uploadData}>\n *       Upload\n *     </button>\n *   )\n * }\n * ```\n *\n * @remarks\n * ### API key\n *\n * You will require an API key to use thirdweb’s storage services with the SDK. If you haven’t created a key yet you can do so for free from the [**thirdweb dashboard**](https://thirdweb.com/create-api-key).\n *\n * You can then obtain a `clientId` from the API key which you will need to pass to the [`ThirdwebProvider`](/react/react.thirdwebprovider) component:\n *\n * ```jsx\n * import { ThirdwebProvider } from \"@thirdweb/react\";\n *\n * const App = () => {\n *   return (\n *     <ThirdwebProvider clientId=\"YOUR_CLIENT_ID\">\n *       <YourApp />\n *     </ThirdwebProvider>\n *   );\n * };\n * ```\n *\n * @param options - Configure the options for your upload\n * ### rewriteFileNames (optional)\n *\n * If specified, will rewrite file names to numbers for use on-chain.\n *\n * Useful to use with NFT contracts that map token IDs to files.\n *\n * ```jsx\n * import { useStorageUpload } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { mutateAsync: upload } = useStorageUpload({\n *     rewriteFileNames: {\n *       fileStartNumber: 1,\n *     },\n *   });\n * }\n * ```\n *\n * ### uploadWithGatewayUrl (optional)\n *\n * If specified, any URLs with schemes will be replaced with resolved URLs before upload.\n *\n * ```jsx\n * import { useStorageUpload } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { mutateAsync: upload } = useStorageUpload({\n *     uploadWithGatewayUrl: true,\n *   });\n * }\n * ```\n *\n * ### onProgress (optional)\n *\n * Callback that gets triggered when file upload progresses.\n *\n * ```jsx\n * import { useStorageUpload } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { mutateAsync: upload } = useStorageUpload({\n *     onProgress: (progress) => {\n *       console.log(progress);\n *     },\n *   });\n * }\n * ```\n *\n * ### uploadWithoutDirectory (optional)\n *\n * If specified, will upload a single file without wrapping it in a directory.\n *\n * ```jsx\n * import { useStorageUpload } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const { mutateAsync: upload } = useStorageUpload({\n *     uploadWithoutDirectory: true,\n *   });\n * }\n * ```\n *\n * @storage\n */ function useStorageUpload(uploadOptions) {\n    const sdk = useSDK();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)(async (_ref)=>{\n        let { data, options } = _ref;\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sdk, \"sdk must be defined\");\n        return await sdk.storage.uploadBatch(data, options || uploadOptions);\n    });\n}\n/**\n * Hook for checking whether the connected wallet is currently on the correct chain,\n * i.e. the chain specified in the `activeChain` on the `ThirdwebProvider`.\n *\n * @example\n *\n * ```jsx\n * import { useNetworkMismatch } from \"@thirdweb-dev/react\";\n *\n * const App = () => {\n *   const isMismatched = useNetworkMismatch();\n * };\n * ```\n *\n * Using this value, you can prompt users to switch their network using the `useSwitchChain` hook.\n *\n * @returns\n * Returns `true` if the `chainId` of the connected wallet is different from the `chainId` of the `activeChain` on the `ThirdwebProvider` component\n *\n * @networkConnection\n */ function useNetworkMismatch() {\n    const walletChainId = useChainId();\n    const sdkChainId = useSDKChainId();\n    if (!sdkChainId) {\n        // we don't know yet\n        return false;\n    }\n    if (sdkChainId === -1) {\n        // means no network is set in the <ThirdwebProvider />, so we don't care about the network mismatch\n        return false;\n    }\n    if (!walletChainId) {\n        // means no wallet is connected yet, so we don't care about the network mismatch\n        return false;\n    }\n    // check if the chainIds are different\n    return sdkChainId !== walletChainId;\n}\n/**\n * @internal\n */ function useReadonlySDK(readonlyRpcUrl, sdkOptions, storageInterface) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return new _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_13__.T(readonlyRpcUrl, sdkOptions, storageInterface);\n    // storageInterface should be constant!\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        readonlyRpcUrl,\n        sdkOptions\n    ]);\n}\n/**\n * Hook for getting the [ethers signer](https://docs.ethers.org/v5/api/signer/) of the connected wallet.\n *\n * @example\n *\n * ```jsx\n * import { useSigner, Web3Button } from \"@thirdweb-dev/react\";\n *\n * function App() {\n *   const signer = useSigner();\n * }\n * ```\n *\n * @returns\n *\n * `Signer` if wallet is connected, otherwise `undefined`.\n *\n * @walletConnection\n */ function useSigner() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThirdwebConnectedWalletContext);\n    (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(context, \"useSigner() hook must be used within a <ThirdwebProvider/>\");\n    return context.signer;\n}\n/**\n * @deprecated use `useWallet` instead\n * @internal\n */ function useSupportedWallet(id) {\n    const context = useWalletContext();\n    const wallet = context?.wallets.find((_wallet)=>_wallet.id === id);\n    if (!wallet) {\n        throw new Error(`Wallet with id \"${id}\" is not supported`);\n    }\n    return wallet;\n}\n/**\n * Get App URI of the contract\n *\n * @example\n * ```javascript\n * const { data: contractMetadata, isLoading, error } = useAppURI(contract);\n * ```\n *\n * @param contract - The `SmartContract` instance of the contract to get the appURI of\n * @returns Query result object that includes the appURI of the contract\n * @twfeature AppURI\n * @appURI\n */ function useAppURI(contract) {\n    return useQueryWithNetwork(cacheKeys.contract.app.get(contract?.getAddress()), async ()=>{\n        requiredParamInvariant(contract, \"Contract is required\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.app, \"Contract does not support app\");\n        return await contract.app.get();\n    }, {\n        enabled: !!contract\n    });\n}\n/**\n * Set App URI of the contract\n *\n * @example\n * ```jsx\n * const Component = () => {\n *   const {\n *     mutate: useSetAppURI,\n *     isLoading,\n *     error,\n *   } = useSetAppURI(contract);\n *\n *   if (error) {\n *     console.error(\"failed to update appURI\", error);\n *   }\n *\n *   return (\n *     <button\n *       disabled={isLoading}\n *       onClick={() => useSetAppURI({ uri })}\n *     >\n *       Update App URI\n *     </button>\n *   );\n * };\n * ```\n * @param contract - Instance of a `SmartContract`\n * @returns A mutation object to update the appURI of a contract\n *\n * @twfeature AppURI\n * @appURI\n */ function useSetAppURI(contract) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueryClient)();\n    const contractAddress = contract?.getAddress();\n    const activeChainId = useSDKChainId();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.useMutation)((params)=>{\n        requiredParamInvariant(contract, \"Contract is required\");\n        (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contract.app, \"Contract does not support app\");\n        return contract.app.set(params.uri);\n    }, {\n        onSettled: ()=>invalidateContractAndBalances(queryClient, contractAddress, activeChainId)\n    });\n}\n/**\n *\n * @internal\n */ function useENS() {\n    const address = useAddress();\n    const supportedChains = useSupportedChains();\n    const { clientId } = useWalletContext();\n    const ethereum = supportedChains.find((chain)=>chain.chainId === 1);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__.useQuery)({\n        queryKey: [\n            \"ens\",\n            address,\n            ethereum?.rpc\n        ],\n        cacheTime: 60 * 60 * 24 * 1000,\n        // 24h\n        staleTime: 60 * 60 * 1000,\n        // 1h\n        retry: false,\n        enabled: !!address,\n        queryFn: async ()=>{\n            if (!address) {\n                return null;\n            }\n            const provider = (0,_thirdweb_dev_sdk_evm__WEBPACK_IMPORTED_MODULE_4__.getChainProvider)(1, {\n                clientId,\n                supportedChains: ethereum ? [\n                    {\n                        chainId: 1,\n                        rpc: [\n                            ...ethereum.rpc\n                        ],\n                        nativeCurrency: ethereum.nativeCurrency,\n                        slug: ethereum.slug\n                    }\n                ] : undefined\n            });\n            if (provider instanceof ethers__WEBPACK_IMPORTED_MODULE_24__.JsonRpcProvider) {\n                const [ens, avatarUrl] = await Promise.all([\n                    provider.lookupAddress(address),\n                    provider.getAvatar(address)\n                ]);\n                return {\n                    ens,\n                    avatarUrl\n                };\n            }\n            return {\n                ens: await provider.lookupAddress(address),\n                avatarUrl: null\n            };\n        }\n    });\n}\n/**\n * @internal\n */ function shortenString(str) {\n    let extraShort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return `${str.substring(0, extraShort ? 4 : 6)}...${str.substring(str.length - (extraShort ? 3 : 4))}`;\n}\n/**\n * This function shortens an address if it is a valid EVM address.\n *\n * @param address - The address to shorten\n * @param extraShort - If true, show the first 4 and last 3 characters\n * @returns The shortened address\n *\n * @remarks\n * Note that this function will not check if the address is an ENS.\n *\n * @example Calling shortenAddress with extraShort set to true\n * ```ts\n * const address = shortenIfAddress(\"0x1234567890123456789012345678901234567890\", true); // result will be \"0x1234...890\"\n * ```\n *\n */ function shortenAddress(address) {\n    let extraShort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!address) {\n        return \"\";\n    }\n    try {\n        const formattedAddress = ethers__WEBPACK_IMPORTED_MODULE_25__.getAddress(address);\n        return shortenString(formattedAddress, extraShort);\n    } catch  {\n        return address;\n    }\n}\n/**\n * @internal\n */ function shortenIfAddress(address) {\n    let extraShort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (address && ethers__WEBPACK_IMPORTED_MODULE_25__.isAddress(address)) {\n        return shortenAddress(address, extraShort);\n    }\n    return address || \"\";\n}\n/**\n * @internal\n */ function isEnsName(name) {\n    return name?.endsWith(\".eth\");\n}\n/**\n * @internal\n */ function isPossibleEVMAddress(address, ignoreEns) {\n    if (!address) {\n        return false;\n    }\n    if (isEnsName(address) && !ignoreEns) {\n        return true;\n    }\n    return ethers__WEBPACK_IMPORTED_MODULE_25__.isAddress(address);\n}\n/**\n * Hook that listens to transactions on a given chain for a given address.\n *\n * ```javascript\n * import { useWatchTransactions } from \"@thirdweb-dev/react\"\n * ```\n *\n * @example\n * ```js\n * const transactions = useWatchTransactions({\n *  address: \"0x1234\",\n *  network: \"ethereum\",\n * });\n * ```\n *\n * @param watchTransactionParams - Options for watching transactions\n *\n * #### address\n * The address to watch transactions for\n *\n * #### network\n * The network to watch transactions on\n *\n * #### sdkOptions\n * Options to pass to the thirdweb SDK\n *\n * @returns An array of `Transaction` objects\n */ function useWatchTransactions(watchTransactionParams) {\n    const { address, network, sdkOptions, // default to 1000, max 10k\n    limit: paramLimit = 1000 } = watchTransactionParams;\n    // max limit of 10k transactions to let the array grow to, then we'll start dropping the oldest ones\n    const limit = Math.min(paramLimit, 10000);\n    const [transactions, setTransactions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!address || !network) {\n            // cant run yet\n            return;\n        }\n        // since this already returns a function to unsubscribe, we can just return it\n        return (0,_thirdweb_dev_sdk_evm_functions__WEBPACK_IMPORTED_MODULE_5__.watchTransactions)({\n            address,\n            network,\n            sdkOptions,\n            onTransactions: (newTransactions)=>{\n                setTransactions((prevTransactions)=>{\n                    const mergedTxns = [\n                        ...newTransactions,\n                        ...prevTransactions\n                    ];\n                    // only keep the latest transactions\n                    return mergedTxns.slice(0, limit);\n                });\n            }\n        });\n    }, [\n        address,\n        limit,\n        network,\n        sdkOptions\n    ]);\n    return transactions;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@thirdweb-dev+react-core@4.3.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract_plysdfslk32mtl6afsu34koosm/node_modules/@thirdweb-dev/react-core/dist/useTransactions-f4cc9f88.esm.js\n");

/***/ })

};
;