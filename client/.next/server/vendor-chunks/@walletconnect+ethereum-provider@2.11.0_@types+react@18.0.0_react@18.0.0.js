"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect+ethereum-provider@2.11.0_@types+react@18.0.0_react@18.0.0";
exports.ids = ["vendor-chunks/@walletconnect+ethereum-provider@2.11.0_@types+react@18.0.0_react@18.0.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+ethereum-provider@2.11.0_@types+react@18.0.0_react@18.0.0/node_modules/@walletconnect/ethereum-provider/dist/index.es.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+ethereum-provider@2.11.0_@types+react@18.0.0_react@18.0.0/node_modules/@walletconnect/ethereum-provider/dist/index.es.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumProvider: () => (/* binding */ G),\n/* harmony export */   OPTIONAL_EVENTS: () => (/* binding */ _),\n/* harmony export */   OPTIONAL_METHODS: () => (/* binding */ E),\n/* harmony export */   REQUIRED_EVENTS: () => (/* binding */ m),\n/* harmony export */   REQUIRED_METHODS: () => (/* binding */ u),\n/* harmony export */   \"default\": () => (/* binding */ v)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+utils@2.11.0/node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(ssr)/./node_modules/.pnpm/@walletconnect+universal-provider@2.11.0/node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\nconst P = \"wc\", S = \"ethereum_provider\", $ = `${P}@2:${S}:`, j = \"https://rpc.walletconnect.com/v1/\", u = [\n    \"eth_sendTransaction\",\n    \"personal_sign\"\n], E = [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\"\n], m = [\n    \"chainChanged\",\n    \"accountsChanged\"\n], _ = [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n];\nvar N = Object.defineProperty, q = Object.defineProperties, D = Object.getOwnPropertyDescriptors, y = Object.getOwnPropertySymbols, U = Object.prototype.hasOwnProperty, Q = Object.prototype.propertyIsEnumerable, O = (a, t, s)=>t in a ? N(a, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : a[t] = s, p = (a, t)=>{\n    for(var s in t || (t = {}))U.call(t, s) && O(a, s, t[s]);\n    if (y) for (var s of y(t))Q.call(t, s) && O(a, s, t[s]);\n    return a;\n}, M = (a, t)=>q(a, D(t));\nfunction g(a) {\n    return Number(a[0].split(\":\")[1]);\n}\nfunction f(a) {\n    return `0x${a.toString(16)}`;\n}\nfunction L(a) {\n    const { chains: t, optionalChains: s, methods: i, optionalMethods: n, events: e, optionalEvents: h, rpcMap: c } = a;\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(t)) throw new Error(\"Invalid chains\");\n    const o = {\n        chains: t,\n        methods: i || u,\n        events: e || m,\n        rpcMap: p({}, t.length ? {\n            [g(t)]: c[g(t)]\n        } : {})\n    }, r = e?.filter((l)=>!m.includes(l)), d = i?.filter((l)=>!u.includes(l));\n    if (!s && !h && !n && !(r != null && r.length) && !(d != null && d.length)) return {\n        required: t.length ? o : void 0\n    };\n    const C = r?.length && d?.length || !s, I = {\n        chains: [\n            ...new Set(C ? o.chains.concat(s || []) : s)\n        ],\n        methods: [\n            ...new Set(o.methods.concat(n != null && n.length ? n : E))\n        ],\n        events: [\n            ...new Set(o.events.concat(h != null && h.length ? h : _))\n        ],\n        rpcMap: c\n    };\n    return {\n        required: t.length ? o : void 0,\n        optional: s.length ? I : void 0\n    };\n}\nclass v {\n    constructor(){\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.namespace = \"eip155\", this.accounts = [], this.chainId = 1, this.STORAGE_KEY = $, this.on = (t, s)=>(this.events.on(t, s), this), this.once = (t, s)=>(this.events.once(t, s), this), this.removeListener = (t, s)=>(this.events.removeListener(t, s), this), this.off = (t, s)=>(this.events.off(t, s), this), this.parseAccount = (t)=>this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t, this.signer = {}, this.rpc = {};\n    }\n    static async init(t) {\n        const s = new v;\n        return await s.initialize(t), s;\n    }\n    async request(t) {\n        return await this.signer.request(t, this.formatChainId(this.chainId));\n    }\n    sendAsync(t, s) {\n        this.signer.sendAsync(t, s, this.formatChainId(this.chainId));\n    }\n    get connected() {\n        return this.signer.client ? this.signer.client.core.relayer.connected : !1;\n    }\n    get connecting() {\n        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;\n    }\n    async enable() {\n        return this.session || await this.connect(), await this.request({\n            method: \"eth_requestAccounts\"\n        });\n    }\n    async connect(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts(t);\n        const { required: s, optional: i } = L(this.rpc);\n        try {\n            const n = await new Promise(async (h, c)=>{\n                var o;\n                this.rpc.showQrModal && ((o = this.modal) == null || o.subscribeModal((r)=>{\n                    !r.open && !this.signer.session && (this.signer.abortPairingAttempt(), c(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.connect(M(p({\n                    namespaces: p({}, s && {\n                        [this.namespace]: s\n                    })\n                }, i && {\n                    optionalNamespaces: {\n                        [this.namespace]: i\n                    }\n                }), {\n                    pairingTopic: t?.pairingTopic\n                })).then((r)=>{\n                    h(r);\n                }).catch((r)=>{\n                    c(new Error(r.message));\n                });\n            });\n            if (!n) return;\n            const e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(n.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : e), this.setAccounts(e), this.events.emit(\"connect\", {\n                chainId: f(this.chainId)\n            });\n        } catch (n) {\n            throw this.signer.logger.error(n), n;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async disconnect() {\n        this.session && await this.signer.disconnect(), this.reset();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    get session() {\n        return this.signer.session;\n    }\n    registerEventListeners() {\n        this.signer.on(\"session_event\", (t)=>{\n            const { params: s } = t, { event: i } = s;\n            i.name === \"accountsChanged\" ? (this.accounts = this.parseAccounts(i.data), this.events.emit(\"accountsChanged\", this.accounts)) : i.name === \"chainChanged\" ? this.setChainId(this.formatChainId(i.data)) : this.events.emit(i.name, i.data), this.events.emit(\"session_event\", t);\n        }), this.signer.on(\"chainChanged\", (t)=>{\n            const s = parseInt(t);\n            this.chainId = s, this.events.emit(\"chainChanged\", f(this.chainId)), this.persist();\n        }), this.signer.on(\"session_update\", (t)=>{\n            this.events.emit(\"session_update\", t);\n        }), this.signer.on(\"session_delete\", (t)=>{\n            this.reset(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", M(p({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic,\n                name: \"USER_DISCONNECTED\"\n            }));\n        }), this.signer.on(\"display_uri\", (t)=>{\n            var s, i;\n            this.rpc.showQrModal && ((s = this.modal) == null || s.closeModal(), (i = this.modal) == null || i.openModal({\n                uri: t\n            })), this.events.emit(\"display_uri\", t);\n        });\n    }\n    switchEthereumChain(t) {\n        this.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: t.toString(16)\n                }\n            ]\n        });\n    }\n    isCompatibleChainId(t) {\n        return typeof t == \"string\" ? t.startsWith(`${this.namespace}:`) : !1;\n    }\n    formatChainId(t) {\n        return `${this.namespace}:${t}`;\n    }\n    parseChainId(t) {\n        return Number(t.split(\":\")[1]);\n    }\n    setChainIds(t) {\n        const s = t.filter((i)=>this.isCompatibleChainId(i)).map((i)=>this.parseChainId(i));\n        s.length && (this.chainId = s[0], this.events.emit(\"chainChanged\", f(this.chainId)), this.persist());\n    }\n    setChainId(t) {\n        if (this.isCompatibleChainId(t)) {\n            const s = this.parseChainId(t);\n            this.chainId = s, this.switchEthereumChain(s);\n        }\n    }\n    parseAccountId(t) {\n        const [s, i, n] = t.split(\":\");\n        return {\n            chainId: `${s}:${i}`,\n            address: n\n        };\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((s)=>this.parseChainId(this.parseAccountId(s).chainId) === this.chainId).map((s)=>this.parseAccountId(s).address), this.events.emit(\"accountsChanged\", this.accounts);\n    }\n    getRpcConfig(t) {\n        var s, i;\n        const n = (s = t?.chains) != null ? s : [], e = (i = t?.optionalChains) != null ? i : [], h = n.concat(e);\n        if (!h.length) throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n        const c = n.length ? t?.methods || u : [], o = n.length ? t?.events || m : [], r = t?.optionalMethods || [], d = t?.optionalEvents || [], C = t?.rpcMap || this.buildRpcMap(h, t.projectId), I = t?.qrModalOptions || void 0;\n        return {\n            chains: n?.map((l)=>this.formatChainId(l)),\n            optionalChains: e.map((l)=>this.formatChainId(l)),\n            methods: c,\n            events: o,\n            optionalMethods: r,\n            optionalEvents: d,\n            rpcMap: C,\n            showQrModal: !!(t != null && t.showQrModal),\n            qrModalOptions: I,\n            projectId: t.projectId,\n            metadata: t.metadata\n        };\n    }\n    buildRpcMap(t, s) {\n        const i = {};\n        return t.forEach((n)=>{\n            i[n] = this.getRpcUrl(n, s);\n        }), i;\n    }\n    async initialize(t) {\n        if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? g(this.rpc.chains) : g(this.rpc.optionalChains), this.signer = await _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__.UniversalProvider.init({\n            projectId: this.rpc.projectId,\n            metadata: this.rpc.metadata,\n            disableProviderPing: t.disableProviderPing,\n            relayUrl: t.relayUrl,\n            storageOptions: t.storageOptions\n        }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {\n            let s;\n            try {\n                const { WalletConnectModal: i } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/valtio@1.11.2_@types+react@18.0.0_react@18.0.0\"), __webpack_require__.e(\"vendor-chunks/@walletconnect+modal@2.6.2_@types+react@18.0.0_react@18.0.0\"), __webpack_require__.e(\"vendor-chunks/@walletconnect+modal-core@2.6.2_@types+react@18.0.0_react@18.0.0\"), __webpack_require__.e(\"vendor-chunks/proxy-compare@2.5.1\")]).then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(ssr)/./node_modules/.pnpm/@walletconnect+modal@2.6.2_@types+react@18.0.0_react@18.0.0/node_modules/@walletconnect/modal/dist/index.js\"));\n                s = i;\n            } catch  {\n                throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n            }\n            if (s) try {\n                this.modal = new s(p({\n                    projectId: this.rpc.projectId\n                }, this.rpc.qrModalOptions));\n            } catch (i) {\n                throw this.signer.logger.error(i), new Error(\"Could not generate WalletConnectModal Instance\");\n            }\n        }\n    }\n    loadConnectOpts(t) {\n        if (!t) return;\n        const { chains: s, optionalChains: i, rpcMap: n } = t;\n        s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(s) && (this.rpc.chains = s.map((e)=>this.formatChainId(e)), s.forEach((e)=>{\n            this.rpc.rpcMap[e] = n?.[e] || this.getRpcUrl(e);\n        })), i && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(i) && (this.rpc.optionalChains = [], this.rpc.optionalChains = i?.map((e)=>this.formatChainId(e)), i.forEach((e)=>{\n            this.rpc.rpcMap[e] = n?.[e] || this.getRpcUrl(e);\n        }));\n    }\n    getRpcUrl(t, s) {\n        var i;\n        return ((i = this.rpc.rpcMap) == null ? void 0 : i[t]) || `${j}?chainId=eip155:${t}&projectId=${s || this.rpc.projectId}`;\n    }\n    async loadPersistedSession() {\n        if (!this.session) return;\n        const t = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`), s = this.session.namespaces[`${this.namespace}:${t}`] ? this.session.namespaces[`${this.namespace}:${t}`] : this.session.namespaces[this.namespace];\n        this.setChainIds(t ? [\n            this.formatChainId(t)\n        ] : s?.accounts), this.setAccounts(s?.accounts);\n    }\n    reset() {\n        this.chainId = 1, this.accounts = [];\n    }\n    persist() {\n        this.session && this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n    }\n    parseAccounts(t) {\n        return typeof t == \"string\" || t instanceof String ? [\n            this.parseAccount(t)\n        ] : t.map((s)=>this.parseAccount(s));\n    }\n}\nconst G = v;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhbGxldGNvbm5lY3QrZXRoZXJldW0tcHJvdmlkZXJAMi4xMS4wX0B0eXBlcytyZWFjdEAxOC4wLjBfcmVhY3RAMTguMC4wL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldGhlcmV1bS1wcm92aWRlci9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBc0M7QUFBb0c7QUFBc0U7QUFBQSxNQUFNVSxJQUFFLE1BQUtDLElBQUUscUJBQW9CQyxJQUFFLENBQUMsRUFBRUYsRUFBRSxHQUFHLEVBQUVDLEVBQUUsQ0FBQyxDQUFDLEVBQUNFLElBQUUscUNBQW9DQyxJQUFFO0lBQUM7SUFBc0I7Q0FBZ0IsRUFBQ0MsSUFBRTtJQUFDO0lBQWU7SUFBc0I7SUFBeUI7SUFBVztJQUFzQjtJQUFvQjtJQUF1QjtJQUF1QjtJQUFzQjtJQUFnQjtJQUE2QjtJQUEwQjtJQUF3QjtJQUE0QjtJQUE0QjtJQUFvQjtDQUFvQixFQUFDQyxJQUFFO0lBQUM7SUFBZTtDQUFrQixFQUFDQyxJQUFFO0lBQUM7SUFBZTtJQUFrQjtJQUFVO0lBQWE7Q0FBVTtBQUFDLElBQUlDLElBQUVDLE9BQU9DLGNBQWMsRUFBQ0MsSUFBRUYsT0FBT0csZ0JBQWdCLEVBQUNDLElBQUVKLE9BQU9LLHlCQUF5QixFQUFDQyxJQUFFTixPQUFPTyxxQkFBcUIsRUFBQ0MsSUFBRVIsT0FBT1MsU0FBUyxDQUFDQyxjQUFjLEVBQUNDLElBQUVYLE9BQU9TLFNBQVMsQ0FBQ0csb0JBQW9CLEVBQUNDLElBQUUsQ0FBQ0MsR0FBRUMsR0FBRUMsSUFBSUQsS0FBS0QsSUFBRWYsRUFBRWUsR0FBRUMsR0FBRTtRQUFDRSxZQUFXLENBQUM7UUFBRUMsY0FBYSxDQUFDO1FBQUVDLFVBQVMsQ0FBQztRQUFFQyxPQUFNSjtJQUFDLEtBQUdGLENBQUMsQ0FBQ0MsRUFBRSxHQUFDQyxHQUFFSyxJQUFFLENBQUNQLEdBQUVDO0lBQUssSUFBSSxJ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WUFBQyxJQUFJLENBQUM0RCxhQUFhLENBQUM1RDtTQUFHLEdBQUNDLEdBQUcyQyxXQUFVLElBQUksQ0FBQ3lDLFdBQVcsQ0FBQ3BGLEdBQUcyQztJQUFTO0lBQUMrQyxRQUFPO1FBQUMsSUFBSSxDQUFDOUMsT0FBTyxHQUFDLEdBQUUsSUFBSSxDQUFDRCxRQUFRLEdBQUMsRUFBRTtJQUFBO0lBQUN5RCxVQUFTO1FBQUMsSUFBSSxDQUFDakMsT0FBTyxJQUFFLElBQUksQ0FBQ2IsTUFBTSxDQUFDUSxNQUFNLENBQUNDLElBQUksQ0FBQ3lELE9BQU8sQ0FBQ0UsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM3RSxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUMsSUFBSSxDQUFDRCxPQUFPO0lBQUM7SUFBQ29ELGNBQWNqRyxDQUFDLEVBQUM7UUFBQyxPQUFPLE9BQU9BLEtBQUcsWUFBVUEsYUFBYTRILFNBQU87WUFBQyxJQUFJLENBQUN6RSxZQUFZLENBQUNuRDtTQUFHLEdBQUNBLEVBQUU0RyxHQUFHLENBQUMzRyxDQUFBQSxJQUFHLElBQUksQ0FBQ2tELFlBQVksQ0FBQ2xEO0lBQUc7QUFBQztBQUFDLE1BQU00SCxJQUFFcEY7QUFBbUksQ0FDM3pRLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2FsbGV0Y29ubmVjdCtldGhlcmV1bS1wcm92aWRlckAyLjExLjBfQHR5cGVzK3JlYWN0QDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2V0aGVyZXVtLXByb3ZpZGVyL2Rpc3QvaW5kZXguZXMuanM/ODI2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIGJ9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e2dldEFjY291bnRzRnJvbU5hbWVzcGFjZXMgYXMgQSxnZXRTZGtFcnJvciBhcyBSLGlzVmFsaWRBcnJheSBhcyB3fWZyb21cIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7aW1wb3J0e1VuaXZlcnNhbFByb3ZpZGVyIGFzIFR9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdW5pdmVyc2FsLXByb3ZpZGVyXCI7Y29uc3QgUD1cIndjXCIsUz1cImV0aGVyZXVtX3Byb3ZpZGVyXCIsJD1gJHtQfUAyOiR7U306YCxqPVwiaHR0cHM6Ly9ycGMud2FsbGV0Y29ubmVjdC5jb20vdjEvXCIsdT1bXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsXCJwZXJzb25hbF9zaWduXCJdLEU9W1wiZXRoX2FjY291bnRzXCIsXCJldGhfcmVxdWVzdEFjY291bnRzXCIsXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsXCJldGhfc2lnblwiLFwiZXRoX3NpZ25UcmFuc2FjdGlvblwiLFwiZXRoX3NpZ25UeXBlZERhdGFcIixcImV0aF9zaWduVHlwZWREYXRhX3YzXCIsXCJldGhfc2lnblR5cGVkRGF0YV92NFwiLFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiLFwicGVyc29uYWxfc2lnblwiLFwid2FsbGV0X3N3aXRjaEV0aGVyZXVtQ2hhaW5cIixcIndhbGxldF9hZGRFdGhlcmV1bUNoYWluXCIsXCJ3YWxsZXRfZ2V0UGVybWlzc2lvbnNcIixcIndhbGxldF9yZXF1ZXN0UGVybWlzc2lvbnNcIixcIndhbGxldF9yZWdpc3Rlck9uYm9hcmRpbmdcIixcIndhbGxldF93YXRjaEFzc2V0XCIsXCJ3YWxsZXRfc2NhblFSQ29kZVwiXSxtPVtcImNoYWluQ2hhbmdlZFwiLFwiYWNjb3VudHNDaGFuZ2VkXCJdLF89W1wiY2hhaW5DaGFuZ2VkXCIsXCJhY2NvdW50c0NoYW5nZWRcIixcIm1lc3NhZ2VcIixcImRpc2Nvbm5lY3RcIixcImNvbm5lY3RcIl07dmFyIE49T2JqZWN0LmRlZmluZVByb3BlcnR5LHE9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMsRD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyx5PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsVT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFE9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxPPShhLHQscyk9PnQgaW4gYT9OKGEsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6c30pOmFbdF09cyxwPShhLHQpPT57Zm9yKHZhciBzIGluIHR8fCh0PXt9KSlVLmNhbGwodCxzKSYmTyhhLHMsdFtzXSk7aWYoeSlmb3IodmFyIHMgb2YgeSh0KSlRLmNhbGwodCxzKSYmTyhhLHMsdFtzXSk7cmV0dXJuIGF9LE09KGEsdCk9PnEoYSxEKHQpKTtmdW5jdGlvbiBnKGEpe3JldHVybiBOdW1iZXIoYVswXS5zcGxpdChcIjpcIilbMV0pfWZ1bmN0aW9uIGYoYSl7cmV0dXJuYDB4JHthLnRvU3RyaW5nKDE2KX1gfWZ1bmN0aW9uIEwoYSl7Y29uc3R7Y2hhaW5zOnQsb3B0aW9uYWxDaGFpbnM6cyxtZXRob2RzOmksb3B0aW9uYWxNZXRob2RzOm4sZXZlbnRzOmUsb3B0aW9uYWxFdmVudHM6aCxycGNNYXA6Y309YTtpZighdyh0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYWluc1wiKTtjb25zdCBvPXtjaGFpbnM6dCxtZXRob2RzOml8fHUsZXZlbnRzOmV8fG0scnBjTWFwOnAoe30sdC5sZW5ndGg/e1tnKHQpXTpjW2codCldfTp7fSl9LHI9ZT8uZmlsdGVyKGw9PiFtLmluY2x1ZGVzKGwpKSxkPWk/LmZpbHRlcihsPT4hdS5pbmNsdWRlcyhsKSk7aWYoIXMmJiFoJiYhbiYmIShyIT1udWxsJiZyLmxlbmd0aCkmJiEoZCE9bnVsbCYmZC5sZW5ndGgpKXJldHVybntyZXF1aXJlZDp0Lmxlbmd0aD9vOnZvaWQgMH07Y29uc3QgQz1yPy5sZW5ndGgmJmQ/Lmxlbmd0aHx8IXMsST17Y2hhaW5zOlsuLi5uZXcgU2V0KEM/by5jaGFpbnMuY29uY2F0KHN8fFtdKTpzKV0sbWV0aG9kczpbLi4ubmV3IFNldChvLm1ldGhvZHMuY29uY2F0KG4hPW51bGwmJm4ubGVuZ3RoP246RSkpXSxldmVudHM6Wy4uLm5ldyBTZXQoby5ldmVudHMuY29uY2F0KGghPW51bGwmJmgubGVuZ3RoP2g6XykpXSxycGNNYXA6Y307cmV0dXJue3JlcXVpcmVkOnQubGVuZ3RoP286dm9pZCAwLG9wdGlvbmFsOnMubGVuZ3RoP0k6dm9pZCAwfX1jbGFzcyB2e2NvbnN0cnVjdG9yKCl7dGhpcy5ldmVudHM9bmV3IGIsdGhpcy5uYW1lc3BhY2U9XCJlaXAxNTVcIix0aGlzLmFjY291bnRzPVtdLHRoaXMuY2hhaW5JZD0xLHRoaXMuU1RPUkFHRV9LRVk9JCx0aGlzLm9uPSh0LHMpPT4odGhpcy5ldmVudHMub24odCxzKSx0aGlzKSx0aGlzLm9uY2U9KHQscyk9Pih0aGlzLmV2ZW50cy5vbmNlKHQscyksdGhpcyksdGhpcy5yZW1vdmVMaXN0ZW5lcj0odCxzKT0+KHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKHQscyksdGhpcyksdGhpcy5vZmY9KHQscyk9Pih0aGlzLmV2ZW50cy5vZmYodCxzKSx0aGlzKSx0aGlzLnBhcnNlQWNjb3VudD10PT50aGlzLmlzQ29tcGF0aWJsZUNoYWluSWQodCk/dGhpcy5wYXJzZUFjY291bnRJZCh0KS5hZGRyZXNzOnQsdGhpcy5zaWduZXI9e30sdGhpcy5ycGM9e319c3RhdGljIGFzeW5jIGluaXQodCl7Y29uc3Qgcz1uZXcgdjtyZXR1cm4gYXdhaXQgcy5pbml0aWFsaXplKHQpLHN9YXN5bmMgcmVxdWVzdCh0KXtyZXR1cm4gYXdhaXQgdGhpcy5zaWduZXIucmVxdWVzdCh0LHRoaXMuZm9ybWF0Q2hhaW5JZCh0aGlzLmNoYWluSWQpKX1zZW5kQXN5bmModCxzKXt0aGlzLnNpZ25lci5zZW5kQXN5bmModCxzLHRoaXMuZm9ybWF0Q2hhaW5JZCh0aGlzLmNoYWluSWQpKX1nZXQgY29ubmVjdGVkKCl7cmV0dXJuIHRoaXMuc2lnbmVyLmNsaWVudD90aGlzLnNpZ25lci5jbGllbnQuY29yZS5yZWxheWVyLmNvbm5lY3RlZDohMX1nZXQgY29ubmVjdGluZygpe3JldHVybiB0aGlzLnNpZ25lci5jbGllbnQ/dGhpcy5zaWduZXIuY2xpZW50LmNvcmUucmVsYXllci5jb25uZWN0aW5nOiExfWFzeW5jIGVuYWJsZSgpe3JldHVybiB0aGlzLnNlc3Npb258fGF3YWl0IHRoaXMuY29ubmVjdCgpLGF3YWl0IHRoaXMucmVxdWVzdCh7bWV0aG9kOlwiZXRoX3JlcXVlc3RBY2NvdW50c1wifSl9YXN5bmMgY29ubmVjdCh0KXtpZighdGhpcy5zaWduZXIuY2xpZW50KXRocm93IG5ldyBFcnJvcihcIlByb3ZpZGVyIG5vdCBpbml0aWFsaXplZC4gQ2FsbCBpbml0KCkgZmlyc3RcIik7dGhpcy5sb2FkQ29ubmVjdE9wdHModCk7Y29uc3R7cmVxdWlyZWQ6cyxvcHRpb25hbDppfT1MKHRoaXMucnBjKTt0cnl7Y29uc3Qgbj1hd2FpdCBuZXcgUHJvbWlzZShhc3luYyhoLGMpPT57dmFyIG87dGhpcy5ycGMuc2hvd1FyTW9kYWwmJigobz10aGlzLm1vZGFsKT09bnVsbHx8by5zdWJzY3JpYmVNb2RhbChyPT57IXIub3BlbiYmIXRoaXMuc2lnbmVyLnNlc3Npb24mJih0aGlzLnNpZ25lci5hYm9ydFBhaXJpbmdBdHRlbXB0KCksYyhuZXcgRXJyb3IoXCJDb25uZWN0aW9uIHJlcXVlc3QgcmVzZXQuIFBsZWFzZSB0cnkgYWdhaW4uXCIpKSl9KSksYXdhaXQgdGhpcy5zaWduZXIuY29ubmVjdChNKHAoe25hbWVzcGFjZXM6cCh7fSxzJiZ7W3RoaXMubmFtZXNwYWNlXTpzfSl9LGkmJntvcHRpb25hbE5hbWVzcGFjZXM6e1t0aGlzLm5hbWVzcGFjZV06aX19KSx7cGFpcmluZ1RvcGljOnQ/LnBhaXJpbmdUb3BpY30pKS50aGVuKHI9PntoKHIpfSkuY2F0Y2gocj0+e2MobmV3IEVycm9yKHIubWVzc2FnZSkpfSl9KTtpZighbilyZXR1cm47Y29uc3QgZT1BKG4ubmFtZXNwYWNlcyxbdGhpcy5uYW1lc3BhY2VdKTt0aGlzLnNldENoYWluSWRzKHRoaXMucnBjLmNoYWlucy5sZW5ndGg/dGhpcy5ycGMuY2hhaW5zOmUpLHRoaXMuc2V0QWNjb3VudHMoZSksdGhpcy5ldmVudHMuZW1pdChcImNvbm5lY3RcIix7Y2hhaW5JZDpmKHRoaXMuY2hhaW5JZCl9KX1jYXRjaChuKXt0aHJvdyB0aGlzLnNpZ25lci5sb2dnZXIuZXJyb3Iobiksbn1maW5hbGx5e3RoaXMubW9kYWwmJnRoaXMubW9kYWwuY2xvc2VNb2RhbCgpfX1hc3luYyBkaXNjb25uZWN0KCl7dGhpcy5zZXNzaW9uJiZhd2FpdCB0aGlzLnNpZ25lci5kaXNjb25uZWN0KCksdGhpcy5yZXNldCgpfWdldCBpc1dhbGxldENvbm5lY3QoKXtyZXR1cm4hMH1nZXQgc2Vzc2lvbigpe3JldHVybiB0aGlzLnNpZ25lci5zZXNzaW9ufXJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKXt0aGlzLnNpZ25lci5vbihcInNlc3Npb25fZXZlbnRcIix0PT57Y29uc3R7cGFyYW1zOnN9PXQse2V2ZW50Oml9PXM7aS5uYW1lPT09XCJhY2NvdW50c0NoYW5nZWRcIj8odGhpcy5hY2NvdW50cz10aGlzLnBhcnNlQWNjb3VudHMoaS5kYXRhKSx0aGlzLmV2ZW50cy5lbWl0KFwiYWNjb3VudHNDaGFuZ2VkXCIsdGhpcy5hY2NvdW50cykpOmkubmFtZT09PVwiY2hhaW5DaGFuZ2VkXCI/dGhpcy5zZXRDaGFpbklkKHRoaXMuZm9ybWF0Q2hhaW5JZChpLmRhdGEpKTp0aGlzLmV2ZW50cy5lbWl0KGkubmFtZSxpLmRhdGEpLHRoaXMuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX2V2ZW50XCIsdCl9KSx0aGlzLnNpZ25lci5vbihcImNoYWluQ2hhbmdlZFwiLHQ9Pntjb25zdCBzPXBhcnNlSW50KHQpO3RoaXMuY2hhaW5JZD1zLHRoaXMuZXZlbnRzLmVtaXQoXCJjaGFpbkNoYW5nZWRcIixmKHRoaXMuY2hhaW5JZCkpLHRoaXMucGVyc2lzdCgpfSksdGhpcy5zaWduZXIub24oXCJzZXNzaW9uX3VwZGF0ZVwiLHQ9Pnt0aGlzLmV2ZW50cy5lbWl0KFwic2Vzc2lvbl91cGRhdGVcIix0KX0pLHRoaXMuc2lnbmVyLm9uKFwic2Vzc2lvbl9kZWxldGVcIix0PT57dGhpcy5yZXNldCgpLHRoaXMuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX2RlbGV0ZVwiLHQpLHRoaXMuZXZlbnRzLmVtaXQoXCJkaXNjb25uZWN0XCIsTShwKHt9LFIoXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSkse2RhdGE6dC50b3BpYyxuYW1lOlwiVVNFUl9ESVNDT05ORUNURURcIn0pKX0pLHRoaXMuc2lnbmVyLm9uKFwiZGlzcGxheV91cmlcIix0PT57dmFyIHMsaTt0aGlzLnJwYy5zaG93UXJNb2RhbCYmKChzPXRoaXMubW9kYWwpPT1udWxsfHxzLmNsb3NlTW9kYWwoKSwoaT10aGlzLm1vZGFsKT09bnVsbHx8aS5vcGVuTW9kYWwoe3VyaTp0fSkpLHRoaXMuZXZlbnRzLmVtaXQoXCJkaXNwbGF5X3VyaVwiLHQpfSl9c3dpdGNoRXRoZXJldW1DaGFpbih0KXt0aGlzLnJlcXVlc3Qoe21ldGhvZDpcIndhbGxldF9zd2l0Y2hFdGhlcmV1bUNoYWluXCIscGFyYW1zOlt7Y2hhaW5JZDp0LnRvU3RyaW5nKDE2KX1dfSl9aXNDb21wYXRpYmxlQ2hhaW5JZCh0KXtyZXR1cm4gdHlwZW9mIHQ9PVwic3RyaW5nXCI/dC5zdGFydHNXaXRoKGAke3RoaXMubmFtZXNwYWNlfTpgKTohMX1mb3JtYXRDaGFpbklkKHQpe3JldHVybmAke3RoaXMubmFtZXNwYWNlfToke3R9YH1wYXJzZUNoYWluSWQodCl7cmV0dXJuIE51bWJlcih0LnNwbGl0KFwiOlwiKVsxXSl9c2V0Q2hhaW5JZHModCl7Y29uc3Qgcz10LmZpbHRlcihpPT50aGlzLmlzQ29tcGF0aWJsZUNoYWluSWQoaSkpLm1hcChpPT50aGlzLnBhcnNlQ2hhaW5JZChpKSk7cy5sZW5ndGgmJih0aGlzLmNoYWluSWQ9c1swXSx0aGlzLmV2ZW50cy5lbWl0KFwiY2hhaW5DaGFuZ2VkXCIsZih0aGlzLmNoYWluSWQpKSx0aGlzLnBlcnNpc3QoKSl9c2V0Q2hhaW5JZCh0KXtpZih0aGlzLmlzQ29tcGF0aWJsZUNoYWluSWQodCkpe2NvbnN0IHM9dGhpcy5wYXJzZUNoYWluSWQodCk7dGhpcy5jaGFpbklkPXMsdGhpcy5zd2l0Y2hFdGhlcmV1bUNoYWluKHMpfX1wYXJzZUFjY291bnRJZCh0KXtjb25zdFtzLGksbl09dC5zcGxpdChcIjpcIik7cmV0dXJue2NoYWluSWQ6YCR7c306JHtpfWAsYWRkcmVzczpufX1zZXRBY2NvdW50cyh0KXt0aGlzLmFjY291bnRzPXQuZmlsdGVyKHM9PnRoaXMucGFyc2VDaGFpbklkKHRoaXMucGFyc2VBY2NvdW50SWQocykuY2hhaW5JZCk9PT10aGlzLmNoYWluSWQpLm1hcChzPT50aGlzLnBhcnNlQWNjb3VudElkKHMpLmFkZHJlc3MpLHRoaXMuZXZlbnRzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIix0aGlzLmFjY291bnRzKX1nZXRScGNDb25maWcodCl7dmFyIHMsaTtjb25zdCBuPShzPXQ/LmNoYWlucykhPW51bGw/czpbXSxlPShpPXQ/Lm9wdGlvbmFsQ2hhaW5zKSE9bnVsbD9pOltdLGg9bi5jb25jYXQoZSk7aWYoIWgubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk5vIGNoYWlucyBzcGVjaWZpZWQgaW4gZWl0aGVyIGBjaGFpbnNgIG9yIGBvcHRpb25hbENoYWluc2BcIik7Y29uc3QgYz1uLmxlbmd0aD90Py5tZXRob2RzfHx1OltdLG89bi5sZW5ndGg/dD8uZXZlbnRzfHxtOltdLHI9dD8ub3B0aW9uYWxNZXRob2RzfHxbXSxkPXQ/Lm9wdGlvbmFsRXZlbnRzfHxbXSxDPXQ/LnJwY01hcHx8dGhpcy5idWlsZFJwY01hcChoLHQucHJvamVjdElkKSxJPXQ/LnFyTW9kYWxPcHRpb25zfHx2b2lkIDA7cmV0dXJue2NoYWluczpuPy5tYXAobD0+dGhpcy5mb3JtYXRDaGFpbklkKGwpKSxvcHRpb25hbENoYWluczplLm1hcChsPT50aGlzLmZvcm1hdENoYWluSWQobCkpLG1ldGhvZHM6YyxldmVudHM6byxvcHRpb25hbE1ldGhvZHM6cixvcHRpb25hbEV2ZW50czpkLHJwY01hcDpDLHNob3dRck1vZGFsOiEhKHQhPW51bGwmJnQuc2hvd1FyTW9kYWwpLHFyTW9kYWxPcHRpb25zOkkscHJvamVjdElkOnQucHJvamVjdElkLG1ldGFkYXRhOnQubWV0YWRhdGF9fWJ1aWxkUnBjTWFwKHQscyl7Y29uc3QgaT17fTtyZXR1cm4gdC5mb3JFYWNoKG49PntpW25dPXRoaXMuZ2V0UnBjVXJsKG4scyl9KSxpfWFzeW5jIGluaXRpYWxpemUodCl7aWYodGhpcy5ycGM9dGhpcy5nZXRScGNDb25maWcodCksdGhpcy5jaGFpbklkPXRoaXMucnBjLmNoYWlucy5sZW5ndGg/Zyh0aGlzLnJwYy5jaGFpbnMpOmcodGhpcy5ycGMub3B0aW9uYWxDaGFpbnMpLHRoaXMuc2lnbmVyPWF3YWl0IFQuaW5pdCh7cHJvamVjdElkOnRoaXMucnBjLnByb2plY3RJZCxtZXRhZGF0YTp0aGlzLnJwYy5tZXRhZGF0YSxkaXNhYmxlUHJvdmlkZXJQaW5nOnQuZGlzYWJsZVByb3ZpZGVyUGluZyxyZWxheVVybDp0LnJlbGF5VXJsLHN0b3JhZ2VPcHRpb25zOnQuc3RvcmFnZU9wdGlvbnN9KSx0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKSxhd2FpdCB0aGlzLmxvYWRQZXJzaXN0ZWRTZXNzaW9uKCksdGhpcy5ycGMuc2hvd1FyTW9kYWwpe2xldCBzO3RyeXtjb25zdHtXYWxsZXRDb25uZWN0TW9kYWw6aX09YXdhaXQgaW1wb3J0KFwiQHdhbGxldGNvbm5lY3QvbW9kYWxcIik7cz1pfWNhdGNoe3Rocm93IG5ldyBFcnJvcihcIlRvIHVzZSBRUiBtb2RhbCwgcGxlYXNlIGluc3RhbGwgQHdhbGxldGNvbm5lY3QvbW9kYWwgcGFja2FnZVwiKX1pZihzKXRyeXt0aGlzLm1vZGFsPW5ldyBzKHAoe3Byb2plY3RJZDp0aGlzLnJwYy5wcm9qZWN0SWR9LHRoaXMucnBjLnFyTW9kYWxPcHRpb25zKSl9Y2F0Y2goaSl7dGhyb3cgdGhpcy5zaWduZXIubG9nZ2VyLmVycm9yKGkpLG5ldyBFcnJvcihcIkNvdWxkIG5vdCBnZW5lcmF0ZSBXYWxsZXRDb25uZWN0TW9kYWwgSW5zdGFuY2VcIil9fX1sb2FkQ29ubmVjdE9wdHModCl7aWYoIXQpcmV0dXJuO2NvbnN0e2NoYWluczpzLG9wdGlvbmFsQ2hhaW5zOmkscnBjTWFwOm59PXQ7cyYmdyhzKSYmKHRoaXMucnBjLmNoYWlucz1zLm1hcChlPT50aGlzLmZvcm1hdENoYWluSWQoZSkpLHMuZm9yRWFjaChlPT57dGhpcy5ycGMucnBjTWFwW2VdPW4/LltlXXx8dGhpcy5nZXRScGNVcmwoZSl9KSksaSYmdyhpKSYmKHRoaXMucnBjLm9wdGlvbmFsQ2hhaW5zPVtdLHRoaXMucnBjLm9wdGlvbmFsQ2hhaW5zPWk/Lm1hcChlPT50aGlzLmZvcm1hdENoYWluSWQoZSkpLGkuZm9yRWFjaChlPT57dGhpcy5ycGMucnBjTWFwW2VdPW4/LltlXXx8dGhpcy5nZXRScGNVcmwoZSl9KSl9Z2V0UnBjVXJsKHQscyl7dmFyIGk7cmV0dXJuKChpPXRoaXMucnBjLnJwY01hcCk9PW51bGw/dm9pZCAwOmlbdF0pfHxgJHtqfT9jaGFpbklkPWVpcDE1NToke3R9JnByb2plY3RJZD0ke3N8fHRoaXMucnBjLnByb2plY3RJZH1gfWFzeW5jIGxvYWRQZXJzaXN0ZWRTZXNzaW9uKCl7aWYoIXRoaXMuc2Vzc2lvbilyZXR1cm47Y29uc3QgdD1hd2FpdCB0aGlzLnNpZ25lci5jbGllbnQuY29yZS5zdG9yYWdlLmdldEl0ZW0oYCR7dGhpcy5TVE9SQUdFX0tFWX0vY2hhaW5JZGApLHM9dGhpcy5zZXNzaW9uLm5hbWVzcGFjZXNbYCR7dGhpcy5uYW1lc3BhY2V9OiR7dH1gXT90aGlzLnNlc3Npb24ubmFtZXNwYWNlc1tgJHt0aGlzLm5hbWVzcGFjZX06JHt0fWBdOnRoaXMuc2Vzc2lvbi5uYW1lc3BhY2VzW3RoaXMubmFtZXNwYWNlXTt0aGlzLnNldENoYWluSWRzKHQ/W3RoaXMuZm9ybWF0Q2hhaW5JZCh0KV06cz8uYWNjb3VudHMpLHRoaXMuc2V0QWNjb3VudHMocz8uYWNjb3VudHMpfXJlc2V0KCl7dGhpcy5jaGFpbklkPTEsdGhpcy5hY2NvdW50cz1bXX1wZXJzaXN0KCl7dGhpcy5zZXNzaW9uJiZ0aGlzLnNpZ25lci5jbGllbnQuY29yZS5zdG9yYWdlLnNldEl0ZW0oYCR7dGhpcy5TVE9SQUdFX0tFWX0vY2hhaW5JZGAsdGhpcy5jaGFpbklkKX1wYXJzZUFjY291bnRzKHQpe3JldHVybiB0eXBlb2YgdD09XCJzdHJpbmdcInx8dCBpbnN0YW5jZW9mIFN0cmluZz9bdGhpcy5wYXJzZUFjY291bnQodCldOnQubWFwKHM9PnRoaXMucGFyc2VBY2NvdW50KHMpKX19Y29uc3QgRz12O2V4cG9ydHtHIGFzIEV0aGVyZXVtUHJvdmlkZXIsXyBhcyBPUFRJT05BTF9FVkVOVFMsRSBhcyBPUFRJT05BTF9NRVRIT0RTLG0gYXMgUkVRVUlSRURfRVZFTlRTLHUgYXMgUkVRVUlSRURfTUVUSE9EUyx2IGFzIGRlZmF1bHR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwiYiIsImdldEFjY291bnRzRnJvbU5hbWVzcGFjZXMiLCJBIiwiZ2V0U2RrRXJyb3IiLCJSIiwiaXNWYWxpZEFycmF5IiwidyIsIlVuaXZlcnNhbFByb3ZpZGVyIiwiVCIsIlAiLCJTIiwiJCIsImoiLCJ1IiwiRSIsIm0iLCJfIiwiTiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicSIsImRlZmluZVByb3BlcnRpZXMiLCJEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJVIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJRIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJPIiwiYSIsInQiLCJzIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJwIiwiY2FsbCIsIk0iLCJnIiwiTnVtYmVyIiwic3BsaXQiLCJmIiwidG9TdHJpbmciLCJMIiwiY2hhaW5zIiwib3B0aW9uYWxDaGFpbnMiLCJtZXRob2RzIiwiaSIsIm9wdGlvbmFsTWV0aG9kcyIsIm4iLCJldmVudHMiLCJlIiwib3B0aW9uYWxFdmVudHMiLCJoIiwicnBjTWFwIiwiYyIsIkVycm9yIiwibyIsImxlbmd0aCIsInIiLCJmaWx0ZXIiLCJsIiwiaW5jbHVkZXMiLCJkIiwicmVxdWlyZWQiLCJDIiwiSSIsIlNldCIsImNvbmNhdCIsIm9wdGlvbmFsIiwidiIsImNvbnN0cnVjdG9yIiwibmFtZXNwYWNlIiwiYWNjb3VudHMiLCJjaGFpbklkIiwiU1RPUkFHRV9LRVkiLCJvbiIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsIm9mZiIsInBhcnNlQWNjb3VudCIsImlzQ29tcGF0aWJsZUNoYWluSWQiLCJwYXJzZUFjY291bnRJZCIsImFkZHJlc3MiLCJzaWduZXIiLCJycGMiLCJpbml0IiwiaW5pdGlhbGl6ZSIsInJlcXVlc3QiLCJmb3JtYXRDaGFpbklkIiwic2VuZEFzeW5jIiwiY29ubmVjdGVkIiwiY2xpZW50IiwiY29yZSIsInJlbGF5ZXIiLCJjb25uZWN0aW5nIiwiZW5hYmxlIiwic2Vzc2lvbiIsImNvbm5lY3QiLCJtZXRob2QiLCJsb2FkQ29ubmVjdE9wdHMiLCJQcm9taXNlIiwic2hvd1FyTW9kYWwiLCJtb2RhbCIsInN1YnNjcmliZU1vZGFsIiwib3BlbiIsImFib3J0UGFpcmluZ0F0dGVtcHQiLCJuYW1lc3BhY2VzIiwib3B0aW9uYWxOYW1lc3BhY2VzIiwicGFpcmluZ1RvcGljIiwidGhlbiIsImNhdGNoIiwibWVzc2FnZSIsInNldENoYWluSWRzIiwic2V0QWNjb3VudHMiLCJlbWl0IiwibG9nZ2VyIiwiZXJyb3IiLCJjbG9zZU1vZGFsIiwiZGlzY29ubmVjdCIsInJlc2V0IiwiaXNXYWxsZXRDb25uZWN0IiwicmVnaXN0ZXJFdmVudExpc3RlbmVycyIsInBhcmFtcyIsImV2ZW50IiwibmFtZSIsInBhcnNlQWNjb3VudHMiLCJkYXRhIiwic2V0Q2hhaW5JZCIsInBhcnNlSW50IiwicGVyc2lzdCIsInRvcGljIiwib3Blbk1vZGFsIiwidXJpIiwic3dpdGNoRXRoZXJldW1DaGFpbiIsInN0YXJ0c1dpdGgiLCJwYXJzZUNoYWluSWQiLCJtYXAiLCJnZXRScGNDb25maWciLCJidWlsZFJwY01hcCIsInByb2plY3RJZCIsInFyTW9kYWxPcHRpb25zIiwibWV0YWRhdGEiLCJmb3JFYWNoIiwiZ2V0UnBjVXJsIiwiZGlzYWJsZVByb3ZpZGVyUGluZyIsInJlbGF5VXJsIiwic3RvcmFnZU9wdGlvbnMiLCJsb2FkUGVyc2lzdGVkU2Vzc2lvbiIsIldhbGxldENvbm5lY3RNb2RhbCIsInN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsIlN0cmluZyIsIkciLCJFdGhlcmV1bVByb3ZpZGVyIiwiT1BUSU9OQUxfRVZFTlRTIiwiT1BUSU9OQUxfTUVUSE9EUyIsIlJFUVVJUkVEX0VWRU5UUyIsIlJFUVVJUkVEX01FVEhPRFMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+ethereum-provider@2.11.0_@types+react@18.0.0_react@18.0.0/node_modules/@walletconnect/ethereum-provider/dist/index.es.js\n");

/***/ })

};
;