"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect+auth-client@2.1.2";
exports.ids = ["vendor-chunks/@walletconnect+auth-client@2.1.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+auth-client@2.1.2/node_modules/@walletconnect/auth-client/dist/index.es.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+auth-client@2.1.2/node_modules/@walletconnect/auth-client/dist/index.es.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTH_CLIENT_CONTEXT: () => (/* binding */ Z),\n/* harmony export */   AUTH_CLIENT_DEFAULT_NAME: () => (/* binding */ B),\n/* harmony export */   AUTH_CLIENT_PROTOCOL: () => (/* binding */ $),\n/* harmony export */   AUTH_CLIENT_PUBLIC_KEY_NAME: () => (/* binding */ x),\n/* harmony export */   AUTH_CLIENT_STORAGE_PREFIX: () => (/* binding */ F),\n/* harmony export */   AUTH_CLIENT_VERSION: () => (/* binding */ Q),\n/* harmony export */   AUTH_REQUEST_EXPIRY_BOUNDARIES: () => (/* binding */ U),\n/* harmony export */   AuthClient: () => (/* binding */ zr),\n/* harmony export */   BASE10: () => (/* binding */ Ir),\n/* harmony export */   BASE16: () => (/* binding */ ye),\n/* harmony export */   BASE64: () => (/* binding */ qr),\n/* harmony export */   DEFAULT_RPC_URL: () => (/* binding */ Y),\n/* harmony export */   ENGINE_RPC_OPTS: () => (/* binding */ R),\n/* harmony export */   EXPIRER_CONTEXT: () => (/* binding */ Ge),\n/* harmony export */   EXPIRER_DEFAULT_TTL: () => (/* binding */ Qe),\n/* harmony export */   EXPIRER_EVENTS: () => (/* binding */ He),\n/* harmony export */   EXPIRER_STORAGE_VERSION: () => (/* binding */ Ye),\n/* harmony export */   IAuthClient: () => (/* binding */ H),\n/* harmony export */   IAuthEngine: () => (/* binding */ G),\n/* harmony export */   UTF8: () => (/* binding */ we),\n/* harmony export */   \"default\": () => (/* binding */ S),\n/* harmony export */   generateNonce: () => (/* binding */ Ur),\n/* harmony export */   hashMessage: () => (/* binding */ K)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/core */ \"(ssr)/./node_modules/.pnpm/@walletconnect+core@2.11.0/node_modules/@walletconnect/core/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/.pnpm/@walletconnect+logger@2.0.1/node_modules/@walletconnect/logger/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+jsonrpc-utils@1.0.8/node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+utils@2.11.0/node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/hash */ \"(ssr)/./node_modules/.pnpm/@ethersproject+hash@5.7.0/node_modules/@ethersproject/hash/lib.esm/message.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/transactions */ \"(ssr)/./node_modules/.pnpm/@ethersproject+transactions@5.7.0/node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! isomorphic-unfetch */ \"(ssr)/./node_modules/.pnpm/isomorphic-unfetch@3.1.0/node_modules/isomorphic-unfetch/index.js\");\n/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @stablelib/random */ \"(ssr)/./node_modules/.pnpm/@stablelib+random@1.0.2/node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _stablelib_sha256__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @stablelib/sha256 */ \"(ssr)/./node_modules/.pnpm/@stablelib+sha256@1.0.1/node_modules/@stablelib/sha256/lib/sha256.js\");\n\n\n\n\n\n\n\n\n\n\n\nclass G {\n    constructor(t){\n        this.client = t;\n    }\n}\nclass H {\n    constructor(t){\n        this.opts = t;\n    }\n}\nconst Y = \"https://rpc.walletconnect.com/v1\", R = {\n    wc_authRequest: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_3__.ONE_DAY,\n            prompt: !0,\n            tag: 3e3\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_3__.ONE_DAY,\n            prompt: !1,\n            tag: 3001\n        }\n    }\n}, U = {\n    min: _walletconnect_time__WEBPACK_IMPORTED_MODULE_3__.FIVE_MINUTES,\n    max: _walletconnect_time__WEBPACK_IMPORTED_MODULE_3__.SEVEN_DAYS\n}, $ = \"wc\", Q = 1, Z = \"auth\", B = \"authClient\", F = `${$}@${1}:${Z}:`, x = `${F}:PUB_KEY`, Ge = \"expirer\", He = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Ye = \"0.3\", Qe = _walletconnect_time__WEBPACK_IMPORTED_MODULE_3__.ONE_DAY;\nfunction z(r) {\n    return r?.split(\":\");\n}\nfunction Ze(r) {\n    const t = r && z(r);\n    if (t) return t[3];\n}\nfunction We(r) {\n    const t = r && z(r);\n    if (t) return t[2] + \":\" + t[3];\n}\nfunction W(r) {\n    const t = r && z(r);\n    if (t) return t.pop();\n}\nasync function et(r, t, e, i, n) {\n    switch(e.t){\n        case \"eip191\":\n            return tt(r, t, e.s);\n        case \"eip1271\":\n            return await rt(r, t, e.s, i, n);\n        default:\n            throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${e.t}`);\n    }\n}\nfunction tt(r, t, e) {\n    return (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__.recoverAddress)((0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__.hashMessage)(t), e).toLowerCase() === r.toLowerCase();\n}\nasync function rt(r, t, e, i, n) {\n    try {\n        const s = \"0x1626ba7e\", o = \"0000000000000000000000000000000000000000000000000000000000000040\", u = \"0000000000000000000000000000000000000000000000000000000000000041\", a = e.substring(2), c = (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__.hashMessage)(t).substring(2), h = s + c + o + u + a, f = await isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_4___default()(`${Y}/?chainId=${i}&projectId=${n}`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                id: it(),\n                jsonrpc: \"2.0\",\n                method: \"eth_call\",\n                params: [\n                    {\n                        to: r,\n                        data: h\n                    },\n                    \"latest\"\n                ]\n            })\n        }), { result: p } = await f.json();\n        return p ? p.slice(0, s.length).toLowerCase() === s.toLowerCase() : !1;\n    } catch (s) {\n        return console.error(\"isValidEip1271Signature: \", s), !1;\n    }\n}\nfunction it() {\n    return Date.now() + Math.floor(Math.random() * 1e3);\n}\nfunction ee(r) {\n    return r.getAll().filter((t)=>\"requester\" in t);\n}\nfunction te(r, t) {\n    return ee(r).find((e)=>e.id === t);\n}\nfunction nt(r) {\n    const t = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__.isValidUrl)(r.aud), e = new RegExp(`${r.domain}`).test(r.aud), i = !!r.nonce, n = r.type ? r.type === \"eip4361\" : !0, s = r.expiry;\n    if (s && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__.isValidRequestExpiry)(s, U)) {\n        const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__.getInternalError)(\"MISSING_OR_INVALID\", `request() expiry: ${s}. Expiry must be a number (in seconds) between ${U.min} and ${U.max}`);\n        throw new Error(o);\n    }\n    return !!(t && e && i && n);\n}\nfunction st(r, t) {\n    return !!te(t, r.id);\n}\nfunction ot(r = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(r) : new Uint8Array(r);\n}\nfunction ut(r, t) {\n    if (r.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var e = new Uint8Array(256), i = 0; i < e.length; i++)e[i] = 255;\n    for(var n = 0; n < r.length; n++){\n        var s = r.charAt(n), o = s.charCodeAt(0);\n        if (e[o] !== 255) throw new TypeError(s + \" is ambiguous\");\n        e[o] = n;\n    }\n    var u = r.length, a = r.charAt(0), c = Math.log(u) / Math.log(256), h = Math.log(256) / Math.log(u);\n    function f(D) {\n        if (D instanceof Uint8Array || (ArrayBuffer.isView(D) ? D = new Uint8Array(D.buffer, D.byteOffset, D.byteLength) : Array.isArray(D) && (D = Uint8Array.from(D))), !(D instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (D.length === 0) return \"\";\n        for(var l = 0, m = 0, E = 0, y = D.length; E !== y && D[E] === 0;)E++, l++;\n        for(var w = (y - E) * h + 1 >>> 0, g = new Uint8Array(w); E !== y;){\n            for(var C = D[E], _ = 0, b = w - 1; (C !== 0 || _ < m) && b !== -1; b--, _++)C += 256 * g[b] >>> 0, g[b] = C % u >>> 0, C = C / u >>> 0;\n            if (C !== 0) throw new Error(\"Non-zero carry\");\n            m = _, E++;\n        }\n        for(var v = w - m; v !== w && g[v] === 0;)v++;\n        for(var q = a.repeat(l); v < w; ++v)q += r.charAt(g[v]);\n        return q;\n    }\n    function p(D) {\n        if (typeof D != \"string\") throw new TypeError(\"Expected String\");\n        if (D.length === 0) return new Uint8Array;\n        var l = 0;\n        if (D[l] !== \" \") {\n            for(var m = 0, E = 0; D[l] === a;)m++, l++;\n            for(var y = (D.length - l) * c + 1 >>> 0, w = new Uint8Array(y); D[l];){\n                var g = e[D.charCodeAt(l)];\n                if (g === 255) return;\n                for(var C = 0, _ = y - 1; (g !== 0 || C < E) && _ !== -1; _--, C++)g += u * w[_] >>> 0, w[_] = g % 256 >>> 0, g = g / 256 >>> 0;\n                if (g !== 0) throw new Error(\"Non-zero carry\");\n                E = C, l++;\n            }\n            if (D[l] !== \" \") {\n                for(var b = y - E; b !== y && w[b] === 0;)b++;\n                for(var v = new Uint8Array(m + (y - b)), q = m; b !== y;)v[q++] = w[b++];\n                return v;\n            }\n        }\n    }\n    function A(D) {\n        var l = p(D);\n        if (l) return l;\n        throw new Error(`Non-${t} character`);\n    }\n    return {\n        encode: f,\n        decodeUnsafe: p,\n        decode: A\n    };\n}\nvar at = ut, Dt = at;\nconst re = (r)=>{\n    if (r instanceof Uint8Array && r.constructor.name === \"Uint8Array\") return r;\n    if (r instanceof ArrayBuffer) return new Uint8Array(r);\n    if (ArrayBuffer.isView(r)) return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, ct = (r)=>new TextEncoder().encode(r), ht = (r)=>new TextDecoder().decode(r);\nclass lt {\n    constructor(t, e, i){\n        this.name = t, this.prefix = e, this.baseEncode = i;\n    }\n    encode(t) {\n        if (t instanceof Uint8Array) return `${this.prefix}${this.baseEncode(t)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass dt {\n    constructor(t, e, i){\n        if (this.name = t, this.prefix = e, e.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = e.codePointAt(0), this.baseDecode = i;\n    }\n    decode(t) {\n        if (typeof t == \"string\") {\n            if (t.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(t)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(t.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(t) {\n        return ie(this, t);\n    }\n}\nclass pt {\n    constructor(t){\n        this.decoders = t;\n    }\n    or(t) {\n        return ie(this, t);\n    }\n    decode(t) {\n        const e = t[0], i = this.decoders[e];\n        if (i) return i.decode(t);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(t)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst ie = (r, t)=>new pt({\n        ...r.decoders || {\n            [r.prefix]: r\n        },\n        ...t.decoders || {\n            [t.prefix]: t\n        }\n    });\nclass ft {\n    constructor(t, e, i, n){\n        this.name = t, this.prefix = e, this.baseEncode = i, this.baseDecode = n, this.encoder = new lt(t, e, i), this.decoder = new dt(t, e, n);\n    }\n    encode(t) {\n        return this.encoder.encode(t);\n    }\n    decode(t) {\n        return this.decoder.decode(t);\n    }\n}\nconst O = ({ name: r, prefix: t, encode: e, decode: i })=>new ft(r, t, e, i), T = ({ prefix: r, name: t, alphabet: e })=>{\n    const { encode: i, decode: n } = Dt(e, t);\n    return O({\n        prefix: r,\n        name: t,\n        encode: i,\n        decode: (s)=>re(n(s))\n    });\n}, gt = (r, t, e, i)=>{\n    const n = {};\n    for(let h = 0; h < t.length; ++h)n[t[h]] = h;\n    let s = r.length;\n    for(; r[s - 1] === \"=\";)--s;\n    const o = new Uint8Array(s * e / 8 | 0);\n    let u = 0, a = 0, c = 0;\n    for(let h = 0; h < s; ++h){\n        const f = n[r[h]];\n        if (f === void 0) throw new SyntaxError(`Non-${i} character`);\n        a = a << e | f, u += e, u >= 8 && (u -= 8, o[c++] = 255 & a >> u);\n    }\n    if (u >= e || 255 & a << 8 - u) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, Et = (r, t, e)=>{\n    const i = t[t.length - 1] === \"=\", n = (1 << e) - 1;\n    let s = \"\", o = 0, u = 0;\n    for(let a = 0; a < r.length; ++a)for(u = u << 8 | r[a], o += 8; o > e;)o -= e, s += t[n & u >> o];\n    if (o && (s += t[n & u << e - o]), i) for(; s.length * e & 7;)s += \"=\";\n    return s;\n}, d = ({ name: r, prefix: t, bitsPerChar: e, alphabet: i })=>O({\n        prefix: t,\n        name: r,\n        encode (n) {\n            return Et(n, i, e);\n        },\n        decode (n) {\n            return gt(n, i, e, r);\n        }\n    }), bt = O({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (r)=>ht(r),\n    decode: (r)=>ct(r)\n});\nvar yt = Object.freeze({\n    __proto__: null,\n    identity: bt\n});\nconst wt = d({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar Ct = Object.freeze({\n    __proto__: null,\n    base2: wt\n});\nconst mt = d({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar vt = Object.freeze({\n    __proto__: null,\n    base8: mt\n});\nconst At = T({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar _t = Object.freeze({\n    __proto__: null,\n    base10: At\n});\nconst xt = d({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Rt = d({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar Ft = Object.freeze({\n    __proto__: null,\n    base16: xt,\n    base16upper: Rt\n});\nconst Tt = d({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), It = d({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), qt = d({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), Ut = d({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), Ot = d({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), St = d({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), Pt = d({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), Nt = d({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), $t = d({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar Bt = Object.freeze({\n    __proto__: null,\n    base32: Tt,\n    base32upper: It,\n    base32pad: qt,\n    base32padupper: Ut,\n    base32hex: Ot,\n    base32hexupper: St,\n    base32hexpad: Pt,\n    base32hexpadupper: Nt,\n    base32z: $t\n});\nconst zt = T({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), jt = T({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar Mt = Object.freeze({\n    __proto__: null,\n    base36: zt,\n    base36upper: jt\n});\nconst Lt = T({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Kt = T({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar Vt = Object.freeze({\n    __proto__: null,\n    base58btc: Lt,\n    base58flickr: Kt\n});\nconst kt = d({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), Jt = d({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), Xt = d({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), Gt = d({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Ht = Object.freeze({\n    __proto__: null,\n    base64: kt,\n    base64pad: Jt,\n    base64url: Xt,\n    base64urlpad: Gt\n});\nconst ne = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Yt = ne.reduce((r, t, e)=>(r[e] = t, r), []), Qt = ne.reduce((r, t, e)=>(r[t.codePointAt(0)] = e, r), []);\nfunction Zt(r) {\n    return r.reduce((t, e)=>(t += Yt[e], t), \"\");\n}\nfunction Wt(r) {\n    const t = [];\n    for (const e of r){\n        const i = Qt[e.codePointAt(0)];\n        if (i === void 0) throw new Error(`Non-base256emoji character: ${e}`);\n        t.push(i);\n    }\n    return new Uint8Array(t);\n}\nconst er = O({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Zt,\n    decode: Wt\n});\nvar tr = Object.freeze({\n    __proto__: null,\n    base256emoji: er\n}), rr = oe, se = 128, ir = 127, nr = ~ir, sr = Math.pow(2, 31);\nfunction oe(r, t, e) {\n    t = t || [], e = e || 0;\n    for(var i = e; r >= sr;)t[e++] = r & 255 | se, r /= 128;\n    for(; r & nr;)t[e++] = r & 255 | se, r >>>= 7;\n    return t[e] = r | 0, oe.bytes = e - i + 1, t;\n}\nvar or = j, ur = 128, ue = 127;\nfunction j(r, i) {\n    var e = 0, i = i || 0, n = 0, s = i, o, u = r.length;\n    do {\n        if (s >= u) throw j.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = r[s++], e += n < 28 ? (o & ue) << n : (o & ue) * Math.pow(2, n), n += 7;\n    }while (o >= ur);\n    return j.bytes = s - i, e;\n}\nvar ar = Math.pow(2, 7), Dr = Math.pow(2, 14), cr = Math.pow(2, 21), hr = Math.pow(2, 28), lr = Math.pow(2, 35), dr = Math.pow(2, 42), pr = Math.pow(2, 49), fr = Math.pow(2, 56), gr = Math.pow(2, 63), Er = function(r) {\n    return r < ar ? 1 : r < Dr ? 2 : r < cr ? 3 : r < hr ? 4 : r < lr ? 5 : r < dr ? 6 : r < pr ? 7 : r < fr ? 8 : r < gr ? 9 : 10;\n}, br = {\n    encode: rr,\n    decode: or,\n    encodingLength: Er\n}, ae = br;\nconst De = (r, t, e = 0)=>(ae.encode(r, t, e), t), ce = (r)=>ae.encodingLength(r), M = (r, t)=>{\n    const e = t.byteLength, i = ce(r), n = i + ce(e), s = new Uint8Array(n + e);\n    return De(r, s, 0), De(e, s, i), s.set(t, n), new yr(r, e, t, s);\n};\nclass yr {\n    constructor(t, e, i, n){\n        this.code = t, this.size = e, this.digest = i, this.bytes = n;\n    }\n}\nconst he = ({ name: r, code: t, encode: e })=>new wr(r, t, e);\nclass wr {\n    constructor(t, e, i){\n        this.name = t, this.code = e, this.encode = i;\n    }\n    digest(t) {\n        if (t instanceof Uint8Array) {\n            const e = this.encode(t);\n            return e instanceof Uint8Array ? M(this.code, e) : e.then((i)=>M(this.code, i));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n}\nconst le = (r)=>async (t)=>new Uint8Array(await crypto.subtle.digest(r, t)), Cr = he({\n    name: \"sha2-256\",\n    code: 18,\n    encode: le(\"SHA-256\")\n}), mr = he({\n    name: \"sha2-512\",\n    code: 19,\n    encode: le(\"SHA-512\")\n});\nvar vr = Object.freeze({\n    __proto__: null,\n    sha256: Cr,\n    sha512: mr\n});\nconst de = 0, Ar = \"identity\", pe = re, _r = (r)=>M(de, pe(r)), xr = {\n    code: de,\n    name: Ar,\n    encode: pe,\n    digest: _r\n};\nvar Rr = Object.freeze({\n    __proto__: null,\n    identity: xr\n});\nnew TextEncoder, new TextDecoder;\nconst fe = {\n    ...yt,\n    ...Ct,\n    ...vt,\n    ..._t,\n    ...Ft,\n    ...Bt,\n    ...Mt,\n    ...Vt,\n    ...Ht,\n    ...tr\n};\n({\n    ...vr,\n    ...Rr\n});\nfunction ge(r, t, e, i) {\n    return {\n        name: r,\n        prefix: t,\n        encoder: {\n            name: r,\n            prefix: t,\n            encode: e\n        },\n        decoder: {\n            decode: i\n        }\n    };\n}\nconst Ee = ge(\"utf8\", \"u\", (r)=>\"u\" + new TextDecoder(\"utf8\").decode(r), (r)=>new TextEncoder().encode(r.substring(1))), L = ge(\"ascii\", \"a\", (r)=>{\n    let t = \"a\";\n    for(let e = 0; e < r.length; e++)t += String.fromCharCode(r[e]);\n    return t;\n}, (r)=>{\n    r = r.substring(1);\n    const t = ot(r.length);\n    for(let e = 0; e < r.length; e++)t[e] = r.charCodeAt(e);\n    return t;\n}), be = {\n    utf8: Ee,\n    \"utf-8\": Ee,\n    hex: fe.base16,\n    latin1: L,\n    ascii: L,\n    binary: L,\n    ...fe\n};\nfunction Fr(r, t = \"utf8\") {\n    const e = be[t];\n    if (!e) throw new Error(`Unsupported encoding \"${t}\"`);\n    return (t === \"utf8\" || t === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r, \"utf8\") : e.decoder.decode(`${e.prefix}${r}`);\n}\nfunction Tr(r, t = \"utf8\") {\n    const e = be[t];\n    if (!e) throw new Error(`Unsupported encoding \"${t}\"`);\n    return (t === \"utf8\" || t === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r.buffer, r.byteOffset, r.byteLength).toString(\"utf8\") : e.encoder.encode(r).substring(1);\n}\nconst Ir = \"base10\", ye = \"base16\", qr = \"base64pad\", we = \"utf8\";\nfunction Ur() {\n    return (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_5__.randomStringForEntropy)(96);\n}\nfunction K(r) {\n    const t = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_6__.hash)(Fr(r, we));\n    return Tr(t, ye);\n}\nvar Or = Object.defineProperty, Sr = Object.defineProperties, Pr = Object.getOwnPropertyDescriptors, Ce = Object.getOwnPropertySymbols, Nr = Object.prototype.hasOwnProperty, $r = Object.prototype.propertyIsEnumerable, me = (r, t, e)=>t in r ? Or(r, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : r[t] = e, I = (r, t)=>{\n    for(var e in t || (t = {}))Nr.call(t, e) && me(r, e, t[e]);\n    if (Ce) for (var e of Ce(t))$r.call(t, e) && me(r, e, t[e]);\n    return r;\n}, V = (r, t)=>Sr(r, Pr(t));\nclass Br extends G {\n    constructor(t){\n        super(t), this.initialized = !1, this.name = \"authEngine\", this.init = ()=>{\n            this.initialized || (this.registerRelayerEvents(), this.registerPairingEvents(), this.client.core.pairing.register({\n                methods: Object.keys(R)\n            }), this.initialized = !0);\n        }, this.request = async (e, i)=>{\n            if (this.isInitialized(), !nt(e)) throw new Error(\"Invalid request\");\n            if (i != null && i.topic) return await this.requestOnKnownPairing(i.topic, e);\n            const { chainId: n, statement: s, aud: o, domain: u, nonce: a, type: c, exp: h, nbf: f } = e, { topic: p, uri: A } = await this.client.core.pairing.create();\n            this.client.logger.info({\n                message: \"Generated new pairing\",\n                pairing: {\n                    topic: p,\n                    uri: A\n                }\n            });\n            const D = await this.client.core.crypto.generateKeyPair(), l = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__.hashKey)(D);\n            await this.client.authKeys.set(x, {\n                responseTopic: l,\n                publicKey: D\n            }), await this.client.pairingTopics.set(l, {\n                topic: l,\n                pairingTopic: p\n            }), await this.client.core.relayer.subscribe(l), this.client.logger.info(`sending request to new pairing topic: ${p}`);\n            const m = await this.sendRequest(p, \"wc_authRequest\", {\n                payloadParams: {\n                    type: c ?? \"eip4361\",\n                    chainId: n,\n                    statement: s,\n                    aud: o,\n                    domain: u,\n                    version: \"1\",\n                    nonce: a,\n                    iat: new Date().toISOString(),\n                    exp: h,\n                    nbf: f\n                },\n                requester: {\n                    publicKey: D,\n                    metadata: this.client.metadata\n                }\n            }, {}, e.expiry);\n            return this.client.logger.info(`sent request to new pairing topic: ${p}`), {\n                uri: A,\n                id: m\n            };\n        }, this.respond = async (e, i)=>{\n            if (this.isInitialized(), !st(e, this.client.requests)) throw new Error(\"Invalid response\");\n            const n = te(this.client.requests, e.id);\n            if (!n) throw new Error(`Could not find pending auth request with id ${e.id}`);\n            const s = n.requester.publicKey, o = await this.client.core.crypto.generateKeyPair(), u = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__.hashKey)(s), a = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__.TYPE_1,\n                receiverPublicKey: s,\n                senderPublicKey: o\n            };\n            if (\"error\" in e) {\n                await this.sendError(n.id, u, e, a);\n                return;\n            }\n            const c = {\n                h: {\n                    t: \"eip4361\"\n                },\n                p: V(I({}, n.cacaoPayload), {\n                    iss: i\n                }),\n                s: e.signature\n            };\n            await this.sendResult(n.id, u, c, a), await this.client.core.pairing.activate({\n                topic: n.pairingTopic\n            }), await this.client.requests.update(n.id, I({}, c));\n        }, this.getPendingRequests = ()=>ee(this.client.requests), this.formatMessage = (e, i)=>{\n            this.client.logger.debug(`formatMessage, cacao is: ${JSON.stringify(e)}`);\n            const n = `${e.domain} wants you to sign in with your Ethereum account:`, s = W(i), o = e.statement, u = `URI: ${e.aud}`, a = `Version: ${e.version}`, c = `Chain ID: ${Ze(i)}`, h = `Nonce: ${e.nonce}`, f = `Issued At: ${e.iat}`, p = e.exp ? `Expiry: ${e.exp}` : void 0, A = e.resources && e.resources.length > 0 ? `Resources:\n${e.resources.map((D)=>`- ${D}`).join(`\n`)}` : void 0;\n            return [\n                n,\n                s,\n                \"\",\n                o,\n                \"\",\n                u,\n                a,\n                c,\n                h,\n                f,\n                p,\n                A\n            ].filter((D)=>D != null).join(`\n`);\n        }, this.setExpiry = async (e, i)=>{\n            this.client.core.pairing.pairings.keys.includes(e) && await this.client.core.pairing.updateExpiry({\n                topic: e,\n                expiry: i\n            }), this.client.core.expirer.set(e, i);\n        }, this.sendRequest = async (e, i, n, s, o)=>{\n            const u = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcRequest)(i, n), a = await this.client.core.crypto.encode(e, u, s), c = R[i].req;\n            if (o && (c.ttl = o), this.client.core.history.set(e, u), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__.isBrowser)()) {\n                const h = K(JSON.stringify(u));\n                this.client.core.verify.register({\n                    attestationId: h\n                });\n            }\n            return await this.client.core.relayer.publish(e, a, V(I({}, c), {\n                internal: {\n                    throwOnFailedPublish: !0\n                }\n            })), u.id;\n        }, this.sendResult = async (e, i, n, s)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcResult)(e, n), u = await this.client.core.crypto.encode(i, o, s), a = await this.client.core.history.get(i, e), c = R[a.request.method].res;\n            return await this.client.core.relayer.publish(i, u, V(I({}, c), {\n                internal: {\n                    throwOnFailedPublish: !0\n                }\n            })), await this.client.core.history.resolve(o), o.id;\n        }, this.sendError = async (e, i, n, s)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(e, n.error), u = await this.client.core.crypto.encode(i, o, s), a = await this.client.core.history.get(i, e), c = R[a.request.method].res;\n            return await this.client.core.relayer.publish(i, u, c), await this.client.core.history.resolve(o), o.id;\n        }, this.requestOnKnownPairing = async (e, i)=>{\n            const n = this.client.core.pairing.pairings.getAll({\n                active: !0\n            }).find((A)=>A.topic === e);\n            if (!n) throw new Error(`Could not find pairing for provided topic ${e}`);\n            const { publicKey: s } = this.client.authKeys.get(x), { chainId: o, statement: u, aud: a, domain: c, nonce: h, type: f } = i, p = await this.sendRequest(n.topic, \"wc_authRequest\", {\n                payloadParams: {\n                    type: f ?? \"eip4361\",\n                    chainId: o,\n                    statement: u,\n                    aud: a,\n                    domain: c,\n                    version: \"1\",\n                    nonce: h,\n                    iat: new Date().toISOString()\n                },\n                requester: {\n                    publicKey: s,\n                    metadata: this.client.metadata\n                }\n            }, {}, i.expiry);\n            return this.client.logger.info(`sent request to known pairing topic: ${n.topic}`), {\n                id: p\n            };\n        }, this.onPairingCreated = (e)=>{\n            const i = this.getPendingRequests();\n            if (i) {\n                const n = Object.values(i).find((s)=>s.pairingTopic === e.topic);\n                n && this.handleAuthRequest(n);\n            }\n        }, this.onRelayEventRequest = (e)=>{\n            const { topic: i, payload: n } = e, s = n.method;\n            switch(s){\n                case \"wc_authRequest\":\n                    return this.onAuthRequest(i, n);\n                default:\n                    return this.client.logger.info(`Unsupported request method ${s}`);\n            }\n        }, this.onRelayEventResponse = async (e)=>{\n            const { topic: i, payload: n } = e, s = (await this.client.core.history.get(i, n.id)).request.method;\n            switch(s){\n                case \"wc_authRequest\":\n                    return this.onAuthResponse(i, n);\n                default:\n                    return this.client.logger.info(`Unsupported response method ${s}`);\n            }\n        }, this.onAuthRequest = async (e, i)=>{\n            const { requester: n, payloadParams: s } = i.params;\n            this.client.logger.info({\n                type: \"onAuthRequest\",\n                topic: e,\n                payload: i\n            });\n            const o = K(JSON.stringify(i)), u = await this.getVerifyContext(o, this.client.metadata), a = {\n                requester: n,\n                pairingTopic: e,\n                id: i.id,\n                cacaoPayload: s,\n                verifyContext: u\n            };\n            await this.client.requests.set(i.id, a), this.handleAuthRequest(a);\n        }, this.handleAuthRequest = async (e)=>{\n            const { id: i, pairingTopic: n, requester: s, cacaoPayload: o, verifyContext: u } = e;\n            try {\n                this.client.emit(\"auth_request\", {\n                    id: i,\n                    topic: n,\n                    params: {\n                        requester: s,\n                        cacaoPayload: o\n                    },\n                    verifyContext: u\n                });\n            } catch (a) {\n                await this.sendError(e.id, e.pairingTopic, a), this.client.logger.error(a);\n            }\n        }, this.onAuthResponse = async (e, i)=>{\n            const { id: n } = i;\n            if (this.client.logger.info({\n                type: \"onAuthResponse\",\n                topic: e,\n                response: i\n            }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isJsonRpcResult)(i)) {\n                const { pairingTopic: s } = this.client.pairingTopics.get(e);\n                await this.client.core.pairing.activate({\n                    topic: s\n                });\n                const { s: o, p: u } = i.result;\n                await this.client.requests.set(n, I({\n                    id: n,\n                    pairingTopic: s\n                }, i.result));\n                const a = this.formatMessage(u, u.iss);\n                this.client.logger.debug(`reconstructed message:\n`, JSON.stringify(a)), this.client.logger.debug(\"payload.iss:\", u.iss), this.client.logger.debug(\"signature:\", o);\n                const c = W(u.iss), h = We(u.iss);\n                if (!c) throw new Error(\"Could not derive address from `payload.iss`\");\n                if (!h) throw new Error(\"Could not derive chainId from `payload.iss`\");\n                this.client.logger.debug(\"walletAddress extracted from `payload.iss`:\", c), await et(c, a, o, h, this.client.projectId) ? this.client.emit(\"auth_response\", {\n                    id: n,\n                    topic: e,\n                    params: i\n                }) : this.client.emit(\"auth_response\", {\n                    id: n,\n                    topic: e,\n                    params: {\n                        message: \"Invalid signature\",\n                        code: -1\n                    }\n                });\n            } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isJsonRpcError)(i) && this.client.emit(\"auth_response\", {\n                id: n,\n                topic: e,\n                params: i\n            });\n        }, this.getVerifyContext = async (e, i)=>{\n            const n = {\n                verified: {\n                    verifyUrl: i.verifyUrl || \"\",\n                    validation: \"UNKNOWN\",\n                    origin: i.url || \"\"\n                }\n            };\n            try {\n                const s = await this.client.core.verify.resolve({\n                    attestationId: e,\n                    verifyUrl: i.verifyUrl\n                });\n                s && (n.verified.origin = s.origin, n.verified.isScam = s.isScam, n.verified.validation = origin === new URL(i.url).origin ? \"VALID\" : \"INVALID\");\n            } catch (s) {\n                this.client.logger.error(s);\n            }\n            return this.client.logger.info(`Verify context: ${JSON.stringify(n)}`), n;\n        };\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_9__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(t);\n        }\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_10__.RELAYER_EVENTS.message, async (t)=>{\n            const { topic: e, message: i } = t, { responseTopic: n, publicKey: s } = this.client.authKeys.keys.includes(x) ? this.client.authKeys.get(x) : {\n                responseTopic: void 0,\n                publicKey: void 0\n            };\n            if (n && e !== n) {\n                this.client.logger.debug(\"[Auth] Ignoring message from unknown topic\", e);\n                return;\n            }\n            const o = await this.client.core.crypto.decode(e, i, {\n                receiverPublicKey: s\n            });\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isJsonRpcRequest)(o) ? (this.client.core.history.set(e, o), this.onRelayEventRequest({\n                topic: e,\n                payload: o\n            })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isJsonRpcResponse)(o) && (await this.client.core.history.resolve(o), this.onRelayEventResponse({\n                topic: e,\n                payload: o\n            }));\n        });\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_10__.PAIRING_EVENTS.create, (t)=>this.onPairingCreated(t));\n    }\n}\nclass S extends H {\n    constructor(t){\n        super(t), this.protocol = $, this.version = Q, this.name = B, this.events = new events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, this.emit = (i, n)=>this.events.emit(i, n), this.on = (i, n)=>this.events.on(i, n), this.once = (i, n)=>this.events.once(i, n), this.off = (i, n)=>this.events.off(i, n), this.removeListener = (i, n)=>this.events.removeListener(i, n), this.request = async (i, n)=>{\n            try {\n                return await this.engine.request(i, n);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.respond = async (i, n)=>{\n            try {\n                return await this.engine.respond(i, n);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.getPendingRequests = ()=>{\n            try {\n                return this.engine.getPendingRequests();\n            } catch (i) {\n                throw this.logger.error(i.message), i;\n            }\n        }, this.formatMessage = (i, n)=>{\n            try {\n                return this.engine.formatMessage(i, n);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        };\n        const e = typeof t.logger < \"u\" && typeof t.logger != \"string\" ? t.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: t.logger || \"error\"\n        }));\n        this.name = t?.name || B, this.metadata = t.metadata, this.projectId = t.projectId, this.core = t.core || new _walletconnect_core__WEBPACK_IMPORTED_MODULE_10__.Core(t), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.generateChildLogger)(e, this.name), this.authKeys = new _walletconnect_core__WEBPACK_IMPORTED_MODULE_10__.Store(this.core, this.logger, \"authKeys\", F, ()=>x), this.pairingTopics = new _walletconnect_core__WEBPACK_IMPORTED_MODULE_10__.Store(this.core, this.logger, \"pairingTopics\", F), this.requests = new _walletconnect_core__WEBPACK_IMPORTED_MODULE_10__.Store(this.core, this.logger, \"requests\", F, (i)=>i.id), this.engine = new Br(this);\n    }\n    static async init(t) {\n        const e = new S(t);\n        return await e.initialize(), e;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getLoggerContext)(this.logger);\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.authKeys.init(), await this.requests.init(), await this.pairingTopics.init(), await this.engine.init(), this.logger.info(\"AuthClient Initialization Success\"), this.logger.info({\n                authClient: this\n            });\n        } catch (t) {\n            throw this.logger.info(\"AuthClient Initialization Failure\"), this.logger.error(t.message), t;\n        }\n    }\n}\nconst zr = S;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+auth-client@2.1.2/node_modules/@walletconnect/auth-client/dist/index.es.js\n");

/***/ })

};
;