"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@thirdweb-dev+storage@2.0.8";
exports.ids = ["vendor-chunks/@thirdweb-dev+storage@2.0.8"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@thirdweb-dev+storage@2.0.8/node_modules/@thirdweb-dev/storage/dist/thirdweb-dev-storage.esm.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+storage@2.0.8/node_modules/@thirdweb-dev/storage/dist/thirdweb-dev-storage.esm.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_GATEWAY_URLS: () => (/* binding */ DEFAULT_GATEWAY_URLS),\n/* harmony export */   IpfsUploader: () => (/* binding */ IpfsUploader),\n/* harmony export */   MockDownloader: () => (/* binding */ MockDownloader),\n/* harmony export */   MockUploader: () => (/* binding */ MockUploader),\n/* harmony export */   PINATA_IPFS_URL: () => (/* binding */ PINATA_IPFS_URL),\n/* harmony export */   StorageDownloader: () => (/* binding */ StorageDownloader),\n/* harmony export */   TW_UPLOAD_SERVER_URL: () => (/* binding */ TW_UPLOAD_SERVER_URL),\n/* harmony export */   ThirdwebStorage: () => (/* binding */ ThirdwebStorage),\n/* harmony export */   convertCidToV1: () => (/* binding */ convertCidToV1),\n/* harmony export */   extractObjectFiles: () => (/* binding */ extractObjectFiles),\n/* harmony export */   getGatewayUrlForCid: () => (/* binding */ getGatewayUrlForCid),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isBufferInstance: () => (/* binding */ isBufferInstance),\n/* harmony export */   isBufferOrStringWithName: () => (/* binding */ isBufferOrStringWithName),\n/* harmony export */   isFileBufferOrStringEqual: () => (/* binding */ isFileBufferOrStringEqual),\n/* harmony export */   isFileInstance: () => (/* binding */ isFileInstance),\n/* harmony export */   isFileOrBuffer: () => (/* binding */ isFileOrBuffer),\n/* harmony export */   isTwGatewayUrl: () => (/* binding */ isTwGatewayUrl),\n/* harmony export */   parseGatewayUrls: () => (/* binding */ parseGatewayUrls),\n/* harmony export */   prepareGatewayUrls: () => (/* binding */ prepareGatewayUrls),\n/* harmony export */   replaceGatewayUrlWithScheme: () => (/* binding */ replaceGatewayUrlWithScheme),\n/* harmony export */   replaceObjectFilesWithUris: () => (/* binding */ replaceObjectFilesWithUris),\n/* harmony export */   replaceObjectGatewayUrlsWithSchemes: () => (/* binding */ replaceObjectGatewayUrlsWithSchemes),\n/* harmony export */   replaceObjectSchemesWithGatewayUrls: () => (/* binding */ replaceObjectSchemesWithGatewayUrls),\n/* harmony export */   replaceSchemeWithGatewayUrl: () => (/* binding */ replaceSchemeWithGatewayUrl)\n/* harmony export */ });\n/* harmony import */ var cid_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cid-tool */ \"(ssr)/./node_modules/.pnpm/cid-tool@3.0.0/node_modules/cid-tool/src/index.js\");\n/* harmony import */ var _thirdweb_dev_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thirdweb-dev/crypto */ \"(ssr)/./node_modules/.pnpm/@thirdweb-dev+crypto@0.2.0/node_modules/@thirdweb-dev/crypto/dist/thirdweb-dev-crypto.esm.js\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! form-data */ \"(ssr)/./node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/form_data.js\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(form_data__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js\");\n\n\n\n\nfunction getProcessEnv(key) {\n    let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (typeof process !== \"undefined\") {\n        if (process.env[key]) {\n            return process.env[key];\n        }\n    }\n    return defaultValue;\n}\nconst TW_HOSTNAME_SUFFIX = \".ipfscdn.io\";\nconst TW_STAGINGHOSTNAME_SUFFIX = \".thirdwebstorage-staging.com\";\nconst TW_GATEWAY_URLS = [\n    `https://{clientId}${TW_HOSTNAME_SUFFIX}/ipfs/{cid}/{path}`\n];\n/**\n * @internal\n * @param url - the url to check\n * @returns\n */ function isTwGatewayUrl(url) {\n    const hostname = new URL(url).hostname;\n    const isProd = hostname.endsWith(TW_HOSTNAME_SUFFIX);\n    if (isProd) {\n        return true;\n    }\n    // fall back to also handle staging urls\n    return hostname.endsWith(TW_STAGINGHOSTNAME_SUFFIX);\n}\nconst PUBLIC_GATEWAY_URLS = [\n    \"https://{cid}.ipfs.cf-ipfs.com/{path}\",\n    \"https://{cid}.ipfs.dweb.link/{path}\",\n    \"https://ipfs.io/ipfs/{cid}/{path}\",\n    \"https://cloudflare-ipfs.com/ipfs/{cid}/{path}\",\n    \"https://{cid}.ipfs.w3s.link/{path}\",\n    \"https://w3s.link/ipfs/{cid}/{path}\",\n    \"https://nftstorage.link/ipfs/{cid}/{path}\",\n    \"https://gateway.pinata.cloud/ipfs/{cid}/{path}\"\n];\n/**\n * @internal\n */ const DEFAULT_GATEWAY_URLS = {\n    // Note: Gateway URLs should have trailing slashes (we clean this on user input)\n    \"ipfs://\": [\n        ...TW_GATEWAY_URLS,\n        ...PUBLIC_GATEWAY_URLS\n    ]\n};\n/**\n * @internal\n */ const TW_UPLOAD_SERVER_URL = getProcessEnv(\"CUSTOM_UPLOAD_SERVER_URL\", \"https://storage.thirdweb.com\");\n/**\n * @internal\n */ const PINATA_IPFS_URL = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n/**\n * @internal\n */ function parseGatewayUrls(gatewayUrls) {\n    if (Array.isArray(gatewayUrls)) {\n        return {\n            \"ipfs://\": gatewayUrls\n        };\n    }\n    return gatewayUrls || {};\n}\n/**\n * @internal\n */ function getGatewayUrlForCid(gatewayUrl, cid, clientId) {\n    const parts = cid.split(\"/\");\n    const hash = convertCidToV1(parts[0]);\n    const filePath = parts.slice(1).join(\"/\");\n    let url = gatewayUrl;\n    // If the URL contains {cid} or {path} tokens, replace them with the CID and path\n    // Both tokens must be present for the URL to be valid\n    if (gatewayUrl.includes(\"{cid}\") && gatewayUrl.includes(\"{path}\")) {\n        url = url.replace(\"{cid}\", hash).replace(\"{path}\", filePath);\n    } else if (gatewayUrl.includes(\"{cid}\")) {\n        url = url.replace(\"{cid}\", hash);\n    } else {\n        url += `${hash}/${filePath}`;\n    }\n    // if the URL contains the {clientId} token, replace it with the client ID\n    if (gatewayUrl.includes(\"{clientId}\")) {\n        if (!clientId) {\n            throw new Error(\"Cannot use {clientId} in gateway URL without providing a client ID\");\n        }\n        url = url.replace(\"{clientId}\", clientId);\n    }\n    return url;\n}\n/**\n * @internal\n */ function prepareGatewayUrls(gatewayUrls, clientId, secretKey) {\n    const allGatewayUrls = {\n        ...DEFAULT_GATEWAY_URLS,\n        ...gatewayUrls\n    };\n    for (const key of Object.keys(allGatewayUrls)){\n        const cleanedGatewayUrls = allGatewayUrls[key].map((url)=>{\n            // inject clientId when present\n            if (clientId && url.includes(\"{clientId}\")) {\n                return url.replace(\"{clientId}\", clientId);\n            } else if (secretKey && url.includes(\"{clientId}\")) {\n                // should only be used on Node.js in a backend/script context\n                if (false) {}\n                const hashedSecretKey = (0,_thirdweb_dev_crypto__WEBPACK_IMPORTED_MODULE_2__.sha256HexSync)(secretKey);\n                const derivedClientId = hashedSecretKey.slice(0, 32);\n                return url.replace(\"{clientId}\", derivedClientId);\n            } else if (url.includes(\"{clientId}\")) {\n                // if no client id passed, filter out the url\n                return undefined;\n            } else {\n                return url;\n            }\n        }).filter((url)=>url !== undefined);\n        allGatewayUrls[key] = cleanedGatewayUrls;\n    }\n    return allGatewayUrls;\n}\n/**\n * @internal\n */ function convertCidToV1(cid) {\n    let normalized;\n    try {\n        const hash = cid.split(\"/\")[0];\n        normalized = cid_tool__WEBPACK_IMPORTED_MODULE_0__.base32(hash);\n    } catch (e) {\n        throw new Error(`The CID ${cid} is not valid.`);\n    }\n    return normalized;\n}\n/**\n * @internal\n */ function isBrowser() {\n    return \"undefined\" !== \"undefined\";\n}\n/**\n * @internal\n */ function isFileInstance(data) {\n    return global.File && data instanceof File;\n}\n/**\n * @internal\n */ function isBufferInstance(data) {\n    return global.Buffer && data instanceof Buffer;\n}\n/**\n * @internal\n */ function isBufferOrStringWithName(data) {\n    return !!(data && data.name && data.data && typeof data.name === \"string\" && (typeof data.data === \"string\" || isBufferInstance(data.data)));\n}\nfunction isFileOrBuffer(data) {\n    return isFileInstance(data) || isBufferInstance(data) || isBufferOrStringWithName(data);\n}\n/**\n * @internal\n */ function isFileBufferOrStringEqual(input1, input2) {\n    if (isFileInstance(input1) && isFileInstance(input2)) {\n        // if both are File types, compare the name, size, and last modified date (best guess that these are the same files)\n        if (input1.name === input2.name && input1.lastModified === input2.lastModified && input1.size === input2.size) {\n            return true;\n        }\n    } else if (isBufferInstance(input1) && isBufferInstance(input2)) {\n        // buffer gives us an easy way to compare the contents!\n        return input1.equals(input2);\n    } else if (isBufferOrStringWithName(input1) && isBufferOrStringWithName(input2)) {\n        // first check the names\n        if (input1.name === input2.name) {\n            // if the data for both is a string, compare the strings\n            if (typeof input1.data === \"string\" && typeof input2.data === \"string\") {\n                return input1.data === input2.data;\n            } else if (isBufferInstance(input1.data) && isBufferInstance(input2.data)) {\n                // otherwise we know it's buffers, so compare the buffers\n                return input1.data.equals(input2.data);\n            }\n        }\n    }\n    // otherwise if we have not found a match, return false\n    return false;\n}\n/**\n * @internal\n */ function parseCidAndPath(gatewayUrl, uri) {\n    const regexString = gatewayUrl.replace(\"{cid}\", \"(?<hash>[^/]+)\").replace(\"{path}\", \"(?<path>[^?#]+)\");\n    const regex = new RegExp(regexString);\n    const match = uri.match(regex);\n    if (match) {\n        const hash = match.groups?.hash;\n        const path = match.groups?.path;\n        const queryString = uri.includes(\"?\") ? uri.substring(uri.indexOf(\"?\") + 1) : \"\";\n        return {\n            hash,\n            path,\n            query: queryString\n        };\n    }\n}\n/**\n * @internal\n */ function replaceGatewayUrlWithScheme(uri, gatewayUrls) {\n    for (const scheme of Object.keys(gatewayUrls)){\n        for (const gatewayUrl of gatewayUrls[scheme]){\n            // If the url is a tokenized url, we need to convert it to a canonical url\n            // Otherwise, we just need to check if the url is a prefix of the uri\n            if (gatewayUrl.includes(\"{cid}\")) {\n                // Given the url is a tokenized url, we need to lift the cid and the path from the uri\n                const parsed = parseCidAndPath(gatewayUrl, uri);\n                if (parsed?.hash && parsed?.path) {\n                    const queryString = parsed?.query ? `?${parsed?.query}` : \"\";\n                    return `${scheme}${parsed?.hash}/${parsed?.path}${queryString}`;\n                } else {\n                    // If we can't lift the cid and path from the uri, we can't replace the gateway url, return the orig string\n                    return uri;\n                }\n            } else if (uri.startsWith(gatewayUrl)) {\n                return uri.replace(gatewayUrl, scheme);\n            }\n        }\n    }\n    return uri;\n}\n/**\n * @internal\n */ function replaceSchemeWithGatewayUrl(uri, gatewayUrls) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let clientId = arguments.length > 3 ? arguments[3] : undefined;\n    const scheme = Object.keys(gatewayUrls).find((s)=>uri.startsWith(s));\n    const schemeGatewayUrls = scheme ? gatewayUrls[scheme] : [];\n    if (!scheme && index > 0 || scheme && index >= schemeGatewayUrls.length) {\n        return undefined;\n    }\n    if (!scheme) {\n        return uri;\n    }\n    const path = uri.replace(scheme, \"\");\n    try {\n        const gatewayUrl = getGatewayUrlForCid(schemeGatewayUrls[index], path, clientId);\n        return gatewayUrl;\n    } catch (err) {\n        console.warn(`The IPFS uri: ${path} is not valid.`);\n        return undefined;\n    }\n}\n/**\n * @internal\n */ function replaceObjectGatewayUrlsWithSchemes(data, gatewayUrls) {\n    if (typeof data === \"string\") {\n        return replaceGatewayUrlWithScheme(data, gatewayUrls);\n    }\n    if (typeof data === \"object\") {\n        if (!data) {\n            return data;\n        }\n        if (isFileOrBuffer(data)) {\n            return data;\n        }\n        if (Array.isArray(data)) {\n            return data.map((entry)=>replaceObjectGatewayUrlsWithSchemes(entry, gatewayUrls));\n        }\n        return Object.fromEntries(Object.entries(data).map((_ref)=>{\n            let [key, value] = _ref;\n            return [\n                key,\n                replaceObjectGatewayUrlsWithSchemes(value, gatewayUrls)\n            ];\n        }));\n    }\n    return data;\n}\n/**\n * @internal\n */ function replaceObjectSchemesWithGatewayUrls(data, gatewayUrls, clientId) {\n    if (typeof data === \"string\") {\n        return replaceSchemeWithGatewayUrl(data, gatewayUrls, 0, clientId);\n    }\n    if (typeof data === \"object\") {\n        if (!data) {\n            return data;\n        }\n        if (isFileOrBuffer(data)) {\n            return data;\n        }\n        if (Array.isArray(data)) {\n            return data.map((entry)=>replaceObjectSchemesWithGatewayUrls(entry, gatewayUrls, clientId));\n        }\n        return Object.fromEntries(Object.entries(data).map((_ref2)=>{\n            let [key, value] = _ref2;\n            return [\n                key,\n                replaceObjectSchemesWithGatewayUrls(value, gatewayUrls, clientId)\n            ];\n        }));\n    }\n    return data;\n}\n/**\n * @internal\n */ function extractObjectFiles(data) {\n    let files = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    // If item is a FileOrBuffer add it to our list of files\n    if (isFileOrBuffer(data)) {\n        files.push(data);\n        return files;\n    }\n    if (typeof data === \"object\") {\n        if (!data) {\n            return files;\n        }\n        if (Array.isArray(data)) {\n            data.forEach((entry)=>extractObjectFiles(entry, files));\n        } else {\n            Object.keys(data).map((key)=>extractObjectFiles(data[key], files));\n        }\n    }\n    return files;\n}\n/**\n * @internal\n */ function replaceObjectFilesWithUris(data, uris) {\n    if (isFileOrBuffer(data)) {\n        if (uris.length) {\n            data = uris.shift();\n            return data;\n        } else {\n            console.warn(\"Not enough URIs to replace all files in object.\");\n        }\n    }\n    if (typeof data === \"object\") {\n        if (!data) {\n            return data;\n        }\n        if (Array.isArray(data)) {\n            return data.map((entry)=>replaceObjectFilesWithUris(entry, uris));\n        } else {\n            return Object.fromEntries(Object.entries(data).map((_ref3)=>{\n                let [key, value] = _ref3;\n                return [\n                    key,\n                    replaceObjectFilesWithUris(value, uris)\n                ];\n            }));\n        }\n    }\n    return data;\n}\nvar pkg = {\n    name: \"@thirdweb-dev/storage\",\n    version: \"2.0.8\",\n    main: \"dist/thirdweb-dev-storage.cjs.js\",\n    module: \"dist/thirdweb-dev-storage.esm.js\",\n    exports: {\n        \".\": {\n            module: \"./dist/thirdweb-dev-storage.esm.js\",\n            \"default\": \"./dist/thirdweb-dev-storage.cjs.js\"\n        },\n        \"./package.json\": \"./package.json\"\n    },\n    repository: \"https://github.com/thirdweb-dev/js/tree/main/packages/storage\",\n    author: \"thirdweb eng <eng@thirdweb.com>\",\n    license: \"Apache-2.0\",\n    sideEffects: false,\n    scripts: {\n        format: \"prettier --write 'src/**/*'\",\n        lint: \"eslint src/ && bunx publint --strict --level warning\",\n        fix: \"eslint src/ --fix\",\n        \"generate-docs\": \"api-extractor run --local && api-documenter markdown -i ./temp -o ./docs\",\n        clean: \"rm -rf dist/\",\n        build: \"tsc && preconstruct build\",\n        \"test:all\": \"NODE_ENV=test SWC_NODE_PROJECT=./tsconfig.test.json mocha --timeout 30000 --parallel './test/**/*.test.ts'\",\n        test: \"pnpm test:all\",\n        \"test:single\": \"NODE_ENV=test SWC_NODE_PROJECT=./tsconfig.test.json mocha --timeout 30000\",\n        push: \"yalc push\",\n        typedoc: \"node scripts/typedoc.mjs\"\n    },\n    files: [\n        \"dist/\"\n    ],\n    preconstruct: {\n        exports: true\n    },\n    devDependencies: {\n        \"@babel/preset-env\": \"^7.22.9\",\n        \"@babel/preset-typescript\": \"^7.22.5\",\n        \"@microsoft/api-documenter\": \"^7.22.30\",\n        \"@microsoft/api-extractor\": \"^7.36.3\",\n        \"@microsoft/tsdoc\": \"^0.14.1\",\n        \"@preconstruct/cli\": \"2.7.0\",\n        \"@swc-node/register\": \"^1.6.6\",\n        \"@thirdweb-dev/tsconfig\": \"workspace:*\",\n        \"@types/chai\": \"^4.3.5\",\n        \"@types/mocha\": \"^10.0.0\",\n        \"@types/uuid\": \"^9.0.5\",\n        \"@typescript-eslint/eslint-plugin\": \"^6.2.0\",\n        \"@typescript-eslint/parser\": \"^6.2.0\",\n        chai: \"^4.3.6\",\n        eslint: \"^8.45.0\",\n        \"eslint-config-thirdweb\": \"workspace:*\",\n        \"eslint-plugin-tsdoc\": \"^0.2.16\",\n        esm: \"^3.2.25\",\n        mocha: \"^10.2.0\",\n        rimraf: \"^3.0.2\",\n        typescript: \"^5.1.6\",\n        \"typedoc-gen\": \"workspace:*\"\n    },\n    dependencies: {\n        \"cid-tool\": \"^3.0.0\",\n        \"form-data\": \"^4.0.0\",\n        uuid: \"^9.0.1\",\n        \"@thirdweb-dev/crypto\": \"workspace:*\"\n    },\n    engines: {\n        node: \">=18\"\n    }\n};\n/**\n * Default downloader used - handles downloading from all schemes specified in the gateway URLs configuration.\n *\n * @example\n * ```jsx\n * // Can instantiate the downloader with the default gateway URLs\n * const downloader = new StorageDownloader();\n *\n * // client id if used in client-side applications\n * const clientId = \"your-client-id\";\n * const storage = new ThirdwebStorage({ clientId, downloader });\n *\n * // secret key if used in server-side applications\n * const secretKey = \"your-secret-key\";\n * const storage = new ThirdwebStorage({ secretKey, downloader });\n * ```\n *\n * @public\n */ class StorageDownloader {\n    constructor(options){\n        this.DEFAULT_TIMEOUT_IN_SECONDS = 60;\n        this.DEFAULT_MAX_RETRIES = 3;\n        this.secretKey = options.secretKey;\n        this.clientId = options.clientId;\n        this.defaultTimeout = options.timeoutInSeconds || this.DEFAULT_TIMEOUT_IN_SECONDS;\n    }\n    async download(uri, gatewayUrls, options) {\n        let attempts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        const maxRetries = options?.maxRetries || this.DEFAULT_MAX_RETRIES;\n        if (attempts > maxRetries) {\n            console.error(\"[FAILED_TO_DOWNLOAD_ERROR] Failed to download from URI - too many attempts failed.\");\n            // return a 404 response to avoid retrying\n            return new Response(JSON.stringify({\n                error: \"Not Found\"\n            }), {\n                status: 404,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        // Replace recognized scheme with the highest priority gateway URL that hasn't already been attempted\n        let resolvedUri = replaceSchemeWithGatewayUrl(uri, gatewayUrls, attempts, this.clientId);\n        // If every gateway URL we know about for the designated scheme has been tried (via recursion) and failed, throw an error\n        if (!resolvedUri) {\n            console.error(\"[FAILED_TO_DOWNLOAD_ERROR] Unable to download from URI - all gateway URLs failed to respond.\");\n            return new Response(JSON.stringify({\n                error: \"Not Found\"\n            }), {\n                status: 404,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        } else if (attempts > 0) {\n            console.warn(`Retrying download with backup gateway URL: ${resolvedUri}`);\n        }\n        let headers = {};\n        if (isTwGatewayUrl(resolvedUri)) {\n            const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n            if (this.secretKey) {\n                headers = {\n                    \"x-secret-key\": this.secretKey\n                };\n            } else if (this.clientId) {\n                if (!resolvedUri.includes(\"bundleId\")) {\n                    resolvedUri = resolvedUri + (bundleId ? `?bundleId=${bundleId}` : \"\");\n                }\n                headers[\"x-client-Id\"] = this.clientId;\n            }\n            // if we have a authorization token on global context then add that to the headers\n            if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n                headers = {\n                    ...headers,\n                    authorization: `Bearer ${globalThis.TW_AUTH_TOKEN}`\n                };\n            }\n            if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n                headers = {\n                    ...headers,\n                    authorization: `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`\n                };\n                headers[\"x-authorize-wallet\"] = \"true\";\n            }\n            headers[\"x-sdk-version\"] = pkg.version;\n            headers[\"x-sdk-name\"] = pkg.name;\n            headers[\"x-sdk-platform\"] = bundleId ? \"react-native\" : isBrowser() ? window.bridge !== undefined ? \"webGL\" : \"browser\" : \"node\";\n        }\n        if (isTooManyRequests(resolvedUri)) {\n            // skip the request if we're getting too many request error from the gateway\n            return this.download(uri, gatewayUrls, options, attempts + 1);\n        }\n        const controller = new AbortController();\n        const timeoutInSeconds = options?.timeoutInSeconds || this.defaultTimeout;\n        const timeout = setTimeout(()=>controller.abort(), timeoutInSeconds * 1000);\n        const resOrErr = await fetch(resolvedUri, {\n            headers,\n            signal: controller.signal\n        }).catch((err)=>err);\n        // if we get here clear the timeout\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        if (!(\"status\" in resOrErr)) {\n            // early exit if we don't have a status code\n            throw new Error(`Request timed out after ${timeoutInSeconds} seconds. ${isTwGatewayUrl(resolvedUri) ? \"You can update the timeoutInSeconds option to increase the timeout.\" : \"You're using a public IPFS gateway, pass in a clientId or secretKey for a reliable IPFS gateway.\"}`);\n        }\n        // if the request is good we can skip everything else\n        if (resOrErr.ok) {\n            return resOrErr;\n        }\n        if (resOrErr.status === 429) {\n            // track that we got a too many requests error\n            tooManyRequestsBackOff(resolvedUri, resOrErr);\n            // Since the current gateway failed, recursively try the next one we know about\n            return this.download(uri, gatewayUrls, options, attempts + 1);\n        }\n        if (resOrErr.status === 410) {\n            // Don't retry if the content is blocklisted\n            console.error(`Request to ${resolvedUri} failed because this content seems to be blocklisted. Search VirusTotal for this URL to confirm: ${resolvedUri} `);\n            return resOrErr;\n        }\n        console.warn(`Request to ${resolvedUri} failed with status ${resOrErr.status} - ${resOrErr.statusText}`);\n        // if the status is 404 and we're using a thirdweb gateway url, return the response as is\n        if (resOrErr.status === 404 && isTwGatewayUrl(resolvedUri)) {\n            return resOrErr;\n        }\n        // these are the only errors that we want to retry, everything else we should just return the error as is\n        // 408 - Request Timeout\n        // 429 - Too Many Requests\n        // 5xx - Server Errors\n        if (resOrErr.status !== 408 && resOrErr.status !== 429 && resOrErr.status < 500) {\n            return resOrErr;\n        }\n        // Since the current gateway failed, recursively try the next one we know about\n        return this.download(uri, gatewayUrls, options, attempts + 1);\n    }\n}\nconst TOO_MANY_REQUESTS_TRACKER = new Map();\nfunction isTooManyRequests(gatewayUrl) {\n    return TOO_MANY_REQUESTS_TRACKER.has(gatewayUrl);\n}\nconst TIMEOUT_MAP = new Map();\nfunction tooManyRequestsBackOff(gatewayUrl, response) {\n    // if we already have a timeout for this gateway url, clear it\n    if (TIMEOUT_MAP.has(gatewayUrl)) {\n        clearTimeout(TIMEOUT_MAP.get(gatewayUrl));\n    }\n    const retryAfter = response.headers.get(\"Retry-After\");\n    let backOff = 5000;\n    if (retryAfter) {\n        const retryAfterSeconds = parseInt(retryAfter);\n        if (!isNaN(retryAfterSeconds)) {\n            backOff = retryAfterSeconds * 1000;\n        }\n    }\n    // track that we got a too many requests error\n    TOO_MANY_REQUESTS_TRACKER.set(gatewayUrl, true);\n    TIMEOUT_MAP.set(gatewayUrl, setTimeout(()=>TOO_MANY_REQUESTS_TRACKER.delete(gatewayUrl), backOff));\n}\n/**\n * Default uploader used - handles uploading arbitrary data to IPFS\n *\n * @example\n * ```jsx\n * // Can instantiate the uploader with default configuration and your client ID when used in client-side applications\n * const uploader = new StorageUploader();\n * const clientId = \"your-client-id\";\n * const storage = new ThirdwebStorage({ clientId, uploader });\n *\n * // Can instantiate the uploader with default configuration and your secret key when used in server-side applications\n * const uploader = new StorageUploader();\n * const secretKey = \"your-secret-key\";\n * const storage = new ThirdwebStorage({ secretKey, uploader });\n *\n * // Or optionally, can pass configuration\n * const options = {\n *   // Upload objects with resolvable URLs\n *   uploadWithGatewayUrl: true,\n * }\n * const uploader = new StorageUploader(options);\n * const clientId = \"your-client-id\";\n * const storage = new ThirdwebStorage({ clientId, uploader });\n * ```\n *\n * @public\n */ class IpfsUploader {\n    constructor(options){\n        this.uploadWithGatewayUrl = options?.uploadWithGatewayUrl || false;\n        this.uploadServerUrl = options?.uploadServerUrl || TW_UPLOAD_SERVER_URL;\n        this.clientId = options?.clientId;\n        this.secretKey = options?.secretKey;\n    }\n    async uploadBatch(data, options) {\n        if (options?.uploadWithoutDirectory && data.length > 1) {\n            throw new Error(\"[UPLOAD_WITHOUT_DIRECTORY_ERROR] Cannot upload more than one file or object without directory!\");\n        }\n        const formData = new (form_data__WEBPACK_IMPORTED_MODULE_1___default())();\n        const { form, fileNames } = this.buildFormData(formData, data, options);\n        if (isBrowser()) {\n            return this.uploadBatchBrowser(form, fileNames, options);\n        } else {\n            return this.uploadBatchNode(form, fileNames, options);\n        }\n    }\n    buildFormData(form, files, options) {\n        const fileNameToFileMap = new Map();\n        const fileNames = [];\n        for(let i = 0; i < files.length; i++){\n            const file = files[i];\n            let fileName = \"\";\n            let fileData = file;\n            if (isFileInstance(file)) {\n                if (options?.rewriteFileNames) {\n                    let extensions = \"\";\n                    if (file.name) {\n                        const extensionStartIndex = file.name.lastIndexOf(\".\");\n                        if (extensionStartIndex > -1) {\n                            extensions = file.name.substring(extensionStartIndex);\n                        }\n                    }\n                    fileName = `${i + options.rewriteFileNames.fileStartNumber}${extensions}`;\n                } else {\n                    fileName = `${file.name}`;\n                }\n            } else if (isBufferOrStringWithName(file)) {\n                fileData = file.data;\n                if (options?.rewriteFileNames) {\n                    fileName = `${i + options.rewriteFileNames.fileStartNumber}`;\n                } else {\n                    fileName = `${file.name}`;\n                }\n            } else {\n                if (options?.rewriteFileNames) {\n                    fileName = `${i + options.rewriteFileNames.fileStartNumber}`;\n                } else {\n                    fileName = `${i}`;\n                }\n            }\n            // If we don't want to wrap with directory, adjust the filepath\n            const filepath = options?.uploadWithoutDirectory ? `files` : `files/${fileName}`;\n            if (fileNameToFileMap.has(fileName)) {\n                // if the file in the map is the same as the file we are already looking at then just skip and continue\n                if (isFileBufferOrStringEqual(fileNameToFileMap.get(fileName), file)) {\n                    // we add it to the filenames array so that we can return the correct number of urls,\n                    fileNames.push(fileName);\n                    continue;\n                }\n                // otherwise if file names are the same but they are not the same file then we should throw an error (trying to upload to differnt files but with the same names)\n                throw new Error(`[DUPLICATE_FILE_NAME_ERROR] File name ${fileName} was passed for more than one different file.`);\n            }\n            // add it to the map so that we can check for duplicates\n            fileNameToFileMap.set(fileName, file);\n            // add it to the filenames array so that we can return the correct number of urls\n            fileNames.push(fileName);\n            if (!isBrowser()) {\n                form.append(\"file\", fileData, {\n                    filepath\n                });\n            } else {\n                // browser does blob things, filepath is parsed differently on browser vs node.\n                // pls pinata?\n                form.append(\"file\", new Blob([\n                    fileData\n                ]), filepath);\n            }\n        }\n        const metadata = {\n            name: `Storage SDK`,\n            keyvalues: {\n                ...options?.metadata\n            }\n        };\n        form.append(\"pinataMetadata\", JSON.stringify(metadata));\n        if (options?.uploadWithoutDirectory) {\n            form.append(\"pinataOptions\", JSON.stringify({\n                wrapWithDirectory: false\n            }));\n        }\n        return {\n            form,\n            // encode the file names on the way out (which is what the upload backend expects)\n            fileNames: fileNames.map((fName)=>encodeURIComponent(fName))\n        };\n    }\n    async uploadBatchBrowser(form, fileNames, options) {\n        return new Promise((resolve, reject)=>{\n            const xhr = new XMLHttpRequest();\n            let timer = setTimeout(()=>{\n                xhr.abort();\n                reject(new Error(\"Request to upload timed out! No upload progress received in 30s\"));\n            }, 30000);\n            xhr.upload.addEventListener(\"loadstart\", ()=>{\n                console.log(`[${Date.now()}] [IPFS] Started`);\n            });\n            xhr.upload.addEventListener(\"progress\", (event)=>{\n                console.log(`[IPFS] Progress Event ${event.loaded}/${event.total}`);\n                clearTimeout(timer);\n                if (event.loaded < event.total) {\n                    timer = setTimeout(()=>{\n                        xhr.abort();\n                        reject(new Error(\"Request to upload timed out! No upload progress received in 30s\"));\n                    }, 30000);\n                } else {\n                    console.log(`[${Date.now()}] [IPFS] Uploaded files. Waiting for response.`);\n                }\n                if (event.lengthComputable && options?.onProgress) {\n                    options?.onProgress({\n                        progress: event.loaded,\n                        total: event.total\n                    });\n                }\n            });\n            xhr.addEventListener(\"load\", ()=>{\n                console.log(`[${Date.now()}] [IPFS] Load`);\n                clearTimeout(timer);\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    let body;\n                    try {\n                        body = JSON.parse(xhr.responseText);\n                    } catch (err) {\n                        return reject(new Error(\"Failed to parse JSON from upload response\"));\n                    }\n                    const cid = body.IpfsHash;\n                    if (!cid) {\n                        throw new Error(\"Failed to get IPFS hash from upload response\");\n                    }\n                    if (options?.uploadWithoutDirectory) {\n                        return resolve([\n                            `ipfs://${cid}`\n                        ]);\n                    } else {\n                        return resolve(fileNames.map((n)=>`ipfs://${cid}/${n}`));\n                    }\n                }\n                return reject(new Error(`Upload failed with status ${xhr.status} - ${xhr.responseText}`));\n            });\n            xhr.addEventListener(\"error\", ()=>{\n                console.log(\"[IPFS] Load\");\n                clearTimeout(timer);\n                if (xhr.readyState !== 0 && xhr.readyState !== 4 || xhr.status === 0) {\n                    return reject(new Error(\"Upload failed due to a network error.\"));\n                }\n                return reject(new Error(\"Unknown upload error occured\"));\n            });\n            xhr.open(\"POST\", `${this.uploadServerUrl}/ipfs/upload`);\n            if (this.secretKey) {\n                xhr.setRequestHeader(\"x-secret-key\", this.secretKey);\n            } else if (this.clientId) {\n                xhr.setRequestHeader(\"x-client-id\", this.clientId);\n            }\n            const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n            if (bundleId) {\n                xhr.setRequestHeader(\"x-bundle-id\", bundleId);\n            }\n            xhr.setRequestHeader(\"x-sdk-version\", pkg.version);\n            xhr.setRequestHeader(\"x-sdk-name\", pkg.name);\n            xhr.setRequestHeader(\"x-sdk-platform\", bundleId ? \"react-native\" : isBrowser() ? window.bridge !== undefined ? \"webGL\" : \"browser\" : \"node\");\n            // if we have a authorization token on global context then add that to the headers, this is for the dashboard.\n            if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n                xhr.setRequestHeader(\"authorization\", `Bearer ${globalThis.TW_AUTH_TOKEN}`);\n            }\n            // CLI auth token\n            if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n                xhr.setRequestHeader(\"authorization\", `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`);\n                xhr.setRequestHeader(\"x-authorize-wallet\", `true`);\n            }\n            xhr.send(form);\n        });\n    }\n    async uploadBatchNode(form, fileNames, options) {\n        if (options?.onProgress) {\n            console.warn(\"The onProgress option is only supported in the browser\");\n        }\n        const headers = {};\n        if (this.secretKey) {\n            headers[\"x-secret-key\"] = this.secretKey;\n        } else if (this.clientId) {\n            headers[\"x-client-id\"] = this.clientId;\n        }\n        // if we have a bundle id on global context then add that to the headers\n        if (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis) {\n            headers[\"x-bundle-id\"] = globalThis.APP_BUNDLE_ID;\n        }\n        // if we have a authorization token on global context then add that to the headers, this is for the dashboard.\n        if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n            headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n        }\n        // CLI auth token\n        if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n            headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n            headers[\"x-authorize-wallet\"] = \"true\";\n        }\n        const res = await fetch(`${this.uploadServerUrl}/ipfs/upload`, {\n            method: \"POST\",\n            headers: {\n                ...headers,\n                ...form.getHeaders()\n            },\n            body: form.getBuffer()\n        });\n        if (!res.ok) {\n            if (res.status === 401) {\n                throw new Error(\"Unauthorized - You don't have permission to use this service.\");\n            }\n            throw new Error(`Failed to upload files to IPFS - ${res.status} - ${res.statusText} - ${await res.text()}`);\n        }\n        const body = await res.json();\n        const cid = body.IpfsHash;\n        if (!cid) {\n            throw new Error(\"Failed to upload files to IPFS - Bad CID\");\n        }\n        if (options?.uploadWithoutDirectory) {\n            return [\n                `ipfs://${cid}`\n            ];\n        } else {\n            return fileNames.map((name)=>`ipfs://${cid}/${name}`);\n        }\n    }\n}\n/**\n * Upload and download files from decentralized storage systems.\n *\n * @example\n * ```jsx\n * // Create a default storage class with a client ID when used in client-side applications\n * const storage = new ThirdwebStorage({ clientId: \"your-client-id\" });\n *\n * // Create a default storage class with a secret key when used in server-side applications\n * const storage = new ThirdwebStorage({ secretKey: \"your-secret-key\" });\n *\n * You can get a clientId and secretKey from https://thirdweb.com/create-api-key\n *\n * // Upload any file or JSON object\n * const uri = await storage.upload(data);\n * const result = await storage.download(uri);\n *\n * // Or configure a custom uploader, downloader, and gateway URLs\n * const gatewayUrls = {\n *   // We define a mapping of schemes to gateway URLs\n *   \"ipfs://\": [\n *     \"https://ipfs.thirdwebcdn.com/ipfs/\",\n *     \"https://cloudflare-ipfs.com/ipfs/\",\n *     \"https://ipfs.io/ipfs/\",\n *   ],\n * };\n * const downloader = new StorageDownloader();\n * const uploader = new IpfsUploader();\n * const clientId = \"your-client-id\";\n * const storage = new ThirdwebStorage({ clientId, uploader, downloader, gatewayUrls });\n * ```\n *\n * @public\n */ class ThirdwebStorage {\n    constructor(options){\n        this.uploader = options?.uploader || new IpfsUploader({\n            clientId: options?.clientId,\n            secretKey: options?.secretKey,\n            uploadServerUrl: options?.uploadServerUrl\n        });\n        this.downloader = options?.downloader || new StorageDownloader({\n            secretKey: options?.secretKey,\n            clientId: options?.clientId\n        });\n        this.gatewayUrls = prepareGatewayUrls(parseGatewayUrls(options?.gatewayUrls), options?.clientId, options?.secretKey);\n        this.clientId = options?.clientId;\n    }\n    /**\n   * Resolve any scheme on a URL to get a retrievable URL for the data\n   *\n   * @param url - The URL to resolve the scheme of\n   * @returns The URL with its scheme resolved\n   *\n   * @example\n   * ```jsx\n   * const uri = \"ipfs://example\";\n   * const url = storage.resolveScheme(uri);\n   * console.log(url);\n   * ```\n   */ resolveScheme(url) {\n        return replaceSchemeWithGatewayUrl(url, this.gatewayUrls, 0, this.clientId);\n    }\n    /**\n   * Downloads arbitrary data from any URL scheme.\n   *\n   * @param url - The URL of the data to download\n   * @returns The response object fetched from the resolved URL\n   *\n   * @example\n   * ```jsx\n   * const uri = \"ipfs://example\";\n   * const data = await storage.download(uri);\n   * ```\n   */ async download(url, options) {\n        return this.downloader.download(url, this.gatewayUrls, options);\n    }\n    /**\n   * Downloads JSON data from any URL scheme.\n   * Resolves any URLs with schemes to retrievable gateway URLs.\n   *\n   * @param url - The URL of the JSON data to download\n   * @returns The JSON data fetched from the resolved URL\n   *\n   * @example\n   * ```jsx\n   * const uri = \"ipfs://example\";\n   * const json = await storage.downloadJSON(uri);\n   * ```\n   */ async downloadJSON(url, options) {\n        const res = await this.download(url, options);\n        // If we get a JSON object, recursively replace any schemes with gatewayUrls\n        const json = await res.json();\n        return replaceObjectSchemesWithGatewayUrls(json, this.gatewayUrls, this.clientId);\n    }\n    /**\n   * Upload arbitrary file or JSON data using the configured decentralized storage system.\n   * Automatically uploads any file data within JSON objects and replaces them with hashes.\n   *\n   * @param data - Arbitrary file or JSON data to upload\n   * @param options - Options to pass through to the storage uploader class\n   * @returns  The URI of the uploaded data\n   *\n   * @example\n   * ```jsx\n   * // Upload file data\n   * const file = readFileSync(\"../file.jpg\");\n   * const fileUri = await storage.upload(file);\n   *\n   * // Or upload a JSON object\n   * const json = { name: \"JSON\", image: file };\n   * const jsonUri = await storage.upload(json);\n   * ```\n   */ async upload(data, options) {\n        const [uri] = await this.uploadBatch([\n            data\n        ], options);\n        return uri;\n    }\n    /**\n   * Batch upload arbitrary file or JSON data using the configured decentralized storage system.\n   * Automatically uploads any file data within JSON objects and replaces them with hashes.\n   *\n   * @param data - Array of arbitrary file or JSON data to upload\n   * @param options - Options to pass through to the storage uploader class\n   * @returns  The URIs of the uploaded data\n   *\n   * @example\n   * ```jsx\n   * // Upload an array of file data\n   * const files = [\n   *  readFileSync(\"../file1.jpg\"),\n   *  readFileSync(\"../file2.jpg\"),\n   * ];\n   * const fileUris = await storage.uploadBatch(files);\n   *\n   * // Upload an array of JSON objects\n   * const objects = [\n   *  { name: \"JSON 1\", image: files[0] },\n   *  { name: \"JSON 2\", image: files[1] },\n   * ];\n   * const jsonUris = await storage.uploadBatch(objects);\n   * ```\n   */ async uploadBatch(data, options) {\n        data = data.filter((item)=>item !== undefined);\n        if (!data.length) {\n            return [];\n        }\n        const isFileArray = data.map((item)=>isFileOrBuffer(item) || typeof item === \"string\").every((item)=>!!item);\n        let uris = [];\n        // If data is an array of files, pass it through to upload directly\n        if (isFileArray) {\n            uris = await this.uploader.uploadBatch(data, options);\n        } else {\n            // Otherwise it is an array of JSON objects, so we have to prepare it first\n            const metadata = (await this.uploadAndReplaceFilesWithHashes(data, options)).map((item)=>{\n                if (typeof item === \"string\") {\n                    return item;\n                }\n                return JSON.stringify(item);\n            });\n            uris = await this.uploader.uploadBatch(metadata, options);\n        }\n        if (options?.uploadWithGatewayUrl || this.uploader.uploadWithGatewayUrl) {\n            return uris.map((uri)=>this.resolveScheme(uri));\n        } else {\n            return uris;\n        }\n    }\n    getGatewayUrls() {\n        return this.gatewayUrls;\n    }\n    async uploadAndReplaceFilesWithHashes(data, options) {\n        let cleaned = data;\n        // Replace any gateway URLs with their hashes\n        cleaned = replaceObjectGatewayUrlsWithSchemes(cleaned, this.gatewayUrls);\n        // Recurse through data and extract files to upload\n        const files = extractObjectFiles(cleaned);\n        if (files.length) {\n            // Upload all files that came from the object\n            const uris = await this.uploader.uploadBatch(files, options);\n            // Recurse through data and replace files with hashes\n            cleaned = replaceObjectFilesWithUris(cleaned, uris);\n        }\n        if (options?.uploadWithGatewayUrl || this.uploader.uploadWithGatewayUrl) {\n            // If flag is set, replace all schemes with their preferred gateway URL\n            // Ex: used for Solana, where services don't resolve schemes for you, so URLs must be usable by default\n            cleaned = replaceObjectSchemesWithGatewayUrls(cleaned, this.gatewayUrls, this.clientId);\n        }\n        return cleaned;\n    }\n}\n/**\n * @internal\n */ class MockDownloader {\n    constructor(storage){\n        this.gatewayUrls = DEFAULT_GATEWAY_URLS;\n        this.storage = storage;\n    }\n    async download(url) {\n        const [cid, name] = url.includes(\"mock://\") ? url.replace(\"mock://\", \"\").split(\"/\") : url.replace(\"ipfs://\", \"\").split(\"/\");\n        const data = name ? this.storage[cid][name] : this.storage[cid];\n        return {\n            async json () {\n                return Promise.resolve(JSON.parse(data));\n            },\n            async text () {\n                return Promise.resolve(data);\n            }\n        };\n    }\n}\n/**\n * @internal\n */ class MockUploader {\n    constructor(storage){\n        this.storage = storage;\n    }\n    async uploadBatch(data, options) {\n        const cid = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        const uris = [];\n        this.storage[cid] = {};\n        let index = options?.rewriteFileNames?.fileStartNumber || 0;\n        for (const file of data){\n            let contents;\n            if (isFileInstance(file)) {\n                contents = await file.text();\n            } else if (isBufferInstance(file)) {\n                contents = file.toString();\n            } else if (typeof file === \"string\") {\n                contents = file;\n            } else {\n                contents = isBufferInstance(file.data) ? file.data.toString() : file.data;\n                const name = file.name ? file.name : `file_${index}`;\n                this.storage[cid][name] = contents;\n                uris.push(`mock://${cid}/${name}`);\n                continue;\n            }\n            this.storage[cid][index.toString()] = contents;\n            uris.push(`mock://${cid}/${index}`);\n            index += 1;\n        }\n        return uris;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@thirdweb-dev+storage@2.0.8/node_modules/@thirdweb-dev/storage/dist/thirdweb-dev-storage.esm.js\n");

/***/ })

};
;