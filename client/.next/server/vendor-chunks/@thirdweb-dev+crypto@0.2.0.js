"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@thirdweb-dev+crypto@0.2.0";
exports.ids = ["vendor-chunks/@thirdweb-dev+crypto@0.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@thirdweb-dev+crypto@0.2.0/node_modules/@thirdweb-dev/crypto/dist/thirdweb-dev-crypto.esm.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+crypto@0.2.0/node_modules/@thirdweb-dev/crypto/dist/thirdweb-dev-crypto.esm.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aesDecrypt: () => (/* binding */ aesDecrypt),\n/* harmony export */   aesDecryptCompat: () => (/* binding */ aesDecryptCompat),\n/* harmony export */   aesEncrypt: () => (/* binding */ aesEncrypt),\n/* harmony export */   keccak256Sync: () => (/* binding */ keccak256Sync),\n/* harmony export */   keccak256SyncHex: () => (/* binding */ keccak256SyncHex),\n/* harmony export */   keccak256SyncHexPrefixed: () => (/* binding */ keccak256SyncHexPrefixed),\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   sha256Hex: () => (/* binding */ sha256Hex),\n/* harmony export */   sha256HexSync: () => (/* binding */ sha256HexSync),\n/* harmony export */   sha256Sync: () => (/* binding */ sha256Sync)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha3 */ \"(ssr)/./node_modules/.pnpm/js-sha3@0.9.3/node_modules/js-sha3/src/sha3.js\");\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha3__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass TextProcessorCache {\n    #encoder;\n    #decoder;\n    get encoder() {\n        if (!this.#encoder) {\n            this.#encoder = new TextEncoder();\n        }\n        return this.#encoder;\n    }\n    get decoder() {\n        if (!this.#decoder) {\n            this.#decoder = new TextDecoder();\n        }\n        return this.#decoder;\n    }\n}\n// create a singleton instance of the TextProcessorCache\nconst textProcessorSingleton = new TextProcessorCache();\nfunction getCachedTextEncoder() {\n    return textProcessorSingleton.encoder;\n}\nfunction getCachedTextDecoder() {\n    return textProcessorSingleton.decoder;\n}\n// stripped down version of `js-md5`\n// changes:\n// - we know we always have ArrayBuffer available\n// - we only care about `arrayBuffer` output\n// - we want to behave the same regardless of NODE or non NODE env\n// - transformed into class\n// - typescript\n/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.8.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2023\n * @license MIT\n */ const INPUT_ERROR = \"input is invalid type\";\nconst FINALIZE_ERROR = \"finalize already called\";\nconst EXTRA = [\n    128,\n    32768,\n    8388608,\n    -2147483648\n];\n// [message: string, isString: bool]\nfunction formatMessage(message) {\n    const type = typeof message;\n    if (typeof message === \"string\") {\n        return [\n            message,\n            true\n        ];\n    }\n    if (type !== \"object\" || message === null) {\n        throw new Error(INPUT_ERROR);\n    }\n    if (message instanceof ArrayBuffer) {\n        return [\n            new Uint8Array(message),\n            false\n        ];\n    }\n    if (!Array.isArray(message) && !ArrayBuffer.isView(message)) {\n        throw new Error(INPUT_ERROR);\n    }\n    return [\n        message,\n        false\n    ];\n}\n/**\n * Md5 class\n * @class Md5\n * @description This is internal class.\n * @see {@link md5.create}\n */ class Md5 {\n    constructor(){\n        this.lastByteIndex = 0;\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n        this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n        this.finalized = this.hashed = false;\n        this.first = true;\n    }\n    /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */ update(inputMessage) {\n        if (this.finalized) {\n            throw new Error(FINALIZE_ERROR);\n        }\n        const [message, isString] = formatMessage(inputMessage);\n        const blocks = this.blocks;\n        let length = 0;\n        if (ArrayBuffer.isView(message)) {\n            length = message.byteLength;\n        } else {\n            length = message.length;\n        }\n        let code, index = 0, i;\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const buffer8 = this.buffer8;\n        while(index < length){\n            if (this.hashed) {\n                this.hashed = false;\n                blocks[0] = blocks[16];\n                blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n            }\n            if (isString) {\n                for(i = this.start; index < length && i < 64; ++index){\n                    code = message.charCodeAt(index);\n                    if (code < 0x80) {\n                        buffer8[i++] = code;\n                    } else if (code < 0x800) {\n                        buffer8[i++] = 0xc0 | code >>> 6;\n                        buffer8[i++] = 0x80 | code & 0x3f;\n                    } else if (code < 0xd800 || code >= 0xe000) {\n                        buffer8[i++] = 0xe0 | code >>> 12;\n                        buffer8[i++] = 0x80 | code >>> 6 & 0x3f;\n                        buffer8[i++] = 0x80 | code & 0x3f;\n                    } else {\n                        code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                        buffer8[i++] = 0xf0 | code >>> 18;\n                        buffer8[i++] = 0x80 | code >>> 12 & 0x3f;\n                        buffer8[i++] = 0x80 | code >>> 6 & 0x3f;\n                        buffer8[i++] = 0x80 | code & 0x3f;\n                    }\n                }\n            } else {\n                for(i = this.start; index < length && i < 64; ++index){\n                    // at this point we know it's not a string\n                    buffer8[i++] = message[index];\n                }\n            }\n            this.lastByteIndex = i;\n            this.bytes += i - this.start;\n            if (i >= 64) {\n                this.start = i - 64;\n                this.hash();\n                this.hashed = true;\n            } else {\n                this.start = i;\n            }\n        }\n        if (this.bytes > 4294967295) {\n            this.hBytes += this.bytes / 4294967296 << 0;\n            this.bytes = this.bytes % 4294967296;\n        }\n        return this;\n    }\n    finalize() {\n        if (this.finalized) {\n            return;\n        }\n        this.finalized = true;\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const blocks = this.blocks, i = this.lastByteIndex;\n        blocks[i >>> 2] |= EXTRA[i & 3];\n        if (i >= 56) {\n            if (!this.hashed) {\n                this.hash();\n            }\n            blocks[0] = blocks[16];\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        blocks[14] = this.bytes << 3;\n        blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n        this.hash();\n    }\n    hash() {\n        const blocks = this.blocks;\n        let a, b, c, d, bc, da;\n        if (this.first) {\n            a = blocks[0] - 680876937;\n            a = (a << 7 | a >>> 25) - 271733879 << 0;\n            d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n            d = (d << 12 | d >>> 20) + a << 0;\n            c = (-271733879 ^ d & (a ^ -271733879)) + blocks[2] - 1126478375;\n            c = (c << 17 | c >>> 15) + d << 0;\n            b = (a ^ c & (d ^ a)) + blocks[3] - 1316259209;\n            b = (b << 22 | b >>> 10) + c << 0;\n        } else {\n            a = this.h0;\n            b = this.h1;\n            c = this.h2;\n            d = this.h3;\n            a += (d ^ b & (c ^ d)) + blocks[0] - 680876936;\n            a = (a << 7 | a >>> 25) + b << 0;\n            d += (c ^ a & (b ^ c)) + blocks[1] - 389564586;\n            d = (d << 12 | d >>> 20) + a << 0;\n            c += (b ^ d & (a ^ b)) + blocks[2] + 606105819;\n            c = (c << 17 | c >>> 15) + d << 0;\n            b += (a ^ c & (d ^ a)) + blocks[3] - 1044525330;\n            b = (b << 22 | b >>> 10) + c << 0;\n        }\n        a += (d ^ b & (c ^ d)) + blocks[4] - 176418897;\n        a = (a << 7 | a >>> 25) + b << 0;\n        d += (c ^ a & (b ^ c)) + blocks[5] + 1200080426;\n        d = (d << 12 | d >>> 20) + a << 0;\n        c += (b ^ d & (a ^ b)) + blocks[6] - 1473231341;\n        c = (c << 17 | c >>> 15) + d << 0;\n        b += (a ^ c & (d ^ a)) + blocks[7] - 45705983;\n        b = (b << 22 | b >>> 10) + c << 0;\n        a += (d ^ b & (c ^ d)) + blocks[8] + 1770035416;\n        a = (a << 7 | a >>> 25) + b << 0;\n        d += (c ^ a & (b ^ c)) + blocks[9] - 1958414417;\n        d = (d << 12 | d >>> 20) + a << 0;\n        c += (b ^ d & (a ^ b)) + blocks[10] - 42063;\n        c = (c << 17 | c >>> 15) + d << 0;\n        b += (a ^ c & (d ^ a)) + blocks[11] - 1990404162;\n        b = (b << 22 | b >>> 10) + c << 0;\n        a += (d ^ b & (c ^ d)) + blocks[12] + 1804603682;\n        a = (a << 7 | a >>> 25) + b << 0;\n        d += (c ^ a & (b ^ c)) + blocks[13] - 40341101;\n        d = (d << 12 | d >>> 20) + a << 0;\n        c += (b ^ d & (a ^ b)) + blocks[14] - 1502002290;\n        c = (c << 17 | c >>> 15) + d << 0;\n        b += (a ^ c & (d ^ a)) + blocks[15] + 1236535329;\n        b = (b << 22 | b >>> 10) + c << 0;\n        a += (c ^ d & (b ^ c)) + blocks[1] - 165796510;\n        a = (a << 5 | a >>> 27) + b << 0;\n        d += (b ^ c & (a ^ b)) + blocks[6] - 1069501632;\n        d = (d << 9 | d >>> 23) + a << 0;\n        c += (a ^ b & (d ^ a)) + blocks[11] + 643717713;\n        c = (c << 14 | c >>> 18) + d << 0;\n        b += (d ^ a & (c ^ d)) + blocks[0] - 373897302;\n        b = (b << 20 | b >>> 12) + c << 0;\n        a += (c ^ d & (b ^ c)) + blocks[5] - 701558691;\n        a = (a << 5 | a >>> 27) + b << 0;\n        d += (b ^ c & (a ^ b)) + blocks[10] + 38016083;\n        d = (d << 9 | d >>> 23) + a << 0;\n        c += (a ^ b & (d ^ a)) + blocks[15] - 660478335;\n        c = (c << 14 | c >>> 18) + d << 0;\n        b += (d ^ a & (c ^ d)) + blocks[4] - 405537848;\n        b = (b << 20 | b >>> 12) + c << 0;\n        a += (c ^ d & (b ^ c)) + blocks[9] + 568446438;\n        a = (a << 5 | a >>> 27) + b << 0;\n        d += (b ^ c & (a ^ b)) + blocks[14] - 1019803690;\n        d = (d << 9 | d >>> 23) + a << 0;\n        c += (a ^ b & (d ^ a)) + blocks[3] - 187363961;\n        c = (c << 14 | c >>> 18) + d << 0;\n        b += (d ^ a & (c ^ d)) + blocks[8] + 1163531501;\n        b = (b << 20 | b >>> 12) + c << 0;\n        a += (c ^ d & (b ^ c)) + blocks[13] - 1444681467;\n        a = (a << 5 | a >>> 27) + b << 0;\n        d += (b ^ c & (a ^ b)) + blocks[2] - 51403784;\n        d = (d << 9 | d >>> 23) + a << 0;\n        c += (a ^ b & (d ^ a)) + blocks[7] + 1735328473;\n        c = (c << 14 | c >>> 18) + d << 0;\n        b += (d ^ a & (c ^ d)) + blocks[12] - 1926607734;\n        b = (b << 20 | b >>> 12) + c << 0;\n        bc = b ^ c;\n        a += (bc ^ d) + blocks[5] - 378558;\n        a = (a << 4 | a >>> 28) + b << 0;\n        d += (bc ^ a) + blocks[8] - 2022574463;\n        d = (d << 11 | d >>> 21) + a << 0;\n        da = d ^ a;\n        c += (da ^ b) + blocks[11] + 1839030562;\n        c = (c << 16 | c >>> 16) + d << 0;\n        b += (da ^ c) + blocks[14] - 35309556;\n        b = (b << 23 | b >>> 9) + c << 0;\n        bc = b ^ c;\n        a += (bc ^ d) + blocks[1] - 1530992060;\n        a = (a << 4 | a >>> 28) + b << 0;\n        d += (bc ^ a) + blocks[4] + 1272893353;\n        d = (d << 11 | d >>> 21) + a << 0;\n        da = d ^ a;\n        c += (da ^ b) + blocks[7] - 155497632;\n        c = (c << 16 | c >>> 16) + d << 0;\n        b += (da ^ c) + blocks[10] - 1094730640;\n        b = (b << 23 | b >>> 9) + c << 0;\n        bc = b ^ c;\n        a += (bc ^ d) + blocks[13] + 681279174;\n        a = (a << 4 | a >>> 28) + b << 0;\n        d += (bc ^ a) + blocks[0] - 358537222;\n        d = (d << 11 | d >>> 21) + a << 0;\n        da = d ^ a;\n        c += (da ^ b) + blocks[3] - 722521979;\n        c = (c << 16 | c >>> 16) + d << 0;\n        b += (da ^ c) + blocks[6] + 76029189;\n        b = (b << 23 | b >>> 9) + c << 0;\n        bc = b ^ c;\n        a += (bc ^ d) + blocks[9] - 640364487;\n        a = (a << 4 | a >>> 28) + b << 0;\n        d += (bc ^ a) + blocks[12] - 421815835;\n        d = (d << 11 | d >>> 21) + a << 0;\n        da = d ^ a;\n        c += (da ^ b) + blocks[15] + 530742520;\n        c = (c << 16 | c >>> 16) + d << 0;\n        b += (da ^ c) + blocks[2] - 995338651;\n        b = (b << 23 | b >>> 9) + c << 0;\n        a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n        a = (a << 6 | a >>> 26) + b << 0;\n        d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n        d = (d << 10 | d >>> 22) + a << 0;\n        c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n        c = (c << 15 | c >>> 17) + d << 0;\n        b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n        b = (b << 21 | b >>> 11) + c << 0;\n        a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n        a = (a << 6 | a >>> 26) + b << 0;\n        d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n        d = (d << 10 | d >>> 22) + a << 0;\n        c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n        c = (c << 15 | c >>> 17) + d << 0;\n        b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n        b = (b << 21 | b >>> 11) + c << 0;\n        a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n        a = (a << 6 | a >>> 26) + b << 0;\n        d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n        d = (d << 10 | d >>> 22) + a << 0;\n        c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n        c = (c << 15 | c >>> 17) + d << 0;\n        b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n        b = (b << 21 | b >>> 11) + c << 0;\n        a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n        a = (a << 6 | a >>> 26) + b << 0;\n        d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n        d = (d << 10 | d >>> 22) + a << 0;\n        c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n        c = (c << 15 | c >>> 17) + d << 0;\n        b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n        b = (b << 21 | b >>> 11) + c << 0;\n        if (this.first) {\n            this.h0 = a + 1732584193 << 0;\n            this.h1 = b - 271733879 << 0;\n            this.h2 = c - 1732584194 << 0;\n            this.h3 = d + 271733878 << 0;\n            this.first = false;\n        } else {\n            this.h0 = this.h0 + a << 0;\n            this.h1 = this.h1 + b << 0;\n            this.h2 = this.h2 + c << 0;\n            this.h3 = this.h3 + d << 0;\n        }\n    }\n    /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */ arrayBuffer() {\n        this.finalize();\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const buffer = new ArrayBuffer(16);\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const blocks = new Uint32Array(buffer);\n        blocks[0] = this.h0;\n        blocks[1] = this.h1;\n        blocks[2] = this.h2;\n        blocks[3] = this.h3;\n        return buffer;\n    }\n}\nfunction arrayBuffer(uint8Arr) {\n    const md5 = new Md5();\n    md5.update(uint8Arr);\n    return md5.arrayBuffer();\n}\n// taken from: https://github.com/sindresorhus/uint8array-extras\nconst objectToString = Object.prototype.toString;\nconst uint8ArrayStringified = \"[object Uint8Array]\";\nfunction isUint8Array(value) {\n    if (!value) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    return objectToString.call(value) === uint8ArrayStringified;\n}\nfunction assertUint8Array(value) {\n    if (!isUint8Array(value)) {\n        throw new TypeError(`Expected \\`Uint8Array\\`, got \\`${typeof value}\\``);\n    }\n}\nfunction concatUint8Arrays(arrays, totalLength) {\n    if (arrays.length === 0) {\n        return new Uint8Array(0);\n    }\n    totalLength ??= arrays.reduce((accumulator, currentValue)=>accumulator + currentValue.length, 0);\n    const returnValue = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const array of arrays){\n        assertUint8Array(array);\n        returnValue.set(array, offset);\n        offset += array.length;\n    }\n    return returnValue;\n}\nfunction assertString(value) {\n    if (typeof value !== \"string\") {\n        throw new TypeError(`Expected \\`string\\`, got \\`${typeof value}\\``);\n    }\n}\nfunction base64ToBase64Url(base64) {\n    return base64.replaceAll(\"+\", \"-\").replaceAll(\"/\", \"_\").replace(/=+$/, \"\");\n}\nfunction base64UrlToBase64(base64url) {\n    return base64url.replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\");\n}\n// Reference: https://phuoc.ng/collection/this-vs-that/concat-vs-push/\nconst MAX_BLOCK_SIZE = 65535;\nfunction uint8ArrayToBase64(array) {\n    let { urlSafe = false } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assertUint8Array(array);\n    let base64;\n    if (array.length < MAX_BLOCK_SIZE) {\n        // Required as `btoa` and `atob` don't properly support Unicode: https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n        base64 = globalThis.btoa(String.fromCodePoint.apply(this, array));\n    } else {\n        base64 = \"\";\n        for (const value of array){\n            base64 += String.fromCodePoint(value);\n        }\n        base64 = globalThis.btoa(base64);\n    }\n    return urlSafe ? base64ToBase64Url(base64) : base64;\n}\nfunction base64ToUint8Array(base64String) {\n    assertString(base64String);\n    return Uint8Array.from(globalThis.atob(base64UrlToBase64(base64String)), (x)=>x.codePointAt(0));\n}\nconst byteToHexLookupTable = Array.from({\n    length: 256\n}, (_, index)=>index.toString(16).padStart(2, \"0\"));\nfunction uint8ArrayToHex(array) {\n    assertUint8Array(array);\n    // Concatenating a string is faster than using an array.\n    let hexString = \"\";\n    for(let index = 0; index < array.length; index++){\n        hexString += byteToHexLookupTable[array[index]];\n    }\n    return hexString;\n}\nasync function universalCrypto() {\n    if (\"crypto\" in globalThis) {\n        return globalThis.crypto;\n    }\n    // otherwise we are in node 18 so we can use `webcrypto` off of the \"node:crypto\" package and treat it as native\n    // trick bundlers so that they leave this alone :)\n    const pto = \"pto\";\n    // this becomes `node:crypto` at runtime\n    return (await __webpack_require__(\"(ssr)/./node_modules/.pnpm/@thirdweb-dev+crypto@0.2.0/node_modules/@thirdweb-dev/crypto/dist lazy recursive ^node:cry.*$\")(\"node:cry\" + pto)).webcrypto;\n}\n/**\n * This is an implementation of the CryptoJS AES decryption scheme, without actually relying on crypto-js.\n */ const HEAD_SIZE_DWORD = 2;\nconst SALT_SIZE_DWORD = 2;\nasync function decryptCryptoJSCipherBase64(salt, ciphertext, password) {\n    let { keySizeDWORD = 256 / 32, ivSizeDWORD = 128 / 32, iterations = 1 } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const crypto = await universalCrypto();\n    const { key, iv } = await dangerouslyDeriveParameters(password, salt, keySizeDWORD, ivSizeDWORD, iterations);\n    try {\n        // decrypt ciphertext using key\n        const plainBuffer = await crypto.subtle.decrypt({\n            name: \"AES-CBC\",\n            iv\n        }, key, ciphertext);\n        // return the plaintext from ArrayBuffer\n        return getCachedTextDecoder().decode(plainBuffer);\n    } catch (e) {\n        throw new Error(\"Decrypt failed\");\n    }\n}\nfunction parseCryptoJSCipherBase64(cryptoJSCipherBase64) {\n    let salt = null;\n    let ciphertext = base64ToUint8Array(cryptoJSCipherBase64);\n    const [head, body] = splitUint8Array(ciphertext, HEAD_SIZE_DWORD * 4);\n    // This effectively checks if the ciphertext starts with 'Salted__', which is the crypto-js convention.\n    const headDataView = new DataView(head.buffer);\n    if (headDataView.getInt32(0) === 0x53616c74 && headDataView.getInt32(4) === 0x65645f5f) {\n        [salt, ciphertext] = splitUint8Array(body, SALT_SIZE_DWORD * 4);\n    }\n    return {\n        ciphertext,\n        salt\n    };\n}\nasync function dangerouslyDeriveParameters(password, salt, keySizeDWORD, ivSizeDWORD, iterations) {\n    const crypto = await universalCrypto();\n    const passwordUint8Array = getCachedTextEncoder().encode(password);\n    const keyPlusIV = dangerousEVPKDF(passwordUint8Array, salt, keySizeDWORD + ivSizeDWORD, iterations);\n    const [rawKey, iv] = splitUint8Array(keyPlusIV, keySizeDWORD * 4);\n    const key = await crypto.subtle.importKey(\"raw\", rawKey, \"AES-CBC\", false, [\n        \"decrypt\"\n    ]);\n    return {\n        key,\n        iv\n    };\n}\nfunction dangerousEVPKDF(passwordUint8Array, saltUint8Array, keySizeDWORD, iterations) {\n    let derivedKey = new Uint8Array();\n    let block = new Uint8Array();\n    while(derivedKey.byteLength < keySizeDWORD * 4){\n        block = new Uint8Array(arrayBuffer(concatUint8Arrays([\n            block,\n            passwordUint8Array,\n            saltUint8Array\n        ])));\n        for(let i = 1; i < iterations; i++){\n            block = new Uint8Array(arrayBuffer(block));\n        }\n        derivedKey = concatUint8Arrays([\n            derivedKey,\n            block\n        ]);\n    }\n    return derivedKey;\n}\nfunction splitUint8Array(a, i) {\n    return [\n        a.subarray(0, i),\n        a.subarray(i, a.length)\n    ];\n}\n/**\n * Decrypts ciphertext encrypted with aesEncrypt() using supplied password.\n *\n * @param    ciphertext - Ciphertext to be decrypted.\n * @param    password - Password to use to decrypt ciphertext.\n * @returns  Decrypted plaintext.\n *\n * @example\n *   const plaintext = await aesDecrypt(ciphertext, 'pw');\n */ async function aesDecrypt(ciphertext, password) {\n    const crypto = await universalCrypto();\n    // encode password as UTF-8\n    const pwUtf8 = getCachedTextEncoder().encode(password);\n    // hash the password\n    const pwHash = await crypto.subtle.digest(\"SHA-256\", pwUtf8);\n    const cipherUint8Array = base64ToUint8Array(ciphertext);\n    // iv\n    const iv = cipherUint8Array.slice(0, 12);\n    // specify algorithm to use\n    const alg = {\n        name: \"AES-GCM\",\n        iv\n    };\n    // generate key from pw\n    const key = await crypto.subtle.importKey(\"raw\", pwHash, alg, false, [\n        \"decrypt\"\n    ]);\n    // ciphertext\n    const ctUint8 = cipherUint8Array.slice(12);\n    try {\n        // decrypt ciphertext using key\n        const plainBuffer = await crypto.subtle.decrypt(alg, key, ctUint8);\n        // return the plaintext from ArrayBuffer\n        return getCachedTextDecoder().decode(plainBuffer);\n    } catch (e) {\n        throw new Error(\"Decrypt failed\");\n    }\n}\n/**\n * Decrypts ciphertext encrypted with aesEncrypt() OR \"crypto-js\".AES using supplied password.\n *\n * @param    ciphertext - Ciphertext to be decrypted.\n * @param    password - Password to use to decrypt ciphertext.\n * @returns  Decrypted plaintext.\n *\n * @example\n *   const plaintext = await aesDecryptCompat(ciphertext, 'pw');\n */ async function aesDecryptCompat(ciphertext, password) {\n    // determine if we're dealing with a legacy (cryptojs) ciphertext\n    const cryptoJs = parseCryptoJSCipherBase64(ciphertext);\n    if (cryptoJs.salt && cryptoJs.ciphertext) {\n        return decryptCryptoJSCipherBase64(cryptoJs.salt, cryptoJs.ciphertext, password);\n    }\n    // otherwise assume it's a ciphertext generated by aesEncrypt()\n    return aesDecrypt(ciphertext, password);\n}\n/**\n * Encrypts plaintext using AES-GCM with supplied password, for decryption with aesDecrypt().\n *\n * @param plaintext - Plaintext to be encrypted.\n * @param password - Password to use to encrypt plaintext.\n * @returns Encrypted ciphertext.\n *\n * @example\n *   const ciphertext = await aesEncrypt('my secret text', 'pw');\n */ async function aesEncrypt(plaintext, password) {\n    const crypto = await universalCrypto();\n    const textEncoder = getCachedTextEncoder();\n    // encode password as UTF-8\n    const pwUtf8 = textEncoder.encode(password);\n    // hash the password\n    const pwHash = await crypto.subtle.digest(\"SHA-256\", pwUtf8);\n    // get 96-bit random iv\n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    // specify algorithm to use\n    const alg = {\n        name: \"AES-GCM\",\n        iv\n    };\n    // generate key from pw\n    const key = await crypto.subtle.importKey(\"raw\", pwHash, alg, false, [\n        \"encrypt\"\n    ]);\n    // encode plaintext as UTF-8\n    const ptUint8 = textEncoder.encode(plaintext);\n    // encrypt plaintext using key\n    const ctBuffer = await crypto.subtle.encrypt(alg, key, ptUint8);\n    // iv+ciphertext base64-encoded\n    return uint8ArrayToBase64(concatUint8Arrays([\n        iv,\n        new Uint8Array(ctBuffer)\n    ]));\n}\n/**\n * Hash a string or Uint8Array using sha256.\n * @param value - Value to be hashed.\n * @returns A promise that resolves to the hash of the value as Uint8Array.\n */ async function sha256(value) {\n    let encodedValue;\n    if (typeof value === \"string\") {\n        // if we do not have a cahced TextEncoder instance, create one\n        encodedValue = getCachedTextEncoder().encode(value);\n    } else {\n        encodedValue = value;\n    }\n    return new Uint8Array(await (await universalCrypto()).subtle.digest(\"SHA-256\", encodedValue));\n}\n/**\n * Hash a string or Uint8Array using sha256 and returns the result as a hex string.\n * @param value - Value to be hashed.\n * @returns A promise that resolves to the hash of the value as a hex string.\n */ async function sha256Hex(value) {\n    return uint8ArrayToHex(await sha256(value));\n}\n/**\n * Hash a string or Uint8Array using sha256.\n * @param value - Value to be hashed.\n * @returns The hash of the value as Uint8Array.\n */ function sha256Sync(value) {\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(value);\n}\n/**\n * Hash a string or Uint8Array using sha256.\n * @param value - Value to be hashed.\n * @returns The hash of the value as a hex string.\n */ function sha256HexSync(value) {\n    return uint8ArrayToHex(sha256Sync(value));\n}\n/**\n * Hashes a string or Uint8Array using keccak256.\n * @param value - Value to be hashed.\n * @returns Hash of the value as Uint8Array.\n */ function keccak256Sync(value) {\n    return new Uint8Array(js_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256.arrayBuffer(value));\n}\n/**\n * Hashes a string or Uint8Array using keccak256 and returns the result as a hex string.\n * @param value - Value to be hashed.\n * @returns Hash of the value as a hex string.\n */ function keccak256SyncHex(value) {\n    return (0,js_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256)(value);\n}\n/**\n * Hashes a string or Uint8Array using keccak256 and returns the result as a hex string prefixed with \"0x\".\n * @param value - Value to be hashed.\n * @returns Hash of the value as a hex string prefixed with \"0x\".\n */ function keccak256SyncHexPrefixed(value) {\n    // prefix with 0x (this is what ethers.utils.keccak256 does)\n    return `0x${keccak256SyncHex(value)}`;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@thirdweb-dev+crypto@0.2.0/node_modules/@thirdweb-dev/crypto/dist/thirdweb-dev-crypto.esm.js\n");

/***/ })

};
;