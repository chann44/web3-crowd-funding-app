"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@thirdweb-dev+payments@1.0.2";
exports.ids = ["vendor-chunks/@thirdweb-dev+payments@1.0.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@thirdweb-dev+payments@1.0.2/node_modules/@thirdweb-dev/payments/dist/thirdweb-dev-payments.esm.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+payments@1.0.2/node_modules/@thirdweb-dev/payments/dist/thirdweb-dev-payments.esm.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHECKOUT_WITH_CARD_IFRAME_URL: () => (/* binding */ CHECKOUT_WITH_CARD_IFRAME_URL),\n/* harmony export */   CHECKOUT_WITH_ETH_IFRAME_URL: () => (/* binding */ CHECKOUT_WITH_ETH_IFRAME_URL),\n/* harmony export */   CREATE_WALLET_IFRAME_URL: () => (/* binding */ CREATE_WALLET_IFRAME_URL),\n/* harmony export */   ChainIdToChain: () => (/* binding */ ChainIdToChain),\n/* harmony export */   ChainToPublicRpc: () => (/* binding */ ChainToPublicRpc),\n/* harmony export */   DEFAULT_BRAND_OPTIONS: () => (/* binding */ DEFAULT_BRAND_OPTIONS),\n/* harmony export */   PAPER_APP_URL: () => (/* binding */ PAPER_APP_URL),\n/* harmony export */   PAY_WITH_ETH_ERROR: () => (/* binding */ PAY_WITH_ETH_ERROR),\n/* harmony export */   PayWithCryptoErrorCode: () => (/* binding */ PayWithCryptoErrorCode),\n/* harmony export */   PaymentsSDKErrorCode: () => (/* binding */ PaymentsSDKErrorCode),\n/* harmony export */   checkAndSendEth: () => (/* binding */ checkAndSendEth),\n/* harmony export */   createCheckoutWithCardElement: () => (/* binding */ createCheckoutWithCardElement),\n/* harmony export */   createCheckoutWithCardLink: () => (/* binding */ createCheckoutWithCardLink),\n/* harmony export */   createCheckoutWithCardMessageHandler: () => (/* binding */ createCheckoutWithCardMessageHandler),\n/* harmony export */   createCheckoutWithEthElement: () => (/* binding */ createCheckoutWithEthElement),\n/* harmony export */   createCheckoutWithEthLink: () => (/* binding */ createCheckoutWithEthLink),\n/* harmony export */   createCheckoutWithEthMessageHandler: () => (/* binding */ createCheckoutWithEthMessageHandler),\n/* harmony export */   getPaperOriginUrl: () => (/* binding */ getPaperOriginUrl),\n/* harmony export */   renderPaperCheckoutLink: () => (/* binding */ renderPaperCheckoutLink)\n/* harmony export */ });\n// UNCHANGED: MERGE BETWEEN sdk-common-utilities/settings and js-client-sdk/settings\nconst isDev = ()=>{\n    return !!( false && 0);\n};\nconst isOldPaperDomain = ()=> false && (0);\nconst isThirdwebDomain = ()=> false && (0);\nconst getPaperOriginUrl = ()=>{\n    if (isDev()) {\n        return window.localStorage.getItem(\"PAPER_DEV_URL\") ?? \"http://localhost:3000\";\n    }\n    if (isOldPaperDomain()) {\n        return window.location.origin;\n    }\n    if (isThirdwebDomain()) {\n        return window.location.origin;\n    }\n    return \"https://payments.thirdweb.com\";\n};\n// eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\nconst PAPER_APP_URL = getPaperOriginUrl();\nconst CHECKOUT_WITH_ETH_IFRAME_URL = \"/sdk/2022-08-12/checkout-with-eth\";\nconst CHECKOUT_WITH_CARD_IFRAME_URL = \"/sdk/2022-08-12/checkout-with-card\";\nconst CREATE_WALLET_IFRAME_URL = \"/sdk/v2/verify-email\";\n// UNCHANGED: MERGED FROM sdk-common-utilities/blockchain\nconst ChainToPublicRpc = {\n    Ethereum: \"https://ethereum.rpc.thirdweb.com\",\n    Goerli: \"https://goerli.rpc.thirdweb.com\",\n    Mumbai: \"https://mumbai.rpc.thirdweb.com\",\n    Polygon: \"https://polygon.rpc.thirdweb.com\",\n    Avalanche: \"https://avalanche.rpc.thirdweb.com\",\n    Optimism: \"https://optimism.rpc.thirdweb.com\",\n    OptimismGoerli: \"https://optimism-goerli.rpc.thirdweb.com\",\n    BSC: \"https://binance.rpc.thirdweb.com\",\n    BSCTestnet: \"https://binance-testnet.rpc.thirdweb.com\",\n    ArbitrumOne: \"https://arbitrum.rpc.thirdweb.com\",\n    ArbitrumGoerli: \"https://arbitrum-goerli.rpc.thirdweb.com\",\n    Fantom: \"https://fantom.rpc.thirdweb.com\",\n    FantomTestnet: \"https://fantom-testnet.rpc.thirdweb.com\",\n    Sepolia: \"https://sepolia.rpc.thirdweb.com\",\n    AvalancheFuji: \"https://avalanche-fuji.rpc.thirdweb.com\"\n};\nconst ChainIdToChain = {\n    1: \"Ethereum\",\n    5: \"Goerli\",\n    80001: \"Mumbai\",\n    137: \"Polygon\",\n    43114: \"Avalanche\",\n    10: \"Optimism\",\n    420: \"OptimismGoerli\",\n    56: \"BSC\",\n    97: \"BSCTestnet\",\n    42161: \"ArbitrumOne\",\n    421613: \"ArbitrumGoerli\",\n    250: \"Fantom\",\n    4002: \"FantomTestnet\",\n    11155111: \"Sepolia\",\n    43113: \"AvalancheFuji\"\n};\n// General Embedded wallet types\n// // UNCHANGED: MERGED FROM sdk-common-utilities/style\nconst DEFAULT_BRAND_OPTIONS = {\n    colorPrimary: \"#cf3781\",\n    colorBackground: \"#ffffff\",\n    colorText: \"#1a202c\",\n    borderRadius: 12,\n    fontFamily: \"Open Sans\"\n};\n// CHANGED: Updated name to Payments\nlet PaymentsSDKErrorCode = /*#__PURE__*/ function(PaymentsSDKErrorCode) {\n    PaymentsSDKErrorCode[\"UserAbandonedCheckout\"] = \"User abandoned the checkout\";\n    PaymentsSDKErrorCode[\"UserLoginFailed\"] = \"User login failed\";\n    PaymentsSDKErrorCode[\"InvalidProps\"] = \"The props you passed in to this component are not valid.\";\n    PaymentsSDKErrorCode[\"InvalidCard\"] = \"The card information is invalid. Please double check that the Card, CVC, and Zip code are all correct.\";\n    PaymentsSDKErrorCode[\"EmailNotVerified\"] = \"The email was unable to be verified.\";\n    PaymentsSDKErrorCode[\"NotEnoughSupply\"] = \"There is not enough supply to claim.\";\n    PaymentsSDKErrorCode[\"AddressNotAllowed\"] = \"This address is not on the allowlist.\";\n    PaymentsSDKErrorCode[\"NoActiveClaimPhase\"] = \"There is no active claim phase at the moment.\";\n    return PaymentsSDKErrorCode;\n}({});\nlet PayWithCryptoErrorCode = /*#__PURE__*/ function(PayWithCryptoErrorCode) {\n    PayWithCryptoErrorCode[\"ErrorConnectingToWallet\"] = \"Error connecting to wallet\";\n    PayWithCryptoErrorCode[\"ErrorSendingTransaction\"] = \"Something went wrong sending transaction\";\n    PayWithCryptoErrorCode[\"InsufficientBalance\"] = \"Insufficient ETH\";\n    PayWithCryptoErrorCode[\"TransactionCancelled\"] = \"Transaction Cancelled\";\n    PayWithCryptoErrorCode[\"WrongChain\"] = \"Wrong Chain Detected\";\n    PayWithCryptoErrorCode[\"ChainSwitchUnderway\"] = \"There is a network switch already underway\";\n    PayWithCryptoErrorCode[\"PendingSignature\"] = \"Pending Signature\";\n    return PayWithCryptoErrorCode;\n}({});\n// CHANGED: added clientId to link\nclass LinksManager {\n    constructor(baseLink){\n        this.link = baseLink;\n    }\n    addStylingOptions(options) {\n        if (options.colorPrimary) {\n            this.link.searchParams.set(\"colorPrimary\", options.colorPrimary);\n        }\n        if (options.colorBackground) {\n            this.link.searchParams.set(\"colorBackground\", options.colorBackground);\n        }\n        if (options.colorText) {\n            this.link.searchParams.set(\"colorText\", options.colorText);\n        }\n        if (options.borderRadius !== undefined) {\n            this.link.searchParams.set(\"borderRadius\", options.borderRadius.toString());\n        }\n        if (options.fontFamily) {\n            this.link.searchParams.set(\"fontFamily\", options.fontFamily);\n        }\n        if (options.inputBackgroundColor) {\n            this.link.searchParams.set(\"inputBackgroundColor\", options.inputBackgroundColor);\n        }\n        if (options.inputBorderColor) {\n            this.link.searchParams.set(\"inputBorderColor\", options.inputBorderColor);\n        }\n    }\n    addClientSecret(sdkClientSecret) {\n        this.link.searchParams.set(\"sdkClientSecret\", sdkClientSecret);\n    }\n    addClientId(clientId) {\n        this.link.searchParams.set(\"clientId\", clientId);\n    }\n    addLocale(locale) {\n        if (locale) {\n            this.link.searchParams.set(\"locale\", locale.toString());\n        }\n    }\n    addOTP() {\n        this.link.searchParams.set(\"withOTP\", \"true\");\n    }\n    addAppName(appName) {\n        if (appName) {\n            this.link.searchParams.set(\"appName\", appName);\n        }\n    }\n    addShowConnectWalletOptions(showConnectWalletOptions) {\n        this.link.searchParams.append(\"showConnectWalletOptions\", showConnectWalletOptions.toString());\n    }\n    addReceivingWalletType(walletType) {\n        this.link.searchParams.append(\"walletType\", walletType || \"Preset\");\n    }\n    addRecipientWalletAddress(address) {\n        this.link.searchParams.set(\"recipientWalletAddress\", address);\n    }\n    addPayerWalletAddress(address) {\n        this.link.searchParams.append(\"payerWalletAddress\", address);\n    }\n    addDate(date) {\n        this.link.searchParams.set(\"date\", date ? date.toString() : Date.now().toString());\n    }\n    getLink() {\n        return this.link;\n    }\n}\n// UNCHANGED\n/**\n * Opens a popup centered on the current window.\n * Note that modern browsers may prevent popups from opening automatically,\n * so try to handle the case where the window returned is null.\n *\n * @returns Window | null - The Window object that was opened. If null is returned, the popup failed to open.\n */ const openCenteredPopup = (_ref)=>{\n    let { url, width = 440, height = 700 } = _ref;\n    if (!window?.top) {\n        return null;\n    }\n    const y = window.top.outerHeight / 2 + window.top.screenY - height / 2;\n    const x = window.top.outerWidth / 2 + window.top.screenX - width / 2;\n    return window.open(url, \"_blank\", `popup=true,width=${width},height=${height},top=${y},left=${x}`);\n};\n// UNCHANGED\nfunction postMessageToIframe(frame, eventType, data) {\n    frame.contentWindow?.postMessage({\n        eventType,\n        ...data\n    }, \"*\");\n}\nvar packageJson = {\n    name: \"@thirdweb-dev/payments\",\n    version: \"1.0.2\",\n    main: \"dist/thirdweb-dev-payments.cjs.js\",\n    module: \"dist/thirdweb-dev-payments.esm.js\",\n    types: \"dist/thirdweb-dev-payments.cjs.d.ts\",\n    browser: {\n        \"./dist/thirdweb-dev-payments.esm.js\": \"./dist/thirdweb-dev-payments.browser.esm.js\"\n    },\n    exports: {\n        \".\": {\n            module: {\n                browser: \"./dist/thirdweb-dev-payments.browser.esm.js\",\n                \"default\": \"./dist/thirdweb-dev-payments.esm.js\"\n            },\n            \"default\": \"./dist/thirdweb-dev-payments.cjs.js\"\n        },\n        \"./package.json\": \"./package.json\"\n    },\n    repository: \"https://github.com/thirdweb-dev/js/tree/main/packages/payments\",\n    license: \"Apache-2.0\",\n    bugs: {\n        url: \"https://github.com/thirdweb-dev/js/issues\"\n    },\n    author: \"thirdweb eng <eng@thirdweb.com>\",\n    files: [\n        \"dist/\"\n    ],\n    preconstruct: {\n        entrypoints: [\n            \"index.ts\"\n        ],\n        exports: {\n            envConditions: [\n                \"browser\"\n            ]\n        }\n    },\n    sideEffects: false,\n    dependencies: {\n        ethers: \"^5.7.2\"\n    },\n    devDependencies: {\n        \"@thirdweb-dev/tsconfig\": \"workspace:*\",\n        \"eslint-config-thirdweb\": \"workspace:*\",\n        typescript: \"^5.1.6\",\n        \"@preconstruct/cli\": \"2.7.0\"\n    },\n    scripts: {\n        format: \"prettier --write 'src/**/*'\",\n        lint: \"eslint src/\",\n        fix: \"eslint src/ --fix\",\n        clean: \"rm -rf dist/\",\n        build: \"tsc && preconstruct build\",\n        \"preconstruct:fix\": \"preconstruct fix\",\n        push: \"yalc push\"\n    }\n};\n// CHANGED: packageJson import + version string\nclass PaperPaymentElement {\n    constructor(_ref){\n        let { elementOrId, onLoad } = _ref;\n        this.elementOrId = elementOrId;\n        this.onLoad = onLoad;\n    }\n    createPaymentElement(_ref2) {\n        let { handler, link, iframeId } = _ref2;\n        const iframe = document.createElement(\"iframe\");\n        iframe.src = link.href;\n        iframe.id = iframeId;\n        iframe.allow = \"payment\";\n        iframe.setAttribute(\"style\", \"margin-left:auto; margin-right:auto; width:100%; height: 100%; min-height:375px; transition-property:all; transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1); transition-duration:150ms; color-scheme: light;\");\n        iframe.onload = (event)=>{\n            if (this.onLoad) {\n                this.onLoad(event);\n            }\n        };\n        iframe.setAttribute(\"data-thirdweb-sdk-version\", `${packageJson.name}@${packageJson.version}`);\n        if (!this.elementOrId) {\n            window.addEventListener(\"message\", handler(iframe));\n            return iframe;\n        }\n        let container = this.elementOrId;\n        if (typeof container === \"string\") {\n            const domElement = document.getElementById(container);\n            if (!domElement) {\n                throw new Error(\"Invalid id given\");\n            }\n            container = domElement;\n        }\n        const existing = container.querySelector(\"#\" + iframeId);\n        // if we already created an iframe, consider updating the iframe link if it's new\n        if (existing) {\n            if (existing.src === link.href) {\n                return existing;\n            }\n            existing.src = link.href;\n            return existing;\n        }\n        window.addEventListener(\"message\", handler(iframe));\n        return container.appendChild(iframe);\n    }\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst fullScreen$1 = {\n    top: \"0px\",\n    left: \"0px\",\n    right: \"0px\",\n    bottom: \"0px\"\n};\nconst getDefaultModalStyles$1 = ()=>({\n        main: {\n            ...fullScreen$1,\n            position: \"fixed\",\n            zIndex: \"10000\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            pointerEvents: \"auto\"\n        },\n        overlay: {\n            ...fullScreen$1,\n            position: \"absolute\",\n            backgroundColor: \"rgba(0, 0, 0, 0.33)\",\n            pointerEvents: \"auto\"\n        },\n        body: {\n            background: \"transparent\",\n            borderRadius: \"12px\",\n            position: \"relative\",\n            overflow: \"hidden\",\n            width: \"100%\",\n            maxWidth: \"500px\",\n            height: \"700px\",\n            maxHeight: \"80%\",\n            animation: \"pew-modal-slideIn 0.2s forwards\",\n            pointerEvents: \"auto\"\n        },\n        spinner: {\n            position: \"absolute\",\n            top: \"0\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            margin: \"auto\",\n            borderWidth: \"3px\",\n            borderColor: \"#2D3748 #2D3748 transparent transparent\",\n            borderRadius: \"50%\",\n            width: \"30px\",\n            height: \"30px\",\n            animation: \"spin 1s linear infinite\"\n        },\n        iframe: {\n            position: \"relative\",\n            height: \"100%\",\n            width: \"100%\",\n            border: \"none\",\n            background: \"transparent\"\n        }\n    });\nconst modalKeyframeAnimations = `\n  @keyframes pew-modal-slideIn {\n    from {opacity: 0; transform: translate3d(0, 20px, 0);}\n    to {opacity: 1; transform: translate3d(0, 0, 0);}\n  }\n\n  @keyframes pew-modal-slideOut {\n    from {opacity: 1; transform: translate3d(0, 0, 0);}\n    to {opacity: 0; transform: translate3d(0, 20px, 0);}\n  }\n\n  @keyframes spin {\n    to { transform: rotate(360deg); }\n  }\n`;\nconst MODAL_ID = \"paper-js-sdk-modal\";\nclass Modal {\n    constructor(container, styles){\n        // eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\n        _defineProperty(this, \"styles\", getDefaultModalStyles$1());\n        this.container = container || document.body;\n        if (styles) {\n            this.mergeStyles(styles);\n        }\n        this.main = document.createElement(\"div\");\n        this.main.id = MODAL_ID;\n        this.overlay = document.createElement(\"div\");\n        this.overlay.id = `${MODAL_ID}-overlay`;\n        this.body = document.createElement(\"div\");\n        this.body.id = `${MODAL_ID}-body`;\n        this.spinner = document.createElement(\"div\");\n        this.spinner.id = `${MODAL_ID}-spinner`;\n        this.iframe = document.createElement(\"iframe\");\n        this.iframe.id = `${MODAL_ID}-iframe`;\n        this.iframe.allow = \"camera; microphone; payment\";\n        this.iframe.setAttribute(\"data-thirdweb-sdk-version\", `${packageJson.name}@${packageJson.version}`);\n        this.style = document.createElement(\"style\");\n        this.style.innerHTML = modalKeyframeAnimations;\n        this.assignStyles(this.main, this.styles.main);\n        this.assignStyles(this.overlay, this.styles.overlay);\n        this.assignStyles(this.body, this.styles.body);\n        this.assignStyles(this.spinner, this.styles.spinner);\n        this.assignStyles(this.iframe, this.styles.iframe);\n    }\n    open() {\n        let { iframeUrl } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (iframeUrl) {\n            this.body.appendChild(this.spinner);\n            this.iframe.src = iframeUrl;\n            // Remove the spinner when the iframe loads.\n            this.iframe.onload = ()=>this.body.removeChild(this.spinner);\n            this.body.appendChild(this.iframe);\n        }\n        this.addAccessibility();\n        this.main.appendChild(this.overlay);\n        this.main.appendChild(this.style);\n        this.main.appendChild(this.body);\n        this.container.appendChild(this.main);\n        document.body.style.overflow = \"hidden\";\n    }\n    close() {\n        this.body.style.animation = \"pew-modal-slideOut 0.2s forwards\";\n        window.setTimeout(()=>this.main.remove(), 250);\n    }\n    mergeStyles(styles) {\n        this.styles.body = {\n            ...this.styles.body,\n            ...styles.body || {}\n        };\n        this.styles.spinner = {\n            ...this.styles.spinner,\n            ...styles.spinner || {}\n        };\n        this.styles.overlay = {\n            ...this.styles.overlay,\n            ...styles.overlay || {}\n        };\n        this.styles.main = {\n            ...this.styles.main,\n            ...styles.main || {}\n        };\n        this.styles.iframe = {\n            ...this.styles.iframe,\n            ...styles.iframe || {}\n        };\n    }\n    addAccessibility() {\n        this.main.setAttribute(\"aria-hidden\", \"true\");\n        this.overlay.setAttribute(\"aria-hidden\", \"true\");\n        this.body.setAttribute(\"aria-modal\", \"true\");\n        this.body.setAttribute(\"role\", \"dialog\");\n    }\n    assignStyles(el, styles) {\n        Object.assign(el.style, styles);\n    }\n}\n// CHANGED: Added clientId to interface\nfunction createCheckoutWithCardLink(_ref) {\n    let { clientId, sdkClientSecret, appName, options = {\n        ...DEFAULT_BRAND_OPTIONS\n    }, locale, configs } = _ref;\n    const CheckoutWithCardUrlBase = new URL(CHECKOUT_WITH_CARD_IFRAME_URL, PAPER_APP_URL);\n    let clientSecret = sdkClientSecret;\n    if (!clientSecret && configs) {\n        clientSecret = btoa(JSON.stringify(configs));\n    }\n    if (!clientSecret) {\n        const error = `Must have either sdkClientSecret or configs field set. Received neither`;\n        const destination = `/error?errorMessage=${error}`;\n        const domain = getPaperOriginUrl();\n        return new URL(destination, domain);\n    }\n    if (!clientId) {\n        const error = `Must have clientId field set. Please add clientId`;\n        const destination = `/error?errorMessage=${error}`;\n        const domain = getPaperOriginUrl();\n        return new URL(destination, domain);\n    }\n    const checkoutWithCardLink = new LinksManager(CheckoutWithCardUrlBase);\n    checkoutWithCardLink.addClientId(clientId ?? \"\");\n    checkoutWithCardLink.addClientSecret(clientSecret ?? \"\");\n    checkoutWithCardLink.addStylingOptions(options);\n    checkoutWithCardLink.addLocale(locale);\n    checkoutWithCardLink.addAppName(appName);\n    return checkoutWithCardLink.getLink();\n}\nfunction createCheckoutWithCardMessageHandler(_ref2) {\n    let { iframe, onError, onReview, onPaymentSuccess, onBeforeModalOpen, onPriceUpdate } = _ref2;\n    let modal;\n    return (event)=>{\n        if (!event.origin.startsWith(PAPER_APP_URL)) {\n            return;\n        }\n        const { data } = event;\n        switch(data.eventType){\n            case \"checkoutWithCardError\":\n                if (onError) {\n                    onError({\n                        code: data.code,\n                        error: data.error\n                    });\n                }\n                break;\n            case \"paymentSuccess\":\n                if (onPaymentSuccess) {\n                    onPaymentSuccess({\n                        transactionId: data.id,\n                        id: data.id\n                    });\n                }\n                if (data.postToIframe) {\n                    postMessageToIframe(iframe, data.eventType, data);\n                }\n                break;\n            case \"reviewComplete\":\n                if (onReview) {\n                    onReview({\n                        id: data.id,\n                        cardholderName: data.cardholderName\n                    });\n                }\n                break;\n            case \"openModalWithUrl\":\n                if (onBeforeModalOpen && data.url && data.url.includes(\"promptKYCModal\")) {\n                    onBeforeModalOpen({\n                        url: data.url\n                    });\n                } else {\n                    modal = new Modal(undefined, {\n                        body: {\n                            colorScheme: \"light\"\n                        }\n                    });\n                    modal.open({\n                        iframeUrl: data.url\n                    });\n                }\n                break;\n            case \"completedSDKModal\":\n                modal.close();\n                if (data.postToIframe) {\n                    postMessageToIframe(iframe, data.eventType, data);\n                }\n                break;\n            case \"requestedPopup\":\n                {\n                    // The iframe requested a popup.\n                    // The reference to this window is not stored so the popup cannot\n                    // be programmatically closed.\n                    const popupRef = openCenteredPopup({\n                        url: data.url,\n                        width: data.width,\n                        height: data.height\n                    });\n                    if (!popupRef) {\n                        console.error(\"CheckoutWithCard: Unable to open popup.\");\n                    }\n                    break;\n                }\n            case \"sizing\":\n                iframe.style.height = data.height + \"px\";\n                iframe.style.maxHeight = data.height + \"px\";\n                break;\n            case \"onPriceUpdate\":\n                {\n                    onPriceUpdate?.(data);\n                    break;\n                }\n        }\n    };\n}\nfunction createCheckoutWithCardElement(_ref3) {\n    let { clientId, onCloseKycModal, onOpenKycModal, sdkClientSecret, appName, elementOrId, onLoad, onError, locale, options, onPaymentSuccess, onReview, onBeforeModalOpen, onPriceUpdate, useAltDomain = true, configs } = _ref3;\n    const checkoutWithCardId = \"checkout-with-card-iframe\";\n    const checkoutWithCardMessageHandler = (iframe)=>createCheckoutWithCardMessageHandler({\n            iframe,\n            onCloseKycModal,\n            onOpenKycModal,\n            onError,\n            onPaymentSuccess,\n            onReview,\n            onBeforeModalOpen,\n            onPriceUpdate,\n            useAltDomain\n        });\n    const checkoutWithCardUrl = createCheckoutWithCardLink({\n        clientId,\n        sdkClientSecret,\n        appName,\n        locale,\n        options,\n        useAltDomain,\n        configs\n    });\n    const paymentElement = new PaperPaymentElement({\n        onLoad,\n        elementOrId\n    });\n    return paymentElement.createPaymentElement({\n        handler: checkoutWithCardMessageHandler,\n        iframeId: checkoutWithCardId,\n        link: checkoutWithCardUrl\n    });\n}\n// Changed: Updated PaperSDKError\nconst handlePayWithCryptoError = async (error, onError, postToParent)=>{\n    if (\"isErrorObject\" in error) {\n        if (onError) {\n            await onError({\n                code: error.title,\n                error: new Error(error.title)\n            });\n        }\n        if (postToParent) {\n            postToParent({\n                ...error\n            });\n        }\n    } else if (!(\"message\" in error)) {\n        if (onError) {\n            await onError({\n                code: PayWithCryptoErrorCode.ErrorSendingTransaction,\n                error: new Error(JSON.stringify(error))\n            });\n        }\n        if (postToParent) {\n            postToParent({\n                description: `${error}`,\n                title: PayWithCryptoErrorCode.ErrorSendingTransaction\n            });\n        }\n    } else {\n        if (error.message.includes(\"rejected\") || error.message.includes(\"denied transaction\")) {\n            if (onError) {\n                await onError({\n                    code: PayWithCryptoErrorCode.TransactionCancelled,\n                    error\n                });\n            }\n            if (postToParent) {\n                postToParent({\n                    description: \"\",\n                    title: PayWithCryptoErrorCode.TransactionCancelled\n                });\n            }\n        } else if (error.message.includes(\"insufficient funds\")) {\n            if (onError) {\n                await onError({\n                    code: PayWithCryptoErrorCode.InsufficientBalance,\n                    error\n                });\n            }\n            if (postToParent) {\n                postToParent({\n                    description: \"Check your wallet's ETH balance to make sure you have enough!\",\n                    title: PayWithCryptoErrorCode.InsufficientBalance\n                });\n            }\n        } else if (error.message.includes(\"Error switching chain\")) {\n            if (onError) {\n                await onError({\n                    code: PayWithCryptoErrorCode.ChainSwitchUnderway,\n                    error\n                });\n            }\n            if (postToParent) {\n                postToParent({\n                    description: \"Check your wallet app\",\n                    title: PayWithCryptoErrorCode.ChainSwitchUnderway\n                });\n            }\n        } else {\n            if (onError) {\n                await onError({\n                    code: PayWithCryptoErrorCode.ErrorSendingTransaction,\n                    error\n                });\n            }\n            if (postToParent) {\n                postToParent({\n                    description: `${error.message}`,\n                    title: PayWithCryptoErrorCode.ErrorSendingTransaction\n                });\n            }\n        }\n    }\n};\n// CHANGED: Imports only\nconst PAY_WITH_ETH_ERROR = \"payWithEthError\";\nasync function checkAndSendEth(_ref) {\n    let { data, iframe, payingWalletSigner, suppressErrorToast, onError, onPaymentSuccess } = _ref;\n    try {\n        const chainId = await payingWalletSigner.getChainId();\n        if (chainId !== data.chainId) {\n            throw {\n                isErrorObject: true,\n                title: PayWithCryptoErrorCode.WrongChain,\n                description: `Please change to ${data.chainName} to proceed.`\n            };\n        }\n    } catch (e) {\n        await handlePayWithCryptoError(e, onError, (errorObject)=>{\n            postMessageToIframe(iframe, PAY_WITH_ETH_ERROR, {\n                error: errorObject,\n                suppressErrorToast\n            });\n        });\n        return;\n    }\n    // send the transaction\n    try {\n        console.log(\"sending funds...\", data);\n        const result = await payingWalletSigner.sendTransaction({\n            chainId: data.chainId,\n            data: data.blob,\n            to: data.paymentAddress,\n            value: data.value\n        });\n        const receipt = await result.wait();\n        if (onPaymentSuccess && result) {\n            await onPaymentSuccess({\n                onChainTxResponse: result,\n                onChainTxReceipt: receipt,\n                transactionId: data.transactionId\n            });\n        }\n        if (result) {\n            postMessageToIframe(iframe, \"paymentSuccess\", {\n                suppressErrorToast,\n                transactionHash: result.hash\n            });\n        }\n    } catch (error) {\n        console.log(\"error sending funds\", error);\n        await handlePayWithCryptoError(error, onError, (errorObject)=>{\n            postMessageToIframe(iframe, PAY_WITH_ETH_ERROR, {\n                error: errorObject,\n                suppressErrorToast\n            });\n        });\n    }\n}\nfunction createCheckoutWithEthMessageHandler(_ref2) {\n    let { iframe, onError, onPaymentSuccess, onPriceUpdate, payingWalletSigner, suppressErrorToast = false, setUpUserPayingWalletSigner } = _ref2;\n    return async (event)=>{\n        if (!event.origin.startsWith(PAPER_APP_URL)) {\n            return;\n        }\n        const data = event.data;\n        switch(data.eventType){\n            case \"payWithEth\":\n                {\n                    if (data.error) {\n                        await handlePayWithCryptoError(new Error(data.error), onError, (errorObject)=>{\n                            postMessageToIframe(iframe, PAY_WITH_ETH_ERROR, {\n                                error: errorObject,\n                                suppressErrorToast\n                            });\n                        });\n                        return;\n                    }\n                    // Allows Dev's to inject any chain switching for their custom signer here.\n                    if (setUpUserPayingWalletSigner) {\n                        try {\n                            console.log(\"setting up signer\");\n                            await setUpUserPayingWalletSigner({\n                                chainId: data.chainId,\n                                chainName: data.chainName\n                            });\n                        } catch (error) {\n                            console.log(\"error setting up signer\", error);\n                            await handlePayWithCryptoError(error, onError, (errorObject)=>{\n                                postMessageToIframe(iframe, PAY_WITH_ETH_ERROR, {\n                                    error: errorObject,\n                                    suppressErrorToast\n                                });\n                            });\n                            return;\n                        }\n                    }\n                    await checkAndSendEth({\n                        data,\n                        iframe,\n                        payingWalletSigner,\n                        suppressErrorToast,\n                        onError,\n                        onPaymentSuccess\n                    });\n                    break;\n                }\n            case \"checkout-with-eth-sizing\":\n                {\n                    iframe.style.height = data.height + \"px\";\n                    iframe.style.maxHeight = data.height + \"px\";\n                    break;\n                }\n            case \"onPriceUpdate\":\n                {\n                    onPriceUpdate?.(data);\n                    break;\n                }\n        }\n    };\n}\nasync function createCheckoutWithEthLink(_ref3) {\n    let { sdkClientSecret, payingWalletSigner, receivingWalletType, showConnectWalletOptions = false, appName, locale, options = {\n        ...DEFAULT_BRAND_OPTIONS\n    }, configs } = _ref3;\n    const checkoutWithEthUrlBase = new URL(CHECKOUT_WITH_ETH_IFRAME_URL, PAPER_APP_URL);\n    const address = await payingWalletSigner.getAddress();\n    let clientSecret = sdkClientSecret;\n    if (!clientSecret && configs) {\n        clientSecret = btoa(JSON.stringify(configs));\n    }\n    if (!clientSecret) {\n        const error = `Must have either sdkClientSecret or configs field set. Received neither`;\n        const destination = `/error?errorMessage=${error}`;\n        const domain = getPaperOriginUrl();\n        return new URL(destination, domain);\n    }\n    const checkoutWithEthLink = new LinksManager(checkoutWithEthUrlBase);\n    checkoutWithEthLink.addClientSecret(clientSecret ?? \"\");\n    checkoutWithEthLink.addRecipientWalletAddress(address);\n    checkoutWithEthLink.addPayerWalletAddress(address);\n    checkoutWithEthLink.addReceivingWalletType(receivingWalletType);\n    checkoutWithEthLink.addAppName(appName);\n    checkoutWithEthLink.addShowConnectWalletOptions(showConnectWalletOptions);\n    checkoutWithEthLink.addStylingOptions(options);\n    checkoutWithEthLink.addLocale(locale);\n    return checkoutWithEthLink.getLink();\n}\nasync function createCheckoutWithEthElement(_ref4) {\n    let { sdkClientSecret, suppressErrorToast, onError, onLoad, payingWalletSigner, receivingWalletType, appName, showConnectWalletOptions, locale, options, elementOrId, onPaymentSuccess: _onPaymentSuccess, onSuccess } = _ref4;\n    const onPaymentSuccess = _onPaymentSuccess ?? onSuccess;\n    const checkoutWithEthId = \"checkout-with-eth-iframe\";\n    const checkoutWithEthMessageHandler = (iframe)=>createCheckoutWithEthMessageHandler({\n            iframe,\n            onError,\n            payingWalletSigner,\n            suppressErrorToast,\n            onPaymentSuccess\n        });\n    const checkoutWithEthUrl = await createCheckoutWithEthLink({\n        payingWalletSigner,\n        sdkClientSecret,\n        appName,\n        locale,\n        options,\n        receivingWalletType,\n        showConnectWalletOptions\n    });\n    const paymentElement = new PaperPaymentElement({\n        onLoad,\n        elementOrId\n    });\n    return paymentElement.createPaymentElement({\n        handler: checkoutWithEthMessageHandler,\n        iframeId: checkoutWithEthId,\n        link: checkoutWithEthUrl\n    });\n}\nconst fullScreen = {\n    position: \"fixed\",\n    top: \"0px\",\n    left: \"0px\",\n    right: \"0px\",\n    bottom: \"0px\"\n};\nconst getDefaultModalStyles = ()=>({\n        main: {\n            ...fullScreen,\n            zIndex: \"2147483646\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"end\"\n        },\n        overlay: {\n            ...fullScreen,\n            backgroundColor: \"rgba(0, 0, 0, 0)\",\n            transition: \"background-color ease-out 0.2s\"\n        },\n        body: {\n            position: \"fixed\",\n            width: \"100%\",\n            maxWidth: \"420px\",\n            top: \"0px\",\n            bottom: \"0px\",\n            right: \"-100px\",\n            opacity: \"0\",\n            boxShadow: \"0px 10px 20px rgba(0, 0, 0, 0.25)\",\n            backgroundColor: window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"#2F2F2F\" : \"white\",\n            overflow: \"hidden\",\n            transition: \"all ease-out 0.2s\"\n        },\n        spinner: {\n            position: \"absolute\",\n            top: \"0\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            margin: \"auto\",\n            borderWidth: \"3px\",\n            borderColor: \"#2D3748 #2D3748 transparent transparent\",\n            borderRadius: \"50%\",\n            width: \"30px\",\n            height: \"30px\",\n            animation: \"spin 1s linear infinite\"\n        },\n        iframe: {\n            height: \"100%\",\n            width: \"100%\",\n            border: \"none\",\n            backgroundColor: \"transparent\"\n        },\n        closeButton: {\n            position: \"fixed\",\n            cursor: \"pointer\",\n            top: \"0.75rem\",\n            right: \"1rem\",\n            color: \"#888\",\n            padding: \"2px 8px\"\n        }\n    });\nconst MAIN_CLASSNAME = \"paper--drawer-main\";\nconst OVERLAY_CLASSNAME = \"paper--drawer-overlay\";\nconst BODY_CLASSNAME = \"paper--drawer-body\";\nconst CLOSE_CLASSNAME = \"paper--drawer-close\";\nclass Drawer {\n    constructor(container, styles){\n        // eslint-disable-next-line better-tree-shaking/no-top-level-side-effects\n        _defineProperty(this, \"styles\", getDefaultModalStyles());\n        this.container = container || document.body;\n        if (styles) {\n            this.mergeStyles(styles);\n        }\n        this.main = document.createElement(\"div\");\n        this.main.className = MAIN_CLASSNAME;\n        this.overlay = document.createElement(\"div\");\n        this.overlay.className = OVERLAY_CLASSNAME;\n        this.body = document.createElement(\"div\");\n        this.body.className = BODY_CLASSNAME;\n        this.closeButton = document.createElement(\"button\");\n        this.closeButton.className = CLOSE_CLASSNAME;\n        this.closeButton.innerHTML = \"&#x2715;\";\n        this.closeButton.onclick = ()=>{\n            this.close();\n        };\n        this.iframe = document.createElement(\"iframe\");\n        this.iframe.allow = \"camera; microphone; payment\";\n        this.iframe.setAttribute(\"data-thirdweb-sdk-version\", `${packageJson.name}@${packageJson.version}`);\n        this.assignStyles(this.main, this.styles.main);\n        this.assignStyles(this.overlay, this.styles.overlay);\n        this.assignStyles(this.body, this.styles.body);\n        this.assignStyles(this.iframe, this.styles.iframe);\n        if (this.styles.closeButton) {\n            this.assignStyles(this.closeButton, this.styles.closeButton);\n        }\n    }\n    open() {\n        let { iframeUrl } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (iframeUrl) {\n            this.iframe.src = iframeUrl;\n            this.body.appendChild(this.iframe);\n        }\n        this.addAccessibility();\n        this.main.appendChild(this.overlay);\n        this.main.appendChild(this.body);\n        this.main.appendChild(this.closeButton);\n        this.container.appendChild(this.main);\n        document.body.style.overflow = \"hidden\";\n        // Animate in.\n        this.overlay.style.backgroundColor = \"rgba(0, 0, 0, 0.5)\";\n        this.body.style.right = \"0px\";\n        this.body.style.opacity = \"1\";\n        return this.iframe;\n    }\n    close() {\n        this.closeButton.remove();\n        // Animate out.\n        this.overlay.style.backgroundColor = \"rgba(0, 0, 0, 0)\";\n        this.body.style.right = \"-100px\";\n        this.body.style.opacity = \"0\";\n        // Remove drawer from DOM.\n        this.closeTimeout = window.setTimeout(()=>{\n            document.body.style.overflow = \"visible\";\n            this.main.remove();\n            window.clearTimeout(this.closeTimeout);\n            this.onCloseCallback?.();\n        }, 250);\n    }\n    setOnCloseCallback(callback) {\n        this.onCloseCallback = callback;\n    }\n    mergeStyles(styles) {\n        this.styles.body = {\n            ...this.styles.body,\n            ...styles.body || {}\n        };\n        this.styles.overlay = {\n            ...this.styles.overlay,\n            ...styles.overlay || {}\n        };\n        this.styles.main = {\n            ...this.styles.main,\n            ...styles.main || {}\n        };\n        this.styles.iframe = {\n            ...this.styles.iframe,\n            ...styles.iframe || {}\n        };\n        this.styles.closeButton = {\n            ...this.styles.closeButton,\n            ...styles.closeButton || {}\n        };\n    }\n    addAccessibility() {\n        this.main.setAttribute(\"aria-hidden\", \"true\");\n        this.overlay.setAttribute(\"aria-hidden\", \"true\");\n        this.body.setAttribute(\"aria-modal\", \"true\");\n        this.body.setAttribute(\"role\", \"dialog\");\n    }\n    assignStyles(el, styles) {\n        Object.assign(el.style, styles);\n    }\n}\n// UNCHANGED\nasync function sleepForSeconds(seconds) {\n    return new Promise((res)=>{\n        setTimeout(()=>{\n            res(0);\n        }, seconds * 1000);\n    });\n}\nfunction renderPaperCheckoutLink(_ref) {\n    let { checkoutLinkUrl, onPaymentSucceeded, onPaymentFailed, onTransferSucceeded, onModalClosed } = _ref;\n    const drawer = new Drawer();\n    const formattedCheckoutLinkUrl = new URL(checkoutLinkUrl);\n    formattedCheckoutLinkUrl.searchParams.set(\"display\", \"DRAWER\");\n    drawer.open({\n        iframeUrl: formattedCheckoutLinkUrl.href\n    });\n    if (onModalClosed) {\n        drawer.setOnCloseCallback(onModalClosed);\n    }\n    const messageHandler = async (e)=>{\n        if (e.origin !== PAPER_APP_URL) {\n            return;\n        }\n        const result = e.data;\n        if (!result.eventType) {\n            return;\n        }\n        switch(result.eventType){\n            case \"paymentSuccess\":\n                {\n                    const transactionId = e.data.id;\n                    onPaymentSucceeded?.({\n                        transactionId\n                    });\n                    break;\n                }\n            case \"claimSuccessful\":\n                {\n                    const { id: transactionId, claimedTokens } = e.data;\n                    onTransferSucceeded?.({\n                        transactionId,\n                        claimedTokens\n                    });\n                    await sleepForSeconds(3.5);\n                    drawer.close();\n                    break;\n                }\n            case \"redirectAfterSuccess\":\n                {\n                    const redirectUrl = e.data.redirectUrl;\n                    window.location.assign(redirectUrl);\n                    break;\n                }\n            case \"paymentFailed\":\n                {\n                    const transactionId = e.data.id;\n                    onPaymentFailed?.({\n                        transactionId\n                    });\n                    break;\n                }\n            case \"modalClosed\":\n                {\n                    onModalClosed?.();\n                    break;\n                }\n            default:\n                throw new Error(`Unsupported eventType ${result.eventType}`);\n        }\n    };\n    window.addEventListener(\"message\", messageHandler);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@thirdweb-dev+payments@1.0.2/node_modules/@thirdweb-dev/payments/dist/thirdweb-dev-payments.esm.js\n");

/***/ })

};
;