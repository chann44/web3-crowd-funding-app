"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ethersproject+signing-key@5.7.0";
exports.ids = ["vendor-chunks/@ethersproject+signing-key@5.7.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/_version.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/_version.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = \"signing-key/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGV0aGVyc3Byb2plY3Qrc2lnbmluZy1rZXlANS43LjAvbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NpZ25pbmcta2V5L2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsb0JBQW9CLENBQzNDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AZXRoZXJzcHJvamVjdCtzaWduaW5nLWtleUA1LjcuMC9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc2lnbmluZy1rZXkvbGliLmVzbS9fdmVyc2lvbi5qcz81MTY2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJzaWduaW5nLWtleS81LjcuMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3ZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EC: () => (/* binding */ EC$1)\n/* harmony export */ });\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hash.js */ \"(ssr)/./node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(hash_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nfunction getDefaultExportFromCjs(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nfunction createCommonjsModule(fn, basedir, module) {\n    return module = {\n        path: basedir,\n        exports: {},\n        require: function(path, base) {\n            return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n        }\n    }, fn(module, module.exports), module.exports;\n}\nfunction getDefaultExportFromNamespaceIfPresent(n) {\n    return n && Object.prototype.hasOwnProperty.call(n, \"default\") ? n[\"default\"] : n;\n}\nfunction getDefaultExportFromNamespaceIfNotNamed(n) {\n    return n && Object.prototype.hasOwnProperty.call(n, \"default\") && Object.keys(n).length === 1 ? n[\"default\"] : n;\n}\nfunction getAugmentedNamespace(n) {\n    if (n.__esModule) return n;\n    var a = Object.defineProperty({}, \"__esModule\", {\n        value: true\n    });\n    Object.keys(n).forEach(function(k) {\n        var d = Object.getOwnPropertyDescriptor(n, k);\n        Object.defineProperty(a, k, d.get ? d : {\n            enumerable: true,\n            get: function() {\n                return n[k];\n            }\n        });\n    });\n    return a;\n}\nfunction commonjsRequire() {\n    throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");\n}\nvar minimalisticAssert = assert;\nfunction assert(val, msg) {\n    if (!val) throw new Error(msg || \"Assertion failed\");\n}\nassert.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n};\nvar utils_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var utils = exports;\n    function toArray(msg, enc) {\n        if (Array.isArray(msg)) return msg.slice();\n        if (!msg) return [];\n        var res = [];\n        if (typeof msg !== \"string\") {\n            for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;\n            return res;\n        }\n        if (enc === \"hex\") {\n            msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n            if (msg.length % 2 !== 0) msg = \"0\" + msg;\n            for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));\n        } else {\n            for(var i = 0; i < msg.length; i++){\n                var c = msg.charCodeAt(i);\n                var hi = c >> 8;\n                var lo = c & 0xff;\n                if (hi) res.push(hi, lo);\n                else res.push(lo);\n            }\n        }\n        return res;\n    }\n    utils.toArray = toArray;\n    function zero2(word) {\n        if (word.length === 1) return \"0\" + word;\n        else return word;\n    }\n    utils.zero2 = zero2;\n    function toHex(msg) {\n        var res = \"\";\n        for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));\n        return res;\n    }\n    utils.toHex = toHex;\n    utils.encode = function encode(arr, enc) {\n        if (enc === \"hex\") return toHex(arr);\n        else return arr;\n    };\n});\nvar utils_1$1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var utils = exports;\n    utils.assert = minimalisticAssert;\n    utils.toArray = utils_1.toArray;\n    utils.zero2 = utils_1.zero2;\n    utils.toHex = utils_1.toHex;\n    utils.encode = utils_1.encode;\n    // Represent num in a w-NAF form\n    function getNAF(num, w, bits) {\n        var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n        naf.fill(0);\n        var ws = 1 << w + 1;\n        var k = num.clone();\n        for(var i = 0; i < naf.length; i++){\n            var z;\n            var mod = k.andln(ws - 1);\n            if (k.isOdd()) {\n                if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;\n                else z = mod;\n                k.isubn(z);\n            } else {\n                z = 0;\n            }\n            naf[i] = z;\n            k.iushrn(1);\n        }\n        return naf;\n    }\n    utils.getNAF = getNAF;\n    // Represent k1, k2 in a Joint Sparse Form\n    function getJSF(k1, k2) {\n        var jsf = [\n            [],\n            []\n        ];\n        k1 = k1.clone();\n        k2 = k2.clone();\n        var d1 = 0;\n        var d2 = 0;\n        var m8;\n        while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){\n            // First phase\n            var m14 = k1.andln(3) + d1 & 3;\n            var m24 = k2.andln(3) + d2 & 3;\n            if (m14 === 3) m14 = -1;\n            if (m24 === 3) m24 = -1;\n            var u1;\n            if ((m14 & 1) === 0) {\n                u1 = 0;\n            } else {\n                m8 = k1.andln(7) + d1 & 7;\n                if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;\n                else u1 = m14;\n            }\n            jsf[0].push(u1);\n            var u2;\n            if ((m24 & 1) === 0) {\n                u2 = 0;\n            } else {\n                m8 = k2.andln(7) + d2 & 7;\n                if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;\n                else u2 = m24;\n            }\n            jsf[1].push(u2);\n            // Second phase\n            if (2 * d1 === u1 + 1) d1 = 1 - d1;\n            if (2 * d2 === u2 + 1) d2 = 1 - d2;\n            k1.iushrn(1);\n            k2.iushrn(1);\n        }\n        return jsf;\n    }\n    utils.getJSF = getJSF;\n    function cachedProperty(obj, name, computer) {\n        var key = \"_\" + name;\n        obj.prototype[name] = function cachedProperty() {\n            return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n        };\n    }\n    utils.cachedProperty = cachedProperty;\n    function parseBytes(bytes) {\n        return typeof bytes === \"string\" ? utils.toArray(bytes, \"hex\") : bytes;\n    }\n    utils.parseBytes = parseBytes;\n    function intFromLE(bytes) {\n        return new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(bytes, \"hex\", \"le\");\n    }\n    utils.intFromLE = intFromLE;\n});\n\"use strict\";\nvar getNAF = utils_1$1.getNAF;\nvar getJSF = utils_1$1.getJSF;\nvar assert$1 = utils_1$1.assert;\nfunction BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.p, 16);\n    // Use Montgomery, when there is no fast reduction for the prime\n    this.red = conf.prime ? bn_js__WEBPACK_IMPORTED_MODULE_0___default().red(conf.prime) : bn_js__WEBPACK_IMPORTED_MODULE_0___default().mont(this.p);\n    // Useful for many curves\n    this.zero = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0).toRed(this.red);\n    this.one = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1).toRed(this.red);\n    this.two = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2).toRed(this.red);\n    // Curve configuration, optional\n    this.n = conf.n && new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n    // Temporary arrays\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4);\n    this._bitLength = this.n ? this.n.bitLength() : 0;\n    // Generalized Greg Maxwell's trick\n    var adjustCount = this.n && this.p.div(this.n);\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n        this.redN = null;\n    } else {\n        this._maxwellTrick = true;\n        this.redN = this.n.toRed(this.red);\n    }\n}\nvar base = BaseCurve;\nBaseCurve.prototype.point = function point() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype.validate = function validate() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n    assert$1(p.precomputed);\n    var doubles = p._getDoubles();\n    var naf = getNAF(k, 1, this._bitLength);\n    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n    I /= 3;\n    // Translate into more windowed form\n    var repr = [];\n    var j;\n    var nafW;\n    for(j = 0; j < naf.length; j += doubles.step){\n        nafW = 0;\n        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];\n        repr.push(nafW);\n    }\n    var a = this.jpoint(null, null, null);\n    var b = this.jpoint(null, null, null);\n    for(var i = I; i > 0; i--){\n        for(j = 0; j < repr.length; j++){\n            nafW = repr[j];\n            if (nafW === i) b = b.mixedAdd(doubles.points[j]);\n            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n        }\n        a = a.add(b);\n    }\n    return a.toP();\n};\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n    var w = 4;\n    // Precompute window\n    var nafPoints = p._getNAFPoints(w);\n    w = nafPoints.wnd;\n    var wnd = nafPoints.points;\n    // Get NAF form\n    var naf = getNAF(k, w, this._bitLength);\n    // Add `this`*(N+1) for every w-NAF index\n    var acc = this.jpoint(null, null, null);\n    for(var i = naf.length - 1; i >= 0; i--){\n        // Count zeroes\n        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;\n        if (i >= 0) l++;\n        acc = acc.dblp(l);\n        if (i < 0) break;\n        var z = naf[i];\n        assert$1(z !== 0);\n        if (p.type === \"affine\") {\n            // J +- P\n            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);\n            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n        } else {\n            // J +- J\n            if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);\n            else acc = acc.add(wnd[-z - 1 >> 1].neg());\n        }\n    }\n    return p.type === \"affine\" ? acc.toP() : acc;\n};\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n    var wndWidth = this._wnafT1;\n    var wnd = this._wnafT2;\n    var naf = this._wnafT3;\n    // Fill all arrays\n    var max = 0;\n    var i;\n    var j;\n    var p;\n    for(i = 0; i < len; i++){\n        p = points[i];\n        var nafPoints = p._getNAFPoints(defW);\n        wndWidth[i] = nafPoints.wnd;\n        wnd[i] = nafPoints.points;\n    }\n    // Comb small window NAFs\n    for(i = len - 1; i >= 1; i -= 2){\n        var a = i - 1;\n        var b = i;\n        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n            max = Math.max(naf[a].length, max);\n            max = Math.max(naf[b].length, max);\n            continue;\n        }\n        var comb = [\n            points[a],\n            /* 1 */ null,\n            /* 3 */ null,\n            /* 5 */ points[b]\n        ];\n        // Try to avoid Projective points, if possible\n        if (points[a].y.cmp(points[b].y) === 0) {\n            comb[1] = points[a].add(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].add(points[b].neg());\n        } else {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        }\n        var index = [\n            -3,\n            /* -1 -1 */ -1,\n            /* -1 0 */ -5,\n            /* -1 1 */ -7,\n            /* 0 -1 */ 0,\n            /* 0 0 */ 7,\n            /* 0 1 */ 5,\n            /* 1 -1 */ 1,\n            /* 1 0 */ 3\n        ];\n        var jsf = getJSF(coeffs[a], coeffs[b]);\n        max = Math.max(jsf[0].length, max);\n        naf[a] = new Array(max);\n        naf[b] = new Array(max);\n        for(j = 0; j < max; j++){\n            var ja = jsf[0][j] | 0;\n            var jb = jsf[1][j] | 0;\n            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n            naf[b][j] = 0;\n            wnd[a] = comb;\n        }\n    }\n    var acc = this.jpoint(null, null, null);\n    var tmp = this._wnafT4;\n    for(i = max; i >= 0; i--){\n        var k = 0;\n        while(i >= 0){\n            var zero = true;\n            for(j = 0; j < len; j++){\n                tmp[j] = naf[j][i] | 0;\n                if (tmp[j] !== 0) zero = false;\n            }\n            if (!zero) break;\n            k++;\n            i--;\n        }\n        if (i >= 0) k++;\n        acc = acc.dblp(k);\n        if (i < 0) break;\n        for(j = 0; j < len; j++){\n            var z = tmp[j];\n            p;\n            if (z === 0) continue;\n            else if (z > 0) p = wnd[j][z - 1 >> 1];\n            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n            if (p.type === \"affine\") acc = acc.mixedAdd(p);\n            else acc = acc.add(p);\n        }\n    }\n    // Zeroify references\n    for(i = 0; i < len; i++)wnd[i] = null;\n    if (jacobianResult) return acc;\n    else return acc.toP();\n};\nfunction BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\nBasePoint.prototype.eq = function eq() {\n    throw new Error(\"Not implemented\");\n};\nBasePoint.prototype.validate = function validate() {\n    return this.curve.validate(this);\n};\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    bytes = utils_1$1.toArray(bytes, enc);\n    var len = this.p.byteLength();\n    // uncompressed, hybrid-odd, hybrid-even\n    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n        if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);\n        else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);\n        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n        return res;\n    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n    }\n    throw new Error(\"Unknown point format\");\n};\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n    return this.encode(enc, true);\n};\nBasePoint.prototype._encode = function _encode(compact) {\n    var len = this.curve.p.byteLength();\n    var x = this.getX().toArray(\"be\", len);\n    if (compact) return [\n        this.getY().isEven() ? 0x02 : 0x03\n    ].concat(x);\n    return [\n        0x04\n    ].concat(x, this.getY().toArray(\"be\", len));\n};\nBasePoint.prototype.encode = function encode(enc, compact) {\n    return utils_1$1.encode(this._encode(compact), enc);\n};\nBasePoint.prototype.precompute = function precompute(power) {\n    if (this.precomputed) return this;\n    var precomputed = {\n        doubles: null,\n        naf: null,\n        beta: null\n    };\n    precomputed.naf = this._getNAFPoints(8);\n    precomputed.doubles = this._getDoubles(4, power);\n    precomputed.beta = this._getBeta();\n    this.precomputed = precomputed;\n    return this;\n};\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n    if (!this.precomputed) return false;\n    var doubles = this.precomputed.doubles;\n    if (!doubles) return false;\n    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    var doubles = [\n        this\n    ];\n    var acc = this;\n    for(var i = 0; i < power; i += step){\n        for(var j = 0; j < step; j++)acc = acc.dbl();\n        doubles.push(acc);\n    }\n    return {\n        step: step,\n        points: doubles\n    };\n};\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    var res = [\n        this\n    ];\n    var max = (1 << wnd) - 1;\n    var dbl = max === 1 ? null : this.dbl();\n    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);\n    return {\n        wnd: wnd,\n        points: res\n    };\n};\nBasePoint.prototype._getBeta = function _getBeta() {\n    return null;\n};\nBasePoint.prototype.dblp = function dblp(k) {\n    var r = this;\n    for(var i = 0; i < k; i++)r = r.dbl();\n    return r;\n};\nvar inherits_browser = createCommonjsModule(function(module) {\n    if (typeof Object.create === \"function\") {\n        // implementation from standard node.js 'util' module\n        module.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n                ctor.super_ = superCtor;\n                ctor.prototype = Object.create(superCtor.prototype, {\n                    constructor: {\n                        value: ctor,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n            }\n        };\n    } else {\n        // old school shim for old browsers\n        module.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n                ctor.super_ = superCtor;\n                var TempCtor = function() {};\n                TempCtor.prototype = superCtor.prototype;\n                ctor.prototype = new TempCtor();\n                ctor.prototype.constructor = ctor;\n            }\n        };\n    }\n});\n\"use strict\";\nvar assert$2 = utils_1$1.assert;\nfunction ShortCurve(conf) {\n    base.call(this, \"short\", conf);\n    this.a = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.a, 16).toRed(this.red);\n    this.b = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n    // If the curve is endomorphic, precalculate beta and lambda\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n}\ninherits_browser(ShortCurve, base);\nvar short_1 = ShortCurve;\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n    // No efficient endomorphism\n    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;\n    // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n    var beta;\n    var lambda;\n    if (conf.beta) {\n        beta = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.beta, 16).toRed(this.red);\n    } else {\n        var betas = this._getEndoRoots(this.p);\n        // Choose the smallest beta\n        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n        beta = beta.toRed(this.red);\n    }\n    if (conf.lambda) {\n        lambda = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.lambda, 16);\n    } else {\n        // Choose the lambda that is matching selected beta\n        var lambdas = this._getEndoRoots(this.n);\n        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n            lambda = lambdas[0];\n        } else {\n            lambda = lambdas[1];\n            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n        }\n    }\n    // Get basis vectors, used for balanced length-two representation\n    var basis;\n    if (conf.basis) {\n        basis = conf.basis.map(function(vec) {\n            return {\n                a: new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(vec.a, 16),\n                b: new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(vec.b, 16)\n            };\n        });\n    } else {\n        basis = this._getEndoBasis(lambda);\n    }\n    return {\n        beta: beta,\n        lambda: lambda,\n        basis: basis\n    };\n};\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n    // Find roots of for x^2 + x + 1 in F\n    // Root = (-1 +- Sqrt(-3)) / 2\n    //\n    var red = num === this.p ? this.red : bn_js__WEBPACK_IMPORTED_MODULE_0___default().mont(num);\n    var tinv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2).toRed(red).redInvm();\n    var ntinv = tinv.redNeg();\n    var s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n    var l1 = ntinv.redAdd(s).fromRed();\n    var l2 = ntinv.redSub(s).fromRed();\n    return [\n        l1,\n        l2\n    ];\n};\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n    // aprxSqrt >= sqrt(this.n)\n    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n    // 3.74\n    // Run EGCD, until r(L + 1) < aprxSqrt\n    var u = lambda;\n    var v = this.n.clone();\n    var x1 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1);\n    var y1 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    var x2 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    var y2 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1);\n    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n    var a0;\n    var b0;\n    // First vector\n    var a1;\n    var b1;\n    // Second vector\n    var a2;\n    var b2;\n    var prevR;\n    var i = 0;\n    var r;\n    var x;\n    while(u.cmpn(0) !== 0){\n        var q = v.div(u);\n        r = v.sub(q.mul(u));\n        x = x2.sub(q.mul(x1));\n        var y = y2.sub(q.mul(y1));\n        if (!a1 && r.cmp(aprxSqrt) < 0) {\n            a0 = prevR.neg();\n            b0 = x1;\n            a1 = r.neg();\n            b1 = x;\n        } else if (a1 && ++i === 2) {\n            break;\n        }\n        prevR = r;\n        v = u;\n        u = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    a2 = r.neg();\n    b2 = x;\n    var len1 = a1.sqr().add(b1.sqr());\n    var len2 = a2.sqr().add(b2.sqr());\n    if (len2.cmp(len1) >= 0) {\n        a2 = a0;\n        b2 = b0;\n    }\n    // Normalize signs\n    if (a1.negative) {\n        a1 = a1.neg();\n        b1 = b1.neg();\n    }\n    if (a2.negative) {\n        a2 = a2.neg();\n        b2 = b2.neg();\n    }\n    return [\n        {\n            a: a1,\n            b: b1\n        },\n        {\n            a: a2,\n            b: b2\n        }\n    ];\n};\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n    var basis = this.endo.basis;\n    var v1 = basis[0];\n    var v2 = basis[1];\n    var c1 = v2.b.mul(k).divRound(this.n);\n    var c2 = v1.b.neg().mul(k).divRound(this.n);\n    var p1 = c1.mul(v1.a);\n    var p2 = c2.mul(v2.a);\n    var q1 = c1.mul(v1.b);\n    var q2 = c2.mul(v2.b);\n    // Calculate answer\n    var k1 = k.sub(p1).sub(p2);\n    var k2 = q1.add(q2).neg();\n    return {\n        k1: k1,\n        k2: k2\n    };\n};\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    // XXX Is there any way to tell if the number is odd without converting it\n    // to non-red form?\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n};\nShortCurve.prototype.validate = function validate(point) {\n    if (point.inf) return true;\n    var x = point.x;\n    var y = point.y;\n    var ax = this.a.redMul(x);\n    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n    return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\nShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n    var npoints = this._endoWnafT1;\n    var ncoeffs = this._endoWnafT2;\n    for(var i = 0; i < points.length; i++){\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n        if (split.k1.negative) {\n            split.k1.ineg();\n            p = p.neg(true);\n        }\n        if (split.k2.negative) {\n            split.k2.ineg();\n            beta = beta.neg(true);\n        }\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n    }\n    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n    // Clean-up references to points and coefficients\n    for(var j = 0; j < i * 2; j++){\n        npoints[j] = null;\n        ncoeffs[j] = null;\n    }\n    return res;\n};\nfunction Point(curve, x, y, isRed) {\n    base.BasePoint.call(this, curve, \"affine\");\n    if (x === null && y === null) {\n        this.x = null;\n        this.y = null;\n        this.inf = true;\n    } else {\n        this.x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n        this.y = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(y, 16);\n        // Force redgomery representation when loading from JSON\n        if (isRed) {\n            this.x.forceRed(this.curve.red);\n            this.y.forceRed(this.curve.red);\n        }\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n        this.inf = false;\n    }\n}\ninherits_browser(Point, base.BasePoint);\nShortCurve.prototype.point = function point(x, y, isRed) {\n    return new Point(this, x, y, isRed);\n};\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n    return Point.fromJSON(this, obj, red);\n};\nPoint.prototype._getBeta = function _getBeta() {\n    if (!this.curve.endo) return;\n    var pre = this.precomputed;\n    if (pre && pre.beta) return pre.beta;\n    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n    if (pre) {\n        var curve = this.curve;\n        var endoMul = function(p) {\n            return curve.point(p.x.redMul(curve.endo.beta), p.y);\n        };\n        pre.beta = beta;\n        beta.precomputed = {\n            beta: null,\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(endoMul)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(endoMul)\n            }\n        };\n    }\n    return beta;\n};\nPoint.prototype.toJSON = function toJSON() {\n    if (!this.precomputed) return [\n        this.x,\n        this.y\n    ];\n    return [\n        this.x,\n        this.y,\n        this.precomputed && {\n            doubles: this.precomputed.doubles && {\n                step: this.precomputed.doubles.step,\n                points: this.precomputed.doubles.points.slice(1)\n            },\n            naf: this.precomputed.naf && {\n                wnd: this.precomputed.naf.wnd,\n                points: this.precomputed.naf.points.slice(1)\n            }\n        }\n    ];\n};\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n    if (typeof obj === \"string\") obj = JSON.parse(obj);\n    var res = curve.point(obj[0], obj[1], red);\n    if (!obj[2]) return res;\n    function obj2point(obj) {\n        return curve.point(obj[0], obj[1], red);\n    }\n    var pre = obj[2];\n    res.precomputed = {\n        beta: null,\n        doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: [\n                res\n            ].concat(pre.doubles.points.map(obj2point))\n        },\n        naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: [\n                res\n            ].concat(pre.naf.points.map(obj2point))\n        }\n    };\n    return res;\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    return this.inf;\n};\nPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.inf) return p;\n    // P + O = P\n    if (p.inf) return this;\n    // P + P = 2P\n    if (this.eq(p)) return this.dbl();\n    // P + (-P) = O\n    if (this.neg().eq(p)) return this.curve.point(null, null);\n    // P + Q = O\n    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n    var c = this.y.redSub(p.y);\n    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n    var nx = c.redSqr().redISub(this.x).redISub(p.x);\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.dbl = function dbl() {\n    if (this.inf) return this;\n    // 2P = O\n    var ys1 = this.y.redAdd(this.y);\n    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n    var a = this.curve.a;\n    var x2 = this.x.redSqr();\n    var dyinv = ys1.redInvm();\n    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n    var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.getX = function getX() {\n    return this.x.fromRed();\n};\nPoint.prototype.getY = function getY() {\n    return this.y.fromRed();\n};\nPoint.prototype.mul = function mul(k) {\n    k = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(k, 16);\n    if (this.isInfinity()) return this;\n    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n    else if (this.curve.endo) return this.curve._endoWnafMulAdd([\n        this\n    ], [\n        k\n    ]);\n    else return this.curve._wnafMul(this, k);\n};\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\nPoint.prototype.eq = function eq(p) {\n    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\nPoint.prototype.neg = function neg(_precompute) {\n    if (this.inf) return this;\n    var res = this.curve.point(this.x, this.y.redNeg());\n    if (_precompute && this.precomputed) {\n        var pre = this.precomputed;\n        var negate = function(p) {\n            return p.neg();\n        };\n        res.precomputed = {\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(negate)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(negate)\n            }\n        };\n    }\n    return res;\n};\nPoint.prototype.toJ = function toJ() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return res;\n};\nfunction JPoint(curve, x, y, z) {\n    base.BasePoint.call(this, curve, \"jacobian\");\n    if (x === null && y === null && z === null) {\n        this.x = this.curve.one;\n        this.y = this.curve.one;\n        this.z = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    } else {\n        this.x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n        this.y = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(y, 16);\n        this.z = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(z, 16);\n    }\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n}\ninherits_browser(JPoint, base.BasePoint);\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n};\nJPoint.prototype.toP = function toP() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var zinv = this.z.redInvm();\n    var zinv2 = zinv.redSqr();\n    var ax = this.x.redMul(zinv2);\n    var ay = this.y.redMul(zinv2).redMul(zinv);\n    return this.curve.point(ax, ay);\n};\nJPoint.prototype.neg = function neg() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\nJPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.isInfinity()) return p;\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 12M + 4S + 7A\n    var pz2 = p.z.redSqr();\n    var z2 = this.z.redSqr();\n    var u1 = this.x.redMul(pz2);\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y.redMul(pz2.redMul(p.z));\n    var s2 = p.y.redMul(z2.redMul(this.z));\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n    // O + P = P\n    if (this.isInfinity()) return p.toJ();\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 8M + 3S + 7A\n    var z2 = this.z.redSqr();\n    var u1 = this.x;\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y;\n    var s2 = p.y.redMul(z2).redMul(this.z);\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.dblp = function dblp(pow) {\n    if (pow === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!pow) return this.dbl();\n    var i;\n    if (this.curve.zeroA || this.curve.threeA) {\n        var r = this;\n        for(i = 0; i < pow; i++)r = r.dbl();\n        return r;\n    }\n    // 1M + 2S + 1A + N * (4S + 5M + 8A)\n    // N = 1 => 6M + 6S + 9A\n    var a = this.curve.a;\n    var tinv = this.curve.tinv;\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    // Reuse results\n    var jyd = jy.redAdd(jy);\n    for(i = 0; i < pow; i++){\n        var jx2 = jx.redSqr();\n        var jyd2 = jyd.redSqr();\n        var jyd4 = jyd2.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var t1 = jx.redMul(jyd2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var dny = c.redMul(t2);\n        dny = dny.redIAdd(dny).redISub(jyd4);\n        var nz = jyd.redMul(jz);\n        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n        jx = nx;\n        jz = nz;\n        jyd = dny;\n    }\n    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\nJPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    if (this.curve.zeroA) return this._zeroDbl();\n    else if (this.curve.threeA) return this._threeDbl();\n    else return this._dbl();\n};\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 14A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a; a = 0\n        var m = xx.redAdd(xx).redIAdd(xx);\n        // T = M ^ 2 - 2*S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2*Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-dbl-2009-l\n        // 2M + 5S + 13A\n        // A = X1^2\n        var a = this.x.redSqr();\n        // B = Y1^2\n        var b = this.y.redSqr();\n        // C = B^2\n        var c = b.redSqr();\n        // D = 2 * ((X1 + B)^2 - A - C)\n        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n        d = d.redIAdd(d);\n        // E = 3 * A\n        var e = a.redAdd(a).redIAdd(a);\n        // F = E^2\n        var f = e.redSqr();\n        // 8 * C\n        var c8 = c.redIAdd(c);\n        c8 = c8.redIAdd(c8);\n        c8 = c8.redIAdd(c8);\n        // X3 = F - 2 * D\n        nx = f.redISub(d).redISub(d);\n        // Y3 = E * (D - X3) - 8 * C\n        ny = e.redMul(d.redISub(nx)).redISub(c8);\n        // Z3 = 2 * Y1 * Z1\n        nz = this.y.redMul(this.z);\n        nz = nz.redIAdd(nz);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._threeDbl = function _threeDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 15A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a\n        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n        // T = M^2 - 2 * S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2 * Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n        // 3M + 5S\n        // delta = Z1^2\n        var delta = this.z.redSqr();\n        // gamma = Y1^2\n        var gamma = this.y.redSqr();\n        // beta = X1 * gamma\n        var beta = this.x.redMul(gamma);\n        // alpha = 3 * (X1 - delta) * (X1 + delta)\n        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n        alpha = alpha.redAdd(alpha).redIAdd(alpha);\n        // X3 = alpha^2 - 8 * beta\n        var beta4 = beta.redIAdd(beta);\n        beta4 = beta4.redIAdd(beta4);\n        var beta8 = beta4.redAdd(beta4);\n        nx = alpha.redSqr().redISub(beta8);\n        // Z3 = (Y1 + Z1)^2 - gamma - delta\n        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n        var ggamma8 = gamma.redSqr();\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._dbl = function _dbl() {\n    var a = this.curve.a;\n    // 4M + 6S + 10A\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    var jx2 = jx.redSqr();\n    var jy2 = jy.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n    var jxd4 = jx.redAdd(jx);\n    jxd4 = jxd4.redIAdd(jxd4);\n    var t1 = jxd4.redMul(jy2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var jyd8 = jy2.redSqr();\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    var ny = c.redMul(t2).redISub(jyd8);\n    var nz = jy.redAdd(jy).redMul(jz);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.trpl = function trpl() {\n    if (!this.curve.zeroA) return this.dbl().add(this);\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n    // 5M + 10S + ...\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // ZZ = Z1^2\n    var zz = this.z.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // M = 3 * XX + a * ZZ2; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // MM = M^2\n    var mm = m.redSqr();\n    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    e = e.redIAdd(e);\n    e = e.redAdd(e).redIAdd(e);\n    e = e.redISub(mm);\n    // EE = E^2\n    var ee = e.redSqr();\n    // T = 16*YYYY\n    var t = yyyy.redIAdd(yyyy);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    // U = (M + E)^2 - MM - EE - T\n    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n    // X3 = 4 * (X1 * EE - 4 * YY * U)\n    var yyu4 = yy.redMul(u);\n    yyu4 = yyu4.redIAdd(yyu4);\n    yyu4 = yyu4.redIAdd(yyu4);\n    var nx = this.x.redMul(ee).redISub(yyu4);\n    nx = nx.redIAdd(nx);\n    nx = nx.redIAdd(nx);\n    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    // Z3 = (Z1 + E)^2 - ZZ - EE\n    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mul = function mul(k, kbase) {\n    k = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(k, kbase);\n    return this.curve._wnafMul(this, k);\n};\nJPoint.prototype.eq = function eq(p) {\n    if (p.type === \"affine\") return this.eq(p.toJ());\n    if (this === p) return true;\n    // x1 * z2^2 == x2 * z1^2\n    var z2 = this.z.redSqr();\n    var pz2 = p.z.redSqr();\n    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;\n    // y1 * z2^3 == y2 * z1^3\n    var z3 = z2.redMul(this.z);\n    var pz3 = pz2.redMul(p.z);\n    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\nJPoint.prototype.eqXToP = function eqXToP(x) {\n    var zs = this.z.redSqr();\n    var rx = x.toRed(this.curve.red).redMul(zs);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(zs);\n    for(;;){\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0) return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0) return true;\n    }\n};\nJPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC JPoint Infinity>\";\n    return \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n};\nJPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n};\nvar curve_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var curve = exports;\n    curve.base = base;\n    curve.short = short_1;\n    curve.mont = /*RicMoo:ethers:require(./mont)*/ null;\n    curve.edwards = /*RicMoo:ethers:require(./edwards)*/ null;\n});\nvar curves_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var curves = exports;\n    var assert = utils_1$1.assert;\n    function PresetCurve(options) {\n        if (options.type === \"short\") this.curve = new curve_1.short(options);\n        else if (options.type === \"edwards\") this.curve = new curve_1.edwards(options);\n        else this.curve = new curve_1.mont(options);\n        this.g = this.curve.g;\n        this.n = this.curve.n;\n        this.hash = options.hash;\n        assert(this.g.validate(), \"Invalid curve\");\n        assert(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n    }\n    curves.PresetCurve = PresetCurve;\n    function defineCurve(name, options) {\n        Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            get: function() {\n                var curve = new PresetCurve(options);\n                Object.defineProperty(curves, name, {\n                    configurable: true,\n                    enumerable: true,\n                    value: curve\n                });\n                return curve;\n            }\n        });\n    }\n    defineCurve(\"p192\", {\n        type: \"short\",\n        prime: \"p192\",\n        p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n        b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n        n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n            \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n        ]\n    });\n    defineCurve(\"p224\", {\n        type: \"short\",\n        prime: \"p224\",\n        p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n        b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n        n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n            \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n        ]\n    });\n    defineCurve(\"p256\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n        a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n        b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n        n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n            \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n        ]\n    });\n    defineCurve(\"p384\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 ffffffff\",\n        a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 fffffffc\",\n        b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f \" + \"5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n        n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 \" + \"f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha384),\n        gRed: false,\n        g: [\n            \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 \" + \"5502f25d bf55296c 3a545e38 72760ab7\",\n            \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 \" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n        ]\n    });\n    defineCurve(\"p521\", {\n        type: \"short\",\n        prime: null,\n        p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff\",\n        a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff fffffffc\",\n        b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b \" + \"99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd \" + \"3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n        n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 \" + \"f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha512),\n        gRed: false,\n        g: [\n            \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 \" + \"053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 \" + \"a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n            \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 \" + \"579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 \" + \"3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n        ]\n    });\n    defineCurve(\"curve25519\", {\n        type: \"mont\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"76d06\",\n        b: \"1\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"9\"\n        ]\n    });\n    defineCurve(\"ed25519\", {\n        type: \"edwards\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"-1\",\n        c: \"1\",\n        // -121665 * (121666^(-1)) (mod P)\n        d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n            // 4/5\n            \"6666666666666666666666666666666666666666666666666666666666666658\"\n        ]\n    });\n    var pre;\n    try {\n        pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/ null.crash();\n    } catch (e) {\n        pre = undefined;\n    }\n    defineCurve(\"secp256k1\", {\n        type: \"short\",\n        prime: \"k256\",\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n        a: \"0\",\n        b: \"7\",\n        n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n        h: \"1\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        // Precomputed endomorphism\n        beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n        lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n        basis: [\n            {\n                a: \"3086d221a7d46bcde86c90e49284eb15\",\n                b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n            },\n            {\n                a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n                b: \"3086d221a7d46bcde86c90e49284eb15\"\n            }\n        ],\n        gRed: false,\n        g: [\n            \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n            pre\n        ]\n    });\n});\n\"use strict\";\nfunction HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || \"hex\");\n    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || \"hex\");\n    var pers = utils_1.toArray(options.pers, options.persEnc || \"hex\");\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._init(entropy, nonce, pers);\n}\nvar hmacDrbg = HmacDRBG;\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n    var seed = entropy.concat(nonce).concat(pers);\n    this.K = new Array(this.outLen / 8);\n    this.V = new Array(this.outLen / 8);\n    for(var i = 0; i < this.V.length; i++){\n        this.K[i] = 0x00;\n        this.V[i] = 0x01;\n    }\n    this._update(seed);\n    this._reseed = 1;\n    this.reseedInterval = 0x1000000000000; // 2^48\n};\nHmacDRBG.prototype._hmac = function hmac() {\n    return new (hash_js__WEBPACK_IMPORTED_MODULE_1___default().hmac)(this.hash, this.K);\n};\nHmacDRBG.prototype._update = function update(seed) {\n    var kmac = this._hmac().update(this.V).update([\n        0x00\n    ]);\n    if (seed) kmac = kmac.update(seed);\n    this.K = kmac.digest();\n    this.V = this._hmac().update(this.V).digest();\n    if (!seed) return;\n    this.K = this._hmac().update(this.V).update([\n        0x01\n    ]).update(seed).digest();\n    this.V = this._hmac().update(this.V).digest();\n};\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n    // Optional entropy enc\n    if (typeof entropyEnc !== \"string\") {\n        addEnc = add;\n        add = entropyEnc;\n        entropyEnc = null;\n    }\n    entropy = utils_1.toArray(entropy, entropyEnc);\n    add = utils_1.toArray(add, addEnc);\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._update(entropy.concat(add || []));\n    this._reseed = 1;\n};\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n    if (this._reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\n    // Optional encoding\n    if (typeof enc !== \"string\") {\n        addEnc = add;\n        add = enc;\n        enc = null;\n    }\n    // Optional additional data\n    if (add) {\n        add = utils_1.toArray(add, addEnc || \"hex\");\n        this._update(add);\n    }\n    var temp = [];\n    while(temp.length < len){\n        this.V = this._hmac().update(this.V).digest();\n        temp = temp.concat(this.V);\n    }\n    var res = temp.slice(0, len);\n    this._update(add);\n    this._reseed++;\n    return utils_1.encode(res, enc);\n};\n\"use strict\";\nvar assert$3 = utils_1$1.assert;\nfunction KeyPair(ec, options) {\n    this.ec = ec;\n    this.priv = null;\n    this.pub = null;\n    // KeyPair(ec, { priv: ..., pub: ... })\n    if (options.priv) this._importPrivate(options.priv, options.privEnc);\n    if (options.pub) this._importPublic(options.pub, options.pubEnc);\n}\nvar key = KeyPair;\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(ec, {\n        pub: pub,\n        pubEnc: enc\n    });\n};\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n    if (priv instanceof KeyPair) return priv;\n    return new KeyPair(ec, {\n        priv: priv,\n        privEnc: enc\n    });\n};\nKeyPair.prototype.validate = function validate() {\n    var pub = this.getPublic();\n    if (pub.isInfinity()) return {\n        result: false,\n        reason: \"Invalid public key\"\n    };\n    if (!pub.validate()) return {\n        result: false,\n        reason: \"Public key is not a point\"\n    };\n    if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n        result: false,\n        reason: \"Public key * N != O\"\n    };\n    return {\n        result: true,\n        reason: null\n    };\n};\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n    // compact is optional argument\n    if (typeof compact === \"string\") {\n        enc = compact;\n        compact = null;\n    }\n    if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n    if (!enc) return this.pub;\n    return this.pub.encode(enc, compact);\n};\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n    if (enc === \"hex\") return this.priv.toString(16, 2);\n    else return this.priv;\n};\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n    this.priv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(key, enc || 16);\n    // Ensure that the priv won't be bigger than n, otherwise we may fail\n    // in fixed multiplication method\n    this.priv = this.priv.umod(this.ec.curve.n);\n};\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n    if (key.x || key.y) {\n        // Montgomery points only have an `x` coordinate.\n        // Weierstrass/Edwards points on the other hand have both `x` and\n        // `y` coordinates.\n        if (this.ec.curve.type === \"mont\") {\n            assert$3(key.x, \"Need x coordinate\");\n        } else if (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") {\n            assert$3(key.x && key.y, \"Need both x and y coordinate\");\n        }\n        this.pub = this.ec.curve.point(key.x, key.y);\n        return;\n    }\n    this.pub = this.ec.curve.decodePoint(key, enc);\n};\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n    if (!pub.validate()) {\n        assert$3(pub.validate(), \"public point not validated\");\n    }\n    return pub.mul(this.priv).getX();\n};\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n    return this.ec.sign(msg, this, enc, options);\n};\nKeyPair.prototype.verify = function verify(msg, signature) {\n    return this.ec.verify(msg, signature, this);\n};\nKeyPair.prototype.inspect = function inspect() {\n    return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n};\n\"use strict\";\nvar assert$4 = utils_1$1.assert;\nfunction Signature(options, enc) {\n    if (options instanceof Signature) return options;\n    if (this._importDER(options, enc)) return;\n    assert$4(options.r && options.s, \"Signature without r or s\");\n    this.r = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(options.r, 16);\n    this.s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(options.s, 16);\n    if (options.recoveryParam === undefined) this.recoveryParam = null;\n    else this.recoveryParam = options.recoveryParam;\n}\nvar signature = Signature;\nfunction Position() {\n    this.place = 0;\n}\nfunction getLength(buf, p) {\n    var initial = buf[p.place++];\n    if (!(initial & 0x80)) {\n        return initial;\n    }\n    var octetLen = initial & 0xf;\n    // Indefinite length or overflow\n    if (octetLen === 0 || octetLen > 4) {\n        return false;\n    }\n    var val = 0;\n    for(var i = 0, off = p.place; i < octetLen; i++, off++){\n        val <<= 8;\n        val |= buf[off];\n        val >>>= 0;\n    }\n    // Leading zeroes\n    if (val <= 0x7f) {\n        return false;\n    }\n    p.place = off;\n    return val;\n}\nfunction rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len){\n        i++;\n    }\n    if (i === 0) {\n        return buf;\n    }\n    return buf.slice(i);\n}\nSignature.prototype._importDER = function _importDER(data, enc) {\n    data = utils_1$1.toArray(data, enc);\n    var p = new Position();\n    if (data[p.place++] !== 0x30) {\n        return false;\n    }\n    var len = getLength(data, p);\n    if (len === false) {\n        return false;\n    }\n    if (len + p.place !== data.length) {\n        return false;\n    }\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var rlen = getLength(data, p);\n    if (rlen === false) {\n        return false;\n    }\n    var r = data.slice(p.place, rlen + p.place);\n    p.place += rlen;\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var slen = getLength(data, p);\n    if (slen === false) {\n        return false;\n    }\n    if (data.length !== slen + p.place) {\n        return false;\n    }\n    var s = data.slice(p.place, slen + p.place);\n    if (r[0] === 0) {\n        if (r[1] & 0x80) {\n            r = r.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    if (s[0] === 0) {\n        if (s[1] & 0x80) {\n            s = s.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    this.r = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(r);\n    this.s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(s);\n    this.recoveryParam = null;\n    return true;\n};\nfunction constructLength(arr, len) {\n    if (len < 0x80) {\n        arr.push(len);\n        return;\n    }\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 0x80);\n    while(--octets){\n        arr.push(len >>> (octets << 3) & 0xff);\n    }\n    arr.push(len);\n}\nSignature.prototype.toDER = function toDER(enc) {\n    var r = this.r.toArray();\n    var s = this.s.toArray();\n    // Pad values\n    if (r[0] & 0x80) r = [\n        0\n    ].concat(r);\n    // Pad values\n    if (s[0] & 0x80) s = [\n        0\n    ].concat(s);\n    r = rmPadding(r);\n    s = rmPadding(s);\n    while(!s[0] && !(s[1] & 0x80)){\n        s = s.slice(1);\n    }\n    var arr = [\n        0x02\n    ];\n    constructLength(arr, r.length);\n    arr = arr.concat(r);\n    arr.push(0x02);\n    constructLength(arr, s.length);\n    var backHalf = arr.concat(s);\n    var res = [\n        0x30\n    ];\n    constructLength(res, backHalf.length);\n    res = res.concat(backHalf);\n    return utils_1$1.encode(res, enc);\n};\n\"use strict\";\nvar rand = /*RicMoo:ethers:require(brorand)*/ function() {\n    throw new Error(\"unsupported\");\n};\nvar assert$5 = utils_1$1.assert;\nfunction EC(options) {\n    if (!(this instanceof EC)) return new EC(options);\n    // Shortcut `elliptic.ec(curve-name)`\n    if (typeof options === \"string\") {\n        assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), \"Unknown curve \" + options);\n        options = curves_1[options];\n    }\n    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n    if (options instanceof curves_1.PresetCurve) options = {\n        curve: options\n    };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g;\n    // Point on curve\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1);\n    // Hash for function for DRBG\n    this.hash = options.hash || options.curve.hash;\n}\nvar ec = EC;\nEC.prototype.keyPair = function keyPair(options) {\n    return new key(this, options);\n};\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n    return key.fromPrivate(this, priv, enc);\n};\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n    return key.fromPublic(this, pub, enc);\n};\nEC.prototype.genKeyPair = function genKeyPair(options) {\n    if (!options) options = {};\n    // Instantiate Hmac_DRBG\n    var drbg = new hmacDrbg({\n        hash: this.hash,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\",\n        entropy: options.entropy || rand(this.hash.hmacStrength),\n        entropyEnc: options.entropy && options.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n    });\n    var bytes = this.n.byteLength();\n    var ns2 = this.n.sub(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2));\n    for(;;){\n        var priv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(drbg.generate(bytes));\n        if (priv.cmp(ns2) > 0) continue;\n        priv.iaddn(1);\n        return this.keyFromPrivate(priv);\n    }\n};\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n    var delta = msg.byteLength() * 8 - this.n.bitLength();\n    if (delta > 0) msg = msg.ushrn(delta);\n    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);\n    else return msg;\n};\nEC.prototype.sign = function sign(msg, key, enc, options) {\n    if (typeof enc === \"object\") {\n        options = enc;\n        enc = null;\n    }\n    if (!options) options = {};\n    key = this.keyFromPrivate(key, enc);\n    msg = this._truncateToN(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg, 16));\n    // Zero-extend key to provide enough entropy\n    var bytes = this.n.byteLength();\n    var bkey = key.getPrivate().toArray(\"be\", bytes);\n    // Zero-extend nonce to have the same byte size as N\n    var nonce = msg.toArray(\"be\", bytes);\n    // Instantiate Hmac_DRBG\n    var drbg = new hmacDrbg({\n        hash: this.hash,\n        entropy: bkey,\n        nonce: nonce,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\"\n    });\n    // Number of bytes to generate\n    var ns1 = this.n.sub(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1));\n    for(var iter = 0;; iter++){\n        var k = options.k ? options.k(iter) : new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(drbg.generate(this.n.byteLength()));\n        k = this._truncateToN(k, true);\n        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n        var kp = this.g.mul(k);\n        if (kp.isInfinity()) continue;\n        var kpX = kp.getX();\n        var r = kpX.umod(this.n);\n        if (r.cmpn(0) === 0) continue;\n        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n        s = s.umod(this.n);\n        if (s.cmpn(0) === 0) continue;\n        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);\n        // Use complement of `s`, if it is > `n / 2`\n        if (options.canonical && s.cmp(this.nh) > 0) {\n            s = this.n.sub(s);\n            recoveryParam ^= 1;\n        }\n        return new signature({\n            r: r,\n            s: s,\n            recoveryParam: recoveryParam\n        });\n    }\n};\nEC.prototype.verify = function verify(msg, signature$1, key, enc) {\n    msg = this._truncateToN(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg, 16));\n    key = this.keyFromPublic(key, enc);\n    signature$1 = new signature(signature$1, \"hex\");\n    // Perform primitive values validation\n    var r = signature$1.r;\n    var s = signature$1.s;\n    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;\n    // Validate signature\n    var sinv = s.invm(this.n);\n    var u1 = sinv.mul(msg).umod(this.n);\n    var u2 = sinv.mul(r).umod(this.n);\n    var p;\n    if (!this.curve._maxwellTrick) {\n        p = this.g.mulAdd(u1, key.getPublic(), u2);\n        if (p.isInfinity()) return false;\n        return p.getX().umod(this.n).cmp(r) === 0;\n    }\n    // NOTE: Greg Maxwell's trick, inspired by:\n    // https://git.io/vad3K\n    p = this.g.jmulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity()) return false;\n    // Compare `p.x` of Jacobian point with `r`,\n    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n    // inverse of `p.z^2`\n    return p.eqXToP(r);\n};\nEC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {\n    assert$5((3 & j) === j, \"The recovery param is more than two bits\");\n    signature$1 = new signature(signature$1, enc);\n    var n = this.n;\n    var e = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg);\n    var r = signature$1.r;\n    var s = signature$1.s;\n    // A set LSB signifies that the y-coordinate is odd\n    var isYOdd = j & 1;\n    var isSecondKey = j >> 1;\n    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error(\"Unable to find sencond key candinate\");\n    // 1.1. Let x = r + jn.\n    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n    else r = this.curve.pointFromX(r, isYOdd);\n    var rInv = signature$1.r.invm(n);\n    var s1 = n.sub(e).mul(rInv).umod(n);\n    var s2 = s.mul(rInv).umod(n);\n    // 1.6.1 Compute Q = r^-1 (sR -  eG)\n    //               Q = r^-1 (sR + -eG)\n    return this.g.mulAdd(s1, r, s2);\n};\nEC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {\n    signature$1 = new signature(signature$1, enc);\n    if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;\n    for(var i = 0; i < 4; i++){\n        var Qprime;\n        try {\n            Qprime = this.recoverPubKey(e, signature$1, i);\n        } catch (e) {\n            continue;\n        }\n        if (Qprime.eq(Q)) return i;\n    }\n    throw new Error(\"Unable to find valid recovery factor\");\n};\nvar elliptic_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var elliptic = exports;\n    elliptic.version = /*RicMoo:ethers*/ ({\n        version: \"6.5.4\"\n    }).version;\n    elliptic.utils = utils_1$1;\n    elliptic.rand = /*RicMoo:ethers:require(brorand)*/ function() {\n        throw new Error(\"unsupported\");\n    };\n    elliptic.curve = curve_1;\n    elliptic.curves = curves_1;\n    // Protocols\n    elliptic.ec = ec;\n    elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/ null;\n});\nvar EC$1 = elliptic_1.ec;\n //# sourceMappingURL=elliptic.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/index.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/index.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SigningKey: () => (/* binding */ SigningKey),\n/* harmony export */   computePublicKey: () => (/* binding */ computePublicKey),\n/* harmony export */   recoverPublicKey: () => (/* binding */ recoverPublicKey)\n/* harmony export */ });\n/* harmony import */ var _elliptic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./elliptic */ \"(ssr)/./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(ssr)/./node_modules/.pnpm/@ethersproject+properties@5.7.0/node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(ssr)/./node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/_version.js\");\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nlet _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new _elliptic__WEBPACK_IMPORTED_MODULE_2__.EC(\"secp256k1\");\n    }\n    return _curve;\n}\nclass SigningKey {\n    constructor(privateKey){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"curve\", \"secp256k1\");\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"privateKey\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(privateKey));\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexDataLength)(this.privateKey) !== 32) {\n            logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(this.privateKey));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"_isSigningKey\", true);\n    }\n    _addPoint(other) {\n        const p0 = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(this.publicKey));\n        const p1 = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(digest) {\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(this.privateKey));\n        const digestBytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, {\n            canonical: true\n        });\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.splitSignature)({\n            recoveryParam: signature.recoveryParam,\n            r: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexZeroPad)(\"0x\" + signature.r.toString(16), 32),\n            s: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexZeroPad)(\"0x\" + signature.s.toString(16), 32)\n        });\n    }\n    computeSharedSecret(otherKey) {\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(computePublicKey(otherKey)));\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexZeroPad)(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(value) {\n        return !!(value && value._isSigningKey);\n    }\n}\nfunction recoverPublicKey(digest, signature) {\n    const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.splitSignature)(signature);\n    const rs = {\n        r: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(sig.r),\n        s: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(sig.s)\n    };\n    return \"0x\" + getCurve().recoverPubKey((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nfunction computePublicKey(key, compressed) {\n    const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(key);\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    } else if (bytes.length === 33) {\n        if (compressed) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    } else if (bytes.length === 65) {\n        if (!compressed) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@ethersproject+signing-key@5.7.0/node_modules/@ethersproject/signing-key/lib.esm/index.js\n");

/***/ })

};
;