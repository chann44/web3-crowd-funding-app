"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multibase@4.0.6";
exports.ids = ["vendor-chunks/multibase@4.0.6"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/base.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/base.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { encodeText } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/util.js\");\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /** @typedef {import(\"./types\").BaseName} BaseName */ /** @typedef {import(\"./types\").BaseCode} BaseCode */ /**\n * Class to encode/decode in the supported Bases\n *\n */ class Base {\n    /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */ constructor(name, code, factory, alphabet){\n        this.name = name;\n        this.code = code;\n        this.codeBuf = encodeText(this.code);\n        this.alphabet = alphabet;\n        this.codec = factory(alphabet);\n    }\n    /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */ encode(buf) {\n        return this.codec.encode(buf);\n    }\n    /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */ decode(string) {\n        for (const char of string){\n            if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n                throw new Error(`invalid character '${char}' in '${string}'`);\n            }\n        }\n        return this.codec.decode(string);\n    }\n}\nmodule.exports = Base;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbXVsdGliYXNlQDQuMC42L25vZGVfbW9kdWxlcy9tdWx0aWJhc2Uvc3JjL2Jhc2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFVBQVUsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUUvQiwyREFBMkQsR0FDM0QsbURBQW1ELEdBQ25ELG1EQUFtRCxHQUVuRDs7O0NBR0MsR0FDRCxNQUFNQztJQUNKOzs7OztHQUtDLEdBQ0RDLFlBQWFDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsQ0FBRTtRQUMxQyxJQUFJLENBQUNILElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNHLE9BQU8sR0FBR1IsV0FBVyxJQUFJLENBQUNLLElBQUk7UUFDbkMsSUFBSSxDQUFDRSxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0UsS0FBSyxHQUFHSCxRQUFRQztJQUN2QjtJQUVBOzs7R0FHQyxHQUNERyxPQUFRQyxHQUFHLEVBQUU7UUFDWCxPQUFPLElBQUksQ0FBQ0YsS0FBSyxDQUFDQyxNQUFNLENBQUNDO0lBQzNCO0lBRUE7OztHQUdDLEdBQ0RDLE9BQVFDLE1BQU0sRUFBRTtRQUNkLEtBQUssTUFBTUMsUUFBUUQsT0FBUTtZQUN6QixJQUFJLElBQUksQ0FBQ04sUUFBUSxJQUFJLElBQUksQ0FBQ0EsUUFBUSxDQUFDUSxPQUFPLENBQUNELFFBQVEsR0FBRztnQkFDcEQsTUFBTSxJQUFJRSxNQUFNLENBQUMsbUJBQW1CLEVBQUVGLEtBQUssTUFBTSxFQUFFRCxPQUFPLENBQUMsQ0FBQztZQUM5RDtRQUNGO1FBQ0EsT0FBTyxJQUFJLENBQUNKLEtBQUssQ0FBQ0csTUFBTSxDQUFDQztJQUMzQjtBQUNGO0FBRUFJLE9BQU9DLE9BQU8sR0FBR2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL211bHRpYmFzZUA0LjAuNi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9iYXNlLmpzPzk4ZTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgZW5jb2RlVGV4dCB9ID0gcmVxdWlyZSgnLi91dGlsJylcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5Db2RlY0ZhY3Rvcnl9IENvZGVjRmFjdG9yeSAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuL3R5cGVzXCIpLkJhc2VOYW1lfSBCYXNlTmFtZSAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoXCIuL3R5cGVzXCIpLkJhc2VDb2RlfSBCYXNlQ29kZSAqL1xuXG4vKipcbiAqIENsYXNzIHRvIGVuY29kZS9kZWNvZGUgaW4gdGhlIHN1cHBvcnRlZCBCYXNlc1xuICpcbiAqL1xuY2xhc3MgQmFzZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Jhc2VOYW1lfSBuYW1lXG4gICAqIEBwYXJhbSB7QmFzZUNvZGV9IGNvZGVcbiAgICogQHBhcmFtIHtDb2RlY0ZhY3Rvcnl9IGZhY3RvcnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFscGhhYmV0XG4gICAqL1xuICBjb25zdHJ1Y3RvciAobmFtZSwgY29kZSwgZmFjdG9yeSwgYWxwaGFiZXQpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy5jb2RlID0gY29kZVxuICAgIHRoaXMuY29kZUJ1ZiA9IGVuY29kZVRleHQodGhpcy5jb2RlKVxuICAgIHRoaXMuYWxwaGFiZXQgPSBhbHBoYWJldFxuICAgIHRoaXMuY29kZWMgPSBmYWN0b3J5KGFscGhhYmV0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBlbmNvZGUgKGJ1Zikge1xuICAgIHJldHVybiB0aGlzLmNvZGVjLmVuY29kZShidWYpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgKiBAcmV0dXJucyB7VWludDhBcnJheX1cbiAgICovXG4gIGRlY29kZSAoc3RyaW5nKSB7XG4gICAgZm9yIChjb25zdCBjaGFyIG9mIHN0cmluZykge1xuICAgICAgaWYgKHRoaXMuYWxwaGFiZXQgJiYgdGhpcy5hbHBoYWJldC5pbmRleE9mKGNoYXIpIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgY2hhcmFjdGVyICcke2NoYXJ9JyBpbiAnJHtzdHJpbmd9J2ApXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvZGVjLmRlY29kZShzdHJpbmcpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlXG4iXSwibmFtZXMiOlsiZW5jb2RlVGV4dCIsInJlcXVpcmUiLCJCYXNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiY29kZSIsImZhY3RvcnkiLCJhbHBoYWJldCIsImNvZGVCdWYiLCJjb2RlYyIsImVuY29kZSIsImJ1ZiIsImRlY29kZSIsInN0cmluZyIsImNoYXIiLCJpbmRleE9mIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/constants.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/constants.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst baseX = __webpack_require__(/*! @multiformats/base-x */ \"(ssr)/./node_modules/.pnpm/@multiformats+base-x@4.0.1/node_modules/@multiformats/base-x/src/index.js\");\nconst Base = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/base.js\");\nconst { rfc4648 } = __webpack_require__(/*! ./rfc4648 */ \"(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/rfc4648.js\");\nconst { decodeText, encodeText } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/util.js\");\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /** @typedef {import('./types').Codec} Codec */ /** @typedef {import('./types').BaseName} BaseName */ /** @typedef {import('./types').BaseCode} BaseCode */ /** @type {CodecFactory} */ const identity = ()=>{\n    return {\n        encode: decodeText,\n        decode: encodeText\n    };\n};\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */ const constants = [\n    [\n        \"identity\",\n        \"\\x00\",\n        identity,\n        \"\"\n    ],\n    [\n        \"base2\",\n        \"0\",\n        rfc4648(1),\n        \"01\"\n    ],\n    [\n        \"base8\",\n        \"7\",\n        rfc4648(3),\n        \"01234567\"\n    ],\n    [\n        \"base10\",\n        \"9\",\n        baseX,\n        \"0123456789\"\n    ],\n    [\n        \"base16\",\n        \"f\",\n        rfc4648(4),\n        \"0123456789abcdef\"\n    ],\n    [\n        \"base16upper\",\n        \"F\",\n        rfc4648(4),\n        \"0123456789ABCDEF\"\n    ],\n    [\n        \"base32hex\",\n        \"v\",\n        rfc4648(5),\n        \"0123456789abcdefghijklmnopqrstuv\"\n    ],\n    [\n        \"base32hexupper\",\n        \"V\",\n        rfc4648(5),\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    [\n        \"base32hexpad\",\n        \"t\",\n        rfc4648(5),\n        \"0123456789abcdefghijklmnopqrstuv=\"\n    ],\n    [\n        \"base32hexpadupper\",\n        \"T\",\n        rfc4648(5),\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\"\n    ],\n    [\n        \"base32\",\n        \"b\",\n        rfc4648(5),\n        \"abcdefghijklmnopqrstuvwxyz234567\"\n    ],\n    [\n        \"base32upper\",\n        \"B\",\n        rfc4648(5),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"\n    ],\n    [\n        \"base32pad\",\n        \"c\",\n        rfc4648(5),\n        \"abcdefghijklmnopqrstuvwxyz234567=\"\n    ],\n    [\n        \"base32padupper\",\n        \"C\",\n        rfc4648(5),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\"\n    ],\n    [\n        \"base32z\",\n        \"h\",\n        rfc4648(5),\n        \"ybndrfg8ejkmcpqxot1uwisza345h769\"\n    ],\n    [\n        \"base36\",\n        \"k\",\n        baseX,\n        \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    ],\n    [\n        \"base36upper\",\n        \"K\",\n        baseX,\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    ],\n    [\n        \"base58btc\",\n        \"z\",\n        baseX,\n        \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    ],\n    [\n        \"base58flickr\",\n        \"Z\",\n        baseX,\n        \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n    ],\n    [\n        \"base64\",\n        \"m\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    ],\n    [\n        \"base64pad\",\n        \"M\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n    ],\n    [\n        \"base64url\",\n        \"u\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n    ],\n    [\n        \"base64urlpad\",\n        \"U\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\"\n    ]\n];\n/** @type {Record<BaseName,Base>} */ const names = constants.reduce((prev, tupple)=>{\n    prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);\n    return prev;\n}, /** @type {Record<BaseName,Base>} */ {});\n/** @type {Record<BaseCode,Base>} */ const codes = constants.reduce((prev, tupple)=>{\n    prev[tupple[1]] = names[tupple[0]];\n    return prev;\n}, /** @type {Record<BaseCode,Base>} */ {});\nmodule.exports = {\n    names,\n    codes\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbXVsdGliYXNlQDQuMC42L25vZGVfbW9kdWxlcy9tdWx0aWJhc2Uvc3JjL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3RCLE1BQU1DLE9BQU9ELG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU0sRUFBRUUsT0FBTyxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBQzVCLE1BQU0sRUFBRUcsVUFBVSxFQUFFQyxVQUFVLEVBQUUsR0FBR0osbUJBQU9BLENBQUM7QUFFM0MsMkRBQTJELEdBQzNELDZDQUE2QyxHQUM3QyxtREFBbUQsR0FDbkQsbURBQW1ELEdBRW5ELHlCQUF5QixHQUN6QixNQUFNSyxXQUFXO0lBQ2YsT0FBTztRQUNMQyxRQUFRSDtRQUNSSSxRQUFRSDtJQUNWO0FBQ0Y7QUFFQTs7Ozs7Q0FLQyxHQUNELE1BQU1JLFlBQVk7SUFDaEI7UUFBQztRQUFZO1FBQVFIO1FBQVU7S0FBRztJQUNsQztRQUFDO1FBQVM7UUFBS0gsUUFBUTtRQUFJO0tBQUs7SUFDaEM7UUFBQztRQUFTO1FBQUtBLFFBQVE7UUFBSTtLQUFXO0lBQ3RDO1FBQUM7UUFBVTtRQUFLSDtRQUFPO0tBQWE7SUFDcEM7UUFBQztRQUFVO1FBQUtHLFFBQVE7UUFBSTtLQUFtQjtJQUMvQztRQUFDO1FBQWU7UUFBS0EsUUFBUTtRQUFJO0tBQW1CO0lBQ3BEO1FBQUM7UUFBYTtRQUFLQSxRQUFRO1FBQUk7S0FBbUM7SUFDbEU7UUFBQztRQUFrQjtRQUFLQSxRQUFRO1FBQUk7S0FBbUM7SUFDdkU7UUFBQztRQUFnQjtRQUFLQSxRQUFRO1FBQUk7S0FBb0M7SUFDdEU7UUFBQztRQUFxQjtRQUFLQSxRQUFRO1FBQUk7S0FBb0M7SUFDM0U7UUFBQztRQUFVO1FBQUtBLFFBQVE7UUFBSTtLQUFtQztJQUMvRDtRQUFDO1FBQWU7UUFBS0EsUUFBUTtRQUFJO0tBQW1DO0lBQ3BFO1FBQUM7UUFBYTtRQUFLQSxRQUFRO1FBQUk7S0FBb0M7SUFDbkU7UUFBQztRQUFrQjtRQUFLQSxRQUFRO1FBQUk7S0FBb0M7SUFDeEU7UUFBQztRQUFXO1FBQUtBLFFBQVE7UUFBSTtLQUFtQztJQUNoRTtRQUFDO1FBQVU7UUFBS0g7UUFBTztLQUF1QztJQUM5RDtRQUFDO1FBQWU7UUFBS0E7UUFBTztLQUF1QztJQUNuRTtRQUFDO1FBQWE7UUFBS0E7UUFBTztLQUE2RDtJQUN2RjtRQUFDO1FBQWdCO1FBQUtBO1FBQU87S0FBNkQ7SUFDMUY7UUFBQztRQUFVO1FBQUtHLFFBQVE7UUFBSTtLQUFtRTtJQUMvRjtRQUFDO1FBQWE7UUFBS0EsUUFBUTtRQUFJO0tBQW9FO0lBQ25HO1FBQUM7UUFBYTtRQUFLQSxRQUFRO1FBQUk7S0FBbUU7SUFDbEc7UUFBQztRQUFnQjtRQUFLQSxRQUFRO1FBQUk7S0FBb0U7Q0FDdkc7QUFFRCxrQ0FBa0MsR0FDbEMsTUFBTU8sUUFBUUQsVUFBVUUsTUFBTSxDQUFDLENBQUNDLE1BQU1DO0lBQ3BDRCxJQUFJLENBQUNDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJWCxLQUFLVyxNQUFNLENBQUMsRUFBRSxFQUFFQSxNQUFNLENBQUMsRUFBRSxFQUFFQSxNQUFNLENBQUMsRUFBRSxFQUFFQSxNQUFNLENBQUMsRUFBRTtJQUNyRSxPQUFPRDtBQUNULEdBQUcsa0NBQWtDLEdBQUcsQ0FBQztBQUV6QyxrQ0FBa0MsR0FDbEMsTUFBTUUsUUFBUUwsVUFBVUUsTUFBTSxDQUFDLENBQUNDLE1BQU1DO0lBQ3BDRCxJQUFJLENBQUNDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBR0gsS0FBSyxDQUFDRyxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQ2xDLE9BQU9EO0FBQ1QsR0FBRyxrQ0FBa0MsR0FBRyxDQUFDO0FBRXpDRyxPQUFPQyxPQUFPLEdBQUc7SUFDZk47SUFDQUk7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdWx0aWJhc2VANC4wLjYvbm9kZV9tb2R1bGVzL211bHRpYmFzZS9zcmMvY29uc3RhbnRzLmpzP2I0ODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGJhc2VYID0gcmVxdWlyZSgnQG11bHRpZm9ybWF0cy9iYXNlLXgnKVxuY29uc3QgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZS5qcycpXG5jb25zdCB7IHJmYzQ2NDggfSA9IHJlcXVpcmUoJy4vcmZjNDY0OCcpXG5jb25zdCB7IGRlY29kZVRleHQsIGVuY29kZVRleHQgfSA9IHJlcXVpcmUoJy4vdXRpbCcpXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuQ29kZWNGYWN0b3J5fSBDb2RlY0ZhY3RvcnkgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuQ29kZWN9IENvZGVjICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLkJhc2VOYW1lfSBCYXNlTmFtZSAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5CYXNlQ29kZX0gQmFzZUNvZGUgKi9cblxuLyoqIEB0eXBlIHtDb2RlY0ZhY3Rvcnl9ICovXG5jb25zdCBpZGVudGl0eSA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBlbmNvZGU6IGRlY29kZVRleHQsXG4gICAgZGVjb2RlOiBlbmNvZGVUZXh0XG4gIH1cbn1cblxuLyoqXG4gKlxuICogbmFtZSwgY29kZSwgaW1wbGVtZW50YXRpb24sIGFscGhhYmV0XG4gKlxuICogQHR5cGUge0FycmF5PFtCYXNlTmFtZSwgQmFzZUNvZGUsIENvZGVjRmFjdG9yeSwgc3RyaW5nXT59XG4gKi9cbmNvbnN0IGNvbnN0YW50cyA9IFtcbiAgWydpZGVudGl0eScsICdcXHgwMCcsIGlkZW50aXR5LCAnJ10sXG4gIFsnYmFzZTInLCAnMCcsIHJmYzQ2NDgoMSksICcwMSddLFxuICBbJ2Jhc2U4JywgJzcnLCByZmM0NjQ4KDMpLCAnMDEyMzQ1NjcnXSxcbiAgWydiYXNlMTAnLCAnOScsIGJhc2VYLCAnMDEyMzQ1Njc4OSddLFxuICBbJ2Jhc2UxNicsICdmJywgcmZjNDY0OCg0KSwgJzAxMjM0NTY3ODlhYmNkZWYnXSxcbiAgWydiYXNlMTZ1cHBlcicsICdGJywgcmZjNDY0OCg0KSwgJzAxMjM0NTY3ODlBQkNERUYnXSxcbiAgWydiYXNlMzJoZXgnLCAndicsIHJmYzQ2NDgoNSksICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1diddLFxuICBbJ2Jhc2UzMmhleHVwcGVyJywgJ1YnLCByZmM0NjQ4KDUpLCAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVYnXSxcbiAgWydiYXNlMzJoZXhwYWQnLCAndCcsIHJmYzQ2NDgoNSksICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dj0nXSxcbiAgWydiYXNlMzJoZXhwYWR1cHBlcicsICdUJywgcmZjNDY0OCg1KSwgJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWPSddLFxuICBbJ2Jhc2UzMicsICdiJywgcmZjNDY0OCg1KSwgJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MjM0NTY3J10sXG4gIFsnYmFzZTMydXBwZXInLCAnQicsIHJmYzQ2NDgoNSksICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2NyddLFxuICBbJ2Jhc2UzMnBhZCcsICdjJywgcmZjNDY0OCg1KSwgJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MjM0NTY3PSddLFxuICBbJ2Jhc2UzMnBhZHVwcGVyJywgJ0MnLCByZmM0NjQ4KDUpLCAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1Njc9J10sXG4gIFsnYmFzZTMyeicsICdoJywgcmZjNDY0OCg1KSwgJ3libmRyZmc4ZWprbWNwcXhvdDF1d2lzemEzNDVoNzY5J10sXG4gIFsnYmFzZTM2JywgJ2snLCBiYXNlWCwgJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiddLFxuICBbJ2Jhc2UzNnVwcGVyJywgJ0snLCBiYXNlWCwgJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWiddLFxuICBbJ2Jhc2U1OGJ0YycsICd6JywgYmFzZVgsICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J10sXG4gIFsnYmFzZTU4ZmxpY2tyJywgJ1onLCBiYXNlWCwgJzEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSEpLTE1OUFFSU1RVVldYWVonXSxcbiAgWydiYXNlNjQnLCAnbScsIHJmYzQ2NDgoNiksICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ10sXG4gIFsnYmFzZTY0cGFkJywgJ00nLCByZmM0NjQ4KDYpLCAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nXSxcbiAgWydiYXNlNjR1cmwnLCAndScsIHJmYzQ2NDgoNiksICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1fJ10sXG4gIFsnYmFzZTY0dXJscGFkJywgJ1UnLCByZmM0NjQ4KDYpLCAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktXz0nXVxuXVxuXG4vKiogQHR5cGUge1JlY29yZDxCYXNlTmFtZSxCYXNlPn0gKi9cbmNvbnN0IG5hbWVzID0gY29uc3RhbnRzLnJlZHVjZSgocHJldiwgdHVwcGxlKSA9PiB7XG4gIHByZXZbdHVwcGxlWzBdXSA9IG5ldyBCYXNlKHR1cHBsZVswXSwgdHVwcGxlWzFdLCB0dXBwbGVbMl0sIHR1cHBsZVszXSlcbiAgcmV0dXJuIHByZXZcbn0sIC8qKiBAdHlwZSB7UmVjb3JkPEJhc2VOYW1lLEJhc2U+fSAqLyh7fSkpXG5cbi8qKiBAdHlwZSB7UmVjb3JkPEJhc2VDb2RlLEJhc2U+fSAqL1xuY29uc3QgY29kZXMgPSBjb25zdGFudHMucmVkdWNlKChwcmV2LCB0dXBwbGUpID0+IHtcbiAgcHJldlt0dXBwbGVbMV1dID0gbmFtZXNbdHVwcGxlWzBdXVxuICByZXR1cm4gcHJldlxufSwgLyoqIEB0eXBlIHtSZWNvcmQ8QmFzZUNvZGUsQmFzZT59ICovKHt9KSlcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG5hbWVzLFxuICBjb2Rlc1xufVxuIl0sIm5hbWVzIjpbImJhc2VYIiwicmVxdWlyZSIsIkJhc2UiLCJyZmM0NjQ4IiwiZGVjb2RlVGV4dCIsImVuY29kZVRleHQiLCJpZGVudGl0eSIsImVuY29kZSIsImRlY29kZSIsImNvbnN0YW50cyIsIm5hbWVzIiwicmVkdWNlIiwicHJldiIsInR1cHBsZSIsImNvZGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/index.js ***!
  \********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */ \nconst constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/constants.js\");\nconst { encodeText, decodeText, concat } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/util.js\");\n/** @typedef {import('./base')} Base */ /** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */ /** @typedef {import(\"./types\").BaseCode} BaseCode */ /** @typedef {import(\"./types\").BaseName} BaseName */ /**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */ function multibase(nameOrCode, buf) {\n    if (!buf) {\n        throw new Error(\"requires an encoded Uint8Array\");\n    }\n    const { name, codeBuf } = encoding(nameOrCode);\n    validEncode(name, buf);\n    return concat([\n        codeBuf,\n        buf\n    ], codeBuf.length + buf.length);\n}\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */ function encode(nameOrCode, buf) {\n    const enc = encoding(nameOrCode);\n    const data = encodeText(enc.encode(buf));\n    return concat([\n        enc.codeBuf,\n        data\n    ], enc.codeBuf.length + data.length);\n}\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */ function decode(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    const prefix = data[0];\n    // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n    if ([\n        \"f\",\n        \"F\",\n        \"v\",\n        \"V\",\n        \"t\",\n        \"T\",\n        \"b\",\n        \"B\",\n        \"c\",\n        \"C\",\n        \"h\",\n        \"k\",\n        \"K\"\n    ].includes(prefix)) {\n        data = data.toLowerCase();\n    }\n    const enc = encoding(/** @type {BaseCode} */ data[0]);\n    return enc.decode(data.substring(1));\n}\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */ function isEncoded(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    // Ensure bufOrString is a string\n    if (Object.prototype.toString.call(data) !== \"[object String]\") {\n        return false;\n    }\n    try {\n        const enc = encoding(/** @type {BaseCode} */ data[0]);\n        return enc.name;\n    } catch (err) {\n        return false;\n    }\n}\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */ function validEncode(name, buf) {\n    const enc = encoding(name);\n    enc.decode(decodeText(buf));\n}\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */ function encoding(nameOrCode) {\n    if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */ nameOrCode)) {\n        return constants.names[/** @type {BaseName} */ nameOrCode];\n    } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */ nameOrCode)) {\n        return constants.codes[/** @type {BaseCode} */ nameOrCode];\n    } else {\n        throw new Error(`Unsupported encoding: ${nameOrCode}`);\n    }\n}\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */ function encodingFromData(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    return encoding(/** @type {BaseCode} */ data[0]);\n}\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nconst names = Object.freeze(constants.names);\nconst codes = Object.freeze(constants.codes);\nexports.names = names;\nexports.codes = codes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/rfc4648.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/rfc4648.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */ const decode = (string, alphabet, bitsPerChar)=>{\n    // Build the character lookup table:\n    /** @type {Record<string, number>} */ const codes = {};\n    for(let i = 0; i < alphabet.length; ++i){\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while(string[end - 1] === \"=\"){\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n    // Parse the data:\n    let bits = 0 // Number of bits currently in the buffer\n    ;\n    let buffer = 0 // Bits waiting to be written out, MSB first\n    ;\n    let written = 0 // Next byte to write\n    ;\n    for(let i = 0; i < end; ++i){\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(\"Invalid character \" + string[i]);\n        }\n        // Append the bits to the buffer:\n        buffer = buffer << bitsPerChar | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & buffer >> bits;\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || 0xff & buffer << 8 - bits) {\n        throw new SyntaxError(\"Unexpected end of data\");\n    }\n    return out;\n};\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */ const encode = (data, alphabet, bitsPerChar)=>{\n    const pad = alphabet[alphabet.length - 1] === \"=\";\n    const mask = (1 << bitsPerChar) - 1;\n    let out = \"\";\n    let bits = 0 // Number of bits currently in the buffer\n    ;\n    let buffer = 0 // Bits waiting to be written out, MSB first\n    ;\n    for(let i = 0; i < data.length; ++i){\n        // Slurp data into the buffer:\n        buffer = buffer << 8 | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while(bits > bitsPerChar){\n            bits -= bitsPerChar;\n            out += alphabet[mask & buffer >> bits];\n        }\n    }\n    // Partial character:\n    if (bits) {\n        out += alphabet[mask & buffer << bitsPerChar - bits];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while(out.length * bitsPerChar & 7){\n            out += \"=\";\n        }\n    }\n    return out;\n};\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */ const rfc4648 = (bitsPerChar)=>(alphabet)=>{\n        return {\n            /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */ encode (input) {\n                return encode(input, alphabet, bitsPerChar);\n            },\n            /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */ decode (input) {\n                return decode(input, alphabet, bitsPerChar);\n            }\n        };\n    };\nmodule.exports = {\n    rfc4648\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbXVsdGliYXNlQDQuMC42L25vZGVfbW9kdWxlcy9tdWx0aWJhc2Uvc3JjL3JmYzQ2NDguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSwyREFBMkQsR0FFM0Q7Ozs7O0NBS0MsR0FDRCxNQUFNQSxTQUFTLENBQUNDLFFBQVFDLFVBQVVDO0lBQ2hDLG9DQUFvQztJQUNwQyxtQ0FBbUMsR0FDbkMsTUFBTUMsUUFBUSxDQUFDO0lBQ2YsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFNBQVNJLE1BQU0sRUFBRSxFQUFFRCxFQUFHO1FBQ3hDRCxLQUFLLENBQUNGLFFBQVEsQ0FBQ0csRUFBRSxDQUFDLEdBQUdBO0lBQ3ZCO0lBRUEsMkJBQTJCO0lBQzNCLElBQUlFLE1BQU1OLE9BQU9LLE1BQU07SUFDdkIsTUFBT0wsTUFBTSxDQUFDTSxNQUFNLEVBQUUsS0FBSyxJQUFLO1FBQzlCLEVBQUVBO0lBQ0o7SUFFQSx1QkFBdUI7SUFDdkIsTUFBTUMsTUFBTSxJQUFJQyxXQUFXLE1BQU9OLGNBQWMsSUFBSztJQUVyRCxrQkFBa0I7SUFDbEIsSUFBSU8sT0FBTyxFQUFFLHlDQUF5Qzs7SUFDdEQsSUFBSUMsU0FBUyxFQUFFLDRDQUE0Qzs7SUFDM0QsSUFBSUMsVUFBVSxFQUFFLHFCQUFxQjs7SUFDckMsSUFBSyxJQUFJUCxJQUFJLEdBQUdBLElBQUlFLEtBQUssRUFBRUYsRUFBRztRQUM1QixzQ0FBc0M7UUFDdEMsTUFBTVEsUUFBUVQsS0FBSyxDQUFDSCxNQUFNLENBQUNJLEVBQUUsQ0FBQztRQUM5QixJQUFJUSxVQUFVQyxXQUFXO1lBQ3ZCLE1BQU0sSUFBSUMsWUFBWSx1QkFBdUJkLE1BQU0sQ0FBQ0ksRUFBRTtRQUN4RDtRQUVBLGlDQUFpQztRQUNqQ00sU0FBUyxVQUFXUixjQUFlVTtRQUNuQ0gsUUFBUVA7UUFFUix3REFBd0Q7UUFDeEQsSUFBSU8sUUFBUSxHQUFHO1lBQ2JBLFFBQVE7WUFDUkYsR0FBRyxDQUFDSSxVQUFVLEdBQUcsT0FBUUQsVUFBVUQ7UUFDckM7SUFDRjtJQUVBLGlEQUFpRDtJQUNqRCxJQUFJQSxRQUFRUCxlQUFlLE9BQVFRLFVBQVcsSUFBSUQsTUFBUTtRQUN4RCxNQUFNLElBQUlLLFlBQVk7SUFDeEI7SUFFQSxPQUFPUDtBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDRCxNQUFNUSxTQUFTLENBQUNDLE1BQU1mLFVBQVVDO0lBQzlCLE1BQU1lLE1BQU1oQixRQUFRLENBQUNBLFNBQVNJLE1BQU0sR0FBRyxFQUFFLEtBQUs7SUFDOUMsTUFBTWEsT0FBTyxDQUFDLEtBQUtoQixXQUFVLElBQUs7SUFDbEMsSUFBSUssTUFBTTtJQUVWLElBQUlFLE9BQU8sRUFBRSx5Q0FBeUM7O0lBQ3RELElBQUlDLFNBQVMsRUFBRSw0Q0FBNEM7O0lBQzNELElBQUssSUFBSU4sSUFBSSxHQUFHQSxJQUFJWSxLQUFLWCxNQUFNLEVBQUUsRUFBRUQsRUFBRztRQUNwQyw4QkFBOEI7UUFDOUJNLFNBQVMsVUFBVyxJQUFLTSxJQUFJLENBQUNaLEVBQUU7UUFDaENLLFFBQVE7UUFFUiwrQkFBK0I7UUFDL0IsTUFBT0EsT0FBT1AsWUFBYTtZQUN6Qk8sUUFBUVA7WUFDUkssT0FBT04sUUFBUSxDQUFDaUIsT0FBUVIsVUFBVUQsS0FBTTtRQUMxQztJQUNGO0lBRUEscUJBQXFCO0lBQ3JCLElBQUlBLE1BQU07UUFDUkYsT0FBT04sUUFBUSxDQUFDaUIsT0FBUVIsVUFBV1IsY0FBY08sS0FBTztJQUMxRDtJQUVBLHVEQUF1RDtJQUN2RCxJQUFJUSxLQUFLO1FBQ1AsTUFBTyxJQUFLWixNQUFNLEdBQUdILGNBQWUsRUFBRztZQUNyQ0ssT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDRCxNQUFNWSxVQUFVLENBQUNqQixjQUFnQixDQUFDRDtRQUNoQyxPQUFPO1lBQ0w7OztLQUdDLEdBQ0RjLFFBQVFLLEtBQUs7Z0JBQ1gsT0FBT0wsT0FBT0ssT0FBT25CLFVBQVVDO1lBQ2pDO1lBQ0E7OztLQUdDLEdBQ0RILFFBQVFxQixLQUFLO2dCQUNYLE9BQU9yQixPQUFPcUIsT0FBT25CLFVBQVVDO1lBQ2pDO1FBQ0Y7SUFDRjtBQUVBbUIsT0FBT0MsT0FBTyxHQUFHO0lBQUVIO0FBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vbXVsdGliYXNlQDQuMC42L25vZGVfbW9kdWxlcy9tdWx0aWJhc2Uvc3JjL3JmYzQ2NDguanM/N2NhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5Db2RlY0ZhY3Rvcnl9IENvZGVjRmFjdG9yeSAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbHBoYWJldFxuICogQHBhcmFtIHtudW1iZXJ9IGJpdHNQZXJDaGFyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZGVjb2RlID0gKHN0cmluZywgYWxwaGFiZXQsIGJpdHNQZXJDaGFyKSA9PiB7XG4gIC8vIEJ1aWxkIHRoZSBjaGFyYWN0ZXIgbG9va3VwIHRhYmxlOlxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIG51bWJlcj59ICovXG4gIGNvbnN0IGNvZGVzID0ge31cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbHBoYWJldC5sZW5ndGg7ICsraSkge1xuICAgIGNvZGVzW2FscGhhYmV0W2ldXSA9IGlcbiAgfVxuXG4gIC8vIENvdW50IHRoZSBwYWRkaW5nIGJ5dGVzOlxuICBsZXQgZW5kID0gc3RyaW5nLmxlbmd0aFxuICB3aGlsZSAoc3RyaW5nW2VuZCAtIDFdID09PSAnPScpIHtcbiAgICAtLWVuZFxuICB9XG5cbiAgLy8gQWxsb2NhdGUgdGhlIG91dHB1dDpcbiAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoKGVuZCAqIGJpdHNQZXJDaGFyIC8gOCkgfCAwKVxuXG4gIC8vIFBhcnNlIHRoZSBkYXRhOlxuICBsZXQgYml0cyA9IDAgLy8gTnVtYmVyIG9mIGJpdHMgY3VycmVudGx5IGluIHRoZSBidWZmZXJcbiAgbGV0IGJ1ZmZlciA9IDAgLy8gQml0cyB3YWl0aW5nIHRvIGJlIHdyaXR0ZW4gb3V0LCBNU0IgZmlyc3RcbiAgbGV0IHdyaXR0ZW4gPSAwIC8vIE5leHQgYnl0ZSB0byB3cml0ZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGVuZDsgKytpKSB7XG4gICAgLy8gUmVhZCBvbmUgY2hhcmFjdGVyIGZyb20gdGhlIHN0cmluZzpcbiAgICBjb25zdCB2YWx1ZSA9IGNvZGVzW3N0cmluZ1tpXV1cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciAnICsgc3RyaW5nW2ldKVxuICAgIH1cblxuICAgIC8vIEFwcGVuZCB0aGUgYml0cyB0byB0aGUgYnVmZmVyOlxuICAgIGJ1ZmZlciA9IChidWZmZXIgPDwgYml0c1BlckNoYXIpIHwgdmFsdWVcbiAgICBiaXRzICs9IGJpdHNQZXJDaGFyXG5cbiAgICAvLyBXcml0ZSBvdXQgc29tZSBiaXRzIGlmIHRoZSBidWZmZXIgaGFzIGEgYnl0ZSdzIHdvcnRoOlxuICAgIGlmIChiaXRzID49IDgpIHtcbiAgICAgIGJpdHMgLT0gOFxuICAgICAgb3V0W3dyaXR0ZW4rK10gPSAweGZmICYgKGJ1ZmZlciA+PiBiaXRzKVxuICAgIH1cbiAgfVxuXG4gIC8vIFZlcmlmeSB0aGF0IHdlIGhhdmUgcmVjZWl2ZWQganVzdCBlbm91Z2ggYml0czpcbiAgaWYgKGJpdHMgPj0gYml0c1BlckNoYXIgfHwgMHhmZiAmIChidWZmZXIgPDwgKDggLSBiaXRzKSkpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1VuZXhwZWN0ZWQgZW5kIG9mIGRhdGEnKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG4vKipcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZGF0YVxuICogQHBhcmFtIHtzdHJpbmd9IGFscGhhYmV0XG4gKiBAcGFyYW0ge251bWJlcn0gYml0c1BlckNoYXJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGVuY29kZSA9IChkYXRhLCBhbHBoYWJldCwgYml0c1BlckNoYXIpID0+IHtcbiAgY29uc3QgcGFkID0gYWxwaGFiZXRbYWxwaGFiZXQubGVuZ3RoIC0gMV0gPT09ICc9J1xuICBjb25zdCBtYXNrID0gKDEgPDwgYml0c1BlckNoYXIpIC0gMVxuICBsZXQgb3V0ID0gJydcblxuICBsZXQgYml0cyA9IDAgLy8gTnVtYmVyIG9mIGJpdHMgY3VycmVudGx5IGluIHRoZSBidWZmZXJcbiAgbGV0IGJ1ZmZlciA9IDAgLy8gQml0cyB3YWl0aW5nIHRvIGJlIHdyaXR0ZW4gb3V0LCBNU0IgZmlyc3RcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gU2x1cnAgZGF0YSBpbnRvIHRoZSBidWZmZXI6XG4gICAgYnVmZmVyID0gKGJ1ZmZlciA8PCA4KSB8IGRhdGFbaV1cbiAgICBiaXRzICs9IDhcblxuICAgIC8vIFdyaXRlIG91dCBhcyBtdWNoIGFzIHdlIGNhbjpcbiAgICB3aGlsZSAoYml0cyA+IGJpdHNQZXJDaGFyKSB7XG4gICAgICBiaXRzIC09IGJpdHNQZXJDaGFyXG4gICAgICBvdXQgKz0gYWxwaGFiZXRbbWFzayAmIChidWZmZXIgPj4gYml0cyldXG4gICAgfVxuICB9XG5cbiAgLy8gUGFydGlhbCBjaGFyYWN0ZXI6XG4gIGlmIChiaXRzKSB7XG4gICAgb3V0ICs9IGFscGhhYmV0W21hc2sgJiAoYnVmZmVyIDw8IChiaXRzUGVyQ2hhciAtIGJpdHMpKV1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nIGNoYXJhY3RlcnMgdW50aWwgd2UgaGl0IGEgYnl0ZSBib3VuZGFyeTpcbiAgaWYgKHBhZCkge1xuICAgIHdoaWxlICgob3V0Lmxlbmd0aCAqIGJpdHNQZXJDaGFyKSAmIDcpIHtcbiAgICAgIG91dCArPSAnPSdcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbi8qKlxuICogUkZDNDY0OCBGYWN0b3J5XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdHNQZXJDaGFyXG4gKiBAcmV0dXJucyB7Q29kZWNGYWN0b3J5fVxuICovXG5jb25zdCByZmM0NjQ4ID0gKGJpdHNQZXJDaGFyKSA9PiAoYWxwaGFiZXQpID0+IHtcbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGlucHV0XG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBlbmNvZGUgKGlucHV0KSB7XG4gICAgICByZXR1cm4gZW5jb2RlKGlucHV0LCBhbHBoYWJldCwgYml0c1BlckNoYXIpXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7VWludDhBcnJheX1cbiAgICAgKi9cbiAgICBkZWNvZGUgKGlucHV0KSB7XG4gICAgICByZXR1cm4gZGVjb2RlKGlucHV0LCBhbHBoYWJldCwgYml0c1BlckNoYXIpXG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyByZmM0NjQ4IH1cbiJdLCJuYW1lcyI6WyJkZWNvZGUiLCJzdHJpbmciLCJhbHBoYWJldCIsImJpdHNQZXJDaGFyIiwiY29kZXMiLCJpIiwibGVuZ3RoIiwiZW5kIiwib3V0IiwiVWludDhBcnJheSIsImJpdHMiLCJidWZmZXIiLCJ3cml0dGVuIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJTeW50YXhFcnJvciIsImVuY29kZSIsImRhdGEiLCJwYWQiLCJtYXNrIiwicmZjNDY0OCIsImlucHV0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/rfc4648.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/util.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/util.js ***!
  \*******************************************************************************/
/***/ ((module) => {

eval("\nconst textDecoder = new TextDecoder();\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */ const decodeText = (bytes)=>textDecoder.decode(bytes);\nconst textEncoder = new TextEncoder();\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */ const encodeText = (text)=>textEncoder.encode(text);\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */ function concat(arrs, length) {\n    const output = new Uint8Array(length);\n    let offset = 0;\n    for (const arr of arrs){\n        output.set(arr, offset);\n        offset += arr.length;\n    }\n    return output;\n}\nmodule.exports = {\n    decodeText,\n    encodeText,\n    concat\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbXVsdGliYXNlQDQuMC42L25vZGVfbW9kdWxlcy9tdWx0aWJhc2Uvc3JjL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxjQUFjLElBQUlDO0FBQ3hCOzs7Q0FHQyxHQUNELE1BQU1DLGFBQWEsQ0FBQ0MsUUFBVUgsWUFBWUksTUFBTSxDQUFDRDtBQUVqRCxNQUFNRSxjQUFjLElBQUlDO0FBQ3hCOzs7Q0FHQyxHQUNELE1BQU1DLGFBQWEsQ0FBQ0MsT0FBU0gsWUFBWUksTUFBTSxDQUFDRDtBQUVoRDs7Ozs7O0NBTUMsR0FDRCxTQUFTRSxPQUFRQyxJQUFJLEVBQUVDLE1BQU07SUFDM0IsTUFBTUMsU0FBUyxJQUFJQyxXQUFXRjtJQUM5QixJQUFJRyxTQUFTO0lBRWIsS0FBSyxNQUFNQyxPQUFPTCxLQUFNO1FBQ3RCRSxPQUFPSSxHQUFHLENBQUNELEtBQUtEO1FBQ2hCQSxVQUFVQyxJQUFJSixNQUFNO0lBQ3RCO0lBRUEsT0FBT0M7QUFDVDtBQUVBSyxPQUFPQyxPQUFPLEdBQUc7SUFBRWpCO0lBQVlLO0lBQVlHO0FBQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vbXVsdGliYXNlQDQuMC42L25vZGVfbW9kdWxlcy9tdWx0aWJhc2Uvc3JjL3V0aWwuanM/NjBlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgdGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKVxuLyoqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyVmlld3xBcnJheUJ1ZmZlcn0gYnl0ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmNvbnN0IGRlY29kZVRleHQgPSAoYnl0ZXMpID0+IHRleHREZWNvZGVyLmRlY29kZShieXRlcylcblxuY29uc3QgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gKi9cbmNvbnN0IGVuY29kZVRleHQgPSAodGV4dCkgPT4gdGV4dEVuY29kZXIuZW5jb2RlKHRleHQpXG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBVaW50OEFycmF5IGNyZWF0ZWQgYnkgY29uY2F0ZW5hdGluZyB0aGUgcGFzc2VkIEFycmF5c1xuICpcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXlMaWtlPG51bWJlcj4+fSBhcnJzXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX1cbiAqL1xuZnVuY3Rpb24gY29uY2F0IChhcnJzLCBsZW5ndGgpIHtcbiAgY29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBsZXQgb2Zmc2V0ID0gMFxuXG4gIGZvciAoY29uc3QgYXJyIG9mIGFycnMpIHtcbiAgICBvdXRwdXQuc2V0KGFyciwgb2Zmc2V0KVxuICAgIG9mZnNldCArPSBhcnIubGVuZ3RoXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBkZWNvZGVUZXh0LCBlbmNvZGVUZXh0LCBjb25jYXQgfVxuIl0sIm5hbWVzIjpbInRleHREZWNvZGVyIiwiVGV4dERlY29kZXIiLCJkZWNvZGVUZXh0IiwiYnl0ZXMiLCJkZWNvZGUiLCJ0ZXh0RW5jb2RlciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlVGV4dCIsInRleHQiLCJlbmNvZGUiLCJjb25jYXQiLCJhcnJzIiwibGVuZ3RoIiwib3V0cHV0IiwiVWludDhBcnJheSIsIm9mZnNldCIsImFyciIsInNldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/multibase@4.0.6/node_modules/multibase/src/util.js\n");

/***/ })

};
;