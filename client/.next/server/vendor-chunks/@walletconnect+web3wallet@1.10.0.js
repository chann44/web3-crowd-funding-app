"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect+web3wallet@1.10.0";
exports.ids = ["vendor-chunks/@walletconnect+web3wallet@1.10.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+web3wallet@1.10.0/node_modules/@walletconnect/web3wallet/dist/index.es.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+web3wallet@1.10.0/node_modules/@walletconnect/web3wallet/dist/index.es.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLIENT_CONTEXT: () => (/* binding */ p),\n/* harmony export */   CLIENT_STORAGE_OPTIONS: () => (/* binding */ X),\n/* harmony export */   CLIENT_STORAGE_PREFIX: () => (/* binding */ U),\n/* harmony export */   IWeb3Wallet: () => (/* binding */ P),\n/* harmony export */   IWeb3WalletEngine: () => (/* binding */ A),\n/* harmony export */   IWeb3WalletEvents: () => (/* binding */ G),\n/* harmony export */   PROTOCOL: () => (/* binding */ x),\n/* harmony export */   PROTOCOL_VERSION: () => (/* binding */ K),\n/* harmony export */   REQUEST_CONTEXT: () => (/* binding */ $),\n/* harmony export */   Web3Wallet: () => (/* binding */ V),\n/* harmony export */   \"default\": () => (/* binding */ d)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_auth_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/auth-client */ \"(ssr)/./node_modules/.pnpm/@walletconnect+auth-client@2.1.2/node_modules/@walletconnect/auth-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(ssr)/./node_modules/.pnpm/@walletconnect+sign-client@2.11.0/node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/core */ \"(ssr)/./node_modules/.pnpm/@walletconnect+core@2.11.0/node_modules/@walletconnect/core/dist/index.es.js\");\n\n\n\nvar l = {\n    exports: {}\n}, h = typeof Reflect == \"object\" ? Reflect : null, y = h && typeof h.apply == \"function\" ? h.apply : function(t, e, s) {\n    return Function.prototype.apply.call(t, e, s);\n}, f;\nh && typeof h.ownKeys == \"function\" ? f = h.ownKeys : Object.getOwnPropertySymbols ? f = function(t) {\n    return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t));\n} : f = function(t) {\n    return Object.getOwnPropertyNames(t);\n};\nfunction I(n) {\n    console && console.warn && console.warn(n);\n}\nvar w = Number.isNaN || function(t) {\n    return t !== t;\n};\nfunction o() {\n    o.init.call(this);\n}\nl.exports = o, l.exports.once = F, o.EventEmitter = o, o.prototype._events = void 0, o.prototype._eventsCount = 0, o.prototype._maxListeners = void 0;\nvar L = 10;\nfunction g(n) {\n    if (typeof n != \"function\") throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof n);\n}\nObject.defineProperty(o, \"defaultMaxListeners\", {\n    enumerable: !0,\n    get: function() {\n        return L;\n    },\n    set: function(n) {\n        if (typeof n != \"number\" || n < 0 || w(n)) throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n        L = n;\n    }\n}), o.init = function() {\n    (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n}, o.prototype.setMaxListeners = function(t) {\n    if (typeof t != \"number\" || t < 0 || w(t)) throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + t + \".\");\n    return this._maxListeners = t, this;\n};\nfunction S(n) {\n    return n._maxListeners === void 0 ? o.defaultMaxListeners : n._maxListeners;\n}\no.prototype.getMaxListeners = function() {\n    return S(this);\n}, o.prototype.emit = function(t) {\n    for(var e = [], s = 1; s < arguments.length; s++)e.push(arguments[s]);\n    var i = t === \"error\", a = this._events;\n    if (a !== void 0) i = i && a.error === void 0;\n    else if (!i) return !1;\n    if (i) {\n        var r;\n        if (e.length > 0 && (r = e[0]), r instanceof Error) throw r;\n        var c = new Error(\"Unhandled error.\" + (r ? \" (\" + r.message + \")\" : \"\"));\n        throw c.context = r, c;\n    }\n    var u = a[t];\n    if (u === void 0) return !1;\n    if (typeof u == \"function\") y(u, this, e);\n    else for(var v = u.length, T = b(u, v), s = 0; s < v; ++s)y(T[s], this, e);\n    return !0;\n};\nfunction _(n, t, e, s) {\n    var i, a, r;\n    if (g(e), a = n._events, a === void 0 ? (a = n._events = Object.create(null), n._eventsCount = 0) : (a.newListener !== void 0 && (n.emit(\"newListener\", t, e.listener ? e.listener : e), a = n._events), r = a[t]), r === void 0) r = a[t] = e, ++n._eventsCount;\n    else if (typeof r == \"function\" ? r = a[t] = s ? [\n        e,\n        r\n    ] : [\n        r,\n        e\n    ] : s ? r.unshift(e) : r.push(e), i = S(n), i > 0 && r.length > i && !r.warned) {\n        r.warned = !0;\n        var c = new Error(\"Possible EventEmitter memory leak detected. \" + r.length + \" \" + String(t) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n        c.name = \"MaxListenersExceededWarning\", c.emitter = n, c.type = t, c.count = r.length, I(c);\n    }\n    return n;\n}\no.prototype.addListener = function(t, e) {\n    return _(this, t, e, !1);\n}, o.prototype.on = o.prototype.addListener, o.prototype.prependListener = function(t, e) {\n    return _(this, t, e, !0);\n};\nfunction M() {\n    if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);\n}\nfunction C(n, t, e) {\n    var s = {\n        fired: !1,\n        wrapFn: void 0,\n        target: n,\n        type: t,\n        listener: e\n    }, i = M.bind(s);\n    return i.listener = e, s.wrapFn = i, i;\n}\no.prototype.once = function(t, e) {\n    return g(e), this.on(t, C(this, t, e)), this;\n}, o.prototype.prependOnceListener = function(t, e) {\n    return g(e), this.prependListener(t, C(this, t, e)), this;\n}, o.prototype.removeListener = function(t, e) {\n    var s, i, a, r, c;\n    if (g(e), i = this._events, i === void 0) return this;\n    if (s = i[t], s === void 0) return this;\n    if (s === e || s.listener === e) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete i[t], i.removeListener && this.emit(\"removeListener\", t, s.listener || e));\n    else if (typeof s != \"function\") {\n        for(a = -1, r = s.length - 1; r >= 0; r--)if (s[r] === e || s[r].listener === e) {\n            c = s[r].listener, a = r;\n            break;\n        }\n        if (a < 0) return this;\n        a === 0 ? s.shift() : k(s, a), s.length === 1 && (i[t] = s[0]), i.removeListener !== void 0 && this.emit(\"removeListener\", t, c || e);\n    }\n    return this;\n}, o.prototype.off = o.prototype.removeListener, o.prototype.removeAllListeners = function(t) {\n    var e, s, i;\n    if (s = this._events, s === void 0) return this;\n    if (s.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : s[t] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete s[t]), this;\n    if (arguments.length === 0) {\n        var a = Object.keys(s), r;\n        for(i = 0; i < a.length; ++i)r = a[i], r !== \"removeListener\" && this.removeAllListeners(r);\n        return this.removeAllListeners(\"removeListener\"), this._events = Object.create(null), this._eventsCount = 0, this;\n    }\n    if (e = s[t], typeof e == \"function\") this.removeListener(t, e);\n    else if (e !== void 0) for(i = e.length - 1; i >= 0; i--)this.removeListener(t, e[i]);\n    return this;\n};\nfunction E(n, t, e) {\n    var s = n._events;\n    if (s === void 0) return [];\n    var i = s[t];\n    return i === void 0 ? [] : typeof i == \"function\" ? e ? [\n        i.listener || i\n    ] : [\n        i\n    ] : e ? z(i) : b(i, i.length);\n}\no.prototype.listeners = function(t) {\n    return E(this, t, !0);\n}, o.prototype.rawListeners = function(t) {\n    return E(this, t, !1);\n}, o.listenerCount = function(n, t) {\n    return typeof n.listenerCount == \"function\" ? n.listenerCount(t) : O.call(n, t);\n}, o.prototype.listenerCount = O;\nfunction O(n) {\n    var t = this._events;\n    if (t !== void 0) {\n        var e = t[n];\n        if (typeof e == \"function\") return 1;\n        if (e !== void 0) return e.length;\n    }\n    return 0;\n}\no.prototype.eventNames = function() {\n    return this._eventsCount > 0 ? f(this._events) : [];\n};\nfunction b(n, t) {\n    for(var e = new Array(t), s = 0; s < t; ++s)e[s] = n[s];\n    return e;\n}\nfunction k(n, t) {\n    for(; t + 1 < n.length; t++)n[t] = n[t + 1];\n    n.pop();\n}\nfunction z(n) {\n    for(var t = new Array(n.length), e = 0; e < t.length; ++e)t[e] = n[e].listener || n[e];\n    return t;\n}\nfunction F(n, t) {\n    return new Promise(function(e, s) {\n        function i(r) {\n            n.removeListener(t, a), s(r);\n        }\n        function a() {\n            typeof n.removeListener == \"function\" && n.removeListener(\"error\", i), e([].slice.call(arguments));\n        }\n        R(n, t, a, {\n            once: !0\n        }), t !== \"error\" && D(n, i, {\n            once: !0\n        });\n    });\n}\nfunction D(n, t, e) {\n    typeof n.on == \"function\" && R(n, \"error\", t, e);\n}\nfunction R(n, t, e, s) {\n    if (typeof n.on == \"function\") s.once ? n.once(t, e) : n.on(t, e);\n    else if (typeof n.addEventListener == \"function\") n.addEventListener(t, function i(a) {\n        s.once && n.removeEventListener(t, i), e(a);\n    });\n    else throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof n);\n}\nconst x = \"wc\", K = 2, p = \"Web3Wallet\", U = `${x}@2:${p}:`, X = {\n    database: \":memory:\"\n}, $ = \"request\";\nclass G extends l.exports {\n    constructor(){\n        super();\n    }\n}\nclass P {\n    constructor(t){\n        this.opts = t;\n    }\n}\nclass A {\n    constructor(t){\n        this.client = t;\n    }\n}\nclass H extends A {\n    constructor(t){\n        super(t), this.init = async ()=>{\n            this.signClient = await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_1__.SignClient.init({\n                core: this.client.core,\n                metadata: this.client.metadata\n            }), this.authClient = await _walletconnect_auth_client__WEBPACK_IMPORTED_MODULE_0__.AuthClient.init({\n                core: this.client.core,\n                projectId: \"\",\n                metadata: this.client.metadata\n            }), this.initializeEventListeners();\n        }, this.pair = async (e)=>{\n            await this.client.core.pairing.pair(e);\n        }, this.approveSession = async (e)=>{\n            const { topic: s, acknowledged: i } = await this.signClient.approve({\n                id: e.id,\n                namespaces: e.namespaces\n            });\n            return await i(), this.signClient.session.get(s);\n        }, this.rejectSession = async (e)=>await this.signClient.reject(e), this.updateSession = async (e)=>await (await this.signClient.update(e)).acknowledged(), this.extendSession = async (e)=>await (await this.signClient.extend(e)).acknowledged(), this.respondSessionRequest = async (e)=>await this.signClient.respond(e), this.disconnectSession = async (e)=>await this.signClient.disconnect(e), this.emitSessionEvent = async (e)=>await this.signClient.emit(e), this.getActiveSessions = ()=>this.signClient.session.getAll().reduce((e, s)=>(e[s.topic] = s, e), {}), this.getPendingSessionProposals = ()=>this.signClient.proposal.getAll(), this.getPendingSessionRequests = ()=>this.signClient.getPendingSessionRequests(), this.respondAuthRequest = async (e, s)=>await this.authClient.respond(e, s), this.getPendingAuthRequests = ()=>this.authClient.requests.getAll().filter((e)=>\"requester\" in e), this.formatMessage = (e, s)=>this.authClient.formatMessage(e, s), this.registerDeviceToken = (e)=>this.client.core.echoClient.registerDeviceToken(e), this.onSessionRequest = (e)=>{\n            this.client.events.emit(\"session_request\", e);\n        }, this.onSessionProposal = (e)=>{\n            this.client.events.emit(\"session_proposal\", e);\n        }, this.onSessionDelete = (e)=>{\n            this.client.events.emit(\"session_delete\", e);\n        }, this.onAuthRequest = (e)=>{\n            this.client.events.emit(\"auth_request\", e);\n        }, this.initializeEventListeners = ()=>{\n            this.signClient.events.on(\"session_proposal\", this.onSessionProposal), this.signClient.events.on(\"session_request\", this.onSessionRequest), this.signClient.events.on(\"session_delete\", this.onSessionDelete), this.authClient.on(\"auth_request\", this.onAuthRequest);\n        }, this.signClient = {}, this.authClient = {};\n    }\n}\nconst Q = {\n    decryptMessage: async (n)=>{\n        const t = {\n            core: new _walletconnect_core__WEBPACK_IMPORTED_MODULE_2__.Core({\n                storageOptions: n.storageOptions,\n                storage: n.storage\n            })\n        };\n        await t.core.crypto.init();\n        const e = t.core.crypto.decode(n.topic, n.encryptedMessage);\n        return t.core = null, e;\n    },\n    getMetadata: async (n)=>{\n        const t = {\n            core: new _walletconnect_core__WEBPACK_IMPORTED_MODULE_2__.Core({\n                storageOptions: n.storageOptions,\n                storage: n.storage\n            }),\n            sessionStore: null\n        };\n        t.sessionStore = new _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_1__.SessionStore(t.core, t.core.logger), await t.sessionStore.init();\n        const e = t.sessionStore.get(n.topic), s = e?.peer.metadata;\n        return t.core = null, t.sessionStore = null, s;\n    }\n}, q = class extends P {\n    constructor(n){\n        super(n), this.events = new l.exports, this.on = (t, e)=>this.events.on(t, e), this.once = (t, e)=>this.events.once(t, e), this.off = (t, e)=>this.events.off(t, e), this.removeListener = (t, e)=>this.events.removeListener(t, e), this.pair = async (t)=>{\n            try {\n                return await this.engine.pair(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.approveSession = async (t)=>{\n            try {\n                return await this.engine.approveSession(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.rejectSession = async (t)=>{\n            try {\n                return await this.engine.rejectSession(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.updateSession = async (t)=>{\n            try {\n                return await this.engine.updateSession(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.extendSession = async (t)=>{\n            try {\n                return await this.engine.extendSession(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.respondSessionRequest = async (t)=>{\n            try {\n                return await this.engine.respondSessionRequest(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.disconnectSession = async (t)=>{\n            try {\n                return await this.engine.disconnectSession(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.emitSessionEvent = async (t)=>{\n            try {\n                return await this.engine.emitSessionEvent(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.getActiveSessions = ()=>{\n            try {\n                return this.engine.getActiveSessions();\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.getPendingSessionProposals = ()=>{\n            try {\n                return this.engine.getPendingSessionProposals();\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.getPendingSessionRequests = ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.respondAuthRequest = async (t, e)=>{\n            try {\n                return await this.engine.respondAuthRequest(t, e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.getPendingAuthRequests = ()=>{\n            try {\n                return this.engine.getPendingAuthRequests();\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.formatMessage = (t, e)=>{\n            try {\n                return this.engine.formatMessage(t, e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.registerDeviceToken = (t)=>{\n            try {\n                return this.engine.registerDeviceToken(t);\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.metadata = n.metadata, this.name = n.name || p, this.core = n.core, this.logger = this.core.logger, this.engine = new H(this);\n    }\n    static async init(n) {\n        const t = new q(n);\n        return await t.initialize(), t;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.engine.init(), this.logger.info(\"Web3Wallet Initialization Success\");\n        } catch (n) {\n            throw this.logger.info(\"Web3Wallet Initialization Failure\"), this.logger.error(n.message), n;\n        }\n    }\n};\nlet d = q;\nd.notifications = Q;\nconst V = d;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+web3wallet@1.10.0/node_modules/@walletconnect/web3wallet/dist/index.es.js\n");

/***/ })

};
;