"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-provider@0.13.6";
exports.ids = ["vendor-chunks/eth-provider@0.13.6"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/ConnectionManager/index.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/ConnectionManager/index.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst dev = \"development\" === \"development\";\nclass ConnectionManager extends EventEmitter {\n    constructor(connections, targets, options){\n        super();\n        this.targets = targets;\n        this.options = options;\n        this.connections = connections;\n        this.connected = false;\n        this.status = \"loading\";\n        this.interval = options.interval || 5000;\n        this.name = options.name || \"default\";\n        this.inSetup = true;\n        this.connect();\n    }\n    connect(index = 0) {\n        if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`);\n        if (this.connection && this.connection.status === \"connected\" && index >= this.connection.index) {\n            if (dev) console.log(\"Stopping connection cycle becasuse we're already connected to a higher priority provider\");\n        } else if (this.targets.length === 0) {\n            if (dev) console.log(\"No valid targets supplied\");\n        } else {\n            const { protocol, location } = this.targets[index];\n            this.connection = this.connections[protocol](location, this.options);\n            const connectionErrorHandler = (err)=>this.connectionError(index, err);\n            this.connection.once(\"error\", connectionErrorHandler);\n            this.connection.on(\"connect\", ()=>{\n                this.connection.off(\"error\", connectionErrorHandler);\n                this.connection.once(\"error\", (err)=>this.onError(err));\n                this.connection.once(\"close\", ()=>{\n                    this.connected = false;\n                    this.emitClose();\n                    if (!this.closing) this.refresh();\n                });\n                this.connection.target = this.targets[index];\n                this.connection.index = index;\n                this.targets[index].status = this.connection.status;\n                this.connected = true;\n                this.inSetup = false;\n                if (dev) console.log(\"Successfully connected to: \" + this.targets[index].location);\n                this.emit(\"connect\");\n            });\n            this.connection.on(\"data\", (data)=>this.emit(\"data\", data));\n            this.connection.on(\"payload\", (payload)=>this.emit(\"payload\", payload));\n        }\n    }\n    onError(err) {\n        if (this.listenerCount(\"error\")) return this.emit(\"error\", err);\n        console.warn(\"[eth-provider] Uncaught connection error: \" + err.message);\n    }\n    refresh(interval = this.interval) {\n        if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`);\n        clearTimeout(this.connectTimer);\n        this.connectTimer = setTimeout(()=>this.connect(), interval);\n    }\n    connectionError(index, err) {\n        if (this.connection && this.connection.close) this.connection.close();\n        this.targets[index].status = err;\n        if (this.targets.length - 1 === index) {\n            this.inSetup = false;\n            if (dev) console.warn(\"eth-provider unable to connect to any targets, view connection cycle summary: \", this.targets);\n            this.refresh();\n        } else {\n            this.connect(++index);\n        }\n    }\n    emitClose() {\n        this.emit(\"close\");\n    }\n    close() {\n        this.closing = true;\n        if (this.connection && this.connection.close && !this.connection.closed) {\n            this.connection.close() // Let event bubble from here\n            ;\n        } else {\n            this.emit(\"close\");\n        }\n        clearTimeout(this.connectTimer);\n        clearTimeout(this.setupTimer);\n    }\n    error(payload, message, code = -1) {\n        this.emit(\"payload\", {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            error: {\n                message,\n                code\n            }\n        });\n    }\n    send(payload) {\n        if (this.inSetup) {\n            this.setupTimer = setTimeout(()=>this.send(payload), 100);\n        } else if (this.connection.closed) {\n            this.error(payload, \"Not connected\", 4900);\n        } else {\n            this.connection.send(payload);\n        }\n    }\n}\nmodule.exports = ConnectionManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/ConnectionManager/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/http.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/http.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst { v4: uuid } = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-node/index.js\");\nconst dev = \"development\" === \"development\";\nlet XHR;\nclass HTTPConnection extends EventEmitter {\n    constructor(_XHR, url, options){\n        super();\n        XHR = _XHR;\n        this.options = options;\n        this.connected = false;\n        this.subscriptions = false;\n        this.status = \"loading\";\n        this.url = url;\n        this.pollId = uuid();\n        setTimeout(()=>this.create(), 0);\n        this._emit = (...args)=>!this.closed ? this.emit(...args) : null;\n    }\n    onError(err) {\n        if (!this.closed && this.listenerCount(\"error\")) this.emit(\"error\", err);\n    }\n    create() {\n        if (!XHR) return this.onError(new Error(\"No HTTP transport available\"));\n        this.on(\"error\", ()=>{\n            if (this.connected) this.close();\n        });\n        this.init();\n    }\n    init() {\n        this.send({\n            jsonrpc: \"2.0\",\n            method: \"net_version\",\n            params: [],\n            id: 1\n        }, (err, response)=>{\n            if (err) return this.onError(err);\n            this.connected = true;\n            this._emit(\"connect\");\n            this.send({\n                jsonrpc: \"2.0\",\n                id: 1,\n                method: \"eth_pollSubscriptions\",\n                params: [\n                    this.pollId,\n                    \"immediate\"\n                ]\n            }, (err, response)=>{\n                if (!err) {\n                    this.subscriptions = true;\n                    this.pollSubscriptions();\n                }\n            });\n        });\n    }\n    pollSubscriptions() {\n        this.send({\n            jsonrpc: \"2.0\",\n            id: 1,\n            method: \"eth_pollSubscriptions\",\n            params: [\n                this.pollId\n            ]\n        }, (err, result)=>{\n            if (err) {\n                this.subscriptionTimeout = setTimeout(()=>this.pollSubscriptions(), 10000);\n                return this.onError(err);\n            } else {\n                if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions();\n                if (result) {\n                    result.map((p)=>{\n                        let parse;\n                        try {\n                            parse = JSON.parse(p);\n                        } catch (e) {\n                            parse = false;\n                        }\n                        return parse;\n                    }).filter((n)=>n).forEach((p)=>this._emit(\"payload\", p));\n                }\n            }\n        });\n    }\n    close() {\n        if (dev) console.log(\"Closing HTTP connection\");\n        clearTimeout(this.subscriptionTimeout);\n        this._emit(\"close\");\n        this.closed = true;\n        this.removeAllListeners();\n    }\n    filterStatus(res) {\n        if (res.status >= 200 && res.status < 300) return res;\n        const error = new Error(res.statusText);\n        error.res = res;\n        throw error.message;\n    }\n    error(payload, message, code = -1) {\n        this._emit(\"payload\", {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            error: {\n                message,\n                code\n            }\n        });\n    }\n    send(payload, internal) {\n        if (this.closed) return this.error(payload, \"Not connected\");\n        if (payload.method === \"eth_subscribe\") {\n            if (this.subscriptions) {\n                payload.pollId = this.pollId;\n            } else {\n                return this.error(payload, \"Subscriptions are not supported by this HTTP endpoint\");\n            }\n        }\n        const xhr = new XHR();\n        let responded = false;\n        const res = (err, result)=>{\n            if (!responded) {\n                xhr.abort();\n                responded = true;\n                if (internal) {\n                    internal(err, result);\n                } else {\n                    const { id, jsonrpc } = payload;\n                    const load = err ? {\n                        id,\n                        jsonrpc,\n                        error: {\n                            message: err.message,\n                            code: err.code\n                        }\n                    } : {\n                        id,\n                        jsonrpc,\n                        result\n                    };\n                    this._emit(\"payload\", load);\n                }\n            }\n        };\n        try {\n            xhr.open(\"POST\", this.url, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            // Below not working becasue XHR lib blocks it claiming \"restricted header\"\n            // if (this.options.origin) xhr.setRequestHeader('Origin', this.options.origin)\n            xhr.timeout = 60 * 1000;\n            xhr.onerror = res;\n            xhr.ontimeout = res;\n            xhr.onreadystatechange = ()=>{\n                if (xhr.readyState === 4) {\n                    try {\n                        const response = JSON.parse(xhr.responseText);\n                        res(response.error, response.result);\n                    } catch (e) {\n                        res(e);\n                    }\n                }\n            };\n            xhr.send(JSON.stringify(payload));\n        } catch (e) {\n            if (dev) console.error(\"Error sending HTTP request\", e);\n            res({\n                message: e.message,\n                code: -1\n            });\n        }\n    }\n}\nmodule.exports = (XHR)=>(url, options)=>new HTTPConnection(XHR, url, options);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/ipc.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/ipc.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst oboe = __webpack_require__(/*! oboe */ \"(ssr)/./node_modules/.pnpm/oboe@2.1.5/node_modules/oboe/dist/oboe-node.js\");\nconst parse = __webpack_require__(/*! ../parse */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/parse/index.js\");\nconst dev = \"development\" === \"development\";\nlet net;\nclass IPCConnection extends EventEmitter {\n    constructor(_net, path, options){\n        super();\n        net = _net;\n        setTimeout(()=>this.create(path, options), 0);\n    }\n    create(path, options) {\n        if (!net) return this.onError(new Error(\"No IPC transport\"));\n        this.socket = net.connect({\n            path\n        });\n        this.socket.on(\"connect\", ()=>{\n            this.emit(\"connect\");\n            this.socket.on(\"close\", ()=>{\n                if (this.socket) this.socket.destroy();\n                this.onClose();\n            });\n            if (net.constructor.name === \"Socket\") {\n                oboe(this.socket).done((payloads)=>this.emitPayloads(payloads));\n            } else {\n                this.socket.on(\"data\", (data)=>parse(data.toString(), (err, payloads)=>{\n                        if (!err) this.emitPayloads(payloads);\n                    }));\n            }\n        });\n        this.socket.on(\"error\", (err)=>this.onError(err));\n    }\n    onError(err) {\n        if (this.listenerCount(\"error\")) this.emit(\"error\", err);\n    }\n    onClose() {\n        this.socket = null;\n        this.closed = true;\n        if (dev) console.log(\"Closing IPC connection\");\n        this.emit(\"close\");\n        this.removeAllListeners();\n    }\n    close() {\n        if (this.socket) {\n            this.socket.destroy();\n        } else {\n            this.onClose();\n        }\n    }\n    emitPayloads(payloads) {\n        payloads.forEach((load)=>{\n            if (Array.isArray(load)) return load.forEach((payload)=>this.emit(\"payload\", payload));\n            this.emit(\"payload\", load);\n        });\n    }\n    error(payload, message, code = -1) {\n        this.emit(\"payload\", Object.assign(payload, {\n            error: {\n                message,\n                code\n            }\n        }));\n    }\n    send(payload) {\n        if (!this.socket || !this.socket.writable) {\n            this.error(payload, \"Not connected\");\n        } else {\n            try {\n                this.socket.write(JSON.stringify(Object.assign({}, payload)));\n            } catch (e) {\n                this.error(payload, e.message);\n            }\n        }\n    }\n}\nmodule.exports = (net)=>(path, options)=>new IPCConnection(net, path, options);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL2Nvbm5lY3Rpb25zL2lwYy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsZUFBZUMsbUJBQU9BLENBQUM7QUFDN0IsTUFBTUMsT0FBT0QsbUJBQU9BLENBQUM7QUFDckIsTUFBTUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUcsTUFBTUMsa0JBQXlCO0FBRXJDLElBQUlDO0FBRUosTUFBTUMsc0JBQXNCUDtJQUMxQlEsWUFBYUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sQ0FBRTtRQUNoQyxLQUFLO1FBQ0xMLE1BQU1HO1FBQ05HLFdBQVcsSUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0gsTUFBTUMsVUFBVTtJQUMvQztJQUVBRSxPQUFRSCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNyQixJQUFJLENBQUNMLEtBQUssT0FBTyxJQUFJLENBQUNRLE9BQU8sQ0FBQyxJQUFJQyxNQUFNO1FBQ3hDLElBQUksQ0FBQ0MsTUFBTSxHQUFHVixJQUFJVyxPQUFPLENBQUM7WUFBRVA7UUFBSztRQUNqQyxJQUFJLENBQUNNLE1BQU0sQ0FBQ0UsRUFBRSxDQUFDLFdBQVc7WUFDeEIsSUFBSSxDQUFDQyxJQUFJLENBQUM7WUFDVixJQUFJLENBQUNILE1BQU0sQ0FBQ0UsRUFBRSxDQUFDLFNBQVM7Z0JBQ3RCLElBQUksSUFBSSxDQUFDRixNQUFNLEVBQUUsSUFBSSxDQUFDQSxNQUFNLENBQUNJLE9BQU87Z0JBQ3BDLElBQUksQ0FBQ0MsT0FBTztZQUNkO1lBQ0EsSUFBSWYsSUFBSUUsV0FBVyxDQUFDYyxJQUFJLEtBQUssVUFBVTtnQkFDckNwQixLQUFLLElBQUksQ0FBQ2MsTUFBTSxFQUFFTyxJQUFJLENBQUNDLENBQUFBLFdBQVksSUFBSSxDQUFDQyxZQUFZLENBQUNEO1lBQ3ZELE9BQU87Z0JBQ0wsSUFBSSxDQUFDUixNQUFNLENBQUNFLEVBQUUsQ0FBQyxRQUFRUSxDQUFBQSxPQUFRdkIsTUFBTXVCLEtBQUtDLFFBQVEsSUFBSSxDQUFDQyxLQUFLSjt3QkFBZSxJQUFJLENBQUNJLEtBQUssSUFBSSxDQUFDSCxZQUFZLENBQUNEO29CQUFVO1lBQ25IO1FBQ0Y7UUFDQSxJQUFJLENBQUNSLE1BQU0sQ0FBQ0UsRUFBRSxDQUFDLFNBQVNVLENBQUFBLE1BQU8sSUFBSSxDQUFDZCxPQUFPLENBQUNjO0lBQzlDO0lBRUFkLFFBQVNjLEdBQUcsRUFBRTtRQUNaLElBQUksSUFBSSxDQUFDQyxhQUFhLENBQUMsVUFBVSxJQUFJLENBQUNWLElBQUksQ0FBQyxTQUFTUztJQUN0RDtJQUVBUCxVQUFXO1FBQ1QsSUFBSSxDQUFDTCxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNjLE1BQU0sR0FBRztRQUNkLElBQUkxQixLQUFLMkIsUUFBUUMsR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQ2IsSUFBSSxDQUFDO1FBQ1YsSUFBSSxDQUFDYyxrQkFBa0I7SUFDekI7SUFFQUMsUUFBUztRQUNQLElBQUksSUFBSSxDQUFDbEIsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDQSxNQUFNLENBQUNJLE9BQU87UUFDckIsT0FBTztZQUNMLElBQUksQ0FBQ0MsT0FBTztRQUNkO0lBQ0Y7SUFFQUksYUFBY0QsUUFBUSxFQUFFO1FBQ3RCQSxTQUFTVyxPQUFPLENBQUNDLENBQUFBO1lBQ2YsSUFBSUMsTUFBTUMsT0FBTyxDQUFDRixPQUFPLE9BQU9BLEtBQUtELE9BQU8sQ0FBQ0ksQ0FBQUEsVUFBVyxJQUFJLENBQUNwQixJQUFJLENBQUMsV0FBV29CO1lBQzdFLElBQUksQ0FBQ3BCLElBQUksQ0FBQyxXQUFXaUI7UUFDdkI7SUFDRjtJQUVBSSxNQUFPRCxPQUFPLEVBQUVFLE9BQU8sRUFBRUMsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUNsQyxJQUFJLENBQUN2QixJQUFJLENBQUMsV0FBV3dCLE9BQU9DLE1BQU0sQ0FBQ0wsU0FBUztZQUFFQyxPQUFPO2dCQUFFQztnQkFBU0M7WUFBSztRQUFFO0lBQ3pFO0lBRUFHLEtBQU1OLE9BQU8sRUFBRTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUN2QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUNBLE1BQU0sQ0FBQzhCLFFBQVEsRUFBRTtZQUN6QyxJQUFJLENBQUNOLEtBQUssQ0FBQ0QsU0FBUztRQUN0QixPQUFPO1lBQ0wsSUFBSTtnQkFDRixJQUFJLENBQUN2QixNQUFNLENBQUMrQixLQUFLLENBQUNDLEtBQUtDLFNBQVMsQ0FBQ04sT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR0w7WUFDckQsRUFBRSxPQUFPVyxHQUFHO2dCQUNWLElBQUksQ0FBQ1YsS0FBSyxDQUFDRCxTQUFTVyxFQUFFVCxPQUFPO1lBQy9CO1FBQ0Y7SUFDRjtBQUNGO0FBRUFVLE9BQU9DLE9BQU8sR0FBRzlDLENBQUFBLE1BQU8sQ0FBQ0ksTUFBTUMsVUFBWSxJQUFJSixjQUFjRCxLQUFLSSxNQUFNQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9ldGgtcHJvdmlkZXJAMC4xMy42L25vZGVfbW9kdWxlcy9ldGgtcHJvdmlkZXIvY29ubmVjdGlvbnMvaXBjLmpzPzZlOGUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJylcbmNvbnN0IG9ib2UgPSByZXF1aXJlKCdvYm9lJylcbmNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi4vcGFyc2UnKVxuY29uc3QgZGV2ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcblxubGV0IG5ldFxuXG5jbGFzcyBJUENDb25uZWN0aW9uIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKF9uZXQsIHBhdGgsIG9wdGlvbnMpIHtcbiAgICBzdXBlcigpXG4gICAgbmV0ID0gX25ldFxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jcmVhdGUocGF0aCwgb3B0aW9ucyksIDApXG4gIH1cblxuICBjcmVhdGUgKHBhdGgsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW5ldCkgcmV0dXJuIHRoaXMub25FcnJvcihuZXcgRXJyb3IoJ05vIElQQyB0cmFuc3BvcnQnKSlcbiAgICB0aGlzLnNvY2tldCA9IG5ldC5jb25uZWN0KHsgcGF0aCB9KVxuICAgIHRoaXMuc29ja2V0Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdjb25uZWN0JylcbiAgICAgIHRoaXMuc29ja2V0Lm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc29ja2V0KSB0aGlzLnNvY2tldC5kZXN0cm95KClcbiAgICAgICAgdGhpcy5vbkNsb3NlKClcbiAgICAgIH0pXG4gICAgICBpZiAobmV0LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdTb2NrZXQnKSB7XG4gICAgICAgIG9ib2UodGhpcy5zb2NrZXQpLmRvbmUocGF5bG9hZHMgPT4gdGhpcy5lbWl0UGF5bG9hZHMocGF5bG9hZHMpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ2RhdGEnLCBkYXRhID0+IHBhcnNlKGRhdGEudG9TdHJpbmcoKSwgKGVyciwgcGF5bG9hZHMpID0+IHsgaWYgKCFlcnIpIHRoaXMuZW1pdFBheWxvYWRzKHBheWxvYWRzKSB9KSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuc29ja2V0Lm9uKCdlcnJvcicsIGVyciA9PiB0aGlzLm9uRXJyb3IoZXJyKSlcbiAgfVxuXG4gIG9uRXJyb3IgKGVycikge1xuICAgIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoJ2Vycm9yJykpIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpXG4gIH1cblxuICBvbkNsb3NlICgpIHtcbiAgICB0aGlzLnNvY2tldCA9IG51bGxcbiAgICB0aGlzLmNsb3NlZCA9IHRydWVcbiAgICBpZiAoZGV2KSBjb25zb2xlLmxvZygnQ2xvc2luZyBJUEMgY29ubmVjdGlvbicpXG4gICAgdGhpcy5lbWl0KCdjbG9zZScpXG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICB9XG5cbiAgY2xvc2UgKCkge1xuICAgIGlmICh0aGlzLnNvY2tldCkge1xuICAgICAgdGhpcy5zb2NrZXQuZGVzdHJveSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25DbG9zZSgpXG4gICAgfVxuICB9XG5cbiAgZW1pdFBheWxvYWRzIChwYXlsb2Fkcykge1xuICAgIHBheWxvYWRzLmZvckVhY2gobG9hZCA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShsb2FkKSkgcmV0dXJuIGxvYWQuZm9yRWFjaChwYXlsb2FkID0+IHRoaXMuZW1pdCgncGF5bG9hZCcsIHBheWxvYWQpKVxuICAgICAgdGhpcy5lbWl0KCdwYXlsb2FkJywgbG9hZClcbiAgICB9KVxuICB9XG5cbiAgZXJyb3IgKHBheWxvYWQsIG1lc3NhZ2UsIGNvZGUgPSAtMSkge1xuICAgIHRoaXMuZW1pdCgncGF5bG9hZCcsIE9iamVjdC5hc3NpZ24ocGF5bG9hZCwgeyBlcnJvcjogeyBtZXNzYWdlLCBjb2RlIH0gfSkpXG4gIH1cblxuICBzZW5kIChwYXlsb2FkKSB7XG4gICAgaWYgKCF0aGlzLnNvY2tldCB8fCAhdGhpcy5zb2NrZXQud3JpdGFibGUpIHtcbiAgICAgIHRoaXMuZXJyb3IocGF5bG9hZCwgJ05vdCBjb25uZWN0ZWQnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnNvY2tldC53cml0ZShKU09OLnN0cmluZ2lmeShPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKSkpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMuZXJyb3IocGF5bG9hZCwgZS5tZXNzYWdlKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldCA9PiAocGF0aCwgb3B0aW9ucykgPT4gbmV3IElQQ0Nvbm5lY3Rpb24obmV0LCBwYXRoLCBvcHRpb25zKVxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJvYm9lIiwicGFyc2UiLCJkZXYiLCJwcm9jZXNzIiwibmV0IiwiSVBDQ29ubmVjdGlvbiIsImNvbnN0cnVjdG9yIiwiX25ldCIsInBhdGgiLCJvcHRpb25zIiwic2V0VGltZW91dCIsImNyZWF0ZSIsIm9uRXJyb3IiLCJFcnJvciIsInNvY2tldCIsImNvbm5lY3QiLCJvbiIsImVtaXQiLCJkZXN0cm95Iiwib25DbG9zZSIsIm5hbWUiLCJkb25lIiwicGF5bG9hZHMiLCJlbWl0UGF5bG9hZHMiLCJkYXRhIiwidG9TdHJpbmciLCJlcnIiLCJsaXN0ZW5lckNvdW50IiwiY2xvc2VkIiwiY29uc29sZSIsImxvZyIsInJlbW92ZUFsbExpc3RlbmVycyIsImNsb3NlIiwiZm9yRWFjaCIsImxvYWQiLCJBcnJheSIsImlzQXJyYXkiLCJwYXlsb2FkIiwiZXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsIk9iamVjdCIsImFzc2lnbiIsInNlbmQiLCJ3cml0YWJsZSIsIndyaXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/ipc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/unavailable.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/unavailable.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nclass UnavailableConnection extends EventEmitter {\n    constructor(message){\n        super();\n        setTimeout(()=>this.onError(new Error(message)), 0);\n    }\n    onError(err) {\n        if (this.listenerCount(\"error\")) this.emit(\"error\", err);\n    }\n}\nmodule.exports = (message)=>()=>new UnavailableConnection(message);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL2Nvbm5lY3Rpb25zL3VuYXZhaWxhYmxlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUU3QixNQUFNQyw4QkFBOEJGO0lBQ2xDRyxZQUFhQyxPQUFPLENBQUU7UUFDcEIsS0FBSztRQUNMQyxXQUFXLElBQU0sSUFBSSxDQUFDQyxPQUFPLENBQUMsSUFBSUMsTUFBTUgsV0FBVztJQUNyRDtJQUVBRSxRQUFTRSxHQUFHLEVBQUU7UUFDWixJQUFJLElBQUksQ0FBQ0MsYUFBYSxDQUFDLFVBQVUsSUFBSSxDQUFDQyxJQUFJLENBQUMsU0FBU0Y7SUFDdEQ7QUFDRjtBQUVBRyxPQUFPQyxPQUFPLEdBQUdSLENBQUFBLFVBQVcsSUFBTSxJQUFJRixzQkFBc0JFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2V0aC1wcm92aWRlckAwLjEzLjYvbm9kZV9tb2R1bGVzL2V0aC1wcm92aWRlci9jb25uZWN0aW9ucy91bmF2YWlsYWJsZS5qcz8xZmM3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpXG5cbmNsYXNzIFVuYXZhaWxhYmxlQ29ubmVjdGlvbiBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlKSB7XG4gICAgc3VwZXIoKVxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5vbkVycm9yKG5ldyBFcnJvcihtZXNzYWdlKSksIDApXG4gIH1cblxuICBvbkVycm9yIChlcnIpIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lckNvdW50KCdlcnJvcicpKSB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVzc2FnZSA9PiAoKSA9PiBuZXcgVW5hdmFpbGFibGVDb25uZWN0aW9uKG1lc3NhZ2UpXG4iXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwicmVxdWlyZSIsIlVuYXZhaWxhYmxlQ29ubmVjdGlvbiIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInNldFRpbWVvdXQiLCJvbkVycm9yIiwiRXJyb3IiLCJlcnIiLCJsaXN0ZW5lckNvdW50IiwiZW1pdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/unavailable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/ws.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/ws.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst parse = __webpack_require__(/*! ../parse */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/parse/index.js\");\nconst dev = \"development\" === \"development\";\nlet WebSocket;\nclass WebSocketConnection extends EventEmitter {\n    constructor(_WebSocket, url, options){\n        super();\n        this.socketListeners = [];\n        WebSocket = _WebSocket;\n        setTimeout(()=>this.create(url, options), 0);\n    }\n    create(url, options) {\n        if (!WebSocket) return this.onError(new Error(\"No WebSocket transport available\"));\n        try {\n            this.socket = new WebSocket(url, [], {\n                origin: options.origin\n            });\n        } catch (e) {\n            return this.onError(e);\n        }\n        this.addSocketListener(\"error\", this.onError.bind(this));\n        this.addSocketListener(\"open\", this.onOpen.bind(this));\n        this.addSocketListener(\"close\", this.onClose.bind(this));\n    }\n    addSocketListener(event, handler) {\n        this.socket.addEventListener(event, handler);\n        this.socketListeners.push({\n            event,\n            handler\n        });\n    }\n    removeAllSocketListeners() {\n        this.socketListeners.forEach(({ event, handler })=>{\n            this.socket.removeEventListener(event, handler);\n        });\n        this.socketListeners = [];\n    }\n    onOpen() {\n        this.emit(\"connect\");\n        this.addSocketListener(\"message\", this.onMessage.bind(this));\n    }\n    onMessage(message) {\n        const data = typeof message.data === \"string\" ? message.data : \"\";\n        parse(data, (err, payloads)=>{\n            if (err) return; //\n            payloads.forEach((load)=>{\n                if (Array.isArray(load)) {\n                    load.forEach((payload)=>this.emit(\"payload\", payload));\n                } else {\n                    this.emit(\"payload\", load);\n                }\n            });\n        });\n    }\n    onError(err) {\n        if (this.listenerCount(\"error\")) this.emit(\"error\", err);\n    }\n    onClose(e) {\n        // onClose should only be called as a result of the socket's close event\n        // OR when close() is called manually and the socket either doesn't exist or is already in a closed state\n        const err = {\n            reason: e ? e.reason : \"unknown\",\n            code: e ? e.code : \"unknown\"\n        };\n        if (this.socket) {\n            this.removeAllSocketListeners();\n            this.socket = null;\n        }\n        this.closed = true;\n        if (dev) console.log(`Closing WebSocket connection, reason: ${err.reason} (code ${err.code})`);\n        this.emit(\"close\");\n        this.removeAllListeners();\n    }\n    close() {\n        if (this.socket && WebSocket && this.socket.readyState !== WebSocket.CLOSED) {\n            this.removeAllSocketListeners();\n            this.addSocketListener(\"error\", ()=>{});\n            this.addSocketListener(\"close\", this.onClose.bind(this));\n            if (this.socket.terminate) {\n                this.socket.terminate();\n            } else {\n                this.socket.close();\n            }\n        } else {\n            this.onClose();\n        }\n    }\n    error(payload, message, code = -1) {\n        this.emit(\"payload\", {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            error: {\n                message,\n                code\n            }\n        });\n    }\n    send(payload) {\n        try {\n            if (this.socket && this.socket.readyState === this.socket.CONNECTING) {\n                setTimeout((_)=>this.send(payload), 10);\n            } else if (!this.socket || this.socket.readyState > 1) {\n                this.connected = false;\n                this.error(payload, \"Not connected\");\n            } else {\n                this.socket.send(JSON.stringify(payload));\n            }\n        } catch (e) {\n            if (dev) console.error(\"Error sending Websocket request\", e);\n            this.error(payload, e.message);\n        }\n    }\n}\nmodule.exports = (WebSocket)=>(url, cb)=>new WebSocketConnection(WebSocket, url, cb);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/ws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/node.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/node.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst resolve = __webpack_require__(/*! ./resolve */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/resolve/index.js\");\nconst provider = __webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/provider/index.js\");\nconst presets = __webpack_require__(/*! ./presets */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/presets/index.js\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst ws = __webpack_require__(/*! ws */ \"(ssr)/./node_modules/.pnpm/ws@8.9.0/node_modules/ws/index.js\");\nconst XHR = (__webpack_require__(/*! xhr2-cookies */ \"(ssr)/./node_modules/.pnpm/xhr2-cookies@1.1.0/node_modules/xhr2-cookies/dist/index.js\").XMLHttpRequest);\nconst home = (__webpack_require__(/*! os */ \"os\").homedir)();\nlet ipc = [];\nif (process.platform === \"darwin\") {\n    ipc = [\n        `${home}/Library/Ethereum/geth.ipc`,\n        `${home}/Library/Ethereum/sepolia/geth.ipc`\n    ];\n} else if (process.platform === \"freebsd\" || process.platform === \"linux\" || process.platform === \"sunos\") {\n    ipc = [\n        `${home}/.ethereum/geth.ipc`,\n        `${home}/.ethereum/sepolia/geth.ipc`\n    ];\n} else if (process.platform === \"win32\") {\n    ipc = [\n        \"\\\\\\\\.\\\\pipe\\\\geth.ipc\"\n    ];\n}\nconst connections = {\n    injected: __webpack_require__(/*! ./connections/unavailable */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/unavailable.js\")(\"Injected connections are unavliable in Node/Electron\"),\n    ipc: __webpack_require__(/*! ./connections/ipc */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/ipc.js\")(net),\n    ws: __webpack_require__(/*! ./connections/ws */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/ws.js\")(ws),\n    http: __webpack_require__(/*! ./connections/http */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/connections/http.js\")(XHR)\n};\nmodule.exports = (targets, options)=>{\n    if (targets && !Array.isArray(targets) && typeof targets === \"object\" && !options) {\n        options = targets;\n        targets = undefined;\n    }\n    if (!targets) targets = [\n        \"injected\",\n        \"frame\"\n    ];\n    if (!options) options = {};\n    targets = [].concat(targets);\n    targets.forEach((t)=>{\n        if (t.startsWith(\"alchemy\") && !options.alchemyId) throw new Error(\"Alchemy was included as a connection target but no Alchemy project ID was passed in options e.g. { alchemyId: '123abc' }\");\n        if (t.startsWith(\"infura\") && !options.infuraId) throw new Error(\"Infura was included as a connection target but no Infura project ID was passed in options e.g. { infuraId: '123abc' }\");\n    });\n    const sets = presets(options);\n    sets.direct = ipc.concat(sets.direct);\n    return provider(connections, resolve(targets, sets), options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL25vZGUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDO0FBQ3pCLE1BQU1FLFVBQVVGLG1CQUFPQSxDQUFDO0FBRXhCLE1BQU1HLE1BQU1ILG1CQUFPQSxDQUFDO0FBQ3BCLE1BQU1JLEtBQUtKLG1CQUFPQSxDQUFDO0FBQ25CLE1BQU1LLE1BQU1MLGlKQUFzQztBQUVsRCxNQUFNTyxPQUFPUCw2Q0FBcUI7QUFFbEMsSUFBSVMsTUFBTSxFQUFFO0FBQ1osSUFBSUMsUUFBUUMsUUFBUSxLQUFLLFVBQVU7SUFDakNGLE1BQU07UUFBQyxDQUFDLEVBQUVGLEtBQUssMEJBQTBCLENBQUM7UUFBRSxDQUFDLEVBQUVBLEtBQUssa0NBQWtDLENBQUM7S0FBQztBQUMxRixPQUFPLElBQUlHLFFBQVFDLFFBQVEsS0FBSyxhQUFhRCxRQUFRQyxRQUFRLEtBQUssV0FBV0QsUUFBUUMsUUFBUSxLQUFLLFNBQVM7SUFDekdGLE1BQU07UUFBQyxDQUFDLEVBQUVGLEtBQUssbUJBQW1CLENBQUM7UUFBRSxDQUFDLEVBQUVBLEtBQUssMkJBQTJCLENBQUM7S0FBQztBQUM1RSxPQUFPLElBQUlHLFFBQVFDLFFBQVEsS0FBSyxTQUFTO0lBQ3ZDRixNQUFNO1FBQUM7S0FBd0I7QUFDakM7QUFFQSxNQUFNRyxjQUFjO0lBQ2xCQyxVQUFVYixtQkFBT0EsQ0FBQyx3SUFBNkI7SUFDL0NTLEtBQUtULG1CQUFPQSxDQUFDLHdIQUFxQkc7SUFDbENDLElBQUlKLG1CQUFPQSxDQUFDLHNIQUFvQkk7SUFDaENVLE1BQU1kLG1CQUFPQSxDQUFDLDBIQUFzQks7QUFDdEM7QUFFQVUsT0FBT0MsT0FBTyxHQUFHLENBQUNDLFNBQVNDO0lBQ3pCLElBQUlELFdBQVcsQ0FBQ0UsTUFBTUMsT0FBTyxDQUFDSCxZQUFZLE9BQU9BLFlBQVksWUFBWSxDQUFDQyxTQUFTO1FBQ2pGQSxVQUFVRDtRQUNWQSxVQUFVSTtJQUNaO0lBQ0EsSUFBSSxDQUFDSixTQUFTQSxVQUFVO1FBQUM7UUFBWTtLQUFRO0lBQzdDLElBQUksQ0FBQ0MsU0FBU0EsVUFBVSxDQUFDO0lBRXpCRCxVQUFVLEVBQUUsQ0FBQ0ssTUFBTSxDQUFDTDtJQUVwQkEsUUFBUU0sT0FBTyxDQUFDQyxDQUFBQTtRQUNkLElBQUlBLEVBQUVDLFVBQVUsQ0FBQyxjQUFjLENBQUNQLFFBQVFRLFNBQVMsRUFBRSxNQUFNLElBQUlDLE1BQU07UUFDbkUsSUFBSUgsRUFBRUMsVUFBVSxDQUFDLGFBQWEsQ0FBQ1AsUUFBUVUsUUFBUSxFQUFFLE1BQU0sSUFBSUQsTUFBTTtJQUNuRTtJQUVBLE1BQU1FLE9BQU8zQixRQUFRZ0I7SUFDckJXLEtBQUtDLE1BQU0sR0FBR3JCLElBQUlhLE1BQU0sQ0FBQ08sS0FBS0MsTUFBTTtJQUVwQyxPQUFPN0IsU0FBU1csYUFBYWIsUUFBUWtCLFNBQVNZLE9BQU9YO0FBQ3ZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2V0aC1wcm92aWRlckAwLjEzLjYvbm9kZV9tb2R1bGVzL2V0aC1wcm92aWRlci9ub2RlLmpzPzJkYmUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVzb2x2ZSA9IHJlcXVpcmUoJy4vcmVzb2x2ZScpXG5jb25zdCBwcm92aWRlciA9IHJlcXVpcmUoJy4vcHJvdmlkZXInKVxuY29uc3QgcHJlc2V0cyA9IHJlcXVpcmUoJy4vcHJlc2V0cycpXG5cbmNvbnN0IG5ldCA9IHJlcXVpcmUoJ25ldCcpXG5jb25zdCB3cyA9IHJlcXVpcmUoJ3dzJylcbmNvbnN0IFhIUiA9IHJlcXVpcmUoJ3hocjItY29va2llcycpLlhNTEh0dHBSZXF1ZXN0XG5cbmNvbnN0IGhvbWUgPSByZXF1aXJlKCdvcycpLmhvbWVkaXIoKVxuXG5sZXQgaXBjID0gW11cbmlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJykge1xuICBpcGMgPSBbYCR7aG9tZX0vTGlicmFyeS9FdGhlcmV1bS9nZXRoLmlwY2AsIGAke2hvbWV9L0xpYnJhcnkvRXRoZXJldW0vc2Vwb2xpYS9nZXRoLmlwY2BdXG59IGVsc2UgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICdmcmVlYnNkJyB8fCBwcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnIHx8IHByb2Nlc3MucGxhdGZvcm0gPT09ICdzdW5vcycpIHtcbiAgaXBjID0gW2Ake2hvbWV9Ly5ldGhlcmV1bS9nZXRoLmlwY2AsIGAke2hvbWV9Ly5ldGhlcmV1bS9zZXBvbGlhL2dldGguaXBjYF1cbn0gZWxzZSBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICBpcGMgPSBbJ1xcXFxcXFxcLlxcXFxwaXBlXFxcXGdldGguaXBjJ11cbn1cblxuY29uc3QgY29ubmVjdGlvbnMgPSB7XG4gIGluamVjdGVkOiByZXF1aXJlKCcuL2Nvbm5lY3Rpb25zL3VuYXZhaWxhYmxlJykoJ0luamVjdGVkIGNvbm5lY3Rpb25zIGFyZSB1bmF2bGlhYmxlIGluIE5vZGUvRWxlY3Ryb24nKSxcbiAgaXBjOiByZXF1aXJlKCcuL2Nvbm5lY3Rpb25zL2lwYycpKG5ldCksXG4gIHdzOiByZXF1aXJlKCcuL2Nvbm5lY3Rpb25zL3dzJykod3MpLFxuICBodHRwOiByZXF1aXJlKCcuL2Nvbm5lY3Rpb25zL2h0dHAnKShYSFIpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gKHRhcmdldHMsIG9wdGlvbnMpID0+IHtcbiAgaWYgKHRhcmdldHMgJiYgIUFycmF5LmlzQXJyYXkodGFyZ2V0cykgJiYgdHlwZW9mIHRhcmdldHMgPT09ICdvYmplY3QnICYmICFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHRhcmdldHNcbiAgICB0YXJnZXRzID0gdW5kZWZpbmVkXG4gIH1cbiAgaWYgKCF0YXJnZXRzKSB0YXJnZXRzID0gWydpbmplY3RlZCcsICdmcmFtZSddXG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9XG5cbiAgdGFyZ2V0cyA9IFtdLmNvbmNhdCh0YXJnZXRzKVxuXG4gIHRhcmdldHMuZm9yRWFjaCh0ID0+IHtcbiAgICBpZiAodC5zdGFydHNXaXRoKCdhbGNoZW15JykgJiYgIW9wdGlvbnMuYWxjaGVteUlkKSB0aHJvdyBuZXcgRXJyb3IoJ0FsY2hlbXkgd2FzIGluY2x1ZGVkIGFzIGEgY29ubmVjdGlvbiB0YXJnZXQgYnV0IG5vIEFsY2hlbXkgcHJvamVjdCBJRCB3YXMgcGFzc2VkIGluIG9wdGlvbnMgZS5nLiB7IGFsY2hlbXlJZDogXFwnMTIzYWJjXFwnIH0nKVxuICAgIGlmICh0LnN0YXJ0c1dpdGgoJ2luZnVyYScpICYmICFvcHRpb25zLmluZnVyYUlkKSB0aHJvdyBuZXcgRXJyb3IoJ0luZnVyYSB3YXMgaW5jbHVkZWQgYXMgYSBjb25uZWN0aW9uIHRhcmdldCBidXQgbm8gSW5mdXJhIHByb2plY3QgSUQgd2FzIHBhc3NlZCBpbiBvcHRpb25zIGUuZy4geyBpbmZ1cmFJZDogXFwnMTIzYWJjXFwnIH0nKVxuICB9KVxuXG4gIGNvbnN0IHNldHMgPSBwcmVzZXRzKG9wdGlvbnMpXG4gIHNldHMuZGlyZWN0ID0gaXBjLmNvbmNhdChzZXRzLmRpcmVjdClcblxuICByZXR1cm4gcHJvdmlkZXIoY29ubmVjdGlvbnMsIHJlc29sdmUodGFyZ2V0cywgc2V0cyksIG9wdGlvbnMpXG59XG4iXSwibmFtZXMiOlsicmVzb2x2ZSIsInJlcXVpcmUiLCJwcm92aWRlciIsInByZXNldHMiLCJuZXQiLCJ3cyIsIlhIUiIsIlhNTEh0dHBSZXF1ZXN0IiwiaG9tZSIsImhvbWVkaXIiLCJpcGMiLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJjb25uZWN0aW9ucyIsImluamVjdGVkIiwiaHR0cCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0YXJnZXRzIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImNvbmNhdCIsImZvckVhY2giLCJ0Iiwic3RhcnRzV2l0aCIsImFsY2hlbXlJZCIsIkVycm9yIiwiaW5mdXJhSWQiLCJzZXRzIiwiZGlyZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/parse/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/parse/index.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

eval("\nlet last, timeout;\nmodule.exports = (res, cb)=>{\n    const values = [];\n    res.replace(/\\}[\\n\\r]?\\{/g, \"}|--|{\") // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, \"}]|--|[{\") // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, \"}|--|[{\") // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, \"}]|--|{\") // }]{\n    .split(\"|--|\").forEach((data)=>{\n        if (last) data = last + data // prepend the last chunk\n        ;\n        let result;\n        try {\n            result = JSON.parse(data);\n        } catch (e) {\n            last = data;\n            clearTimeout(timeout) // restart timeout\n            ;\n            timeout = setTimeout(()=>cb(new Error(\"Parse response timeout\")), 15 * 1000);\n            return;\n        }\n        clearTimeout(timeout);\n        last = null;\n        if (result) values.push(result);\n    });\n    cb(null, values);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL3BhcnNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxNQUFNQztBQUVWQyxPQUFPQyxPQUFPLEdBQUcsQ0FBQ0MsS0FBS0M7SUFDckIsTUFBTUMsU0FBUyxFQUFFO0lBQ2pCRixJQUNHRyxPQUFPLENBQUMsZ0JBQWdCLFVBQVUsS0FBSztLQUN2Q0EsT0FBTyxDQUFDLG9CQUFvQixZQUFZLE9BQU87S0FDL0NBLE9BQU8sQ0FBQyxrQkFBa0IsV0FBVyxNQUFNO0tBQzNDQSxPQUFPLENBQUMsa0JBQWtCLFdBQVcsTUFBTTtLQUMzQ0MsS0FBSyxDQUFDLFFBQ05DLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDUCxJQUFJVixNQUFNVSxPQUFPVixPQUFPVSxLQUFLLHlCQUF5Qjs7UUFDdEQsSUFBSUM7UUFDSixJQUFJO1lBQ0ZBLFNBQVNDLEtBQUtDLEtBQUssQ0FBQ0g7UUFDdEIsRUFBRSxPQUFPSSxHQUFHO1lBQ1ZkLE9BQU9VO1lBQ1BLLGFBQWFkLFNBQVMsa0JBQWtCOztZQUN4Q0EsVUFBVWUsV0FBVyxJQUFNWCxHQUFHLElBQUlZLE1BQU0sNEJBQTRCLEtBQUs7WUFDekU7UUFDRjtRQUNBRixhQUFhZDtRQUNiRCxPQUFPO1FBQ1AsSUFBSVcsUUFBUUwsT0FBT1ksSUFBSSxDQUFDUDtJQUMxQjtJQUNGTixHQUFHLE1BQU1DO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL3BhcnNlL2luZGV4LmpzPzExY2MiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IGxhc3QsIHRpbWVvdXRcblxubW9kdWxlLmV4cG9ydHMgPSAocmVzLCBjYikgPT4ge1xuICBjb25zdCB2YWx1ZXMgPSBbXVxuICByZXNcbiAgICAucmVwbGFjZSgvXFx9W1xcblxccl0/XFx7L2csICd9fC0tfHsnKSAvLyB9e1xuICAgIC5yZXBsYWNlKC9cXH1cXF1bXFxuXFxyXT9cXFtcXHsvZywgJ31dfC0tfFt7JykgLy8gfV1be1xuICAgIC5yZXBsYWNlKC9cXH1bXFxuXFxyXT9cXFtcXHsvZywgJ318LS18W3snKSAvLyB9W3tcbiAgICAucmVwbGFjZSgvXFx9XFxdW1xcblxccl0/XFx7L2csICd9XXwtLXx7JykgLy8gfV17XG4gICAgLnNwbGl0KCd8LS18JylcbiAgICAuZm9yRWFjaChkYXRhID0+IHtcbiAgICAgIGlmIChsYXN0KSBkYXRhID0gbGFzdCArIGRhdGEgLy8gcHJlcGVuZCB0aGUgbGFzdCBjaHVua1xuICAgICAgbGV0IHJlc3VsdFxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsYXN0ID0gZGF0YVxuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCkgLy8gcmVzdGFydCB0aW1lb3V0XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGNiKG5ldyBFcnJvcignUGFyc2UgcmVzcG9uc2UgdGltZW91dCcpKSwgMTUgKiAxMDAwKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KVxuICAgICAgbGFzdCA9IG51bGxcbiAgICAgIGlmIChyZXN1bHQpIHZhbHVlcy5wdXNoKHJlc3VsdClcbiAgICB9KVxuICBjYihudWxsLCB2YWx1ZXMpXG59XG4iXSwibmFtZXMiOlsibGFzdCIsInRpbWVvdXQiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVzIiwiY2IiLCJ2YWx1ZXMiLCJyZXBsYWNlIiwic3BsaXQiLCJmb3JFYWNoIiwiZGF0YSIsInJlc3VsdCIsIkpTT04iLCJwYXJzZSIsImUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiRXJyb3IiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/parse/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/presets/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/presets/index.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = (options = {})=>{\n    return {\n        injected: [\n            \"injected\"\n        ],\n        frame: [\n            \"ws://127.0.0.1:1248\",\n            \"http://127.0.0.1:1248\"\n        ],\n        direct: [\n            \"ws://127.0.0.1:8546\",\n            \"http://127.0.0.1:8545\"\n        ],\n        infura: [\n            `wss://mainnet.infura.io/ws/v3/${options.infuraId}`,\n            `https://mainnet.infura.io/v3/${options.infuraId}`\n        ],\n        alchemy: [\n            `wss://eth-mainnet.ws.alchemyapi.io/v2/${options.alchemyId}`,\n            `https://eth-mainnet.alchemyapi.io/v2/${options.alchemyId}`\n        ],\n        infuraGoerli: [\n            `wss://goerli.infura.io/ws/v3/${options.infuraId}`,\n            `https://goerli.infura.io/v3/${options.infuraId}`\n        ],\n        alchemyGoerli: [\n            `wss://eth-goerli.ws.alchemyapi.io/v2/${options.alchemyId}`,\n            `https://eth-goerli.alchemyapi.io/v2/${options.alchemyId}`\n        ],\n        infuraPolygon: [\n            `https://polygon-mainnet.infura.io/v3/${options.infuraId}`\n        ],\n        infuraArbitrum: [\n            `https://arbitrum-mainnet.infura.io/v3/${options.infuraId}`\n        ],\n        infuraOptimism: [\n            `https://optimism-mainnet.infura.io/v3/${options.infuraId}`\n        ],\n        infuraSepolia: [\n            `wss://sepolia.infura.io/ws/v3/${options.infuraId}`,\n            `https://sepolia.infura.io/v3/${options.infuraId}`\n        ],\n        gnosis: [\n            \"https://rpc.gnosischain.com\"\n        ],\n        optimism: [\n            \"https://mainnet.optimism.io\"\n        ]\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL3ByZXNldHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7SUFDNUIsT0FBTztRQUNMQyxVQUFVO1lBQUM7U0FBVztRQUN0QkMsT0FBTztZQUFDO1lBQXVCO1NBQXdCO1FBQ3ZEQyxRQUFRO1lBQUM7WUFBdUI7U0FBd0I7UUFDeERDLFFBQVE7WUFBQyxDQUFDLDhCQUE4QixFQUFFSixRQUFRSyxRQUFRLENBQUMsQ0FBQztZQUFFLENBQUMsNkJBQTZCLEVBQUVMLFFBQVFLLFFBQVEsQ0FBQyxDQUFDO1NBQUM7UUFDakhDLFNBQVM7WUFBQyxDQUFDLHNDQUFzQyxFQUFFTixRQUFRTyxTQUFTLENBQUMsQ0FBQztZQUFFLENBQUMscUNBQXFDLEVBQUVQLFFBQVFPLFNBQVMsQ0FBQyxDQUFDO1NBQUM7UUFDcElDLGNBQWM7WUFBQyxDQUFDLDZCQUE2QixFQUFFUixRQUFRSyxRQUFRLENBQUMsQ0FBQztZQUFFLENBQUMsNEJBQTRCLEVBQUVMLFFBQVFLLFFBQVEsQ0FBQyxDQUFDO1NBQUM7UUFDckhJLGVBQWU7WUFBQyxDQUFDLHFDQUFxQyxFQUFFVCxRQUFRTyxTQUFTLENBQUMsQ0FBQztZQUFFLENBQUMsb0NBQW9DLEVBQUVQLFFBQVFPLFNBQVMsQ0FBQyxDQUFDO1NBQUM7UUFDeElHLGVBQWU7WUFBQyxDQUFDLHFDQUFxQyxFQUFFVixRQUFRSyxRQUFRLENBQUMsQ0FBQztTQUFDO1FBQzNFTSxnQkFBZ0I7WUFBQyxDQUFDLHNDQUFzQyxFQUFFWCxRQUFRSyxRQUFRLENBQUMsQ0FBQztTQUFDO1FBQzdFTyxnQkFBZ0I7WUFBQyxDQUFDLHNDQUFzQyxFQUFFWixRQUFRSyxRQUFRLENBQUMsQ0FBQztTQUFDO1FBQzdFUSxlQUFlO1lBQUMsQ0FBQyw4QkFBOEIsRUFBRWIsUUFBUUssUUFBUSxDQUFDLENBQUM7WUFBRSxDQUFDLDZCQUE2QixFQUFFTCxRQUFRSyxRQUFRLENBQUMsQ0FBQztTQUFDO1FBQ3hIUyxRQUFRO1lBQUM7U0FBOEI7UUFDdkNDLFVBQVU7WUFBQztTQUE4QjtJQUMzQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2V0aC1wcm92aWRlckAwLjEzLjYvbm9kZV9tb2R1bGVzL2V0aC1wcm92aWRlci9wcmVzZXRzL2luZGV4LmpzP2JlZmMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgaW5qZWN0ZWQ6IFsnaW5qZWN0ZWQnXSxcbiAgICBmcmFtZTogWyd3czovLzEyNy4wLjAuMToxMjQ4JywgJ2h0dHA6Ly8xMjcuMC4wLjE6MTI0OCddLFxuICAgIGRpcmVjdDogWyd3czovLzEyNy4wLjAuMTo4NTQ2JywgJ2h0dHA6Ly8xMjcuMC4wLjE6ODU0NSddLCAvLyBJUEMgcGF0aHMgd2lsbCBiZSBwcmVwZW5kZWQgaW4gTm9kZS9FbGVjdHJvblxuICAgIGluZnVyYTogW2B3c3M6Ly9tYWlubmV0LmluZnVyYS5pby93cy92My8ke29wdGlvbnMuaW5mdXJhSWR9YCwgYGh0dHBzOi8vbWFpbm5ldC5pbmZ1cmEuaW8vdjMvJHtvcHRpb25zLmluZnVyYUlkfWBdLFxuICAgIGFsY2hlbXk6IFtgd3NzOi8vZXRoLW1haW5uZXQud3MuYWxjaGVteWFwaS5pby92Mi8ke29wdGlvbnMuYWxjaGVteUlkfWAsIGBodHRwczovL2V0aC1tYWlubmV0LmFsY2hlbXlhcGkuaW8vdjIvJHtvcHRpb25zLmFsY2hlbXlJZH1gXSxcbiAgICBpbmZ1cmFHb2VybGk6IFtgd3NzOi8vZ29lcmxpLmluZnVyYS5pby93cy92My8ke29wdGlvbnMuaW5mdXJhSWR9YCwgYGh0dHBzOi8vZ29lcmxpLmluZnVyYS5pby92My8ke29wdGlvbnMuaW5mdXJhSWR9YF0sXG4gICAgYWxjaGVteUdvZXJsaTogW2B3c3M6Ly9ldGgtZ29lcmxpLndzLmFsY2hlbXlhcGkuaW8vdjIvJHtvcHRpb25zLmFsY2hlbXlJZH1gLCBgaHR0cHM6Ly9ldGgtZ29lcmxpLmFsY2hlbXlhcGkuaW8vdjIvJHtvcHRpb25zLmFsY2hlbXlJZH1gXSxcbiAgICBpbmZ1cmFQb2x5Z29uOiBbYGh0dHBzOi8vcG9seWdvbi1tYWlubmV0LmluZnVyYS5pby92My8ke29wdGlvbnMuaW5mdXJhSWR9YF0sXG4gICAgaW5mdXJhQXJiaXRydW06IFtgaHR0cHM6Ly9hcmJpdHJ1bS1tYWlubmV0LmluZnVyYS5pby92My8ke29wdGlvbnMuaW5mdXJhSWR9YF0sXG4gICAgaW5mdXJhT3B0aW1pc206IFtgaHR0cHM6Ly9vcHRpbWlzbS1tYWlubmV0LmluZnVyYS5pby92My8ke29wdGlvbnMuaW5mdXJhSWR9YF0sXG4gICAgaW5mdXJhU2Vwb2xpYTogW2B3c3M6Ly9zZXBvbGlhLmluZnVyYS5pby93cy92My8ke29wdGlvbnMuaW5mdXJhSWR9YCwgYGh0dHBzOi8vc2Vwb2xpYS5pbmZ1cmEuaW8vdjMvJHtvcHRpb25zLmluZnVyYUlkfWBdLFxuICAgIGdub3NpczogWydodHRwczovL3JwYy5nbm9zaXNjaGFpbi5jb20nXSxcbiAgICBvcHRpbWlzbTogWydodHRwczovL21haW5uZXQub3B0aW1pc20uaW8nXVxuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJpbmplY3RlZCIsImZyYW1lIiwiZGlyZWN0IiwiaW5mdXJhIiwiaW5mdXJhSWQiLCJhbGNoZW15IiwiYWxjaGVteUlkIiwiaW5mdXJhR29lcmxpIiwiYWxjaGVteUdvZXJsaSIsImluZnVyYVBvbHlnb24iLCJpbmZ1cmFBcmJpdHJ1bSIsImluZnVyYU9wdGltaXNtIiwiaW5mdXJhU2Vwb2xpYSIsImdub3NpcyIsIm9wdGltaXNtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/presets/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/provider/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/provider/index.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst EthereumProvider = (__webpack_require__(/*! ethereum-provider */ \"(ssr)/./node_modules/.pnpm/ethereum-provider@0.7.7/node_modules/ethereum-provider/dist/index.js\")[\"default\"]);\nconst ConnectionManager = __webpack_require__(/*! ../ConnectionManager */ \"(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/ConnectionManager/index.js\");\nconst monitor = (provider)=>{\n    function update(status) {\n        provider.status = status;\n        if (provider instanceof EventEmitter) provider.emit(\"status\", status);\n    }\n    async function checkSyncing() {\n        try {\n            if (await provider.send(\"eth_syncing\")) {\n                update(\"syncing\");\n            }\n        } catch (e) {\n        // don't do anything if it can't be determined whether the node is syncing or not\n        }\n    }\n    async function checkConnected() {\n        if (provider.inSetup) return setTimeout(checkConnected, 1000);\n        try {\n            await provider.send(\"eth_chainId\");\n            update(\"connected\");\n            setTimeout(checkSyncing, 500);\n        } catch (e) {\n            update(\"disconnected\");\n        }\n    }\n    update(\"loading\");\n    checkConnected();\n    provider.on(\"connect\", ()=>checkConnected());\n    provider.on(\"close\", ()=>update(\"disconnected\"));\n    return provider;\n};\nmodule.exports = (connections, targets, options)=>{\n    // If window.ethereum and injected is a target in any priority, return ethereum provider\n    if (connections.injected.__isProvider && targets.map((t)=>t.type).indexOf(\"injected\") > -1) {\n        delete connections.injected.__isProvider;\n        return monitor(connections.injected);\n    }\n    const provider = new EthereumProvider(new ConnectionManager(connections, targets, options));\n    provider.setMaxListeners(128);\n    return monitor(provider);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL3Byb3ZpZGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUM3QixNQUFNQyxtQkFBbUJELDRKQUFvQztBQUM3RCxNQUFNRyxvQkFBb0JILG1CQUFPQSxDQUFDO0FBRWxDLE1BQU1JLFVBQVVDLENBQUFBO0lBQ2QsU0FBU0MsT0FBUUMsTUFBTTtRQUNyQkYsU0FBU0UsTUFBTSxHQUFHQTtRQUNsQixJQUFJRixvQkFBb0JOLGNBQWNNLFNBQVNHLElBQUksQ0FBQyxVQUFVRDtJQUNoRTtJQUVBLGVBQWVFO1FBQ2IsSUFBSTtZQUNGLElBQUksTUFBTUosU0FBU0ssSUFBSSxDQUFDLGdCQUFnQjtnQkFDdENKLE9BQU87WUFDVDtRQUNGLEVBQUUsT0FBT0ssR0FBRztRQUNWLGlGQUFpRjtRQUNuRjtJQUNGO0lBRUEsZUFBZUM7UUFDYixJQUFJUCxTQUFTUSxPQUFPLEVBQUUsT0FBT0MsV0FBV0YsZ0JBQWdCO1FBRXhELElBQUk7WUFDRixNQUFNUCxTQUFTSyxJQUFJLENBQUM7WUFDcEJKLE9BQU87WUFFUFEsV0FBV0wsY0FBYztRQUMzQixFQUFFLE9BQU9FLEdBQUc7WUFDVkwsT0FBTztRQUNUO0lBQ0Y7SUFFQUEsT0FBTztJQUNQTTtJQUNBUCxTQUFTVSxFQUFFLENBQUMsV0FBVyxJQUFNSDtJQUM3QlAsU0FBU1UsRUFBRSxDQUFDLFNBQVMsSUFBTVQsT0FBTztJQUNsQyxPQUFPRDtBQUNUO0FBRUFXLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxhQUFhQyxTQUFTQztJQUN0Qyx3RkFBd0Y7SUFDeEYsSUFBSUYsWUFBWUcsUUFBUSxDQUFDQyxZQUFZLElBQUlILFFBQVFJLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUc7UUFDMUYsT0FBT1IsWUFBWUcsUUFBUSxDQUFDQyxZQUFZO1FBQ3hDLE9BQU9sQixRQUFRYyxZQUFZRyxRQUFRO0lBQ3JDO0lBQ0EsTUFBTWhCLFdBQVcsSUFBSUosaUJBQWlCLElBQUlFLGtCQUFrQmUsYUFBYUMsU0FBU0M7SUFDbEZmLFNBQVNzQixlQUFlLENBQUM7SUFDekIsT0FBT3ZCLFFBQVFDO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2V0aC1wcm92aWRlckAwLjEzLjYvbm9kZV9tb2R1bGVzL2V0aC1wcm92aWRlci9wcm92aWRlci9pbmRleC5qcz80ZWFhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpXG5jb25zdCBFdGhlcmV1bVByb3ZpZGVyID0gcmVxdWlyZSgnZXRoZXJldW0tcHJvdmlkZXInKS5kZWZhdWx0XG5jb25zdCBDb25uZWN0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4uL0Nvbm5lY3Rpb25NYW5hZ2VyJylcblxuY29uc3QgbW9uaXRvciA9IHByb3ZpZGVyID0+IHtcbiAgZnVuY3Rpb24gdXBkYXRlIChzdGF0dXMpIHtcbiAgICBwcm92aWRlci5zdGF0dXMgPSBzdGF0dXNcbiAgICBpZiAocHJvdmlkZXIgaW5zdGFuY2VvZiBFdmVudEVtaXR0ZXIpIHByb3ZpZGVyLmVtaXQoJ3N0YXR1cycsIHN0YXR1cylcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGNoZWNrU3luY2luZyAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChhd2FpdCBwcm92aWRlci5zZW5kKCdldGhfc3luY2luZycpKSB7XG4gICAgICAgIHVwZGF0ZSgnc3luY2luZycpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgaXQgY2FuJ3QgYmUgZGV0ZXJtaW5lZCB3aGV0aGVyIHRoZSBub2RlIGlzIHN5bmNpbmcgb3Igbm90XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gY2hlY2tDb25uZWN0ZWQgKCkge1xuICAgIGlmIChwcm92aWRlci5pblNldHVwKSByZXR1cm4gc2V0VGltZW91dChjaGVja0Nvbm5lY3RlZCwgMTAwMClcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwcm92aWRlci5zZW5kKCdldGhfY2hhaW5JZCcpXG4gICAgICB1cGRhdGUoJ2Nvbm5lY3RlZCcpXG5cbiAgICAgIHNldFRpbWVvdXQoY2hlY2tTeW5jaW5nLCA1MDApXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdXBkYXRlKCdkaXNjb25uZWN0ZWQnKVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSgnbG9hZGluZycpXG4gIGNoZWNrQ29ubmVjdGVkKClcbiAgcHJvdmlkZXIub24oJ2Nvbm5lY3QnLCAoKSA9PiBjaGVja0Nvbm5lY3RlZCgpKVxuICBwcm92aWRlci5vbignY2xvc2UnLCAoKSA9PiB1cGRhdGUoJ2Rpc2Nvbm5lY3RlZCcpKVxuICByZXR1cm4gcHJvdmlkZXJcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAoY29ubmVjdGlvbnMsIHRhcmdldHMsIG9wdGlvbnMpID0+IHtcbiAgLy8gSWYgd2luZG93LmV0aGVyZXVtIGFuZCBpbmplY3RlZCBpcyBhIHRhcmdldCBpbiBhbnkgcHJpb3JpdHksIHJldHVybiBldGhlcmV1bSBwcm92aWRlclxuICBpZiAoY29ubmVjdGlvbnMuaW5qZWN0ZWQuX19pc1Byb3ZpZGVyICYmIHRhcmdldHMubWFwKHQgPT4gdC50eXBlKS5pbmRleE9mKCdpbmplY3RlZCcpID4gLTEpIHtcbiAgICBkZWxldGUgY29ubmVjdGlvbnMuaW5qZWN0ZWQuX19pc1Byb3ZpZGVyXG4gICAgcmV0dXJuIG1vbml0b3IoY29ubmVjdGlvbnMuaW5qZWN0ZWQpXG4gIH1cbiAgY29uc3QgcHJvdmlkZXIgPSBuZXcgRXRoZXJldW1Qcm92aWRlcihuZXcgQ29ubmVjdGlvbk1hbmFnZXIoY29ubmVjdGlvbnMsIHRhcmdldHMsIG9wdGlvbnMpKVxuICBwcm92aWRlci5zZXRNYXhMaXN0ZW5lcnMoMTI4KVxuICByZXR1cm4gbW9uaXRvcihwcm92aWRlcilcbn1cbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiRXRoZXJldW1Qcm92aWRlciIsImRlZmF1bHQiLCJDb25uZWN0aW9uTWFuYWdlciIsIm1vbml0b3IiLCJwcm92aWRlciIsInVwZGF0ZSIsInN0YXR1cyIsImVtaXQiLCJjaGVja1N5bmNpbmciLCJzZW5kIiwiZSIsImNoZWNrQ29ubmVjdGVkIiwiaW5TZXR1cCIsInNldFRpbWVvdXQiLCJvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25uZWN0aW9ucyIsInRhcmdldHMiLCJvcHRpb25zIiwiaW5qZWN0ZWQiLCJfX2lzUHJvdmlkZXIiLCJtYXAiLCJ0IiwidHlwZSIsImluZGV4T2YiLCJzZXRNYXhMaXN0ZW5lcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/provider/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/resolve/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/resolve/index.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

eval("\nconst getProtocol = (location)=>{\n    if (location === \"injected\") return \"injected\";\n    if (location.endsWith(\".ipc\")) return \"ipc\";\n    if (location.startsWith(\"wss://\") || location.startsWith(\"ws://\")) return \"ws\";\n    if (location.startsWith(\"https://\") || location.startsWith(\"http://\")) return \"http\";\n    return \"\";\n};\nmodule.exports = (targets, presets)=>{\n    return [].concat(...[].concat(targets).map((provider)=>{\n        if (presets[provider]) {\n            return presets[provider].map((location)=>({\n                    type: provider,\n                    location,\n                    protocol: getProtocol(location)\n                }));\n        } else {\n            return {\n                type: \"custom\",\n                location: provider,\n                protocol: getProtocol(provider)\n            };\n        }\n    })).filter((provider)=>{\n        if (provider.protocol || provider.type === \"injected\") {\n            return true;\n        } else {\n            console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"');\n            return false;\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL3Jlc29sdmUvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGNBQWNDLENBQUFBO0lBQ2xCLElBQUlBLGFBQWEsWUFBWSxPQUFPO0lBQ3BDLElBQUlBLFNBQVNDLFFBQVEsQ0FBQyxTQUFTLE9BQU87SUFDdEMsSUFBSUQsU0FBU0UsVUFBVSxDQUFDLGFBQWFGLFNBQVNFLFVBQVUsQ0FBQyxVQUFVLE9BQU87SUFDMUUsSUFBSUYsU0FBU0UsVUFBVSxDQUFDLGVBQWVGLFNBQVNFLFVBQVUsQ0FBQyxZQUFZLE9BQU87SUFDOUUsT0FBTztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBRyxDQUFDQyxTQUFTQztJQUN6QixPQUFPLEVBQUUsQ0FBQ0MsTUFBTSxJQUFJLEVBQUUsQ0FBQ0EsTUFBTSxDQUFDRixTQUFTRyxHQUFHLENBQUNDLENBQUFBO1FBQ3pDLElBQUlILE9BQU8sQ0FBQ0csU0FBUyxFQUFFO1lBQ3JCLE9BQU9ILE9BQU8sQ0FBQ0csU0FBUyxDQUFDRCxHQUFHLENBQUNSLENBQUFBLFdBQWE7b0JBQUVVLE1BQU1EO29CQUFVVDtvQkFBVVcsVUFBVVosWUFBWUM7Z0JBQVU7UUFDeEcsT0FBTztZQUNMLE9BQU87Z0JBQUVVLE1BQU07Z0JBQVVWLFVBQVVTO2dCQUFVRSxVQUFVWixZQUFZVTtZQUFVO1FBQy9FO0lBQ0YsSUFBSUcsTUFBTSxDQUFDSCxDQUFBQTtRQUNULElBQUlBLFNBQVNFLFFBQVEsSUFBSUYsU0FBU0MsSUFBSSxLQUFLLFlBQVk7WUFDckQsT0FBTztRQUNULE9BQU87WUFDTEcsUUFBUUMsR0FBRyxDQUFDLHVEQUF1REwsU0FBU1QsUUFBUSxHQUFHO1lBQ3ZGLE9BQU87UUFDVDtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLXByb3ZpZGVyQDAuMTMuNi9ub2RlX21vZHVsZXMvZXRoLXByb3ZpZGVyL3Jlc29sdmUvaW5kZXguanM/MmY5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXRQcm90b2NvbCA9IGxvY2F0aW9uID0+IHtcbiAgaWYgKGxvY2F0aW9uID09PSAnaW5qZWN0ZWQnKSByZXR1cm4gJ2luamVjdGVkJ1xuICBpZiAobG9jYXRpb24uZW5kc1dpdGgoJy5pcGMnKSkgcmV0dXJuICdpcGMnXG4gIGlmIChsb2NhdGlvbi5zdGFydHNXaXRoKCd3c3M6Ly8nKSB8fCBsb2NhdGlvbi5zdGFydHNXaXRoKCd3czovLycpKSByZXR1cm4gJ3dzJ1xuICBpZiAobG9jYXRpb24uc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSB8fCBsb2NhdGlvbi5zdGFydHNXaXRoKCdodHRwOi8vJykpIHJldHVybiAnaHR0cCdcbiAgcmV0dXJuICcnXG59XG5cbm1vZHVsZS5leHBvcnRzID0gKHRhcmdldHMsIHByZXNldHMpID0+IHtcbiAgcmV0dXJuIFtdLmNvbmNhdCguLi5bXS5jb25jYXQodGFyZ2V0cykubWFwKHByb3ZpZGVyID0+IHtcbiAgICBpZiAocHJlc2V0c1twcm92aWRlcl0pIHtcbiAgICAgIHJldHVybiBwcmVzZXRzW3Byb3ZpZGVyXS5tYXAobG9jYXRpb24gPT4gKHsgdHlwZTogcHJvdmlkZXIsIGxvY2F0aW9uLCBwcm90b2NvbDogZ2V0UHJvdG9jb2wobG9jYXRpb24pIH0pKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyB0eXBlOiAnY3VzdG9tJywgbG9jYXRpb246IHByb3ZpZGVyLCBwcm90b2NvbDogZ2V0UHJvdG9jb2wocHJvdmlkZXIpIH1cbiAgICB9XG4gIH0pKS5maWx0ZXIocHJvdmlkZXIgPT4ge1xuICAgIGlmIChwcm92aWRlci5wcm90b2NvbCB8fCBwcm92aWRlci50eXBlID09PSAnaW5qZWN0ZWQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnZXRoLXByb3ZpZGVyIHwgSW52YWxpZCBwcm92aWRlciBwcmVzZXQvbG9jYXRpb246IFwiJyArIHByb3ZpZGVyLmxvY2F0aW9uICsgJ1wiJylcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJnZXRQcm90b2NvbCIsImxvY2F0aW9uIiwiZW5kc1dpdGgiLCJzdGFydHNXaXRoIiwibW9kdWxlIiwiZXhwb3J0cyIsInRhcmdldHMiLCJwcmVzZXRzIiwiY29uY2F0IiwibWFwIiwicHJvdmlkZXIiLCJ0eXBlIiwicHJvdG9jb2wiLCJmaWx0ZXIiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-provider@0.13.6/node_modules/eth-provider/resolve/index.js\n");

/***/ })

};
;