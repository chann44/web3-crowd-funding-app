"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@thirdweb-dev+auth@4.1.24_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-sign_ho6wio3g7xy5fyf6q6ypqhnuki";
exports.ids = ["vendor-chunks/@thirdweb-dev+auth@4.1.24_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-sign_ho6wio3g7xy5fyf6q6ypqhnuki"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@thirdweb-dev+auth@4.1.24_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-sign_ho6wio3g7xy5fyf6q6ypqhnuki/node_modules/@thirdweb-dev/auth/dist/auth-3e6bcaed.esm.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+auth@4.1.24_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-sign_ho6wio3g7xy5fyf6q6ypqhnuki/node_modules/@thirdweb-dev/auth/dist/auth-3e6bcaed.esm.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ AuthenticationPayloadDataSchema),\n/* harmony export */   G: () => (/* binding */ GenerateOptionsSchema),\n/* harmony export */   J: () => (/* binding */ JsonSchema),\n/* harmony export */   L: () => (/* binding */ LoginOptionsSchema),\n/* harmony export */   R: () => (/* binding */ RawDateSchema),\n/* harmony export */   T: () => (/* binding */ ThirdwebAuth),\n/* harmony export */   V: () => (/* binding */ VerifyOptionsSchema),\n/* harmony export */   a: () => (/* binding */ authenticateJWT),\n/* harmony export */   b: () => (/* binding */ buildJWT),\n/* harmony export */   c: () => (/* binding */ buildLoginPayload),\n/* harmony export */   d: () => (/* binding */ buildAndSignLoginPayload),\n/* harmony export */   e: () => (/* binding */ AuthenticationPayloadSchema),\n/* harmony export */   f: () => (/* binding */ AuthenticateOptionsSchema),\n/* harmony export */   g: () => (/* binding */ generateJWT),\n/* harmony export */   h: () => (/* binding */ AddressSchema),\n/* harmony export */   i: () => (/* binding */ AccountTypeSchema),\n/* harmony export */   j: () => (/* binding */ LoginPayloadDataSchema),\n/* harmony export */   k: () => (/* binding */ LoginPayloadSchema),\n/* harmony export */   l: () => (/* binding */ LoginPayloadOutputSchema),\n/* harmony export */   m: () => (/* binding */ RefreshOptionsSchema),\n/* harmony export */   n: () => (/* binding */ THIRDWEB_AUTH_ACTIVE_ACCOUNT_COOKIE),\n/* harmony export */   o: () => (/* binding */ THIRDWEB_AUTH_TOKEN_COOKIE_PREFIX),\n/* harmony export */   p: () => (/* binding */ parseJWT),\n/* harmony export */   q: () => (/* binding */ THIRDWEB_AUTH_DEFAULT_REFRESH_INTERVAL_IN_SECONDS),\n/* harmony export */   r: () => (/* binding */ refreshJWT),\n/* harmony export */   s: () => (/* binding */ signLoginPayload),\n/* harmony export */   t: () => (/* binding */ THIRDWEB_AUTH_DEFAULT_TOKEN_DURATION_IN_SECONDS),\n/* harmony export */   v: () => (/* binding */ verifyLoginPayload)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/.pnpm/zod@3.22.4/node_modules/zod/lib/index.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/lib.esm/index.js\");\n\n\n\nconst literalSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.null()\n]);\nconst JsonSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.lazy(()=>zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n        literalSchema,\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.array(JsonSchema),\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.record(JsonSchema)\n    ]), {\n    invalid_type_error: \"Provided value was not valid JSON\"\n});\nconst AddressSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().refine((arg)=>ethers__WEBPACK_IMPORTED_MODULE_1__.isAddress(arg), (out)=>{\n    return {\n        message: `${out} is not a valid address`\n    };\n});\nconst RawDateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.date().transform((i)=>{\n    return Math.floor(i.getTime() / 1000);\n});\nconst AccountTypeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"evm\");\nconst AuthenticationPayloadDataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    iss: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    sub: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    aud: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    exp: RawDateSchema,\n    nbf: RawDateSchema,\n    iat: RawDateSchema,\n    jti: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(()=>(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()),\n    ctx: JsonSchema.optional()\n});\nconst AuthenticationPayloadSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    payload: AuthenticationPayloadDataSchema,\n    signature: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nconst AuthenticateOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    domain: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    issuerAddress: AddressSchema.optional(),\n    validateTokenId: zod__WEBPACK_IMPORTED_MODULE_0__.z.function().args(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n});\nconst VerifyOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    domain: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    statement: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    chainId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    validateNonce: zod__WEBPACK_IMPORTED_MODULE_0__.z.function().args(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n});\nconst THIRDWEB_AUTH_COOKIE_PREFIX = `thirdweb_auth`;\nconst THIRDWEB_AUTH_TOKEN_COOKIE_PREFIX = `${THIRDWEB_AUTH_COOKIE_PREFIX}_token`;\nconst THIRDWEB_AUTH_ACTIVE_ACCOUNT_COOKIE = `${THIRDWEB_AUTH_COOKIE_PREFIX}_active_account`;\nconst THIRDWEB_AUTH_DEFAULT_LOGIN_PAYLOAD_DURATION_IN_SECONDS = 60 * 10;\nconst THIRDWEB_AUTH_DEFAULT_TOKEN_DURATION_IN_SECONDS = 60 * 60 * 24;\nconst THIRDWEB_AUTH_DEFAULT_REFRESH_INTERVAL_IN_SECONDS = 5;\nconst GenerateOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    domain: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    tokenId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    expirationTime: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(()=>new Date(Date.now() + 1000 * THIRDWEB_AUTH_DEFAULT_TOKEN_DURATION_IN_SECONDS)),\n    invalidBefore: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().optional(),\n    session: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n        JsonSchema,\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.function().args(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())\n    ]).optional(),\n    verifyOptions: VerifyOptionsSchema.omit({\n        domain: true\n    }).optional()\n});\nconst RefreshOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    expirationTime: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(()=>new Date(Date.now() + 1000 * THIRDWEB_AUTH_DEFAULT_TOKEN_DURATION_IN_SECONDS))\n});\nconst LoginOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    domain: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    address: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    statement: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    chainId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    nonce: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    expirationTime: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(()=>new Date(Date.now() + 1000 * THIRDWEB_AUTH_DEFAULT_LOGIN_PAYLOAD_DURATION_IN_SECONDS)),\n    invalidBefore: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(()=>new Date(Date.now() - 1000 * THIRDWEB_AUTH_DEFAULT_LOGIN_PAYLOAD_DURATION_IN_SECONDS)),\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n});\nconst LoginPayloadDataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: AccountTypeSchema,\n    domain: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    address: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    statement: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"Please ensure that the domain above matches the URL of the current website.\"),\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"1\"),\n    chain_id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    nonce: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(()=>(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()),\n    issued_at: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(new Date()).transform((d)=>d.toISOString()),\n    expiration_time: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().transform((d)=>d.toISOString()),\n    invalid_before: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(new Date()).transform((d)=>d.toISOString()),\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n});\nconst LoginPayloadSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    payload: LoginPayloadDataSchema,\n    signature: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nconst LoginPayloadOutputSchema = LoginPayloadSchema.extend({\n    payload: LoginPayloadDataSchema.extend({\n        issued_at: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        expiration_time: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        invalid_before: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    })\n});\n/**\n * Create an EIP-4361 & CAIP-122 compliant message to sign based on the login payload\n */ function createLoginMessage(payload) {\n    const typeField = \"Ethereum\";\n    const header = `${payload.domain} wants you to sign in with your ${typeField} account:`;\n    let prefix = [\n        header,\n        payload.address\n    ].join(\"\\n\");\n    prefix = [\n        prefix,\n        payload.statement\n    ].join(\"\\n\\n\");\n    if (payload.statement) {\n        prefix += \"\\n\";\n    }\n    const suffixArray = [];\n    if (payload.uri) {\n        const uriField = `URI: ${payload.uri}`;\n        suffixArray.push(uriField);\n    }\n    const versionField = `Version: ${payload.version}`;\n    suffixArray.push(versionField);\n    if (payload.chain_id) {\n        const chainField = `Chain ID: ` + payload.chain_id || 0;\n        suffixArray.push(chainField);\n    }\n    const nonceField = `Nonce: ${payload.nonce}`;\n    suffixArray.push(nonceField);\n    const issuedAtField = `Issued At: ${payload.issued_at}`;\n    suffixArray.push(issuedAtField);\n    const expiryField = `Expiration Time: ${payload.expiration_time}`;\n    suffixArray.push(expiryField);\n    if (payload.invalid_before) {\n        const invalidBeforeField = `Not Before: ${payload.invalid_before}`;\n        suffixArray.push(invalidBeforeField);\n    }\n    if (payload.resources) {\n        suffixArray.push([\n            `Resources:`,\n            ...payload.resources.map((x)=>`- ${x}`)\n        ].join(\"\\n\"));\n    }\n    const suffix = suffixArray.join(\"\\n\");\n    return [\n        prefix,\n        suffix\n    ].join(\"\\n\");\n}\nasync function buildLoginPayload(_ref) {\n    let { wallet, options } = _ref;\n    const parsedOptions = LoginOptionsSchema.parse(options);\n    let chainId = parsedOptions?.chainId;\n    if (!chainId && wallet.getChainId) {\n        try {\n            chainId = (await wallet.getChainId()).toString();\n        } catch  {\n        // ignore error\n        }\n    }\n    return LoginPayloadDataSchema.parse({\n        type: wallet.type,\n        domain: parsedOptions.domain,\n        address: parsedOptions?.address || await wallet.getAddress(),\n        statement: parsedOptions?.statement,\n        version: parsedOptions?.version,\n        uri: parsedOptions?.uri,\n        chain_id: chainId,\n        nonce: parsedOptions?.nonce,\n        expiration_time: parsedOptions.expirationTime,\n        invalid_before: parsedOptions.invalidBefore,\n        resources: parsedOptions?.resources\n    });\n}\nasync function signLoginPayload(_ref2) {\n    let { wallet, payload } = _ref2;\n    const message = createLoginMessage(payload);\n    const signature = await wallet.signMessage(message);\n    return {\n        payload,\n        signature\n    };\n}\nasync function buildAndSignLoginPayload(_ref3) {\n    let { wallet, options } = _ref3;\n    const payload = await buildLoginPayload({\n        wallet,\n        options\n    });\n    return signLoginPayload({\n        wallet,\n        payload\n    });\n}\nasync function verifyLoginPayload(_ref4) {\n    let { wallet, payload, options } = _ref4;\n    const parsedOptions = VerifyOptionsSchema.parse(options);\n    if (payload.payload.type !== wallet.type) {\n        throw new Error(`Expected chain type '${wallet.type}' does not match chain type on payload '${payload.payload.type}'`);\n    }\n    // Check that the intended domain matches the domain of the payload\n    if (payload.payload.domain !== parsedOptions.domain) {\n        throw new Error(`Expected domain '${parsedOptions.domain}' does not match domain on payload '${payload.payload.domain}'`);\n    }\n    // Check that the payload statement matches the expected statement\n    if (parsedOptions?.statement) {\n        if (payload.payload.statement !== parsedOptions.statement) {\n            throw new Error(`Expected statement '${parsedOptions.statement}' does not match statement on payload '${payload.payload.statement}'`);\n        }\n    }\n    // Check that the intended URI matches the URI of the payload\n    if (parsedOptions?.uri) {\n        if (payload.payload.uri !== parsedOptions.uri) {\n            throw new Error(`Expected URI '${parsedOptions.uri}' does not match URI on payload '${payload.payload.uri}'`);\n        }\n    }\n    // Check that the intended version matches the version of the payload\n    if (parsedOptions?.version) {\n        if (payload.payload.version !== parsedOptions.version) {\n            throw new Error(`Expected version '${parsedOptions.version}' does not match version on payload '${payload.payload.version}'`);\n        }\n    }\n    // Check that the intended chain ID matches the chain ID of the payload\n    if (parsedOptions?.chainId) {\n        if (payload.payload.chain_id !== parsedOptions.chainId) {\n            throw new Error(`Expected chain ID '${parsedOptions.chainId}' does not match chain ID on payload '${payload.payload.chain_id}'`);\n        }\n    }\n    // Check that the payload nonce is valid\n    if (parsedOptions?.validateNonce !== undefined) {\n        try {\n            await parsedOptions.validateNonce(payload.payload.nonce);\n        } catch (err) {\n            throw new Error(`Login request nonce is invalid`);\n        }\n    }\n    // Check that it isn't before the invalid before time\n    const currentTime = new Date();\n    if (currentTime < new Date(payload.payload.invalid_before)) {\n        throw new Error(`Login request is not yet valid`);\n    }\n    // Check that the payload hasn't expired\n    if (currentTime > new Date(payload.payload.expiration_time)) {\n        throw new Error(`Login request has expired`);\n    }\n    // Check that the specified resources are present on the payload\n    if (parsedOptions?.resources) {\n        const missingResources = parsedOptions.resources.filter((resource)=>!payload.payload.resources?.includes(resource));\n        if (missingResources.length > 0) {\n            throw new Error(`Login request is missing required resources: ${missingResources.join(\", \")}`);\n        }\n    }\n    // Check that the signing address is the claimed wallet address\n    const message = createLoginMessage(payload.payload);\n    const chainId = wallet.type === \"evm\" && payload.payload.chain_id ? parseInt(payload.payload.chain_id) : undefined;\n    const verified = await wallet.verifySignature(message, payload.signature, payload.payload.address, chainId);\n    if (!verified) {\n        throw new Error(`Signer address does not match payload address '${payload.payload.address.toLowerCase()}'`);\n    }\n    return payload.payload.address;\n}\nfunction isBrowser() {\n    return \"undefined\" !== \"undefined\";\n}\nfunction base64encode(data) {\n    if (isBrowser()) {\n        return window.btoa(data);\n    }\n    return Buffer.from(data).toString(\"base64\").replace(/=/g, \"\");\n}\nfunction base64decode(data) {\n    if (isBrowser()) {\n        return window.atob(data);\n    }\n    return Buffer.from(data, \"base64\").toString();\n}\n/**\n * Build JWT token based on the authentication payload\n */ async function buildJWT(_ref) {\n    let { wallet, payload } = _ref;\n    const payloadData = AuthenticationPayloadDataSchema.parse(payload);\n    const message = JSON.stringify(payloadData);\n    const signature = await wallet.signMessage(message);\n    // Header used for JWT token specifying hash algorithm\n    const header = {\n        // Specify ECDSA with SHA-256 for hashing algorithm\n        alg: \"ES256\",\n        typ: \"JWT\"\n    };\n    const encodedHeader = base64encode(JSON.stringify(header));\n    const encodedData = base64encode(JSON.stringify(payloadData));\n    const encodedSignature = base64encode(signature);\n    // Generate a JWT with base64 encoded header, payload, and signature\n    const jwt = `${encodedHeader}.${encodedData}.${encodedSignature}`;\n    return jwt;\n}\n/**\n * Generate a new JWT using a login payload\n */ async function generateJWT(_ref2) {\n    let { wallet, payload, options } = _ref2;\n    const parsedOptions = GenerateOptionsSchema.parse(options);\n    const userAddress = await verifyLoginPayload({\n        wallet,\n        payload,\n        options: {\n            domain: parsedOptions.domain,\n            ...parsedOptions.verifyOptions\n        }\n    });\n    let session = undefined;\n    if (typeof parsedOptions?.session === \"function\") {\n        const sessionTrigger = await parsedOptions.session(userAddress);\n        if (sessionTrigger) {\n            session = sessionTrigger;\n        }\n    } else {\n        session = parsedOptions?.session;\n    }\n    const adminAddress = await wallet.getAddress();\n    return buildJWT({\n        wallet,\n        payload: {\n            iss: adminAddress,\n            sub: userAddress,\n            aud: parsedOptions.domain,\n            nbf: parsedOptions?.invalidBefore || new Date(),\n            exp: parsedOptions.expirationTime,\n            iat: new Date(),\n            jti: parsedOptions?.tokenId,\n            ctx: session\n        }\n    });\n}\n/**\n * Parse data from an encoded auth JWT\n */ function parseJWT(jwt) {\n    const encodedPayload = jwt.split(\".\")[1];\n    const encodedSignature = jwt.split(\".\")[2];\n    const payload = JSON.parse(base64decode(encodedPayload));\n    const signature = base64decode(encodedSignature);\n    return {\n        payload,\n        signature\n    };\n}\n/**\n * Refresh an existing JWT\n */ async function refreshJWT(_ref3) {\n    let { wallet, jwt, options } = _ref3;\n    const { payload } = parseJWT(jwt);\n    const parsedOptions = RefreshOptionsSchema.parse(options);\n    return buildJWT({\n        wallet,\n        payload: {\n            iss: payload.iss,\n            sub: payload.sub,\n            aud: payload.aud,\n            nbf: new Date(),\n            exp: parsedOptions.expirationTime,\n            iat: new Date(),\n            ctx: payload.ctx\n        }\n    });\n}\n/**\n * Validate a JWT and extract the user's info\n */ async function authenticateJWT(_ref4) {\n    let { wallet, jwt, options } = _ref4;\n    const parsedOptions = AuthenticateOptionsSchema.parse(options);\n    const { payload, signature } = parseJWT(jwt);\n    // Check that the payload unique ID is valid\n    if (parsedOptions?.validateTokenId !== undefined) {\n        try {\n            await parsedOptions.validateTokenId(payload.jti);\n        } catch (err) {\n            throw new Error(`Token ID is invalid`);\n        }\n    }\n    // Check that the token audience matches the domain\n    if (payload.aud !== parsedOptions.domain) {\n        throw new Error(`Expected token to be for the domain '${parsedOptions.domain}', but found token with domain '${payload.aud}'`);\n    }\n    // Check that the token is past the invalid before time\n    const currentTime = Math.floor(new Date().getTime() / 1000);\n    if (currentTime < payload.nbf) {\n        throw new Error(`This token is invalid before epoch time '${payload.nbf}', current epoch time is '${currentTime}'`);\n    }\n    // Check that the token hasn't expired\n    if (currentTime > payload.exp) {\n        throw new Error(`This token expired at epoch time '${payload.exp}', current epoch time is '${currentTime}'`);\n    }\n    // Check that the connected wallet matches the token issuer\n    const issuerAddress = parsedOptions.issuerAddress ? parsedOptions.issuerAddress : await wallet.getAddress();\n    if (issuerAddress.toLowerCase() !== payload.iss.toLowerCase()) {\n        throw new Error(`The expected issuer address '${issuerAddress}' did not match the token issuer address '${payload.iss}'`);\n    }\n    let chainId = undefined;\n    if (wallet.getChainId) {\n        try {\n            chainId = await wallet.getChainId();\n        } catch  {\n        // ignore error\n        }\n    }\n    const verified = await wallet.verifySignature(JSON.stringify(payload), signature, issuerAddress, chainId);\n    if (!verified) {\n        throw new Error(`The expected signer address '${issuerAddress}' did not sign the token`);\n    }\n    return {\n        address: payload.sub,\n        session: payload.ctx\n    };\n}\nclass ThirdwebAuth {\n    constructor(wallet, domain){\n        this.wallet = wallet;\n        this.domain = domain;\n    }\n    updateWallet(wallet) {\n        this.wallet = wallet;\n    }\n    async payload(options) {\n        return buildLoginPayload({\n            wallet: this.wallet,\n            options: this.formatOptions(options)\n        });\n    }\n    async loginWithPayload(payload) {\n        return signLoginPayload({\n            wallet: this.wallet,\n            payload\n        });\n    }\n    async login(options) {\n        return buildAndSignLoginPayload({\n            wallet: this.wallet,\n            options: this.formatOptions(options)\n        });\n    }\n    async verify(payload, options) {\n        return verifyLoginPayload({\n            wallet: this.wallet,\n            payload,\n            options: this.formatOptions(options)\n        });\n    }\n    async generate(payload, options) {\n        return generateJWT({\n            wallet: this.wallet,\n            payload,\n            options: this.formatOptions(options)\n        });\n    }\n    async refresh(jwt, expirationTime) {\n        return refreshJWT({\n            wallet: this.wallet,\n            jwt,\n            options: {\n                expirationTime\n            }\n        });\n    }\n    async authenticate(jwt, options) {\n        return authenticateJWT({\n            wallet: this.wallet,\n            jwt,\n            options: this.formatOptions(options)\n        });\n    }\n    parseToken(jwt) {\n        return parseJWT(jwt);\n    }\n    formatOptions(options) {\n        return options ? {\n            ...options,\n            domain: options?.domain || this.domain\n        } : {\n            domain: this.domain\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@thirdweb-dev+auth@4.1.24_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-sign_ho6wio3g7xy5fyf6q6ypqhnuki/node_modules/@thirdweb-dev/auth/dist/auth-3e6bcaed.esm.js\n");

/***/ })

};
;