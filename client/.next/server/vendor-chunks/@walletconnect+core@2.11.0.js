"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect+core@2.11.0";
exports.ids = ["vendor-chunks/@walletconnect+core@2.11.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+core@2.11.0/node_modules/@walletconnect/core/dist/index.es.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+core@2.11.0/node_modules/@walletconnect/core/dist/index.es.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_CONTEXT: () => (/* binding */ Q),\n/* harmony export */   CORE_DEFAULT: () => (/* binding */ Qe),\n/* harmony export */   CORE_PROTOCOL: () => (/* binding */ le),\n/* harmony export */   CORE_STORAGE_OPTIONS: () => (/* binding */ Ze),\n/* harmony export */   CORE_STORAGE_PREFIX: () => (/* binding */ O),\n/* harmony export */   CORE_VERSION: () => (/* binding */ We),\n/* harmony export */   CRYPTO_CLIENT_SEED: () => (/* binding */ de),\n/* harmony export */   CRYPTO_CONTEXT: () => (/* binding */ et),\n/* harmony export */   CRYPTO_JWT_TTL: () => (/* binding */ tt),\n/* harmony export */   Core: () => (/* binding */ Mr),\n/* harmony export */   Crypto: () => (/* binding */ xt),\n/* harmony export */   ECHO_CONTEXT: () => (/* binding */ St),\n/* harmony export */   ECHO_URL: () => (/* binding */ Tt),\n/* harmony export */   EXPIRER_CONTEXT: () => (/* binding */ Ct),\n/* harmony export */   EXPIRER_DEFAULT_TTL: () => (/* binding */ wr),\n/* harmony export */   EXPIRER_EVENTS: () => (/* binding */ v),\n/* harmony export */   EXPIRER_STORAGE_VERSION: () => (/* binding */ Rt),\n/* harmony export */   EchoClient: () => (/* binding */ Gt),\n/* harmony export */   Expirer: () => (/* binding */ jt),\n/* harmony export */   HISTORY_CONTEXT: () => (/* binding */ vt),\n/* harmony export */   HISTORY_EVENTS: () => (/* binding */ R),\n/* harmony export */   HISTORY_STORAGE_VERSION: () => (/* binding */ It),\n/* harmony export */   JsonRpcHistory: () => (/* binding */ Vt),\n/* harmony export */   KEYCHAIN_CONTEXT: () => (/* binding */ it),\n/* harmony export */   KEYCHAIN_STORAGE_VERSION: () => (/* binding */ st),\n/* harmony export */   KeyChain: () => (/* binding */ Pt),\n/* harmony export */   MESSAGES_CONTEXT: () => (/* binding */ rt),\n/* harmony export */   MESSAGES_STORAGE_VERSION: () => (/* binding */ nt),\n/* harmony export */   MessageTracker: () => (/* binding */ Ot),\n/* harmony export */   PAIRING_CONTEXT: () => (/* binding */ Et),\n/* harmony export */   PAIRING_DEFAULT_TTL: () => (/* binding */ Er),\n/* harmony export */   PAIRING_EVENTS: () => (/* binding */ V),\n/* harmony export */   PAIRING_RPC_OPTS: () => (/* binding */ F),\n/* harmony export */   PAIRING_STORAGE_VERSION: () => (/* binding */ wt),\n/* harmony export */   PENDING_SUB_RESOLUTION_TIMEOUT: () => (/* binding */ ft),\n/* harmony export */   PUBLISHER_CONTEXT: () => (/* binding */ at),\n/* harmony export */   PUBLISHER_DEFAULT_TTL: () => (/* binding */ ot),\n/* harmony export */   Pairing: () => (/* binding */ Bt),\n/* harmony export */   RELAYER_CONTEXT: () => (/* binding */ ut),\n/* harmony export */   RELAYER_DEFAULT_LOGGER: () => (/* binding */ ct),\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: () => (/* binding */ ht),\n/* harmony export */   RELAYER_DEFAULT_RELAY_URL: () => (/* binding */ ge),\n/* harmony export */   RELAYER_EVENTS: () => (/* binding */ D),\n/* harmony export */   RELAYER_FAILOVER_RELAY_URL: () => (/* binding */ pe),\n/* harmony export */   RELAYER_PROVIDER_EVENTS: () => (/* binding */ P),\n/* harmony export */   RELAYER_RECONNECT_TIMEOUT: () => (/* binding */ dt),\n/* harmony export */   RELAYER_SDK_VERSION: () => (/* binding */ gt),\n/* harmony export */   RELAYER_STORAGE_OPTIONS: () => (/* binding */ br),\n/* harmony export */   RELAYER_SUBSCRIBER_SUFFIX: () => (/* binding */ lt),\n/* harmony export */   RELAYER_TRANSPORT_CUTOFF: () => (/* binding */ pt),\n/* harmony export */   Relayer: () => (/* binding */ Ft),\n/* harmony export */   STORE_STORAGE_VERSION: () => (/* binding */ Dt),\n/* harmony export */   SUBSCRIBER_CONTEXT: () => (/* binding */ mt),\n/* harmony export */   SUBSCRIBER_DEFAULT_TTL: () => (/* binding */ fr),\n/* harmony export */   SUBSCRIBER_EVENTS: () => (/* binding */ w),\n/* harmony export */   SUBSCRIBER_STORAGE_VERSION: () => (/* binding */ bt),\n/* harmony export */   Store: () => (/* binding */ Kt),\n/* harmony export */   Subscriber: () => (/* binding */ Nt),\n/* harmony export */   TRUSTED_VERIFY_URLS: () => (/* binding */ _t),\n/* harmony export */   VERIFY_CONTEXT: () => (/* binding */ Z),\n/* harmony export */   VERIFY_FALLBACK_SERVER: () => (/* binding */ ee),\n/* harmony export */   VERIFY_SERVER: () => (/* binding */ $),\n/* harmony export */   Verify: () => (/* binding */ qt),\n/* harmony export */   WALLETCONNECT_CLIENT_ID: () => (/* binding */ yt),\n/* harmony export */   \"default\": () => (/* binding */ te)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/keyvaluestorage */ \"(ssr)/./node_modules/.pnpm/@walletconnect+keyvaluestorage@1.1.1/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\");\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/heartbeat */ \"(ssr)/./node_modules/.pnpm/@walletconnect+heartbeat@1.2.1/node_modules/@walletconnect/heartbeat/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/.pnpm/@walletconnect+logger@2.0.1/node_modules/@walletconnect/logger/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @walletconnect/types */ \"(ssr)/./node_modules/.pnpm/@walletconnect+types@2.11.0/node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/.pnpm/@walletconnect+safe-json@1.0.2/node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(ssr)/./node_modules/.pnpm/@walletconnect+relay-auth@1.0.4/node_modules/@walletconnect/relay-auth/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+utils@2.11.0/node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/.pnpm/uint8arrays@3.1.1/node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(ssr)/./node_modules/.pnpm/@walletconnect+jsonrpc-provider@1.0.13/node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/.pnpm/@walletconnect+jsonrpc-utils@1.0.8/node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/jsonrpc-ws-connection */ \"(ssr)/./node_modules/.pnpm/@walletconnect+jsonrpc-ws-connection@1.0.14/node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.isequal */ \"(ssr)/./node_modules/.pnpm/lodash.isequal@4.5.0/node_modules/lodash.isequal/index.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! isomorphic-unfetch */ \"(ssr)/./node_modules/.pnpm/isomorphic-unfetch@3.1.0/node_modules/isomorphic-unfetch/index.js\");\n/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Hi(r, e) {\n    if (r.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), i = 0; i < t.length; i++)t[i] = 255;\n    for(var s = 0; s < r.length; s++){\n        var n = r.charAt(s), o = n.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n        t[o] = s;\n    }\n    var a = r.length, h = r.charAt(0), l = Math.log(a) / Math.log(256), d = Math.log(256) / Math.log(a);\n    function p(u) {\n        if (u instanceof Uint8Array || (ArrayBuffer.isView(u) ? u = new Uint8Array(u.buffer, u.byteOffset, u.byteLength) : Array.isArray(u) && (u = Uint8Array.from(u))), !(u instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (u.length === 0) return \"\";\n        for(var m = 0, z = 0, I = 0, _ = u.length; I !== _ && u[I] === 0;)I++, m++;\n        for(var S = (_ - I) * d + 1 >>> 0, f = new Uint8Array(S); I !== _;){\n            for(var T = u[I], A = 0, C = S - 1; (T !== 0 || A < z) && C !== -1; C--, A++)T += 256 * f[C] >>> 0, f[C] = T % a >>> 0, T = T / a >>> 0;\n            if (T !== 0) throw new Error(\"Non-zero carry\");\n            z = A, I++;\n        }\n        for(var x = S - z; x !== S && f[x] === 0;)x++;\n        for(var q = h.repeat(m); x < S; ++x)q += r.charAt(f[x]);\n        return q;\n    }\n    function y(u) {\n        if (typeof u != \"string\") throw new TypeError(\"Expected String\");\n        if (u.length === 0) return new Uint8Array;\n        var m = 0;\n        if (u[m] !== \" \") {\n            for(var z = 0, I = 0; u[m] === h;)z++, m++;\n            for(var _ = (u.length - m) * l + 1 >>> 0, S = new Uint8Array(_); u[m];){\n                var f = t[u.charCodeAt(m)];\n                if (f === 255) return;\n                for(var T = 0, A = _ - 1; (f !== 0 || T < I) && A !== -1; A--, T++)f += a * S[A] >>> 0, S[A] = f % 256 >>> 0, f = f / 256 >>> 0;\n                if (f !== 0) throw new Error(\"Non-zero carry\");\n                I = T, m++;\n            }\n            if (u[m] !== \" \") {\n                for(var C = _ - I; C !== _ && S[C] === 0;)C++;\n                for(var x = new Uint8Array(z + (_ - C)), q = z; C !== _;)x[q++] = S[C++];\n                return x;\n            }\n        }\n    }\n    function M(u) {\n        var m = y(u);\n        if (m) return m;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: p,\n        decodeUnsafe: y,\n        decode: M\n    };\n}\nvar Ji = Hi, Xi = Ji;\nconst Ne = (r)=>{\n    if (r instanceof Uint8Array && r.constructor.name === \"Uint8Array\") return r;\n    if (r instanceof ArrayBuffer) return new Uint8Array(r);\n    if (ArrayBuffer.isView(r)) return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, Wi = (r)=>new TextEncoder().encode(r), Qi = (r)=>new TextDecoder().decode(r);\nclass Zi {\n    constructor(e, t, i){\n        this.name = e, this.prefix = t, this.baseEncode = i;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass es {\n    constructor(e, t, i){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return Ue(this, e);\n    }\n}\nclass ts {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return Ue(this, e);\n    }\n    decode(e) {\n        const t = e[0], i = this.decoders[t];\n        if (i) return i.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst Ue = (r, e)=>new ts({\n        ...r.decoders || {\n            [r.prefix]: r\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass is {\n    constructor(e, t, i, s){\n        this.name = e, this.prefix = t, this.baseEncode = i, this.baseDecode = s, this.encoder = new Zi(e, t, i), this.decoder = new es(e, t, s);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n}\nconst W = ({ name: r, prefix: e, encode: t, decode: i })=>new is(r, e, t, i), B = ({ prefix: r, name: e, alphabet: t })=>{\n    const { encode: i, decode: s } = Xi(t, e);\n    return W({\n        prefix: r,\n        name: e,\n        encode: i,\n        decode: (n)=>Ne(s(n))\n    });\n}, ss = (r, e, t, i)=>{\n    const s = {};\n    for(let d = 0; d < e.length; ++d)s[e[d]] = d;\n    let n = r.length;\n    for(; r[n - 1] === \"=\";)--n;\n    const o = new Uint8Array(n * t / 8 | 0);\n    let a = 0, h = 0, l = 0;\n    for(let d = 0; d < n; ++d){\n        const p = s[r[d]];\n        if (p === void 0) throw new SyntaxError(`Non-${i} character`);\n        h = h << t | p, a += t, a >= 8 && (a -= 8, o[l++] = 255 & h >> a);\n    }\n    if (a >= t || 255 & h << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, rs = (r, e, t)=>{\n    const i = e[e.length - 1] === \"=\", s = (1 << t) - 1;\n    let n = \"\", o = 0, a = 0;\n    for(let h = 0; h < r.length; ++h)for(a = a << 8 | r[h], o += 8; o > t;)o -= t, n += e[s & a >> o];\n    if (o && (n += e[s & a << t - o]), i) for(; n.length * t & 7;)n += \"=\";\n    return n;\n}, g = ({ name: r, prefix: e, bitsPerChar: t, alphabet: i })=>W({\n        prefix: e,\n        name: r,\n        encode (s) {\n            return rs(s, i, t);\n        },\n        decode (s) {\n            return ss(s, i, t, r);\n        }\n    }), ns = W({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (r)=>Qi(r),\n    decode: (r)=>Wi(r)\n});\nvar os = Object.freeze({\n    __proto__: null,\n    identity: ns\n});\nconst as = g({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar hs = Object.freeze({\n    __proto__: null,\n    base2: as\n});\nconst cs = g({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar us = Object.freeze({\n    __proto__: null,\n    base8: cs\n});\nconst ls = B({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar ds = Object.freeze({\n    __proto__: null,\n    base10: ls\n});\nconst gs = g({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), ps = g({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar Ds = Object.freeze({\n    __proto__: null,\n    base16: gs,\n    base16upper: ps\n});\nconst ys = g({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), ms = g({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), bs = g({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), fs = g({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), Es = g({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), ws = g({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), vs = g({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), Is = g({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), Cs = g({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar Rs = Object.freeze({\n    __proto__: null,\n    base32: ys,\n    base32upper: ms,\n    base32pad: bs,\n    base32padupper: fs,\n    base32hex: Es,\n    base32hexupper: ws,\n    base32hexpad: vs,\n    base32hexpadupper: Is,\n    base32z: Cs\n});\nconst _s = B({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), Ss = B({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar Ts = Object.freeze({\n    __proto__: null,\n    base36: _s,\n    base36upper: Ss\n});\nconst Ps = B({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), xs = B({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar Os = Object.freeze({\n    __proto__: null,\n    base58btc: Ps,\n    base58flickr: xs\n});\nconst As = g({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), zs = g({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), Ns = g({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), Us = g({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Ls = Object.freeze({\n    __proto__: null,\n    base64: As,\n    base64pad: zs,\n    base64url: Ns,\n    base64urlpad: Us\n});\nconst Le = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Fs = Le.reduce((r, e, t)=>(r[t] = e, r), []), $s = Le.reduce((r, e, t)=>(r[e.codePointAt(0)] = t, r), []);\nfunction Ms(r) {\n    return r.reduce((e, t)=>(e += Fs[t], e), \"\");\n}\nfunction ks(r) {\n    const e = [];\n    for (const t of r){\n        const i = $s[t.codePointAt(0)];\n        if (i === void 0) throw new Error(`Non-base256emoji character: ${t}`);\n        e.push(i);\n    }\n    return new Uint8Array(e);\n}\nconst Ks = W({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Ms,\n    decode: ks\n});\nvar Bs = Object.freeze({\n    __proto__: null,\n    base256emoji: Ks\n}), Vs = $e, Fe = 128, js = 127, qs = ~js, Gs = Math.pow(2, 31);\nfunction $e(r, e, t) {\n    e = e || [], t = t || 0;\n    for(var i = t; r >= Gs;)e[t++] = r & 255 | Fe, r /= 128;\n    for(; r & qs;)e[t++] = r & 255 | Fe, r >>>= 7;\n    return e[t] = r | 0, $e.bytes = t - i + 1, e;\n}\nvar Ys = he, Hs = 128, Me = 127;\nfunction he(r, i) {\n    var t = 0, i = i || 0, s = 0, n = i, o, a = r.length;\n    do {\n        if (n >= a) throw he.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = r[n++], t += s < 28 ? (o & Me) << s : (o & Me) * Math.pow(2, s), s += 7;\n    }while (o >= Hs);\n    return he.bytes = n - i, t;\n}\nvar Js = Math.pow(2, 7), Xs = Math.pow(2, 14), Ws = Math.pow(2, 21), Qs = Math.pow(2, 28), Zs = Math.pow(2, 35), er = Math.pow(2, 42), tr = Math.pow(2, 49), ir = Math.pow(2, 56), sr = Math.pow(2, 63), rr = function(r) {\n    return r < Js ? 1 : r < Xs ? 2 : r < Ws ? 3 : r < Qs ? 4 : r < Zs ? 5 : r < er ? 6 : r < tr ? 7 : r < ir ? 8 : r < sr ? 9 : 10;\n}, nr = {\n    encode: Vs,\n    decode: Ys,\n    encodingLength: rr\n}, ke = nr;\nconst Ke = (r, e, t = 0)=>(ke.encode(r, e, t), e), Be = (r)=>ke.encodingLength(r), ce = (r, e)=>{\n    const t = e.byteLength, i = Be(r), s = i + Be(t), n = new Uint8Array(s + t);\n    return Ke(r, n, 0), Ke(t, n, i), n.set(e, s), new or(r, t, e, n);\n};\nclass or {\n    constructor(e, t, i, s){\n        this.code = e, this.size = t, this.digest = i, this.bytes = s;\n    }\n}\nconst Ve = ({ name: r, code: e, encode: t })=>new ar(r, e, t);\nclass ar {\n    constructor(e, t, i){\n        this.name = e, this.code = t, this.encode = i;\n    }\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? ce(this.code, t) : t.then((i)=>ce(this.code, i));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n}\nconst je = (r)=>async (e)=>new Uint8Array(await crypto.subtle.digest(r, e)), hr = Ve({\n    name: \"sha2-256\",\n    code: 18,\n    encode: je(\"SHA-256\")\n}), cr = Ve({\n    name: \"sha2-512\",\n    code: 19,\n    encode: je(\"SHA-512\")\n});\nvar ur = Object.freeze({\n    __proto__: null,\n    sha256: hr,\n    sha512: cr\n});\nconst qe = 0, lr = \"identity\", Ge = Ne, dr = (r)=>ce(qe, Ge(r)), gr = {\n    code: qe,\n    name: lr,\n    encode: Ge,\n    digest: dr\n};\nvar pr = Object.freeze({\n    __proto__: null,\n    identity: gr\n});\nnew TextEncoder, new TextDecoder;\nconst Ye = {\n    ...os,\n    ...hs,\n    ...us,\n    ...ds,\n    ...Ds,\n    ...Rs,\n    ...Ts,\n    ...Os,\n    ...Ls,\n    ...Bs\n};\n({\n    ...ur,\n    ...pr\n});\nfunction He(r) {\n    return globalThis.Buffer != null ? new Uint8Array(r.buffer, r.byteOffset, r.byteLength) : r;\n}\nfunction Dr(r = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? He(globalThis.Buffer.allocUnsafe(r)) : new Uint8Array(r);\n}\nfunction Je(r, e, t, i) {\n    return {\n        name: r,\n        prefix: e,\n        encoder: {\n            name: r,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: i\n        }\n    };\n}\nconst Xe = Je(\"utf8\", \"u\", (r)=>\"u\" + new TextDecoder(\"utf8\").decode(r), (r)=>new TextEncoder().encode(r.substring(1))), ue = Je(\"ascii\", \"a\", (r)=>{\n    let e = \"a\";\n    for(let t = 0; t < r.length; t++)e += String.fromCharCode(r[t]);\n    return e;\n}, (r)=>{\n    r = r.substring(1);\n    const e = Dr(r.length);\n    for(let t = 0; t < r.length; t++)e[t] = r.charCodeAt(t);\n    return e;\n}), yr = {\n    utf8: Xe,\n    \"utf-8\": Xe,\n    hex: Ye.base16,\n    latin1: ue,\n    ascii: ue,\n    binary: ue,\n    ...Ye\n};\nfunction mr(r, e = \"utf8\") {\n    const t = yr[e];\n    if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? He(globalThis.Buffer.from(r, \"utf-8\")) : t.decoder.decode(`${t.prefix}${r}`);\n}\nconst le = \"wc\", We = 2, Q = \"core\", O = `${le}@2:${Q}:`, Qe = {\n    name: Q,\n    logger: \"error\"\n}, Ze = {\n    database: \":memory:\"\n}, et = \"crypto\", de = \"client_ed25519_seed\", tt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY, it = \"keychain\", st = \"0.3\", rt = \"messages\", nt = \"0.3\", ot = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.SIX_HOURS, at = \"publisher\", ht = \"irn\", ct = \"error\", ge = \"wss://relay.walletconnect.com\", pe = \"wss://relay.walletconnect.org\", ut = \"relayer\", D = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, lt = \"_subscription\", P = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, dt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND, br = {\n    database: \":memory:\"\n}, gt = \"2.11.0\", pt = 1e4, Dt = \"0.3\", yt = \"WALLETCONNECT_CLIENT_ID\", w = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, fr = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS, mt = \"subscription\", bt = \"0.3\", ft = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_SECONDS * 1e3, Et = \"pairing\", wt = \"0.3\", Er = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS, F = {\n    wc_pairingDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, V = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, R = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, vt = \"history\", It = \"0.3\", Ct = \"expirer\", v = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Rt = \"0.3\", wr = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY, Z = \"verify-api\", $ = \"https://verify.walletconnect.com\", ee = \"https://verify.walletconnect.org\", _t = [\n    $,\n    ee\n], St = \"echo\", Tt = \"https://echo.walletconnect.com\";\nclass Pt {\n    constructor(e, t){\n        this.core = e, this.logger = t, this.keychain = new Map, this.name = it, this.version = st, this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            if (!this.initialized) {\n                const i = await this.getKeyChain();\n                typeof i < \"u\" && (this.keychain = i), this.initialized = !0;\n            }\n        }, this.has = (i)=>(this.isInitialized(), this.keychain.has(i)), this.set = async (i, s)=>{\n            this.isInitialized(), this.keychain.set(i, s), await this.persist();\n        }, this.get = (i)=>{\n            this.isInitialized();\n            const s = this.keychain.get(i);\n            if (typeof s > \"u\") {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${i}`);\n                throw new Error(n);\n            }\n            return s;\n        }, this.del = async (i)=>{\n            this.isInitialized(), this.keychain.delete(i), await this.persist();\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.mapToObj)(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass xt {\n    constructor(e, t, i){\n        this.core = e, this.logger = t, this.name = et, this.initialized = !1, this.init = async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }, this.hasKeys = (s)=>(this.isInitialized(), this.keychain.has(s)), this.getClientId = async ()=>{\n            this.isInitialized();\n            const s = await this.getClientSeed(), n = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.generateKeyPair(s);\n            return _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.encodeIss(n.publicKey);\n        }, this.generateKeyPair = ()=>{\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateKeyPair)();\n            return this.setPrivateKey(s.publicKey, s.privateKey);\n        }, this.signJWT = async (s)=>{\n            this.isInitialized();\n            const n = await this.getClientSeed(), o = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.generateKeyPair(n), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), h = tt;\n            return await _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.signJWT(a, s, h, o);\n        }, this.generateSharedKey = (s, n, o)=>{\n            this.isInitialized();\n            const a = this.getPrivateKey(s), h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deriveSymKey)(a, n);\n            return this.setSymKey(h, o);\n        }, this.setSymKey = async (s, n)=>{\n            this.isInitialized();\n            const o = n || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashKey)(s);\n            return await this.keychain.set(o, s), o;\n        }, this.deleteKeyPair = async (s)=>{\n            this.isInitialized(), await this.keychain.del(s);\n        }, this.deleteSymKey = async (s)=>{\n            this.isInitialized(), await this.keychain.del(s);\n        }, this.encode = async (s, n, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.validateEncoding)(o), h = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__.safeJsonStringify)(n);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeOneEnvelope)(a)) {\n                const y = a.senderPublicKey, M = a.receiverPublicKey;\n                s = await this.generateSharedKey(y, M);\n            }\n            const l = this.getSymKey(s), { type: d, senderPublicKey: p } = a;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.encrypt)({\n                type: d,\n                symKey: l,\n                message: h,\n                senderPublicKey: p\n            });\n        }, this.decode = async (s, n, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.validateDecoding)(n, o);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeOneEnvelope)(a)) {\n                const h = a.receiverPublicKey, l = a.senderPublicKey;\n                s = await this.generateSharedKey(h, l);\n            }\n            try {\n                const h = this.getSymKey(s), l = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decrypt)({\n                    symKey: h,\n                    encoded: n\n                });\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__.safeJsonParse)(l);\n            } catch (h) {\n                this.logger.error(`Failed to decode message from topic: '${s}', clientId: '${await this.getClientId()}'`), this.logger.error(h);\n            }\n        }, this.getPayloadType = (s)=>{\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deserialize)(s);\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decodeTypeByte)(n.type);\n        }, this.getPayloadSenderPublicKey = (s)=>{\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deserialize)(s);\n            return n.senderPublicKey ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_6__.toString)(n.senderPublicKey, _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.BASE16) : void 0;\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.keychain = i || new Pt(this.core, this.logger);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(de);\n        } catch  {\n            e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), await this.keychain.set(de, e);\n        }\n        return mr(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass Ot extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IMessageTracker {\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, this.messages = new Map, this.name = rt, this.version = nt, this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const i = await this.getRelayerMessages();\n                    typeof i < \"u\" && (this.messages = i), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (i) {\n                    this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }, this.set = async (i, s)=>{\n            this.isInitialized();\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(s);\n            let o = this.messages.get(i);\n            return typeof o > \"u\" && (o = {}), typeof o[n] < \"u\" || (o[n] = s, this.messages.set(i, o), await this.persist()), n;\n        }, this.get = (i)=>{\n            this.isInitialized();\n            let s = this.messages.get(i);\n            return typeof s > \"u\" && (s = {}), s;\n        }, this.has = (i, s)=>{\n            this.isInitialized();\n            const n = this.get(i), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(s);\n            return typeof n[o] < \"u\";\n        }, this.del = async (i)=>{\n            this.isInitialized(), this.messages.delete(i), await this.persist();\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e, this.name), this.core = t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.mapToObj)(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass vr extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IPublisher {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = at, this.queue = new Map, this.publishTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.TEN_SECONDS), this.needsTransportRestart = !1, this.publish = async (i, s, n)=>{\n            var o;\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: i,\n                    message: s,\n                    opts: n\n                }\n            });\n            try {\n                const a = n?.ttl || ot, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(n), l = n?.prompt || !1, d = n?.tag || 0, p = n?.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString(), y = {\n                    topic: i,\n                    message: s,\n                    opts: {\n                        ttl: a,\n                        relay: h,\n                        prompt: l,\n                        tag: d,\n                        id: p\n                    }\n                }, M = setTimeout(()=>this.queue.set(p, y), this.publishTimeout);\n                try {\n                    await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.rpcPublish(i, s, a, h, l, d, p), this.publishTimeout, \"Failed to publish payload, please try again.\"), this.removeRequestFromQueue(p), this.relayer.events.emit(D.publish, y);\n                } catch (u) {\n                    if (this.logger.debug(\"Publishing Payload stalled\"), this.needsTransportRestart = !0, (o = n?.internal) != null && o.throwOnFailedPublish) throw this.removeRequestFromQueue(p), u;\n                    return;\n                } finally{\n                    clearTimeout(M);\n                }\n                this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        topic: i,\n                        message: s,\n                        opts: n\n                    }\n                });\n            } catch (a) {\n                throw this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(a), a;\n            }\n        }, this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.registerEventListeners();\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    rpcPublish(e, t, i, s, n, o, a) {\n        var h, l, d, p;\n        const y = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(s.protocol).publish,\n            params: {\n                topic: e,\n                message: t,\n                ttl: i,\n                prompt: n,\n                tag: o\n            },\n            id: a\n        };\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)((h = y.params) == null ? void 0 : h.prompt) && ((l = y.params) == null || delete l.prompt), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)((d = y.params) == null ? void 0 : d.tag) && ((p = y.params) == null || delete p.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: y\n        }), this.relayer.request(y);\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e)=>{\n            const { topic: t, message: i, opts: s } = e;\n            await this.publish(t, i, s);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(D.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(D.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n}\nclass Ir {\n    constructor(){\n        this.map = new Map, this.set = (e, t)=>{\n            const i = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...i,\n                t\n            ]);\n        }, this.get = (e)=>this.map.get(e) || [], this.exists = (e, t)=>this.get(e).includes(t), this.delete = (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const i = this.get(e);\n            if (!this.exists(e, t)) return;\n            const s = i.filter((n)=>n !== t);\n            if (!s.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, s);\n        }, this.clear = ()=>{\n            this.map.clear();\n        };\n    }\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n}\nvar Cr = Object.defineProperty, Rr = Object.defineProperties, _r = Object.getOwnPropertyDescriptors, At = Object.getOwnPropertySymbols, Sr = Object.prototype.hasOwnProperty, Tr = Object.prototype.propertyIsEnumerable, zt = (r, e, t)=>e in r ? Cr(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, j = (r, e)=>{\n    for(var t in e || (e = {}))Sr.call(e, t) && zt(r, t, e[t]);\n    if (At) for (var t of At(e))Tr.call(e, t) && zt(r, t, e[t]);\n    return r;\n}, De = (r, e)=>Rr(r, _r(e));\nclass Nt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.ISubscriber {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.subscriptions = new Map, this.topicMap = new Ir, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = mt, this.version = bt, this.pending = new Map, this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = O, this.subscribeTimeout = 1e4, this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId());\n        }, this.subscribe = async (i, s)=>{\n            await this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: i,\n                    opts: s\n                }\n            });\n            try {\n                const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(s), o = {\n                    topic: i,\n                    relay: n\n                };\n                this.pending.set(i, o);\n                const a = await this.rpcSubscribe(i, n);\n                return this.onSubscribe(a, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: i,\n                        opts: s\n                    }\n                }), a;\n            } catch (n) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n            }\n        }, this.unsubscribe = async (i, s)=>{\n            await this.restartToComplete(), this.isInitialized(), typeof s?.id < \"u\" ? await this.unsubscribeById(i, s.id, s) : await this.unsubscribeByTopic(i, s);\n        }, this.isSubscribed = async (i)=>this.topics.includes(i) ? !0 : await new Promise((s, n)=>{\n                const o = new _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.Watch;\n                o.start(this.pendingSubscriptionWatchLabel);\n                const a = setInterval(()=>{\n                    !this.pending.has(i) && this.topics.includes(i) && (clearInterval(a), o.stop(this.pendingSubscriptionWatchLabel), s(!0)), o.elapsed(this.pendingSubscriptionWatchLabel) >= ft && (clearInterval(a), o.stop(this.pendingSubscriptionWatchLabel), n(new Error(\"Subscription resolution timeout\")));\n                }, this.pollingInterval);\n            }).catch(()=>!1), this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.restart = async ()=>{\n            this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;\n        }, this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.clientId = \"\";\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    hasSubscription(e, t) {\n        let i = !1;\n        try {\n            i = this.getSubscription(e).topic === t;\n        } catch  {}\n        return i;\n    }\n    onEnable() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const i = this.topicMap.get(e);\n        await Promise.all(i.map(async (s)=>await this.unsubscribeById(e, s, t)));\n    }\n    async unsubscribeById(e, t, i) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: i\n            }\n        });\n        try {\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(i);\n            await this.rpcUnsubscribe(e, t, s);\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n            await this.onUnsubscribe(e, t, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: i\n                }\n            });\n        } catch (s) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(s), s;\n        }\n    }\n    async rpcSubscribe(e, t) {\n        const i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        });\n        try {\n            await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.relayer.request(i), this.subscribeTimeout);\n        } catch  {\n            this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(D.connection_stalled);\n        }\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(e + this.clientId);\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((s)=>s.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        });\n        try {\n            return await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.relayer.request(i), this.subscribeTimeout);\n        } catch  {\n            this.logger.debug(\"Outgoing Relay Payload stalled\"), this.relayer.events.emit(D.connection_stalled);\n        }\n    }\n    rpcUnsubscribe(e, t, i) {\n        const s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(i.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        }), this.relayer.request(s);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, De(j({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, j({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, i) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.subscriptions.has(e) || (this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t));\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, j({}, t)), this.topicMap.set(t.topic, e), this.events.emit(w.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(i);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const i = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(i.topic, e), this.events.emit(w.deleted, De(j({}, i), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit(w.sync);\n    }\n    async reset() {\n        if (this.cached.length) {\n            const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let t = 0; t < e; t++){\n                const i = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchSubscribe(i);\n            }\n        }\n        this.events.emit(w.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        if (!e.length) return;\n        const t = await this.rpcBatchSubscribe(e);\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidArray)(t) && this.onBatchSubscribe(t.map((i, s)=>De(j({}, e[s]), {\n                id: i\n            })));\n    }\n    async onConnect() {\n        this.restartInProgress || (await this.restart(), this.onEnable());\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    async checkPending() {\n        if (!this.initialized || this.relayer.transportExplicitlyClosed) return;\n        const e = [];\n        this.pending.forEach((t)=>{\n            e.push(t);\n        }), await this.batchSubscribe(e);\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, async ()=>{\n            await this.checkPending();\n        }), this.relayer.on(D.connect, async ()=>{\n            await this.onConnect();\n        }), this.relayer.on(D.disconnect, ()=>{\n            this.onDisconnect();\n        }), this.events.on(w.created, async (e)=>{\n            const t = w.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        }), this.events.on(w.deleted, async (e)=>{\n            const t = w.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete() {\n        this.restartInProgress && await new Promise((e)=>{\n            const t = setInterval(()=>{\n                this.restartInProgress || (clearInterval(t), e());\n            }, this.pollingInterval);\n        });\n    }\n}\nvar Pr = Object.defineProperty, Ut = Object.getOwnPropertySymbols, xr = Object.prototype.hasOwnProperty, Or = Object.prototype.propertyIsEnumerable, Lt = (r, e, t)=>e in r ? Pr(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Ar = (r, e)=>{\n    for(var t in e || (e = {}))xr.call(e, t) && Lt(r, t, e[t]);\n    if (Ut) for (var t of Ut(e))Or.call(e, t) && Lt(r, t, e[t]);\n    return r;\n};\nclass Ft extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IRelayer {\n    constructor(e){\n        super(e), this.protocol = \"wc\", this.version = 2, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = ut, this.transportExplicitlyClosed = !1, this.initialized = !1, this.connectionAttemptInProgress = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\n            \"socket hang up\",\n            \"socket stalled\"\n        ], this.hasExperiencedNetworkDisruption = !1, this.request = async (t)=>{\n            this.logger.debug(\"Publishing Request Payload\");\n            try {\n                return await this.toEstablishConnection(), await this.provider.request(t);\n            } catch (i) {\n                throw this.logger.debug(\"Failed to Publish Request\"), this.logger.error(i), i;\n            }\n        }, this.onPayloadHandler = (t)=>{\n            this.onProviderPayload(t);\n        }, this.onConnectHandler = ()=>{\n            this.events.emit(D.connect);\n        }, this.onDisconnectHandler = ()=>{\n            this.onProviderDisconnect();\n        }, this.onProviderErrorHandler = (t)=>{\n            this.logger.error(t), this.events.emit(D.error, t), this.logger.info(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }, this.registerProviderListeners = ()=>{\n            this.provider.on(P.payload, this.onPayloadHandler), this.provider.on(P.connect, this.onConnectHandler), this.provider.on(P.disconnect, this.onDisconnectHandler), this.provider.on(P.error, this.onProviderErrorHandler);\n        }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e.logger, this.name) : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: e.logger || ct\n        })), this.messages = new Ot(this.logger, e.core), this.subscriber = new Nt(this, this.logger), this.publisher = new vr(this, this.logger), this.relayUrl = e?.relayUrl || ge, this.projectId = e.projectId, this.bundleId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getBundleId)(), this.provider = {};\n    }\n    async init() {\n        this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.createProvider(), await Promise.all([\n            this.messages.init(),\n            this.subscriber.init()\n        ]);\n        try {\n            await this.transportOpen();\n        } catch  {\n            this.logger.warn(`Connection via ${this.relayUrl} failed, attempting to connect via failover domain ${pe}...`), await this.restartTransport(pe);\n        }\n        this.initialized = !0, setTimeout(async ()=>{\n            this.subscriber.topics.length === 0 && (this.logger.info(\"No topics subscribed to after init, closing transport\"), await this.transportClose(), this.transportExplicitlyClosed = !1);\n        }, pt);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get connected() {\n        return this.provider.connection.connected;\n    }\n    get connecting() {\n        return this.provider.connection.connecting;\n    }\n    async publish(e, t, i) {\n        this.isInitialized(), await this.publisher.publish(e, t, i), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now()\n        });\n    }\n    async subscribe(e, t) {\n        var i;\n        this.isInitialized();\n        let s = ((i = this.subscriber.topicMap.get(e)) == null ? void 0 : i[0]) || \"\";\n        if (s) return s;\n        let n;\n        const o = (a)=>{\n            a.topic === e && (this.subscriber.off(w.created, o), n());\n        };\n        return await Promise.all([\n            new Promise((a)=>{\n                n = a, this.subscriber.on(w.created, o);\n            }),\n            new Promise(async (a)=>{\n                s = await this.subscriber.subscribe(e, t), a();\n            })\n        ]), s;\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, this.hasExperiencedNetworkDisruption && this.connected ? await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.provider.disconnect(), 1e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.connected && await this.provider.disconnect();\n    }\n    async transportOpen(e) {\n        if (this.transportExplicitlyClosed = !1, await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress) {\n            e && e !== this.relayUrl && (this.relayUrl = e, await this.transportClose(), await this.createProvider()), this.connectionAttemptInProgress = !0;\n            try {\n                await Promise.all([\n                    new Promise((t)=>{\n                        if (!this.initialized) return t();\n                        this.subscriber.once(w.resubscribed, ()=>{\n                            t();\n                        });\n                    }),\n                    new Promise(async (t, i)=>{\n                        try {\n                            await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.provider.connect(), 1e4, `Socket stalled when trying to connect to ${this.relayUrl}`);\n                        } catch (s) {\n                            i(s);\n                            return;\n                        }\n                        t();\n                    })\n                ]);\n            } catch (t) {\n                this.logger.error(t);\n                const i = t;\n                if (!this.isConnectionStalled(i.message)) throw t;\n                this.provider.events.emit(P.disconnect);\n            } finally{\n                this.connectionAttemptInProgress = !1, this.hasExperiencedNetworkDisruption = !1;\n            }\n        }\n    }\n    async restartTransport(e) {\n        await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.transportClose(), await this.createProvider(), await this.transportOpen());\n    }\n    async confirmOnlineStateOrThrow() {\n        if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isOnline)()) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n    }\n    isConnectionStalled(e) {\n        return this.staleConnectionErrors.some((t)=>e.includes(t));\n    }\n    async createProvider() {\n        this.provider.connection && this.unregisterProviderListeners();\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__.JsonRpcProvider(new _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__[\"default\"]((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatRelayRpcUrl)({\n            sdkVersion: gt,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0,\n            bundleId: this.bundleId\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e) {\n        const { topic: t, message: i } = e;\n        await this.messages.set(t, i);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: i } = e;\n        if (!i || i.length === 0) return this.logger.debug(`Ignoring invalid/empty message: ${i}`), !0;\n        if (!await this.subscriber.isSubscribed(t)) return this.logger.debug(`Ignoring message for non-subscribed topic ${t}`), !0;\n        const s = this.messages.has(t, i);\n        return s && this.logger.debug(`Ignoring duplicate message: ${i}`), s;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(e)) {\n            if (!e.method.endsWith(lt)) return;\n            const t = e.params, { topic: i, message: s, publishedAt: n } = t.data, o = {\n                topic: i,\n                message: s,\n                publishedAt: n\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(Ar({\n                type: \"event\",\n                event: t.id\n            }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);\n        } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(e) && this.events.emit(D.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (this.events.emit(D.message, e), await this.recordMessageEvent(e));\n    }\n    async acknowledgePayload(e) {\n        const t = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    unregisterProviderListeners() {\n        this.provider.off(P.payload, this.onPayloadHandler), this.provider.off(P.connect, this.onConnectHandler), this.provider.off(P.disconnect, this.onDisconnectHandler), this.provider.off(P.error, this.onProviderErrorHandler);\n    }\n    async registerEventListeners() {\n        this.events.on(D.connection_stalled, ()=>{\n            this.restartTransport().catch((t)=>this.logger.error(t));\n        });\n        let e = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isOnline)();\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.subscribeToNetworkChange)(async (t)=>{\n            this.initialized && e !== t && (e = t, t ? await this.restartTransport().catch((i)=>this.logger.error(i)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportClose().catch((i)=>this.logger.error(i))));\n        });\n    }\n    onProviderDisconnect() {\n        this.events.emit(D.disconnect), this.attemptToReconnect();\n    }\n    attemptToReconnect() {\n        this.transportExplicitlyClosed || (this.logger.info(\"attemptToReconnect called. Connecting...\"), setTimeout(async ()=>{\n            await this.restartTransport().catch((e)=>this.logger.error(e));\n        }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(dt)));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        if (await this.confirmOnlineStateOrThrow(), !this.connected) {\n            if (this.connectionAttemptInProgress) return await new Promise((e)=>{\n                const t = setInterval(()=>{\n                    this.connected && (clearInterval(t), e());\n                }, this.connectionStatusPollingInterval);\n            });\n            await this.restartTransport();\n        }\n    }\n}\nvar zr = Object.defineProperty, $t = Object.getOwnPropertySymbols, Nr = Object.prototype.hasOwnProperty, Ur = Object.prototype.propertyIsEnumerable, Mt = (r, e, t)=>e in r ? zr(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, kt = (r, e)=>{\n    for(var t in e || (e = {}))Nr.call(e, t) && Mt(r, t, e[t]);\n    if ($t) for (var t of $t(e))Ur.call(e, t) && Mt(r, t, e[t]);\n    return r;\n};\nclass Kt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IStore {\n    constructor(e, t, i, s = O, n = void 0){\n        super(e, t, i, s), this.core = e, this.logger = t, this.name = i, this.map = new Map, this.version = Dt, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o)=>{\n                this.getKey && o !== null && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)(o) ? this.map.set(this.getKey(o), o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isProposalStruct)(o) ? this.map.set(o.id, o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isSessionStruct)(o) && this.map.set(o.topic, o);\n            }), this.cached = [], this.initialized = !0);\n        }, this.set = async (o, a)=>{\n            this.isInitialized(), this.map.has(o) ? await this.update(o, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: o,\n                value: a\n            }), this.map.set(o, a), await this.persist());\n        }, this.get = (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o)), this.getAll = (o)=>(this.isInitialized(), o ? this.values.filter((a)=>Object.keys(o).every((h)=>lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default()(a[h], o[h]))) : this.values), this.update = async (o, a)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: o,\n                update: a\n            });\n            const h = kt(kt({}, this.getData(o)), a);\n            this.map.set(o, h), await this.persist();\n        }, this.delete = async (o, a)=>{\n            this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: o,\n                reason: a\n            }), this.map.delete(o), await this.persist());\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.storagePrefix = s, this.getKey = n;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(i), new Error(i);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass Bt {\n    constructor(e, t){\n        this.core = e, this.logger = t, this.name = Et, this.version = wt, this.events = new (events__WEBPACK_IMPORTED_MODULE_0___default()), this.initialized = !1, this.storagePrefix = O, this.ignoredPayloadTypes = [\n            _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.TYPE_1\n        ], this.registeredMethods = [], this.init = async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }, this.register = ({ methods: i })=>{\n            this.isInitialized(), this.registeredMethods = [\n                ...new Set([\n                    ...this.registeredMethods,\n                    ...i\n                ])\n            ];\n        }, this.create = async ()=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), s = await this.core.crypto.setSymKey(i), n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_MINUTES), o = {\n                protocol: ht\n            }, a = {\n                topic: s,\n                expiry: n,\n                relay: o,\n                active: !1\n            }, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: s,\n                symKey: i,\n                relay: o\n            });\n            return await this.pairings.set(s, a), await this.core.relayer.subscribe(s), this.core.expirer.set(s, n), {\n                topic: s,\n                uri: h\n            };\n        }, this.pair = async (i)=>{\n            this.isInitialized(), this.isValidPair(i);\n            const { topic: s, symKey: n, relay: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseUri)(i.uri);\n            let a;\n            if (this.pairings.keys.includes(s) && (a = this.pairings.get(s), a.active)) throw new Error(`Pairing already exists: ${s}. Please try again with a new connection URI.`);\n            const h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_MINUTES), l = {\n                topic: s,\n                relay: o,\n                expiry: h,\n                active: !1\n            };\n            return await this.pairings.set(s, l), this.core.expirer.set(s, h), i.activatePairing && await this.activate({\n                topic: s\n            }), this.events.emit(V.create, l), this.core.crypto.keychain.has(s) || (await this.core.crypto.setSymKey(n, s), await this.core.relayer.subscribe(s, {\n                relay: o\n            })), l;\n        }, this.activate = async ({ topic: i })=>{\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS);\n            await this.pairings.update(i, {\n                active: !0,\n                expiry: s\n            }), this.core.expirer.set(i, s);\n        }, this.ping = async (i)=>{\n            this.isInitialized(), await this.isValidPing(i);\n            const { topic: s } = i;\n            if (this.pairings.keys.includes(s)) {\n                const n = await this.sendRequest(s, \"wc_pairingPing\", {}), { done: o, resolve: a, reject: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", n), ({ error: l })=>{\n                    l ? h(l) : a();\n                }), await o();\n            }\n        }, this.updateExpiry = async ({ topic: i, expiry: s })=>{\n            this.isInitialized(), await this.pairings.update(i, {\n                expiry: s\n            });\n        }, this.updateMetadata = async ({ topic: i, metadata: s })=>{\n            this.isInitialized(), await this.pairings.update(i, {\n                peerMetadata: s\n            });\n        }, this.getPairings = ()=>(this.isInitialized(), this.pairings.values), this.disconnect = async (i)=>{\n            this.isInitialized(), await this.isValidDisconnect(i);\n            const { topic: s } = i;\n            this.pairings.keys.includes(s) && (await this.sendRequest(s, \"wc_pairingDelete\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\")), await this.deletePairing(s));\n        }, this.sendRequest = async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(s, n), a = await this.core.crypto.encode(i, o), h = F[s].req;\n            return this.core.history.set(i, o), this.core.relayer.publish(i, a, h), o.id;\n        }, this.sendResult = async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(i, n), a = await this.core.crypto.encode(s, o), h = await this.core.history.get(s, i), l = F[h.request.method].res;\n            await this.core.relayer.publish(s, a, l), await this.core.history.resolve(o);\n        }, this.sendError = async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcError)(i, n), a = await this.core.crypto.encode(s, o), h = await this.core.history.get(s, i), l = F[h.request.method] ? F[h.request.method].res : F.unregistered_method.res;\n            await this.core.relayer.publish(s, a, l), await this.core.history.resolve(o);\n        }, this.deletePairing = async (i, s)=>{\n            await this.core.relayer.unsubscribe(i), await Promise.all([\n                this.pairings.delete(i, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(i),\n                s ? Promise.resolve() : this.core.expirer.del(i)\n            ]);\n        }, this.cleanup = async ()=>{\n            const i = this.pairings.getAll().filter((s)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isExpired)(s.expiry));\n            await Promise.all(i.map((s)=>this.deletePairing(s.topic)));\n        }, this.onRelayEventRequest = (i)=>{\n            const { topic: s, payload: n } = i;\n            switch(n.method){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(s, n);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(s, n);\n                default:\n                    return this.onUnknownRpcMethodRequest(s, n);\n            }\n        }, this.onRelayEventResponse = async (i)=>{\n            const { topic: s, payload: n } = i, o = (await this.core.history.get(s, n.id)).request.method;\n            switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(s, n);\n                default:\n                    return this.onUnknownRpcMethodResponse(o);\n            }\n        }, this.onPairingPingRequest = async (i, s)=>{\n            const { id: n } = s;\n            try {\n                this.isValidPing({\n                    topic: i\n                }), await this.sendResult(n, i, !0), this.events.emit(V.ping, {\n                    id: n,\n                    topic: i\n                });\n            } catch (o) {\n                await this.sendError(n, i, o), this.logger.error(o);\n            }\n        }, this.onPairingPingResponse = (i, s)=>{\n            const { id: n } = s;\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResult)(s) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", n), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(s) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", n), {\n                    error: s.error\n                });\n            }, 500);\n        }, this.onPairingDeleteRequest = async (i, s)=>{\n            const { id: n } = s;\n            try {\n                this.isValidDisconnect({\n                    topic: i\n                }), await this.deletePairing(i), this.events.emit(V.delete, {\n                    id: n,\n                    topic: i\n                });\n            } catch (o) {\n                await this.sendError(n, i, o), this.logger.error(o);\n            }\n        }, this.onUnknownRpcMethodRequest = async (i, s)=>{\n            const { id: n, method: o } = s;\n            try {\n                if (this.registeredMethods.includes(o)) return;\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", o);\n                await this.sendError(n, i, a), this.logger.error(a);\n            } catch (a) {\n                await this.sendError(n, i, a), this.logger.error(a);\n            }\n        }, this.onUnknownRpcMethodResponse = (i)=>{\n            this.registeredMethods.includes(i) || this.logger.error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", i));\n        }, this.isValidPair = (i)=>{\n            var s;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `pair() params: ${i}`);\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidUrl)(i.uri)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `pair() uri: ${i.uri}`);\n                throw new Error(o);\n            }\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseUri)(i.uri);\n            if (!((s = n?.relay) != null && s.protocol)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n                throw new Error(o);\n            }\n            if (!(n != null && n.symKey)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n                throw new Error(o);\n            }\n        }, this.isValidPing = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(i)) {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `ping() params: ${i}`);\n                throw new Error(n);\n            }\n            const { topic: s } = i;\n            await this.isValidPairingTopic(s);\n        }, this.isValidDisconnect = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(i)) {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `disconnect() params: ${i}`);\n                throw new Error(n);\n            }\n            const { topic: s } = i;\n            await this.isValidPairingTopic(s);\n        }, this.isValidPairingTopic = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidString)(i, !1)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${i}`);\n                throw new Error(s);\n            }\n            if (!this.pairings.keys.includes(i)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${i}`);\n                throw new Error(s);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isExpired)(this.pairings.get(i).expiry)) {\n                await this.deletePairing(i);\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"EXPIRED\", `pairing topic: ${i}`);\n                throw new Error(s);\n            }\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.pairings = new Kt(this.core, this.logger, this.name, this.storagePrefix);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(D.message, async (e)=>{\n            const { topic: t, message: i } = e;\n            if (!this.pairings.keys.includes(t) || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i))) return;\n            const s = await this.core.crypto.decode(t, i);\n            try {\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(s) ? (this.core.history.set(t, s), this.onRelayEventRequest({\n                    topic: t,\n                    payload: s\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(s) && (await this.core.history.resolve(s), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: s\n                }), this.core.history.delete(t, s.id));\n            } catch (n) {\n                this.logger.error(n);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(v.expired, async (e)=>{\n            const { topic: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseExpirerTarget)(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(V.expire, {\n                topic: t\n            }));\n        });\n    }\n}\nclass Vt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IJsonRpcHistory {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.records = new Map, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = vt, this.version = It, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((i)=>this.records.set(i.id, i)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.set = (i, s, n)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: i,\n                request: s,\n                chainId: n\n            }), this.records.has(s.id)) return;\n            const o = {\n                id: s.id,\n                topic: i,\n                request: {\n                    method: s.method,\n                    params: s.params || null\n                },\n                chainId: n,\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS)\n            };\n            this.records.set(o.id, o), this.events.emit(R.created, o);\n        }, this.resolve = async (i)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: i\n            }), !this.records.has(i.id)) return;\n            const s = await this.getRecord(i.id);\n            typeof s.response > \"u\" && (s.response = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(i) ? {\n                error: i.error\n            } : {\n                result: i.result\n            }, this.records.set(s.id, s), this.events.emit(R.updated, s));\n        }, this.get = async (i, s)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: i,\n                id: s\n            }), await this.getRecord(s)), this.delete = (i, s)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: s\n            }), this.values.forEach((n)=>{\n                if (n.topic === i) {\n                    if (typeof s < \"u\" && n.id !== s) return;\n                    this.records.delete(n.id), this.events.emit(R.deleted, n);\n                }\n            });\n        }, this.exists = async (i, s)=>(this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i : !1), this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const i = {\n                topic: t.topic,\n                request: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(i);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(i);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(R.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(R.created, (e)=>{\n            const t = R.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.events.on(R.updated, (e)=>{\n            const t = R.updated;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.events.on(R.deleted, (e)=>{\n            const t = R.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.records.forEach((e)=>{\n                (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(e.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${e.id}`), this.delete(e.topic, e.id));\n            });\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass jt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IExpirer {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.expirations = new Map, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = Ct, this.version = Rt, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((i)=>this.expirations.set(i.target, i)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.has = (i)=>{\n            try {\n                const s = this.formatTarget(i);\n                return typeof this.getExpiration(s) < \"u\";\n            } catch  {\n                return !1;\n            }\n        }, this.set = (i, s)=>{\n            this.isInitialized();\n            const n = this.formatTarget(i), o = {\n                target: n,\n                expiry: s\n            };\n            this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit(v.created, {\n                target: n,\n                expiration: o\n            });\n        }, this.get = (i)=>{\n            this.isInitialized();\n            const s = this.formatTarget(i);\n            return this.getExpiration(s);\n        }, this.del = (i)=>{\n            if (this.isInitialized(), this.has(i)) {\n                const s = this.formatTarget(i), n = this.getExpiration(s);\n                this.expirations.delete(s), this.events.emit(v.deleted, {\n                    target: s,\n                    expiration: n\n                });\n            }\n        }, this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatTopicTarget)(e);\n        if (typeof e == \"number\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatIdTarget)(e);\n        const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit(v.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(i), new Error(i);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: i } = t;\n        (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(i) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit(v.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(v.created, (e)=>{\n            const t = v.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(v.expired, (e)=>{\n            const t = v.expired;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(v.deleted, (e)=>{\n            const t = v.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nclass qt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IVerify {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, this.name = Z, this.initialized = !1, this.queue = [], this.verifyDisabled = !1, this.init = async (i)=>{\n            if (this.verifyDisabled || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isReactNative)() || !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isBrowser)()) return;\n            const s = this.getVerifyUrl(i?.verifyUrl);\n            this.verifyUrl !== s && this.removeIframe(), this.verifyUrl = s;\n            try {\n                await this.createIframe();\n            } catch (n) {\n                this.logger.info(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.info(n);\n            }\n            if (!this.initialized) {\n                this.removeIframe(), this.verifyUrl = ee;\n                try {\n                    await this.createIframe();\n                } catch (n) {\n                    this.logger.info(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.info(n), this.verifyDisabled = !0;\n                }\n            }\n        }, this.register = async (i)=>{\n            this.initialized ? this.sendPost(i.attestationId) : (this.addToQueue(i.attestationId), await this.init());\n        }, this.resolve = async (i)=>{\n            if (this.isDevEnv) return \"\";\n            const s = this.getVerifyUrl(i?.verifyUrl);\n            let n;\n            try {\n                n = await this.fetchAttestation(i.attestationId, s);\n            } catch (o) {\n                this.logger.info(`failed to resolve attestation: ${i.attestationId} from url: ${s}`), this.logger.info(o), n = await this.fetchAttestation(i.attestationId, ee);\n            }\n            return n;\n        }, this.fetchAttestation = async (i, s)=>{\n            this.logger.info(`resolving attestation: ${i} from url: ${s}`);\n            const n = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND * 2), o = await fetch(`${s}/attestation/${i}`, {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(n), o.status === 200 ? await o.json() : void 0;\n        }, this.addToQueue = (i)=>{\n            this.queue.push(i);\n        }, this.processQueue = ()=>{\n            this.queue.length !== 0 && (this.queue.forEach((i)=>this.sendPost(i)), this.queue = []);\n        }, this.sendPost = (i)=>{\n            var s;\n            try {\n                if (!this.iframe) return;\n                (s = this.iframe.contentWindow) == null || s.postMessage(i, \"*\"), this.logger.info(`postMessage sent: ${i} ${this.verifyUrl}`);\n            } catch  {}\n        }, this.createIframe = async ()=>{\n            let i;\n            const s = (n)=>{\n                n.data === \"verify_ready\" && (this.initialized = !0, this.processQueue(), window.removeEventListener(\"message\", s), i());\n            };\n            await Promise.race([\n                new Promise((n)=>{\n                    if (document.getElementById(Z)) return n();\n                    window.addEventListener(\"message\", s);\n                    const o = document.createElement(\"iframe\");\n                    o.id = Z, o.src = `${this.verifyUrl}/${this.projectId}`, o.style.display = \"none\", document.body.append(o), this.iframe = o, i = n;\n                }),\n                new Promise((n, o)=>setTimeout(()=>{\n                        window.removeEventListener(\"message\", s), o(\"verify iframe load timeout\");\n                    }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_SECONDS)))\n            ]);\n        }, this.removeIframe = ()=>{\n            this.iframe && (this.iframe.remove(), this.iframe = void 0, this.initialized = !1);\n        }, this.getVerifyUrl = (i)=>{\n            let s = i || $;\n            return _t.includes(s) || (this.logger.info(`verify url: ${s}, not included in trusted list, assigning default: ${$}`), s = $), s;\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.verifyUrl = $, this.abortController = new AbortController, this.isDevEnv = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isNode)() && process.env.IS_VITEST;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController, setTimeout(()=>this.abortController.abort(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(e));\n    }\n}\nclass Gt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IEchoClient {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, this.context = St, this.registerDeviceToken = async (i)=>{\n            const { clientId: s, token: n, notificationType: o, enableEncrypted: a = !1 } = i, h = `${Tt}/${this.projectId}/clients`;\n            await isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12___default()(h, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    client_id: s,\n                    type: o,\n                    token: n,\n                    always_raw: a\n                })\n            });\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context);\n    }\n}\nvar Lr = Object.defineProperty, Yt = Object.getOwnPropertySymbols, Fr = Object.prototype.hasOwnProperty, $r = Object.prototype.propertyIsEnumerable, Ht = (r, e, t)=>e in r ? Lr(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Jt = (r, e)=>{\n    for(var t in e || (e = {}))Fr.call(e, t) && Ht(r, t, e[t]);\n    if (Yt) for (var t of Yt(e))$r.call(e, t) && Ht(r, t, e[t]);\n    return r;\n};\nclass te extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.ICore {\n    constructor(e){\n        super(e), this.protocol = le, this.version = We, this.name = Q, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.initialized = !1, this.on = (i, s)=>this.events.on(i, s), this.once = (i, s)=>this.events.once(i, s), this.off = (i, s)=>this.events.off(i, s), this.removeListener = (i, s)=>this.events.removeListener(i, s), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || ge, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : \"\";\n        const t = typeof e?.logger < \"u\" && typeof e?.logger != \"string\" ? e.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: e?.logger || Qe.logger\n        }));\n        this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.heartbeat = new _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HeartBeat, this.crypto = new xt(this, this.logger, e?.keychain), this.history = new Vt(this, this.logger), this.expirer = new jt(this, this.logger), this.storage = e != null && e.storage ? e.storage : new _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Jt(Jt({}, Ze), e?.storageOptions)), this.relayer = new Ft({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new Bt(this, this.logger), this.verify = new qt(this.projectId || \"\", this.logger), this.echoClient = new Gt(this.projectId || \"\", this.logger);\n    }\n    static async init(e) {\n        const t = new te(e);\n        await t.initialize();\n        const i = await t.crypto.getClientId();\n        return await t.storage.setItem(yt, i), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n        }\n    }\n}\nconst Mr = te;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+core@2.11.0/node_modules/@walletconnect/core/dist/index.es.js\n");

/***/ })

};
;