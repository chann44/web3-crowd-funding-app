"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2";
exports.ids = ["vendor-chunks/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _Safe_ethAdapter, _Safe_contractManager, _Safe_ownerManager, _Safe_moduleManager, _Safe_guardManager, _Safe_fallbackHandlerManager;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/index.js\");\nconst safe_core_sdk_types_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-types */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js\");\nconst safe_core_sdk_utils_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/index.js\");\nconst contractManager_1 = __importDefault(__webpack_require__(/*! ./managers/contractManager */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js\"));\nconst fallbackHandlerManager_1 = __importDefault(__webpack_require__(/*! ./managers/fallbackHandlerManager */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/fallbackHandlerManager.js\"));\nconst guardManager_1 = __importDefault(__webpack_require__(/*! ./managers/guardManager */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/guardManager.js\"));\nconst moduleManager_1 = __importDefault(__webpack_require__(/*! ./managers/moduleManager */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/moduleManager.js\"));\nconst ownerManager_1 = __importDefault(__webpack_require__(/*! ./managers/ownerManager */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/ownerManager.js\"));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js\");\nconst signatures_1 = __webpack_require__(/*! ./utils/signatures */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/index.js\");\nconst SafeSignature_1 = __importDefault(__webpack_require__(/*! ./utils/signatures/SafeSignature */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js\"));\nconst SafeTransaction_1 = __importDefault(__webpack_require__(/*! ./utils/transactions/SafeTransaction */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/SafeTransaction.js\"));\nconst utils_2 = __webpack_require__(/*! ./utils/transactions/utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js\");\nclass Safe {\n    constructor(){\n        _Safe_ethAdapter.set(this, void 0);\n        _Safe_contractManager.set(this, void 0);\n        _Safe_ownerManager.set(this, void 0);\n        _Safe_moduleManager.set(this, void 0);\n        _Safe_guardManager.set(this, void 0);\n        _Safe_fallbackHandlerManager.set(this, void 0);\n    }\n    /**\n     * Creates an instance of the Safe Core SDK.\n     * @param config - Ethers Safe configuration\n     * @returns The Safe Core SDK instance\n     * @throws \"SafeProxy contract is not deployed on the current network\"\n     * @throws \"MultiSend contract is not deployed on the current network\"\n     * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n     */ static async create({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {\n        const safeSdk = new Safe();\n        await safeSdk.init({\n            ethAdapter,\n            safeAddress,\n            isL1SafeMasterCopy,\n            contractNetworks\n        });\n        return safeSdk;\n    }\n    /**\n     * Initializes the Safe Core SDK instance.\n     * @param config - Safe configuration\n     * @throws \"Signer must be connected to a provider\"\n     * @throws \"SafeProxy contract is not deployed on the current network\"\n     * @throws \"MultiSend contract is not deployed on the current network\"\n     * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n     */ async init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {\n        __classPrivateFieldSet(this, _Safe_ethAdapter, ethAdapter, \"f\");\n        __classPrivateFieldSet(this, _Safe_contractManager, await contractManager_1.default.create({\n            ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"),\n            safeAddress,\n            isL1SafeMasterCopy,\n            contractNetworks\n        }), \"f\");\n        __classPrivateFieldSet(this, _Safe_ownerManager, new ownerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n        __classPrivateFieldSet(this, _Safe_moduleManager, new moduleManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n        __classPrivateFieldSet(this, _Safe_guardManager, new guardManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n        __classPrivateFieldSet(this, _Safe_fallbackHandlerManager, new fallbackHandlerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n    }\n    /**\n     * Returns a new instance of the Safe Core SDK.\n     * @param config - Connect Safe configuration\n     * @throws \"SafeProxy contract is not deployed on the current network\"\n     * @throws \"MultiSend contract is not deployed on the current network\"\n     * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n     */ async connect({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {\n        return await Safe.create({\n            ethAdapter: ethAdapter || __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"),\n            safeAddress: safeAddress || this.getAddress(),\n            isL1SafeMasterCopy: isL1SafeMasterCopy || __classPrivateFieldGet(this, _Safe_contractManager, \"f\").isL1SafeMasterCopy,\n            contractNetworks: contractNetworks || __classPrivateFieldGet(this, _Safe_contractManager, \"f\").contractNetworks\n        });\n    }\n    /**\n     * Returns the address of the current SafeProxy contract.\n     *\n     * @returns The address of the SafeProxy contract\n     */ getAddress() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getAddress();\n    }\n    /**\n     * Returns the ContractManager\n     *\n     * @returns The current ContractManager\n     * */ getContractManager() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\");\n    }\n    /**\n     * Returns the current EthAdapter.\n     *\n     * @returns The current EthAdapter\n     */ getEthAdapter() {\n        return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\");\n    }\n    /**\n     * Returns the address of the MultiSend contract.\n     *\n     * @returns The address of the MultiSend contract\n     */ getMultiSendAddress() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendContract.getAddress();\n    }\n    /**\n     * Returns the address of the MultiSendCallOnly contract.\n     *\n     * @returns The address of the MultiSendCallOnly contract\n     */ getMultiSendCallOnlyAddress() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendCallOnlyContract.getAddress();\n    }\n    /**\n     * Returns the Safe Master Copy contract version.\n     *\n     * @returns The Safe Master Copy contract version\n     */ async getContractVersion() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getVersion();\n    }\n    /**\n     * Returns the list of Safe owner accounts.\n     *\n     * @returns The list of owners\n     */ async getOwners() {\n        return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").getOwners();\n    }\n    /**\n     * Returns the Safe nonce.\n     *\n     * @returns The Safe nonce\n     */ async getNonce() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getNonce();\n    }\n    /**\n     * Returns the Safe threshold.\n     *\n     * @returns The Safe threshold\n     */ async getThreshold() {\n        return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").getThreshold();\n    }\n    /**\n     * Returns the chainId of the connected network.\n     *\n     * @returns The chainId of the connected network\n     */ async getChainId() {\n        return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getChainId();\n    }\n    /**\n     * Returns the ETH balance of the Safe.\n     *\n     * @returns The ETH balance of the Safe\n     */ async getBalance() {\n        return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getBalance(this.getAddress());\n    }\n    /**\n     * Returns the address of the FallbackHandler contract.\n     *\n     * @returns The address of the FallbackHandler contract\n     */ getFallbackHandler() {\n        return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").getFallbackHandler();\n    }\n    /**\n     * Returns the enabled Safe guard or 0x address if no guards are enabled.\n     *\n     * @returns The address of the enabled Safe guard\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */ async getGuard() {\n        return __classPrivateFieldGet(this, _Safe_guardManager, \"f\").getGuard();\n    }\n    /**\n     * Returns the list of addresses of all the enabled Safe modules.\n     *\n     * @returns The list of addresses of all the enabled Safe modules\n     */ async getModules() {\n        return __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").getModules();\n    }\n    /**\n     * Checks if a specific Safe module is enabled for the current Safe.\n     *\n     * @param moduleAddress - The desired module address\n     * @returns TRUE if the module is enabled\n     */ async isModuleEnabled(moduleAddress) {\n        return __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").isModuleEnabled(moduleAddress);\n    }\n    /**\n     * Checks if a specific address is an owner of the current Safe.\n     *\n     * @param ownerAddress - The account address\n     * @returns TRUE if the account is an owner\n     */ async isOwner(ownerAddress) {\n        return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").isOwner(ownerAddress);\n    }\n    /**\n     * Returns a Safe transaction ready to be signed by the owners.\n     *\n     * @param createTransactionProps - The createTransaction props\n     * @returns The Safe transaction\n     * @throws \"Invalid empty array of transactions\"\n     */ async createTransaction({ safeTransactionData, onlyCalls = false, options }) {\n        if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length === 0) {\n            throw new Error(\"Invalid empty array of transactions\");\n        }\n        let newTransaction;\n        if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length > 1) {\n            const multiSendContract = onlyCalls ? __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendCallOnlyContract : __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendContract;\n            const multiSendData = (0, utils_2.encodeMultiSendData)(safeTransactionData.map(utils_2.standardizeMetaTransactionData));\n            const multiSendTransaction = {\n                ...options,\n                to: multiSendContract.getAddress(),\n                value: \"0\",\n                data: multiSendContract.encode(\"multiSend\", [\n                    multiSendData\n                ]),\n                operation: safe_core_sdk_types_1.OperationType.DelegateCall\n            };\n            newTransaction = multiSendTransaction;\n        } else {\n            newTransaction = (0, utils_1.isMetaTransactionArray)(safeTransactionData) ? {\n                ...options,\n                ...safeTransactionData[0]\n            } : safeTransactionData;\n        }\n        const standardizedTransaction = await (0, utils_2.standardizeSafeTransactionData)(__classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract, __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), newTransaction);\n        return new SafeTransaction_1.default(standardizedTransaction);\n    }\n    /**\n     * Returns a Safe transaction ready to be signed by the owners that invalidates the pending Safe transaction/s with a specific nonce.\n     *\n     * @param nonce - The nonce of the transaction/s that are going to be rejected\n     * @returns The Safe transaction that invalidates the pending Safe transaction/s\n     */ async createRejectionTransaction(nonce) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            nonce,\n            value: \"0\",\n            data: \"0x\",\n            safeTxGas: 0\n        };\n        return this.createTransaction({\n            safeTransactionData\n        });\n    }\n    /**\n     * Copies a Safe transaction\n     *\n     * @param safeTransaction - The Safe transaction\n     * @returns The new Safe transaction\n     */ async copyTransaction(safeTransaction) {\n        const signedSafeTransaction = await this.createTransaction({\n            safeTransactionData: safeTransaction.data\n        });\n        safeTransaction.signatures.forEach((signature)=>{\n            signedSafeTransaction.addSignature(signature);\n        });\n        return signedSafeTransaction;\n    }\n    /**\n     * Returns the transaction hash of a Safe transaction.\n     *\n     * @param safeTransaction - The Safe transaction\n     * @returns The transaction hash of the Safe transaction\n     */ async getTransactionHash(safeTransaction) {\n        const safeTransactionData = safeTransaction.data;\n        const txHash = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getTransactionHash(safeTransactionData);\n        return txHash;\n    }\n    /**\n     * Signs a hash using the current signer account.\n     *\n     * @param hash - The hash to sign\n     * @returns The Safe signature\n     */ async signTransactionHash(hash) {\n        return (0, signatures_1.generateSignature)(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), hash);\n    }\n    /**\n     * Signs a transaction according to the EIP-712 using the current signer account.\n     *\n     * @param safeTransaction - The Safe transaction to be signed\n     * @param methodVersion - EIP-712 version. Optional\n     * @returns The Safe signature\n     */ async signTypedData(safeTransaction, methodVersion) {\n        const safeTransactionEIP712Args = {\n            safeAddress: this.getAddress(),\n            safeVersion: await this.getContractVersion(),\n            chainId: await this.getEthAdapter().getChainId(),\n            safeTransactionData: safeTransaction.data\n        };\n        return (0, signatures_1.generateEIP712Signature)(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), safeTransactionEIP712Args, methodVersion);\n    }\n    /**\n     * Adds the signature of the current signer to the Safe transaction object.\n     *\n     * @param safeTransaction - The Safe transaction to be signed\n     * @param signingMethod - Method followed to sign a transaction. Optional. Default value is \"eth_sign\"\n     * @returns The signed Safe transaction\n     * @throws \"Transactions can only be signed by Safe owners\"\n     */ async signTransaction(safeTransaction, signingMethod = \"eth_signTypedData_v4\") {\n        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;\n        const owners = await this.getOwners();\n        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n        if (!signerAddress) {\n            throw new Error(\"EthAdapter must be initialized with a signer to use this method\");\n        }\n        const addressIsOwner = owners.find((owner)=>signerAddress && (0, utils_1.sameString)(owner, signerAddress));\n        if (!addressIsOwner) {\n            throw new Error(\"Transactions can only be signed by Safe owners\");\n        }\n        let signature;\n        if (signingMethod === \"eth_signTypedData_v4\") {\n            signature = await this.signTypedData(transaction, \"v4\");\n        } else if (signingMethod === \"eth_signTypedData_v3\") {\n            signature = await this.signTypedData(transaction, \"v3\");\n        } else if (signingMethod === \"eth_signTypedData\") {\n            signature = await this.signTypedData(transaction);\n        } else {\n            const safeVersion = await this.getContractVersion();\n            if (!(0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.ETH_SIGN, safeVersion)) {\n                throw new Error(\"eth_sign is only supported by Safes >= v1.1.0\");\n            }\n            const txHash = await this.getTransactionHash(transaction);\n            signature = await this.signTransactionHash(txHash);\n        }\n        const signedSafeTransaction = await this.createTransaction({\n            safeTransactionData: transaction.data\n        });\n        transaction.signatures.forEach((signature)=>{\n            signedSafeTransaction.addSignature(signature);\n        });\n        signedSafeTransaction.addSignature(signature);\n        return signedSafeTransaction;\n    }\n    /**\n     * Approves on-chain a hash using the current signer account.\n     *\n     * @param hash - The hash to approve\n     * @param options - The Safe transaction execution options. Optional\n     * @returns The Safe transaction response\n     * @throws \"Transaction hashes can only be approved by Safe owners\"\n     * @throws \"Cannot specify gas and gasLimit together in transaction options\"\n     */ async approveTransactionHash(hash, options) {\n        const owners = await this.getOwners();\n        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n        if (!signerAddress) {\n            throw new Error(\"EthAdapter must be initialized with a signer to use this method\");\n        }\n        const addressIsOwner = owners.find((owner)=>signerAddress && (0, utils_1.sameString)(owner, signerAddress));\n        if (!addressIsOwner) {\n            throw new Error(\"Transaction hashes can only be approved by Safe owners\");\n        }\n        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {\n            throw new Error(\"Cannot specify gas and gasLimit together in transaction options\");\n        }\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.approveHash(hash, {\n            from: signerAddress,\n            ...options\n        });\n    }\n    /**\n     * Returns a list of owners who have approved a specific Safe transaction.\n     *\n     * @param txHash - The Safe transaction hash\n     * @returns The list of owners\n     */ async getOwnersWhoApprovedTx(txHash) {\n        const owners = await this.getOwners();\n        let ownersWhoApproved = [];\n        for (const owner of owners){\n            const approved = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.approvedHashes(owner, txHash);\n            if (approved.gt(0)) {\n                ownersWhoApproved.push(owner);\n            }\n        }\n        return ownersWhoApproved;\n    }\n    /**\n     * Returns the Safe transaction to enable the fallback handler.\n     *\n     * @param address - The new fallback handler address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid fallback handler address provided\"\n     * @throws \"Fallback handler provided is already enabled\"\n     * @throws \"Current version of the Safe does not support the fallback handler functionality\"\n     */ async createEnableFallbackHandlerTx(fallbackHandlerAddress, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").encodeEnableFallbackHandlerData(fallbackHandlerAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to disable the fallback handler.\n     *\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"There is no fallback handler enabled yet\"\n     * @throws \"Current version of the Safe does not support the fallback handler functionality\"\n     */ async createDisableFallbackHandlerTx(options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").encodeDisableFallbackHandlerData(),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to enable a Safe guard.\n     *\n     * @param guardAddress - The desired guard address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid guard address provided\"\n     * @throws \"Guard provided is already enabled\"\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */ async createEnableGuardTx(guardAddress, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_guardManager, \"f\").encodeEnableGuardData(guardAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to disable a Safe guard.\n     *\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"There is no guard enabled yet\"\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */ async createDisableGuardTx(options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_guardManager, \"f\").encodeDisableGuardData(),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to enable a Safe module.\n     *\n     * @param moduleAddress - The desired module address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid module address provided\"\n     * @throws \"Module provided is already enabled\"\n     */ async createEnableModuleTx(moduleAddress, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").encodeEnableModuleData(moduleAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to disable a Safe module.\n     *\n     * @param moduleAddress - The desired module address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid module address provided\"\n     * @throws \"Module provided is not enabled already\"\n     */ async createDisableModuleTx(moduleAddress, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").encodeDisableModuleData(moduleAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to add an owner and optionally change the threshold.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid owner address provided\"\n     * @throws \"Address provided is already an owner\"\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */ async createAddOwnerTx({ ownerAddress, threshold }, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeAddOwnerWithThresholdData(ownerAddress, threshold),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to remove an owner and optionally change the threshold.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid owner address provided\"\n     * @throws \"Address provided is not an owner\"\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */ async createRemoveOwnerTx({ ownerAddress, threshold }, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeRemoveOwnerData(ownerAddress, threshold),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to replace an owner of the Safe with a new one.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid new owner address provided\"\n     * @throws \"Invalid old owner address provided\"\n     * @throws \"New address provided is already an owner\"\n     * @throws \"Old address provided is not an owner\"\n     */ async createSwapOwnerTx({ oldOwnerAddress, newOwnerAddress }, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to change the threshold.\n     *\n     * @param threshold - The new threshold\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */ async createChangeThresholdTx(threshold, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: \"0\",\n            data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeChangeThresholdData(threshold),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        return safeTransaction;\n    }\n    /**\n     * Converts a transaction from type SafeMultisigTransactionResponse to type SafeTransaction\n     *\n     * @param serviceTransactionResponse - The transaction to convert\n     * @returns The converted transaction with type SafeTransaction\n     */ async toSafeTransactionType(serviceTransactionResponse) {\n        var _a;\n        const safeTransactionData = {\n            to: serviceTransactionResponse.to,\n            value: serviceTransactionResponse.value,\n            data: serviceTransactionResponse.data || \"0x\",\n            operation: serviceTransactionResponse.operation,\n            safeTxGas: serviceTransactionResponse.safeTxGas,\n            baseGas: serviceTransactionResponse.baseGas,\n            gasPrice: Number(serviceTransactionResponse.gasPrice),\n            gasToken: serviceTransactionResponse.gasToken,\n            refundReceiver: serviceTransactionResponse.refundReceiver,\n            nonce: serviceTransactionResponse.nonce\n        };\n        const safeTransaction = await this.createTransaction({\n            safeTransactionData\n        });\n        (_a = serviceTransactionResponse.confirmations) === null || _a === void 0 ? void 0 : _a.map((confirmation)=>{\n            const signature = new SafeSignature_1.default(confirmation.owner, confirmation.signature);\n            safeTransaction.addSignature(signature);\n        });\n        return safeTransaction;\n    }\n    /**\n     * Checks if a Safe transaction can be executed successfully with no errors.\n     *\n     * @param safeTransaction - The Safe transaction to check\n     * @param options - The Safe transaction execution options. Optional\n     * @returns TRUE if the Safe transaction can be executed successfully with no errors\n     */ async isValidTransaction(safeTransaction, options) {\n        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;\n        const signedSafeTransaction = await this.copyTransaction(transaction);\n        const txHash = await this.getTransactionHash(signedSafeTransaction);\n        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);\n        for (const owner of ownersWhoApprovedTx){\n            signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));\n        }\n        const owners = await this.getOwners();\n        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n        if (!signerAddress) {\n            throw new Error(\"EthAdapter must be initialized with a signer to use this method\");\n        }\n        if (owners.includes(signerAddress)) {\n            signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));\n        }\n        const isTxValid = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.isValidTransaction(signedSafeTransaction, {\n            from: signerAddress,\n            ...options\n        });\n        return isTxValid;\n    }\n    /**\n     * Executes a Safe transaction.\n     *\n     * @param safeTransaction - The Safe transaction to execute\n     * @param options - The Safe transaction execution options. Optional\n     * @returns The Safe transaction response\n     * @throws \"No signer provided\"\n     * @throws \"There are X signatures missing\"\n     * @throws \"Cannot specify gas and gasLimit together in transaction options\"\n     */ async executeTransaction(safeTransaction, options) {\n        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction) ? await this.toSafeTransactionType(safeTransaction) : safeTransaction;\n        const signedSafeTransaction = await this.copyTransaction(transaction);\n        const txHash = await this.getTransactionHash(signedSafeTransaction);\n        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);\n        for (const owner of ownersWhoApprovedTx){\n            signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));\n        }\n        const owners = await this.getOwners();\n        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n        if (signerAddress && owners.includes(signerAddress)) {\n            signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));\n        }\n        const threshold = await this.getThreshold();\n        if (threshold > signedSafeTransaction.signatures.size) {\n            const signaturesMissing = threshold - signedSafeTransaction.signatures.size;\n            throw new Error(`There ${signaturesMissing > 1 ? \"are\" : \"is\"} ${signaturesMissing} signature${signaturesMissing > 1 ? \"s\" : \"\"} missing`);\n        }\n        const value = bignumber_1.BigNumber.from(signedSafeTransaction.data.value);\n        if (!value.isZero()) {\n            const balance = await this.getBalance();\n            if (value.gt(bignumber_1.BigNumber.from(balance))) {\n                throw new Error(\"Not enough Ether funds\");\n            }\n        }\n        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {\n            throw new Error(\"Cannot specify gas and gasLimit together in transaction options\");\n        }\n        const txResponse = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.execTransaction(signedSafeTransaction, {\n            from: signerAddress,\n            ...options\n        });\n        return txResponse;\n    }\n}\n_Safe_ethAdapter = new WeakMap(), _Safe_contractManager = new WeakMap(), _Safe_ownerManager = new WeakMap(), _Safe_moduleManager = new WeakMap(), _Safe_guardManager = new WeakMap(), _Safe_fallbackHandlerManager = new WeakMap();\nexports[\"default\"] = Safe; //# sourceMappingURL=Safe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js ***!
  \***********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.safeDeploymentsL1ChainIds = exports.safeDeploymentsVersions = exports.SAFE_BASE_VERSION = exports.SAFE_LAST_VERSION = void 0;\nexports.SAFE_LAST_VERSION = \"1.3.0\";\nexports.SAFE_BASE_VERSION = \"1.0.0\";\nexports.safeDeploymentsVersions = {\n    \"1.3.0\": {\n        safeMasterCopyVersion: \"1.3.0\",\n        safeMasterCopyL2Version: \"1.3.0\",\n        safeProxyFactoryVersion: \"1.3.0\",\n        compatibilityFallbackHandler: \"1.3.0\",\n        multiSendVersion: \"1.3.0\",\n        multiSendCallOnlyVersion: \"1.3.0\",\n        signMessageLibVersion: \"1.3.0\",\n        createCallVersion: \"1.3.0\"\n    },\n    \"1.2.0\": {\n        safeMasterCopyVersion: \"1.2.0\",\n        safeMasterCopyL2Version: undefined,\n        safeProxyFactoryVersion: \"1.1.1\",\n        compatibilityFallbackHandler: \"1.3.0\",\n        multiSendVersion: \"1.1.1\",\n        multiSendCallOnlyVersion: \"1.3.0\",\n        signMessageLibVersion: \"1.3.0\",\n        createCallVersion: \"1.3.0\"\n    },\n    \"1.1.1\": {\n        safeMasterCopyVersion: \"1.1.1\",\n        safeMasterCopyL2Version: undefined,\n        safeProxyFactoryVersion: \"1.1.1\",\n        compatibilityFallbackHandler: \"1.3.0\",\n        multiSendVersion: \"1.1.1\",\n        multiSendCallOnlyVersion: \"1.3.0\",\n        signMessageLibVersion: \"1.3.0\",\n        createCallVersion: \"1.3.0\"\n    },\n    \"1.0.0\": {\n        safeMasterCopyVersion: \"1.0.0\",\n        safeMasterCopyL2Version: undefined,\n        safeProxyFactoryVersion: \"1.0.0\",\n        compatibilityFallbackHandler: \"1.3.0\",\n        multiSendVersion: \"1.1.1\",\n        multiSendCallOnlyVersion: \"1.3.0\",\n        signMessageLibVersion: \"1.3.0\",\n        createCallVersion: \"1.3.0\"\n    }\n};\nexports.safeDeploymentsL1ChainIds = [\n    1 // Ethereum Mainnet\n]; //# sourceMappingURL=config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy9jb250cmFjdHMvY29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQ0FBaUMsR0FBR0EsK0JBQStCLEdBQUdBLHlCQUF5QixHQUFHQSx5QkFBeUIsR0FBRyxLQUFLO0FBQ25JQSx5QkFBeUIsR0FBRztBQUM1QkEseUJBQXlCLEdBQUc7QUFDNUJBLCtCQUErQixHQUFHO0lBQzlCLFNBQVM7UUFDTE0sdUJBQXVCO1FBQ3ZCQyx5QkFBeUI7UUFDekJDLHlCQUF5QjtRQUN6QkMsOEJBQThCO1FBQzlCQyxrQkFBa0I7UUFDbEJDLDBCQUEwQjtRQUMxQkMsdUJBQXVCO1FBQ3ZCQyxtQkFBbUI7SUFDdkI7SUFDQSxTQUFTO1FBQ0xQLHVCQUF1QjtRQUN2QkMseUJBQXlCTztRQUN6Qk4seUJBQXlCO1FBQ3pCQyw4QkFBOEI7UUFDOUJDLGtCQUFrQjtRQUNsQkMsMEJBQTBCO1FBQzFCQyx1QkFBdUI7UUFDdkJDLG1CQUFtQjtJQUN2QjtJQUNBLFNBQVM7UUFDTFAsdUJBQXVCO1FBQ3ZCQyx5QkFBeUJPO1FBQ3pCTix5QkFBeUI7UUFDekJDLDhCQUE4QjtRQUM5QkMsa0JBQWtCO1FBQ2xCQywwQkFBMEI7UUFDMUJDLHVCQUF1QjtRQUN2QkMsbUJBQW1CO0lBQ3ZCO0lBQ0EsU0FBUztRQUNMUCx1QkFBdUI7UUFDdkJDLHlCQUF5Qk87UUFDekJOLHlCQUF5QjtRQUN6QkMsOEJBQThCO1FBQzlCQyxrQkFBa0I7UUFDbEJDLDBCQUEwQjtRQUMxQkMsdUJBQXVCO1FBQ3ZCQyxtQkFBbUI7SUFDdkI7QUFDSjtBQUNBYixpQ0FBaUMsR0FBRztJQUNoQyxFQUFFLG1CQUFtQjtDQUN4QixFQUNELGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrc2FmZS1jb3JlLXNka0AzLjMuNV9ldGhlcnNANS43LjIvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9zYWZlLWNvcmUtc2RrL2Rpc3Qvc3JjL2NvbnRyYWN0cy9jb25maWcuanM/Y2FkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2FmZURlcGxveW1lbnRzTDFDaGFpbklkcyA9IGV4cG9ydHMuc2FmZURlcGxveW1lbnRzVmVyc2lvbnMgPSBleHBvcnRzLlNBRkVfQkFTRV9WRVJTSU9OID0gZXhwb3J0cy5TQUZFX0xBU1RfVkVSU0lPTiA9IHZvaWQgMDtcbmV4cG9ydHMuU0FGRV9MQVNUX1ZFUlNJT04gPSAnMS4zLjAnO1xuZXhwb3J0cy5TQUZFX0JBU0VfVkVSU0lPTiA9ICcxLjAuMCc7XG5leHBvcnRzLnNhZmVEZXBsb3ltZW50c1ZlcnNpb25zID0ge1xuICAgICcxLjMuMCc6IHtcbiAgICAgICAgc2FmZU1hc3RlckNvcHlWZXJzaW9uOiAnMS4zLjAnLFxuICAgICAgICBzYWZlTWFzdGVyQ29weUwyVmVyc2lvbjogJzEuMy4wJyxcbiAgICAgICAgc2FmZVByb3h5RmFjdG9yeVZlcnNpb246ICcxLjMuMCcsXG4gICAgICAgIGNvbXBhdGliaWxpdHlGYWxsYmFja0hhbmRsZXI6ICcxLjMuMCcsXG4gICAgICAgIG11bHRpU2VuZFZlcnNpb246ICcxLjMuMCcsXG4gICAgICAgIG11bHRpU2VuZENhbGxPbmx5VmVyc2lvbjogJzEuMy4wJyxcbiAgICAgICAgc2lnbk1lc3NhZ2VMaWJWZXJzaW9uOiAnMS4zLjAnLFxuICAgICAgICBjcmVhdGVDYWxsVmVyc2lvbjogJzEuMy4wJ1xuICAgIH0sXG4gICAgJzEuMi4wJzoge1xuICAgICAgICBzYWZlTWFzdGVyQ29weVZlcnNpb246ICcxLjIuMCcsXG4gICAgICAgIHNhZmVNYXN0ZXJDb3B5TDJWZXJzaW9uOiB1bmRlZmluZWQsXG4gICAgICAgIHNhZmVQcm94eUZhY3RvcnlWZXJzaW9uOiAnMS4xLjEnLFxuICAgICAgICBjb21wYXRpYmlsaXR5RmFsbGJhY2tIYW5kbGVyOiAnMS4zLjAnLFxuICAgICAgICBtdWx0aVNlbmRWZXJzaW9uOiAnMS4xLjEnLFxuICAgICAgICBtdWx0aVNlbmRDYWxsT25seVZlcnNpb246ICcxLjMuMCcsXG4gICAgICAgIHNpZ25NZXNzYWdlTGliVmVyc2lvbjogJzEuMy4wJyxcbiAgICAgICAgY3JlYXRlQ2FsbFZlcnNpb246ICcxLjMuMCdcbiAgICB9LFxuICAgICcxLjEuMSc6IHtcbiAgICAgICAgc2FmZU1hc3RlckNvcHlWZXJzaW9uOiAnMS4xLjEnLFxuICAgICAgICBzYWZlTWFzdGVyQ29weUwyVmVyc2lvbjogdW5kZWZpbmVkLFxuICAgICAgICBzYWZlUHJveHlGYWN0b3J5VmVyc2lvbjogJzEuMS4xJyxcbiAgICAgICAgY29tcGF0aWJpbGl0eUZhbGxiYWNrSGFuZGxlcjogJzEuMy4wJyxcbiAgICAgICAgbXVsdGlTZW5kVmVyc2lvbjogJzEuMS4xJyxcbiAgICAgICAgbXVsdGlTZW5kQ2FsbE9ubHlWZXJzaW9uOiAnMS4zLjAnLFxuICAgICAgICBzaWduTWVzc2FnZUxpYlZlcnNpb246ICcxLjMuMCcsXG4gICAgICAgIGNyZWF0ZUNhbGxWZXJzaW9uOiAnMS4zLjAnXG4gICAgfSxcbiAgICAnMS4wLjAnOiB7XG4gICAgICAgIHNhZmVNYXN0ZXJDb3B5VmVyc2lvbjogJzEuMC4wJyxcbiAgICAgICAgc2FmZU1hc3RlckNvcHlMMlZlcnNpb246IHVuZGVmaW5lZCxcbiAgICAgICAgc2FmZVByb3h5RmFjdG9yeVZlcnNpb246ICcxLjAuMCcsXG4gICAgICAgIGNvbXBhdGliaWxpdHlGYWxsYmFja0hhbmRsZXI6ICcxLjMuMCcsXG4gICAgICAgIG11bHRpU2VuZFZlcnNpb246ICcxLjEuMScsXG4gICAgICAgIG11bHRpU2VuZENhbGxPbmx5VmVyc2lvbjogJzEuMy4wJyxcbiAgICAgICAgc2lnbk1lc3NhZ2VMaWJWZXJzaW9uOiAnMS4zLjAnLFxuICAgICAgICBjcmVhdGVDYWxsVmVyc2lvbjogJzEuMy4wJ1xuICAgIH1cbn07XG5leHBvcnRzLnNhZmVEZXBsb3ltZW50c0wxQ2hhaW5JZHMgPSBbXG4gICAgMSAvLyBFdGhlcmV1bSBNYWlubmV0XG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInNhZmVEZXBsb3ltZW50c0wxQ2hhaW5JZHMiLCJzYWZlRGVwbG95bWVudHNWZXJzaW9ucyIsIlNBRkVfQkFTRV9WRVJTSU9OIiwiU0FGRV9MQVNUX1ZFUlNJT04iLCJzYWZlTWFzdGVyQ29weVZlcnNpb24iLCJzYWZlTWFzdGVyQ29weUwyVmVyc2lvbiIsInNhZmVQcm94eUZhY3RvcnlWZXJzaW9uIiwiY29tcGF0aWJpbGl0eUZhbGxiYWNrSGFuZGxlciIsIm11bHRpU2VuZFZlcnNpb24iLCJtdWx0aVNlbmRDYWxsT25seVZlcnNpb24iLCJzaWduTWVzc2FnZUxpYlZlcnNpb24iLCJjcmVhdGVDYWxsVmVyc2lvbiIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getCreateCallContract = exports.getSignMessageLibContract = exports.getMultiSendCallOnlyContract = exports.getMultiSendContract = exports.getCompatibilityFallbackHandlerContract = exports.getProxyFactoryContract = exports.getSafeContract = exports.getCreateCallContractDeployment = exports.getSignMessageLibContractDeployment = exports.getSafeProxyFactoryContractDeployment = exports.getMultiSendContractDeployment = exports.getMultiSendCallOnlyContractDeployment = exports.getCompatibilityFallbackHandlerContractDeployment = exports.getSafeContractDeployment = void 0;\nconst safe_deployments_1 = __webpack_require__(/*! @safe-global/safe-deployments */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-deployments@1.30.0/node_modules/@safe-global/safe-deployments/dist/index.js\");\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js\");\nfunction getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy = false) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].safeMasterCopyVersion;\n    const filters = {\n        version,\n        network: chainId.toString(),\n        released: true\n    };\n    if (config_1.safeDeploymentsL1ChainIds.includes(chainId) || isL1SafeMasterCopy) {\n        return (0, safe_deployments_1.getSafeSingletonDeployment)(filters);\n    }\n    return (0, safe_deployments_1.getSafeL2SingletonDeployment)(filters);\n}\nexports.getSafeContractDeployment = getSafeContractDeployment;\nfunction getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].compatibilityFallbackHandler;\n    return (0, safe_deployments_1.getCompatibilityFallbackHandlerDeployment)({\n        version,\n        network: chainId.toString(),\n        released: true\n    });\n}\nexports.getCompatibilityFallbackHandlerContractDeployment = getCompatibilityFallbackHandlerContractDeployment;\nfunction getMultiSendCallOnlyContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].multiSendCallOnlyVersion;\n    return (0, safe_deployments_1.getMultiSendCallOnlyDeployment)({\n        version,\n        network: chainId.toString(),\n        released: true\n    });\n}\nexports.getMultiSendCallOnlyContractDeployment = getMultiSendCallOnlyContractDeployment;\nfunction getMultiSendContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].multiSendVersion;\n    return (0, safe_deployments_1.getMultiSendDeployment)({\n        version,\n        network: chainId.toString(),\n        released: true\n    });\n}\nexports.getMultiSendContractDeployment = getMultiSendContractDeployment;\nfunction getSafeProxyFactoryContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].safeProxyFactoryVersion;\n    return (0, safe_deployments_1.getProxyFactoryDeployment)({\n        version,\n        network: chainId.toString(),\n        released: true\n    });\n}\nexports.getSafeProxyFactoryContractDeployment = getSafeProxyFactoryContractDeployment;\nfunction getSignMessageLibContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].signMessageLibVersion;\n    return (0, safe_deployments_1.getSignMessageLibDeployment)({\n        version,\n        network: chainId.toString(),\n        released: true\n    });\n}\nexports.getSignMessageLibContractDeployment = getSignMessageLibContractDeployment;\nfunction getCreateCallContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].createCallVersion;\n    return (0, safe_deployments_1.getCreateCallDeployment)({\n        version,\n        network: chainId.toString(),\n        released: true\n    });\n}\nexports.getCreateCallContractDeployment = getCreateCallContractDeployment;\nasync function getSafeContract({ ethAdapter, safeVersion, chainId, customSafeAddress, isL1SafeMasterCopy, customContracts }) {\n    const singletonDeployment = getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy);\n    const gnosisSafeContract = ethAdapter.getSafeContract({\n        safeVersion,\n        chainId,\n        singletonDeployment,\n        customContractAddress: customSafeAddress !== null && customSafeAddress !== void 0 ? customSafeAddress : customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(gnosisSafeContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error(\"SafeProxy contract is not deployed on the current network\");\n    }\n    return gnosisSafeContract;\n}\nexports.getSafeContract = getSafeContract;\nasync function getProxyFactoryContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const proxyFactoryDeployment = getSafeProxyFactoryContractDeployment(safeVersion, chainId);\n    const safeProxyFactoryContract = await ethAdapter.getSafeProxyFactoryContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: proxyFactoryDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(safeProxyFactoryContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error(\"SafeProxyFactory contract is not deployed on the current network\");\n    }\n    return safeProxyFactoryContract;\n}\nexports.getProxyFactoryContract = getProxyFactoryContract;\nasync function getCompatibilityFallbackHandlerContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const fallbackHandlerDeployment = getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId);\n    const fallbackHandlerContract = await ethAdapter.getCompatibilityFallbackHandlerContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: fallbackHandlerDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(fallbackHandlerContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error(\"CompatibilityFallbackHandler contract is not deployed on the current network\");\n    }\n    return fallbackHandlerContract;\n}\nexports.getCompatibilityFallbackHandlerContract = getCompatibilityFallbackHandlerContract;\nasync function getMultiSendContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const multiSendDeployment = getMultiSendContractDeployment(safeVersion, chainId);\n    const multiSendContract = await ethAdapter.getMultiSendContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: multiSendDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(multiSendContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error(\"MultiSend contract is not deployed on the current network\");\n    }\n    return multiSendContract;\n}\nexports.getMultiSendContract = getMultiSendContract;\nasync function getMultiSendCallOnlyContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const multiSendCallOnlyDeployment = getMultiSendCallOnlyContractDeployment(safeVersion, chainId);\n    const multiSendCallOnlyContract = await ethAdapter.getMultiSendCallOnlyContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: multiSendCallOnlyDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(multiSendCallOnlyContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error(\"MultiSendCallOnly contract is not deployed on the current network\");\n    }\n    return multiSendCallOnlyContract;\n}\nexports.getMultiSendCallOnlyContract = getMultiSendCallOnlyContract;\nasync function getSignMessageLibContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const signMessageLibDeployment = getSignMessageLibContractDeployment(safeVersion, chainId);\n    const signMessageLibContract = await ethAdapter.getSignMessageLibContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: signMessageLibDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(signMessageLibContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error(\"SignMessageLib contract is not deployed on the current network\");\n    }\n    return signMessageLibContract;\n}\nexports.getSignMessageLibContract = getSignMessageLibContract;\nasync function getCreateCallContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const createCallDeployment = getCreateCallContractDeployment(safeVersion, chainId);\n    const createCallContract = await ethAdapter.getCreateCallContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: createCallDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(createCallContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error(\"CreateCall contract is not deployed on the current network\");\n    }\n    return createCallContract;\n}\nexports.getCreateCallContract = getCreateCallContract; //# sourceMappingURL=safeDeploymentContracts.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/index.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/index.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.standardizeSafeTransactionData = exports.SafeFactory = exports.ContractManager = void 0;\nconst contractManager_1 = __importDefault(__webpack_require__(/*! ./managers/contractManager */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js\"));\nexports.ContractManager = contractManager_1.default;\nconst Safe_1 = __importDefault(__webpack_require__(/*! ./Safe */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js\"));\nconst safeFactory_1 = __importDefault(__webpack_require__(/*! ./safeFactory */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/index.js\"));\nexports.SafeFactory = safeFactory_1.default;\nconst utils_1 = __webpack_require__(/*! ./utils/transactions/utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js\");\nObject.defineProperty(exports, \"standardizeSafeTransactionData\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.standardizeSafeTransactionData;\n    }\n}));\nexports[\"default\"] = Safe_1.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0NBQXNDLEdBQUdBLG1CQUFtQixHQUFHQSx1QkFBdUIsR0FBRyxLQUFLO0FBQzlGLE1BQU1LLG9CQUFvQlYsZ0JBQWdCVyxtQkFBT0EsQ0FBQyx5TEFBNEI7QUFDOUVOLHVCQUF1QixHQUFHSyxrQkFBa0JFLE9BQU87QUFDbkQsTUFBTUMsU0FBU2IsZ0JBQWdCVyxtQkFBT0EsQ0FBQyxpSkFBUTtBQUMvQyxNQUFNRyxnQkFBZ0JkLGdCQUFnQlcsbUJBQU9BLENBQUMscUtBQWU7QUFDN0ROLG1CQUFtQixHQUFHUyxjQUFjRixPQUFPO0FBQzNDLE1BQU1HLFVBQVVKLG1CQUFPQSxDQUFDLHlMQUE0QjtBQUNwRFIsa0VBQWlFO0lBQUVhLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLFFBQVFSLDhCQUE4QjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNKRixrQkFBZSxHQUFHUSxPQUFPRCxPQUFPLEVBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrc2FmZS1jb3JlLXNka0AzLjMuNV9ldGhlcnNANS43LjIvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9zYWZlLWNvcmUtc2RrL2Rpc3Qvc3JjL2luZGV4LmpzP2RiNmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YW5kYXJkaXplU2FmZVRyYW5zYWN0aW9uRGF0YSA9IGV4cG9ydHMuU2FmZUZhY3RvcnkgPSBleHBvcnRzLkNvbnRyYWN0TWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IGNvbnRyYWN0TWFuYWdlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hbmFnZXJzL2NvbnRyYWN0TWFuYWdlclwiKSk7XG5leHBvcnRzLkNvbnRyYWN0TWFuYWdlciA9IGNvbnRyYWN0TWFuYWdlcl8xLmRlZmF1bHQ7XG5jb25zdCBTYWZlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU2FmZVwiKSk7XG5jb25zdCBzYWZlRmFjdG9yeV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NhZmVGYWN0b3J5XCIpKTtcbmV4cG9ydHMuU2FmZUZhY3RvcnkgPSBzYWZlRmFjdG9yeV8xLmRlZmF1bHQ7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHMvdHJhbnNhY3Rpb25zL3V0aWxzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3RhbmRhcmRpemVTYWZlVHJhbnNhY3Rpb25EYXRhXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18xLnN0YW5kYXJkaXplU2FmZVRyYW5zYWN0aW9uRGF0YTsgfSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNhZmVfMS5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0YW5kYXJkaXplU2FmZVRyYW5zYWN0aW9uRGF0YSIsIlNhZmVGYWN0b3J5IiwiQ29udHJhY3RNYW5hZ2VyIiwiY29udHJhY3RNYW5hZ2VyXzEiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIlNhZmVfMSIsInNhZmVGYWN0b3J5XzEiLCJ1dGlsc18xIiwiZW51bWVyYWJsZSIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ContractManager_contractNetworks, _ContractManager_isL1SafeMasterCopy, _ContractManager_safeContract, _ContractManager_multiSendContract, _ContractManager_multiSendCallOnlyContract;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst config_1 = __webpack_require__(/*! ../contracts/config */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js\");\nconst safeDeploymentContracts_1 = __webpack_require__(/*! ../contracts/safeDeploymentContracts */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js\");\nclass ContractManager {\n    constructor(){\n        _ContractManager_contractNetworks.set(this, void 0);\n        _ContractManager_isL1SafeMasterCopy.set(this, void 0);\n        _ContractManager_safeContract.set(this, void 0);\n        _ContractManager_multiSendContract.set(this, void 0);\n        _ContractManager_multiSendCallOnlyContract.set(this, void 0);\n    }\n    static async create({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {\n        const contractManager = new ContractManager();\n        await contractManager.init({\n            ethAdapter,\n            safeAddress,\n            isL1SafeMasterCopy,\n            contractNetworks\n        });\n        return contractManager;\n    }\n    async init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {\n        const chainId = await ethAdapter.getChainId();\n        const customContracts = contractNetworks === null || contractNetworks === void 0 ? void 0 : contractNetworks[chainId];\n        __classPrivateFieldSet(this, _ContractManager_contractNetworks, contractNetworks, \"f\");\n        __classPrivateFieldSet(this, _ContractManager_isL1SafeMasterCopy, isL1SafeMasterCopy, \"f\");\n        const temporarySafeContract = await (0, safeDeploymentContracts_1.getSafeContract)({\n            ethAdapter,\n            safeVersion: config_1.SAFE_LAST_VERSION,\n            chainId,\n            isL1SafeMasterCopy,\n            customSafeAddress: safeAddress,\n            customContracts\n        });\n        const safeVersion = await temporarySafeContract.getVersion();\n        __classPrivateFieldSet(this, _ContractManager_safeContract, await (0, safeDeploymentContracts_1.getSafeContract)({\n            ethAdapter,\n            safeVersion,\n            chainId,\n            isL1SafeMasterCopy,\n            customSafeAddress: safeAddress,\n            customContracts\n        }), \"f\");\n        __classPrivateFieldSet(this, _ContractManager_multiSendContract, await (0, safeDeploymentContracts_1.getMultiSendContract)({\n            ethAdapter,\n            safeVersion,\n            chainId,\n            customContracts\n        }), \"f\");\n        __classPrivateFieldSet(this, _ContractManager_multiSendCallOnlyContract, await (0, safeDeploymentContracts_1.getMultiSendCallOnlyContract)({\n            ethAdapter,\n            safeVersion,\n            chainId,\n            customContracts\n        }), \"f\");\n    }\n    get contractNetworks() {\n        return __classPrivateFieldGet(this, _ContractManager_contractNetworks, \"f\");\n    }\n    get isL1SafeMasterCopy() {\n        return __classPrivateFieldGet(this, _ContractManager_isL1SafeMasterCopy, \"f\");\n    }\n    get safeContract() {\n        return __classPrivateFieldGet(this, _ContractManager_safeContract, \"f\");\n    }\n    get multiSendContract() {\n        return __classPrivateFieldGet(this, _ContractManager_multiSendContract, \"f\");\n    }\n    get multiSendCallOnlyContract() {\n        return __classPrivateFieldGet(this, _ContractManager_multiSendCallOnlyContract, \"f\");\n    }\n}\n_ContractManager_contractNetworks = new WeakMap(), _ContractManager_isL1SafeMasterCopy = new WeakMap(), _ContractManager_safeContract = new WeakMap(), _ContractManager_multiSendContract = new WeakMap(), _ContractManager_multiSendCallOnlyContract = new WeakMap();\nexports[\"default\"] = ContractManager; //# sourceMappingURL=contractManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/contractManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/fallbackHandlerManager.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/fallbackHandlerManager.js ***!
  \**************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FallbackHandlerManager_ethAdapter, _FallbackHandlerManager_safeContract, _FallbackHandlerManager_slot;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst safe_core_sdk_utils_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/index.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js\");\nconst constants_1 = __webpack_require__(/*! ../utils/constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js\");\nclass FallbackHandlerManager {\n    constructor(ethAdapter, safeContract){\n        _FallbackHandlerManager_ethAdapter.set(this, void 0);\n        _FallbackHandlerManager_safeContract.set(this, void 0);\n        // keccak256(\"fallback_manager.handler.address\")\n        _FallbackHandlerManager_slot.set(this, \"0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5\");\n        __classPrivateFieldSet(this, _FallbackHandlerManager_ethAdapter, ethAdapter, \"f\");\n        __classPrivateFieldSet(this, _FallbackHandlerManager_safeContract, safeContract, \"f\");\n    }\n    validateFallbackHandlerAddress(fallbackHandlerAddress) {\n        const isValidAddress = __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, \"f\").isAddress(fallbackHandlerAddress);\n        if (!isValidAddress || (0, utils_1.isZeroAddress)(fallbackHandlerAddress)) {\n            throw new Error(\"Invalid fallback handler address provided\");\n        }\n    }\n    validateFallbackHandlerIsNotEnabled(currentFallbackHandler, newFallbackHandlerAddress) {\n        if ((0, utils_1.sameString)(currentFallbackHandler, newFallbackHandlerAddress)) {\n            throw new Error(\"Fallback handler provided is already enabled\");\n        }\n    }\n    validateFallbackHandlerIsEnabled(fallbackHandlerAddress) {\n        if ((0, utils_1.isZeroAddress)(fallbackHandlerAddress)) {\n            throw new Error(\"There is no fallback handler enabled yet\");\n        }\n    }\n    async getFallbackHandler() {\n        const safeVersion = await __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, \"f\").getVersion();\n        if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_FALLBACK_HANDLER, safeVersion)) {\n            return __classPrivateFieldGet(this, _FallbackHandlerManager_ethAdapter, \"f\").getStorageAt(__classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, \"f\").getAddress(), __classPrivateFieldGet(this, _FallbackHandlerManager_slot, \"f\"));\n        } else {\n            throw new Error(\"Current version of the Safe does not support the fallback handler functionality\");\n        }\n    }\n    async encodeEnableFallbackHandlerData(fallbackHandlerAddress) {\n        this.validateFallbackHandlerAddress(fallbackHandlerAddress);\n        const currentFallbackHandler = await this.getFallbackHandler();\n        this.validateFallbackHandlerIsNotEnabled(currentFallbackHandler, fallbackHandlerAddress);\n        return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, \"f\").encode(\"setFallbackHandler\", [\n            fallbackHandlerAddress\n        ]);\n    }\n    async encodeDisableFallbackHandlerData() {\n        const currentFallbackHandler = await this.getFallbackHandler();\n        this.validateFallbackHandlerIsEnabled(currentFallbackHandler);\n        return __classPrivateFieldGet(this, _FallbackHandlerManager_safeContract, \"f\").encode(\"setFallbackHandler\", [\n            constants_1.ZERO_ADDRESS\n        ]);\n    }\n}\n_FallbackHandlerManager_ethAdapter = new WeakMap(), _FallbackHandlerManager_safeContract = new WeakMap(), _FallbackHandlerManager_slot = new WeakMap();\nexports[\"default\"] = FallbackHandlerManager; //# sourceMappingURL=fallbackHandlerManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/fallbackHandlerManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/guardManager.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/guardManager.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _GuardManager_ethAdapter, _GuardManager_safeContract, _GuardManager_slot;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst safe_core_sdk_utils_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/index.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js\");\nconst constants_1 = __webpack_require__(/*! ../utils/constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js\");\nclass GuardManager {\n    constructor(ethAdapter, safeContract){\n        _GuardManager_ethAdapter.set(this, void 0);\n        _GuardManager_safeContract.set(this, void 0);\n        // keccak256(\"guard_manager.guard.address\")\n        _GuardManager_slot.set(this, \"0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8\");\n        __classPrivateFieldSet(this, _GuardManager_ethAdapter, ethAdapter, \"f\");\n        __classPrivateFieldSet(this, _GuardManager_safeContract, safeContract, \"f\");\n    }\n    validateGuardAddress(guardAddress) {\n        const isValidAddress = __classPrivateFieldGet(this, _GuardManager_ethAdapter, \"f\").isAddress(guardAddress);\n        if (!isValidAddress || (0, utils_1.isZeroAddress)(guardAddress)) {\n            throw new Error(\"Invalid guard address provided\");\n        }\n    }\n    validateGuardIsNotEnabled(currentGuard, newGuardAddress) {\n        if ((0, utils_1.sameString)(currentGuard, newGuardAddress)) {\n            throw new Error(\"Guard provided is already enabled\");\n        }\n    }\n    validateGuardIsEnabled(guardAddress) {\n        if ((0, utils_1.isZeroAddress)(guardAddress)) {\n            throw new Error(\"There is no guard enabled yet\");\n        }\n    }\n    async getGuard() {\n        const safeVersion = await __classPrivateFieldGet(this, _GuardManager_safeContract, \"f\").getVersion();\n        if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_TX_GUARDS, safeVersion)) {\n            return __classPrivateFieldGet(this, _GuardManager_ethAdapter, \"f\").getStorageAt(__classPrivateFieldGet(this, _GuardManager_safeContract, \"f\").getAddress(), __classPrivateFieldGet(this, _GuardManager_slot, \"f\"));\n        } else {\n            throw new Error(\"Current version of the Safe does not support Safe transaction guards functionality\");\n        }\n    }\n    async encodeEnableGuardData(guardAddress) {\n        this.validateGuardAddress(guardAddress);\n        const currentGuard = await this.getGuard();\n        this.validateGuardIsNotEnabled(currentGuard, guardAddress);\n        return __classPrivateFieldGet(this, _GuardManager_safeContract, \"f\").encode(\"setGuard\", [\n            guardAddress\n        ]);\n    }\n    async encodeDisableGuardData() {\n        const currentGuard = await this.getGuard();\n        this.validateGuardIsEnabled(currentGuard);\n        return __classPrivateFieldGet(this, _GuardManager_safeContract, \"f\").encode(\"setGuard\", [\n            constants_1.ZERO_ADDRESS\n        ]);\n    }\n}\n_GuardManager_ethAdapter = new WeakMap(), _GuardManager_safeContract = new WeakMap(), _GuardManager_slot = new WeakMap();\nexports[\"default\"] = GuardManager; //# sourceMappingURL=guardManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/guardManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/moduleManager.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/moduleManager.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ModuleManager_ethAdapter, _ModuleManager_safeContract;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js\");\nconst constants_1 = __webpack_require__(/*! ../utils/constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js\");\nclass ModuleManager {\n    constructor(ethAdapter, safeContract){\n        _ModuleManager_ethAdapter.set(this, void 0);\n        _ModuleManager_safeContract.set(this, void 0);\n        __classPrivateFieldSet(this, _ModuleManager_ethAdapter, ethAdapter, \"f\");\n        __classPrivateFieldSet(this, _ModuleManager_safeContract, safeContract, \"f\");\n    }\n    validateModuleAddress(moduleAddress) {\n        const isValidAddress = __classPrivateFieldGet(this, _ModuleManager_ethAdapter, \"f\").isAddress(moduleAddress);\n        if (!isValidAddress || (0, utils_1.isRestrictedAddress)(moduleAddress)) {\n            throw new Error(\"Invalid module address provided\");\n        }\n    }\n    validateModuleIsNotEnabled(moduleAddress, modules) {\n        const moduleIndex = modules.findIndex((module)=>(0, utils_1.sameString)(module, moduleAddress));\n        const isEnabled = moduleIndex >= 0;\n        if (isEnabled) {\n            throw new Error(\"Module provided is already enabled\");\n        }\n    }\n    validateModuleIsEnabled(moduleAddress, modules) {\n        const moduleIndex = modules.findIndex((module)=>(0, utils_1.sameString)(module, moduleAddress));\n        const isEnabled = moduleIndex >= 0;\n        if (!isEnabled) {\n            throw new Error(\"Module provided is not enabled yet\");\n        }\n        return moduleIndex;\n    }\n    async getModules() {\n        return __classPrivateFieldGet(this, _ModuleManager_safeContract, \"f\").getModules();\n    }\n    async isModuleEnabled(moduleAddress) {\n        return __classPrivateFieldGet(this, _ModuleManager_safeContract, \"f\").isModuleEnabled(moduleAddress);\n    }\n    async encodeEnableModuleData(moduleAddress) {\n        this.validateModuleAddress(moduleAddress);\n        const modules = await this.getModules();\n        this.validateModuleIsNotEnabled(moduleAddress, modules);\n        return __classPrivateFieldGet(this, _ModuleManager_safeContract, \"f\").encode(\"enableModule\", [\n            moduleAddress\n        ]);\n    }\n    async encodeDisableModuleData(moduleAddress) {\n        this.validateModuleAddress(moduleAddress);\n        const modules = await this.getModules();\n        const moduleIndex = this.validateModuleIsEnabled(moduleAddress, modules);\n        const prevModuleAddress = moduleIndex === 0 ? constants_1.SENTINEL_ADDRESS : modules[moduleIndex - 1];\n        return __classPrivateFieldGet(this, _ModuleManager_safeContract, \"f\").encode(\"disableModule\", [\n            prevModuleAddress,\n            moduleAddress\n        ]);\n    }\n}\n_ModuleManager_ethAdapter = new WeakMap(), _ModuleManager_safeContract = new WeakMap();\nexports[\"default\"] = ModuleManager; //# sourceMappingURL=moduleManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy9tYW5hZ2Vycy9tb2R1bGVNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEseUJBQXlCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsc0JBQXNCLElBQUssU0FBVUMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxDQUFDO0lBQzNHLElBQUlELFNBQVMsS0FBSyxNQUFNLElBQUlFLFVBQVU7SUFDdEMsSUFBSUYsU0FBUyxPQUFPLENBQUNDLEdBQUcsTUFBTSxJQUFJQyxVQUFVO0lBQzVDLElBQUksT0FBT0osVUFBVSxhQUFhRCxhQUFhQyxTQUFTLENBQUNHLElBQUksQ0FBQ0gsTUFBTUssR0FBRyxDQUFDTixXQUFXLE1BQU0sSUFBSUssVUFBVTtJQUN2RyxPQUFPLFNBQVUsTUFBTUQsRUFBRUcsSUFBSSxDQUFDUCxVQUFVRSxTQUFTRSxJQUFJQSxFQUFFRixLQUFLLEdBQUdBLFFBQVFELE1BQU1PLEdBQUcsQ0FBQ1IsVUFBVUUsUUFBU0E7QUFDeEc7QUFDQSxJQUFJTyx5QkFBeUIsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxzQkFBc0IsSUFBSyxTQUFVVCxRQUFRLEVBQUVDLEtBQUssRUFBRUUsSUFBSSxFQUFFQyxDQUFDO0lBQ3BHLElBQUlELFNBQVMsT0FBTyxDQUFDQyxHQUFHLE1BQU0sSUFBSUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYUQsYUFBYUMsU0FBUyxDQUFDRyxJQUFJLENBQUNILE1BQU1LLEdBQUcsQ0FBQ04sV0FBVyxNQUFNLElBQUlLLFVBQVU7SUFDdkcsT0FBT0YsU0FBUyxNQUFNQyxJQUFJRCxTQUFTLE1BQU1DLEVBQUVHLElBQUksQ0FBQ1AsWUFBWUksSUFBSUEsRUFBRUYsS0FBSyxHQUFHRCxNQUFNUyxHQUFHLENBQUNWO0FBQ3hGO0FBQ0EsSUFBSVcsMkJBQTJCQztBQUMvQkMsOENBQTZDO0lBQUVYLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTWMsVUFBVUMsbUJBQU9BLENBQUMsMEpBQVU7QUFDbEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsd0tBQW9CO0FBQ2hELE1BQU1FO0lBQ0ZDLFlBQVlDLFVBQVUsRUFBRUMsWUFBWSxDQUFFO1FBQ2xDWCwwQkFBMEJILEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUN6Q0ksNEJBQTRCSixHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUs7UUFDM0NULHVCQUF1QixJQUFJLEVBQUVZLDJCQUEyQlUsWUFBWTtRQUNwRXRCLHVCQUF1QixJQUFJLEVBQUVhLDZCQUE2QlUsY0FBYztJQUM1RTtJQUNBQyxzQkFBc0JDLGFBQWEsRUFBRTtRQUNqQyxNQUFNQyxpQkFBaUJoQix1QkFBdUIsSUFBSSxFQUFFRSwyQkFBMkIsS0FBS2UsU0FBUyxDQUFDRjtRQUM5RixJQUFJLENBQUNDLGtCQUFrQixDQUFDLEdBQUdULFFBQVFXLG1CQUFtQixFQUFFSCxnQkFBZ0I7WUFDcEUsTUFBTSxJQUFJSSxNQUFNO1FBQ3BCO0lBQ0o7SUFDQUMsMkJBQTJCTCxhQUFhLEVBQUVNLE9BQU8sRUFBRTtRQUMvQyxNQUFNQyxjQUFjRCxRQUFRRSxTQUFTLENBQUMsQ0FBQ0MsU0FBVyxDQUFDLEdBQUdqQixRQUFRa0IsVUFBVSxFQUFFRCxRQUFRVDtRQUNsRixNQUFNVyxZQUFZSixlQUFlO1FBQ2pDLElBQUlJLFdBQVc7WUFDWCxNQUFNLElBQUlQLE1BQU07UUFDcEI7SUFDSjtJQUNBUSx3QkFBd0JaLGFBQWEsRUFBRU0sT0FBTyxFQUFFO1FBQzVDLE1BQU1DLGNBQWNELFFBQVFFLFNBQVMsQ0FBQyxDQUFDQyxTQUFXLENBQUMsR0FBR2pCLFFBQVFrQixVQUFVLEVBQUVELFFBQVFUO1FBQ2xGLE1BQU1XLFlBQVlKLGVBQWU7UUFDakMsSUFBSSxDQUFDSSxXQUFXO1lBQ1osTUFBTSxJQUFJUCxNQUFNO1FBQ3BCO1FBQ0EsT0FBT0c7SUFDWDtJQUNBLE1BQU1NLGFBQWE7UUFDZixPQUFPNUIsdUJBQXVCLElBQUksRUFBRUcsNkJBQTZCLEtBQUt5QixVQUFVO0lBQ3BGO0lBQ0EsTUFBTUMsZ0JBQWdCZCxhQUFhLEVBQUU7UUFDakMsT0FBT2YsdUJBQXVCLElBQUksRUFBRUcsNkJBQTZCLEtBQUswQixlQUFlLENBQUNkO0lBQzFGO0lBQ0EsTUFBTWUsdUJBQXVCZixhQUFhLEVBQUU7UUFDeEMsSUFBSSxDQUFDRCxxQkFBcUIsQ0FBQ0M7UUFDM0IsTUFBTU0sVUFBVSxNQUFNLElBQUksQ0FBQ08sVUFBVTtRQUNyQyxJQUFJLENBQUNSLDBCQUEwQixDQUFDTCxlQUFlTTtRQUMvQyxPQUFPckIsdUJBQXVCLElBQUksRUFBRUcsNkJBQTZCLEtBQUs0QixNQUFNLENBQUMsZ0JBQWdCO1lBQUNoQjtTQUFjO0lBQ2hIO0lBQ0EsTUFBTWlCLHdCQUF3QmpCLGFBQWEsRUFBRTtRQUN6QyxJQUFJLENBQUNELHFCQUFxQixDQUFDQztRQUMzQixNQUFNTSxVQUFVLE1BQU0sSUFBSSxDQUFDTyxVQUFVO1FBQ3JDLE1BQU1OLGNBQWMsSUFBSSxDQUFDSyx1QkFBdUIsQ0FBQ1osZUFBZU07UUFDaEUsTUFBTVksb0JBQW9CWCxnQkFBZ0IsSUFBSWIsWUFBWXlCLGdCQUFnQixHQUFHYixPQUFPLENBQUNDLGNBQWMsRUFBRTtRQUNyRyxPQUFPdEIsdUJBQXVCLElBQUksRUFBRUcsNkJBQTZCLEtBQUs0QixNQUFNLENBQUMsaUJBQWlCO1lBQUNFO1lBQW1CbEI7U0FBYztJQUNwSTtBQUNKO0FBQ0FiLDRCQUE0QixJQUFJaUMsV0FBV2hDLDhCQUE4QixJQUFJZ0M7QUFDN0U3QixrQkFBZSxHQUFHSSxlQUNsQix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy9tYW5hZ2Vycy9tb2R1bGVNYW5hZ2VyLmpzP2YyNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX01vZHVsZU1hbmFnZXJfZXRoQWRhcHRlciwgX01vZHVsZU1hbmFnZXJfc2FmZUNvbnRyYWN0O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2NvbnN0YW50c1wiKTtcbmNsYXNzIE1vZHVsZU1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKGV0aEFkYXB0ZXIsIHNhZmVDb250cmFjdCkge1xuICAgICAgICBfTW9kdWxlTWFuYWdlcl9ldGhBZGFwdGVyLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfTW9kdWxlTWFuYWdlcl9zYWZlQ29udHJhY3Quc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01vZHVsZU1hbmFnZXJfZXRoQWRhcHRlciwgZXRoQWRhcHRlciwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Nb2R1bGVNYW5hZ2VyX3NhZmVDb250cmFjdCwgc2FmZUNvbnRyYWN0LCBcImZcIik7XG4gICAgfVxuICAgIHZhbGlkYXRlTW9kdWxlQWRkcmVzcyhtb2R1bGVBZGRyZXNzKSB7XG4gICAgICAgIGNvbnN0IGlzVmFsaWRBZGRyZXNzID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kdWxlTWFuYWdlcl9ldGhBZGFwdGVyLCBcImZcIikuaXNBZGRyZXNzKG1vZHVsZUFkZHJlc3MpO1xuICAgICAgICBpZiAoIWlzVmFsaWRBZGRyZXNzIHx8ICgwLCB1dGlsc18xLmlzUmVzdHJpY3RlZEFkZHJlc3MpKG1vZHVsZUFkZHJlc3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kdWxlIGFkZHJlc3MgcHJvdmlkZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZU1vZHVsZUlzTm90RW5hYmxlZChtb2R1bGVBZGRyZXNzLCBtb2R1bGVzKSB7XG4gICAgICAgIGNvbnN0IG1vZHVsZUluZGV4ID0gbW9kdWxlcy5maW5kSW5kZXgoKG1vZHVsZSkgPT4gKDAsIHV0aWxzXzEuc2FtZVN0cmluZykobW9kdWxlLCBtb2R1bGVBZGRyZXNzKSk7XG4gICAgICAgIGNvbnN0IGlzRW5hYmxlZCA9IG1vZHVsZUluZGV4ID49IDA7XG4gICAgICAgIGlmIChpc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kdWxlIHByb3ZpZGVkIGlzIGFscmVhZHkgZW5hYmxlZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhbGlkYXRlTW9kdWxlSXNFbmFibGVkKG1vZHVsZUFkZHJlc3MsIG1vZHVsZXMpIHtcbiAgICAgICAgY29uc3QgbW9kdWxlSW5kZXggPSBtb2R1bGVzLmZpbmRJbmRleCgobW9kdWxlKSA9PiAoMCwgdXRpbHNfMS5zYW1lU3RyaW5nKShtb2R1bGUsIG1vZHVsZUFkZHJlc3MpKTtcbiAgICAgICAgY29uc3QgaXNFbmFibGVkID0gbW9kdWxlSW5kZXggPj0gMDtcbiAgICAgICAgaWYgKCFpc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kdWxlIHByb3ZpZGVkIGlzIG5vdCBlbmFibGVkIHlldCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2R1bGVJbmRleDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TW9kdWxlcygpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZHVsZU1hbmFnZXJfc2FmZUNvbnRyYWN0LCBcImZcIikuZ2V0TW9kdWxlcygpO1xuICAgIH1cbiAgICBhc3luYyBpc01vZHVsZUVuYWJsZWQobW9kdWxlQWRkcmVzcykge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kdWxlTWFuYWdlcl9zYWZlQ29udHJhY3QsIFwiZlwiKS5pc01vZHVsZUVuYWJsZWQobW9kdWxlQWRkcmVzcyk7XG4gICAgfVxuICAgIGFzeW5jIGVuY29kZUVuYWJsZU1vZHVsZURhdGEobW9kdWxlQWRkcmVzcykge1xuICAgICAgICB0aGlzLnZhbGlkYXRlTW9kdWxlQWRkcmVzcyhtb2R1bGVBZGRyZXNzKTtcbiAgICAgICAgY29uc3QgbW9kdWxlcyA9IGF3YWl0IHRoaXMuZ2V0TW9kdWxlcygpO1xuICAgICAgICB0aGlzLnZhbGlkYXRlTW9kdWxlSXNOb3RFbmFibGVkKG1vZHVsZUFkZHJlc3MsIG1vZHVsZXMpO1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW9kdWxlTWFuYWdlcl9zYWZlQ29udHJhY3QsIFwiZlwiKS5lbmNvZGUoJ2VuYWJsZU1vZHVsZScsIFttb2R1bGVBZGRyZXNzXSk7XG4gICAgfVxuICAgIGFzeW5jIGVuY29kZURpc2FibGVNb2R1bGVEYXRhKG1vZHVsZUFkZHJlc3MpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZU1vZHVsZUFkZHJlc3MobW9kdWxlQWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IG1vZHVsZXMgPSBhd2FpdCB0aGlzLmdldE1vZHVsZXMoKTtcbiAgICAgICAgY29uc3QgbW9kdWxlSW5kZXggPSB0aGlzLnZhbGlkYXRlTW9kdWxlSXNFbmFibGVkKG1vZHVsZUFkZHJlc3MsIG1vZHVsZXMpO1xuICAgICAgICBjb25zdCBwcmV2TW9kdWxlQWRkcmVzcyA9IG1vZHVsZUluZGV4ID09PSAwID8gY29uc3RhbnRzXzEuU0VOVElORUxfQUREUkVTUyA6IG1vZHVsZXNbbW9kdWxlSW5kZXggLSAxXTtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vZHVsZU1hbmFnZXJfc2FmZUNvbnRyYWN0LCBcImZcIikuZW5jb2RlKCdkaXNhYmxlTW9kdWxlJywgW3ByZXZNb2R1bGVBZGRyZXNzLCBtb2R1bGVBZGRyZXNzXSk7XG4gICAgfVxufVxuX01vZHVsZU1hbmFnZXJfZXRoQWRhcHRlciA9IG5ldyBXZWFrTWFwKCksIF9Nb2R1bGVNYW5hZ2VyX3NhZmVDb250cmFjdCA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnRzLmRlZmF1bHQgPSBNb2R1bGVNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlTWFuYWdlci5qcy5tYXAiXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsInJlY2VpdmVyIiwic3RhdGUiLCJ2YWx1ZSIsImtpbmQiLCJmIiwiVHlwZUVycm9yIiwiaGFzIiwiY2FsbCIsInNldCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJnZXQiLCJfTW9kdWxlTWFuYWdlcl9ldGhBZGFwdGVyIiwiX01vZHVsZU1hbmFnZXJfc2FmZUNvbnRyYWN0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidXRpbHNfMSIsInJlcXVpcmUiLCJjb25zdGFudHNfMSIsIk1vZHVsZU1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsImV0aEFkYXB0ZXIiLCJzYWZlQ29udHJhY3QiLCJ2YWxpZGF0ZU1vZHVsZUFkZHJlc3MiLCJtb2R1bGVBZGRyZXNzIiwiaXNWYWxpZEFkZHJlc3MiLCJpc0FkZHJlc3MiLCJpc1Jlc3RyaWN0ZWRBZGRyZXNzIiwiRXJyb3IiLCJ2YWxpZGF0ZU1vZHVsZUlzTm90RW5hYmxlZCIsIm1vZHVsZXMiLCJtb2R1bGVJbmRleCIsImZpbmRJbmRleCIsIm1vZHVsZSIsInNhbWVTdHJpbmciLCJpc0VuYWJsZWQiLCJ2YWxpZGF0ZU1vZHVsZUlzRW5hYmxlZCIsImdldE1vZHVsZXMiLCJpc01vZHVsZUVuYWJsZWQiLCJlbmNvZGVFbmFibGVNb2R1bGVEYXRhIiwiZW5jb2RlIiwiZW5jb2RlRGlzYWJsZU1vZHVsZURhdGEiLCJwcmV2TW9kdWxlQWRkcmVzcyIsIlNFTlRJTkVMX0FERFJFU1MiLCJXZWFrTWFwIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/moduleManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/ownerManager.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/ownerManager.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _OwnerManager_ethAdapter, _OwnerManager_safeContract;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js\");\nconst constants_1 = __webpack_require__(/*! ../utils/constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js\");\nclass OwnerManager {\n    constructor(ethAdapter, safeContract){\n        _OwnerManager_ethAdapter.set(this, void 0);\n        _OwnerManager_safeContract.set(this, void 0);\n        __classPrivateFieldSet(this, _OwnerManager_ethAdapter, ethAdapter, \"f\");\n        __classPrivateFieldSet(this, _OwnerManager_safeContract, safeContract, \"f\");\n    }\n    validateOwnerAddress(ownerAddress, errorMessage) {\n        const isValidAddress = __classPrivateFieldGet(this, _OwnerManager_ethAdapter, \"f\").isAddress(ownerAddress);\n        if (!isValidAddress || (0, utils_1.isRestrictedAddress)(ownerAddress)) {\n            throw new Error(errorMessage || \"Invalid owner address provided\");\n        }\n    }\n    validateThreshold(threshold, numOwners) {\n        if (threshold <= 0) {\n            throw new Error(\"Threshold needs to be greater than 0\");\n        }\n        if (threshold > numOwners) {\n            throw new Error(\"Threshold cannot exceed owner count\");\n        }\n    }\n    validateAddressIsNotOwner(ownerAddress, owners, errorMessage) {\n        const ownerIndex = owners.findIndex((owner)=>(0, utils_1.sameString)(owner, ownerAddress));\n        const isOwner = ownerIndex >= 0;\n        if (isOwner) {\n            throw new Error(errorMessage || \"Address provided is already an owner\");\n        }\n    }\n    validateAddressIsOwner(ownerAddress, owners, errorMessage) {\n        const ownerIndex = owners.findIndex((owner)=>(0, utils_1.sameString)(owner, ownerAddress));\n        const isOwner = ownerIndex >= 0;\n        if (!isOwner) {\n            throw new Error(errorMessage || \"Address provided is not an owner\");\n        }\n        return ownerIndex;\n    }\n    async getOwners() {\n        const owners = await __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").getOwners();\n        return [\n            ...owners\n        ];\n    }\n    async getThreshold() {\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").getThreshold();\n    }\n    async isOwner(ownerAddress) {\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").isOwner(ownerAddress);\n    }\n    async encodeAddOwnerWithThresholdData(ownerAddress, threshold) {\n        this.validateOwnerAddress(ownerAddress);\n        const owners = await this.getOwners();\n        this.validateAddressIsNotOwner(ownerAddress, owners);\n        const newThreshold = threshold !== null && threshold !== void 0 ? threshold : await this.getThreshold();\n        this.validateThreshold(newThreshold, owners.length + 1);\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode(\"addOwnerWithThreshold\", [\n            ownerAddress,\n            newThreshold\n        ]);\n    }\n    async encodeRemoveOwnerData(ownerAddress, threshold) {\n        this.validateOwnerAddress(ownerAddress);\n        const owners = await this.getOwners();\n        const ownerIndex = this.validateAddressIsOwner(ownerAddress, owners);\n        const newThreshold = threshold !== null && threshold !== void 0 ? threshold : await this.getThreshold() - 1;\n        this.validateThreshold(newThreshold, owners.length - 1);\n        const prevOwnerAddress = ownerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[ownerIndex - 1];\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode(\"removeOwner\", [\n            prevOwnerAddress,\n            ownerAddress,\n            newThreshold\n        ]);\n    }\n    async encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress) {\n        this.validateOwnerAddress(newOwnerAddress, \"Invalid new owner address provided\");\n        this.validateOwnerAddress(oldOwnerAddress, \"Invalid old owner address provided\");\n        const owners = await this.getOwners();\n        this.validateAddressIsNotOwner(newOwnerAddress, owners, \"New address provided is already an owner\");\n        const oldOwnerIndex = this.validateAddressIsOwner(oldOwnerAddress, owners, \"Old address provided is not an owner\");\n        const prevOwnerAddress = oldOwnerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[oldOwnerIndex - 1];\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode(\"swapOwner\", [\n            prevOwnerAddress,\n            oldOwnerAddress,\n            newOwnerAddress\n        ]);\n    }\n    async encodeChangeThresholdData(threshold) {\n        const owners = await this.getOwners();\n        this.validateThreshold(threshold, owners.length);\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode(\"changeThreshold\", [\n            threshold\n        ]);\n    }\n}\n_OwnerManager_ethAdapter = new WeakMap(), _OwnerManager_safeContract = new WeakMap();\nexports[\"default\"] = OwnerManager; //# sourceMappingURL=ownerManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/managers/ownerManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/index.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/index.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar _SafeFactory_contractNetworks, _SafeFactory_isL1SafeMasterCopy, _SafeFactory_safeVersion, _SafeFactory_ethAdapter, _SafeFactory_safeProxyFactoryContract, _SafeFactory_gnosisSafeContract;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ethereumjs_util_1 = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist/index.js\");\nconst satisfies_1 = __importDefault(__webpack_require__(/*! semver/functions/satisfies */ \"(ssr)/./node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js\"));\nconst zksync_web3_1 = __webpack_require__(/*! zksync-web3 */ \"(ssr)/./node_modules/.pnpm/zksync-web3@0.14.4_ethers@5.7.2/node_modules/zksync-web3/build/src/index.js\");\nconst config_1 = __webpack_require__(/*! ../contracts/config */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/config.js\");\nconst safeDeploymentContracts_1 = __webpack_require__(/*! ../contracts/safeDeploymentContracts */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/contracts/safeDeploymentContracts.js\");\nconst Safe_1 = __importDefault(__webpack_require__(/*! ../Safe */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/Safe.js\"));\nconst constants_1 = __webpack_require__(/*! ../utils/constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/utils.js\");\nconst ZKSYNC_MAINNET = 324;\nconst ZKSYNC_TESTNET = 280;\n// For bundle size efficiency we store SafeProxy.sol/GnosisSafeProxy.sol zksync bytecode hash in hex.\n// To get the values below we need to:\n// 1. Compile Safe smart contracts for zksync\n// 2. Get `deployedBytecode` from SafeProxy.json/GnosisSafeProxy.json\n// 3. Use zksync-web3 SDK to get the bytecode hash\n//    const bytecodeHash = zkSyncUtils.hashBytecode(${deployedBytecode})\n// 4. Use ethers to convert the array into hex\n//    const deployedBytecodeHash = ethers.utils.hexlify(bytecodeHash)\nconst ZKSYNC_SAFE_PROXY_DEPLOYED_BYTECODE = {\n    \"1.3.0\": {\n        deployedBytecodeHash: \"0x0100004124426fb9ebb25e27d670c068e52f9ba631bd383279a188be47e3f86d\"\n    }\n};\nclass SafeFactory {\n    constructor(){\n        _SafeFactory_contractNetworks.set(this, void 0);\n        _SafeFactory_isL1SafeMasterCopy.set(this, void 0);\n        _SafeFactory_safeVersion.set(this, void 0);\n        _SafeFactory_ethAdapter.set(this, void 0);\n        _SafeFactory_safeProxyFactoryContract.set(this, void 0);\n        _SafeFactory_gnosisSafeContract.set(this, void 0);\n    }\n    static async create({ ethAdapter, safeVersion = config_1.SAFE_LAST_VERSION, isL1SafeMasterCopy = false, contractNetworks }) {\n        const safeFactorySdk = new SafeFactory();\n        await safeFactorySdk.init({\n            ethAdapter,\n            safeVersion,\n            isL1SafeMasterCopy,\n            contractNetworks\n        });\n        return safeFactorySdk;\n    }\n    async init({ ethAdapter, safeVersion, isL1SafeMasterCopy, contractNetworks }) {\n        __classPrivateFieldSet(this, _SafeFactory_ethAdapter, ethAdapter, \"f\");\n        __classPrivateFieldSet(this, _SafeFactory_safeVersion, safeVersion, \"f\");\n        __classPrivateFieldSet(this, _SafeFactory_isL1SafeMasterCopy, isL1SafeMasterCopy, \"f\");\n        __classPrivateFieldSet(this, _SafeFactory_contractNetworks, contractNetworks, \"f\");\n        const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").getChainId();\n        const customContracts = contractNetworks === null || contractNetworks === void 0 ? void 0 : contractNetworks[chainId];\n        __classPrivateFieldSet(this, _SafeFactory_safeProxyFactoryContract, await (0, safeDeploymentContracts_1.getProxyFactoryContract)({\n            ethAdapter,\n            safeVersion,\n            chainId,\n            customContracts\n        }), \"f\");\n        __classPrivateFieldSet(this, _SafeFactory_gnosisSafeContract, await (0, safeDeploymentContracts_1.getSafeContract)({\n            ethAdapter,\n            safeVersion,\n            chainId,\n            isL1SafeMasterCopy,\n            customContracts\n        }), \"f\");\n    }\n    getEthAdapter() {\n        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\");\n    }\n    getSafeVersion() {\n        return __classPrivateFieldGet(this, _SafeFactory_safeVersion, \"f\");\n    }\n    getAddress() {\n        return __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, \"f\").getAddress();\n    }\n    async getChainId() {\n        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").getChainId();\n    }\n    async encodeSetupCallData({ owners, threshold, to = constants_1.ZERO_ADDRESS, data = constants_1.EMPTY_DATA, fallbackHandler, paymentToken = constants_1.ZERO_ADDRESS, payment = 0, paymentReceiver = constants_1.ZERO_ADDRESS }) {\n        var _a;\n        if ((0, satisfies_1.default)(__classPrivateFieldGet(this, _SafeFactory_safeVersion, \"f\"), \"<=1.0.0\")) {\n            return __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, \"f\").encode(\"setup\", [\n                owners,\n                threshold,\n                to,\n                data,\n                paymentToken,\n                payment,\n                paymentReceiver\n            ]);\n        }\n        let fallbackHandlerAddress;\n        if (fallbackHandler) {\n            fallbackHandlerAddress = fallbackHandler;\n        } else {\n            const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").getChainId();\n            const customContracts = (_a = __classPrivateFieldGet(this, _SafeFactory_contractNetworks, \"f\")) === null || _a === void 0 ? void 0 : _a[chainId];\n            const fallbackHandlerContract = await (0, safeDeploymentContracts_1.getCompatibilityFallbackHandlerContract)({\n                ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\"),\n                safeVersion: __classPrivateFieldGet(this, _SafeFactory_safeVersion, \"f\"),\n                chainId,\n                customContracts\n            });\n            fallbackHandlerAddress = fallbackHandlerContract.getAddress();\n        }\n        return __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, \"f\").encode(\"setup\", [\n            owners,\n            threshold,\n            to,\n            data,\n            fallbackHandlerAddress,\n            paymentToken,\n            payment,\n            paymentReceiver\n        ]);\n    }\n    async predictSafeAddress({ safeAccountConfig, safeDeploymentConfig }) {\n        (0, utils_1.validateSafeAccountConfig)(safeAccountConfig);\n        (0, utils_1.validateSafeDeploymentConfig)(safeDeploymentConfig);\n        const from = __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, \"f\").getAddress();\n        const initializer = await this.encodeSetupCallData(safeAccountConfig);\n        const saltNonce = safeDeploymentConfig.saltNonce;\n        const encodedNonce = (0, ethereumjs_util_1.toBuffer)(__classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").encodeParameters([\n            \"uint256\"\n        ], [\n            saltNonce\n        ])).toString(\"hex\");\n        const salt = (0, ethereumjs_util_1.keccak256)((0, ethereumjs_util_1.toBuffer)(\"0x\" + (0, ethereumjs_util_1.keccak256)((0, ethereumjs_util_1.toBuffer)(initializer)).toString(\"hex\") + encodedNonce));\n        const proxyCreationCode = await __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, \"f\").proxyCreationCode();\n        const input = __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").encodeParameters([\n            \"address\"\n        ], [\n            __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, \"f\").getAddress()\n        ]);\n        const chainId = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").getChainId();\n        // zkSync Era counterfactual deployment is calculated differently\n        // https://era.zksync.io/docs/reference/architecture/differences-with-ethereum.html#create-create2\n        if ([\n            ZKSYNC_MAINNET,\n            ZKSYNC_TESTNET\n        ].includes(chainId)) {\n            const safeVersion = await __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, \"f\").getVersion();\n            const bytecodeHash = ZKSYNC_SAFE_PROXY_DEPLOYED_BYTECODE[safeVersion].deployedBytecodeHash;\n            return zksync_web3_1.utils.create2Address(from, bytecodeHash, salt, input);\n        }\n        const constructorData = (0, ethereumjs_util_1.toBuffer)(input).toString(\"hex\");\n        const initCode = proxyCreationCode + constructorData;\n        const proxyAddress = \"0x\" + (0, ethereumjs_util_1.generateAddress2)((0, ethereumjs_util_1.toBuffer)(from), (0, ethereumjs_util_1.toBuffer)(salt), (0, ethereumjs_util_1.toBuffer)(initCode)).toString(\"hex\");\n        return __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").getChecksummedAddress(proxyAddress);\n    }\n    async deploySafe({ safeAccountConfig, safeDeploymentConfig, options, callback }) {\n        var _a;\n        (0, utils_1.validateSafeAccountConfig)(safeAccountConfig);\n        if (safeDeploymentConfig) {\n            (0, utils_1.validateSafeDeploymentConfig)(safeDeploymentConfig);\n        }\n        const signerAddress = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").getSignerAddress();\n        if (!signerAddress) {\n            throw new Error(\"EthAdapter must be initialized with a signer to use this method\");\n        }\n        const initializer = await this.encodeSetupCallData(safeAccountConfig);\n        const saltNonce = (_a = safeDeploymentConfig === null || safeDeploymentConfig === void 0 ? void 0 : safeDeploymentConfig.saltNonce) !== null && _a !== void 0 ? _a : (Date.now() * 1000 + Math.floor(Math.random() * 1000)).toString();\n        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {\n            throw new Error(\"Cannot specify gas and gasLimit together in transaction options\");\n        }\n        const safeAddress = await __classPrivateFieldGet(this, _SafeFactory_safeProxyFactoryContract, \"f\").createProxy({\n            safeMasterCopyAddress: __classPrivateFieldGet(this, _SafeFactory_gnosisSafeContract, \"f\").getAddress(),\n            initializer,\n            saltNonce,\n            options: {\n                from: signerAddress,\n                ...options\n            },\n            callback\n        });\n        const isContractDeployed = await __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\").isContractDeployed(safeAddress);\n        if (!isContractDeployed) {\n            throw new Error(\"SafeProxy contract is not deployed on the current network\");\n        }\n        const safe = await Safe_1.default.create({\n            ethAdapter: __classPrivateFieldGet(this, _SafeFactory_ethAdapter, \"f\"),\n            safeAddress,\n            isL1SafeMasterCopy: __classPrivateFieldGet(this, _SafeFactory_isL1SafeMasterCopy, \"f\"),\n            contractNetworks: __classPrivateFieldGet(this, _SafeFactory_contractNetworks, \"f\")\n        });\n        return safe;\n    }\n}\n_SafeFactory_contractNetworks = new WeakMap(), _SafeFactory_isL1SafeMasterCopy = new WeakMap(), _SafeFactory_safeVersion = new WeakMap(), _SafeFactory_ethAdapter = new WeakMap(), _SafeFactory_safeProxyFactoryContract = new WeakMap(), _SafeFactory_gnosisSafeContract = new WeakMap();\nexports[\"default\"] = SafeFactory; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/utils.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/utils.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateSafeDeploymentConfig = exports.validateSafeAccountConfig = void 0;\nconst bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/index.js\");\nconst validateSafeAccountConfig = ({ owners, threshold })=>{\n    if (owners.length <= 0) throw new Error(\"Owner list must have at least one owner\");\n    if (threshold <= 0) throw new Error(\"Threshold must be greater than or equal to 1\");\n    if (threshold > owners.length) throw new Error(\"Threshold must be lower than or equal to owners length\");\n};\nexports.validateSafeAccountConfig = validateSafeAccountConfig;\nconst validateSafeDeploymentConfig = ({ saltNonce })=>{\n    if (bignumber_1.BigNumber.from(saltNonce).lt(0)) throw new Error(\"saltNonce must be greater than or equal to 0\");\n};\nexports.validateSafeDeploymentConfig = validateSafeDeploymentConfig; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy9zYWZlRmFjdG9yeS91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0NBQW9DLEdBQUdBLGlDQUFpQyxHQUFHLEtBQUs7QUFDaEYsTUFBTUksY0FBY0MsbUJBQU9BLENBQUMsa0pBQTBCO0FBQ3RELE1BQU1GLDRCQUE0QixDQUFDLEVBQUVHLE1BQU0sRUFBRUMsU0FBUyxFQUFFO0lBQ3BELElBQUlELE9BQU9FLE1BQU0sSUFBSSxHQUNqQixNQUFNLElBQUlDLE1BQU07SUFDcEIsSUFBSUYsYUFBYSxHQUNiLE1BQU0sSUFBSUUsTUFBTTtJQUNwQixJQUFJRixZQUFZRCxPQUFPRSxNQUFNLEVBQ3pCLE1BQU0sSUFBSUMsTUFBTTtBQUN4QjtBQUNBVCxpQ0FBaUMsR0FBR0c7QUFDcEMsTUFBTUQsK0JBQStCLENBQUMsRUFBRVEsU0FBUyxFQUFFO0lBQy9DLElBQUlOLFlBQVlPLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDRixXQUFXRyxFQUFFLENBQUMsSUFDekMsTUFBTSxJQUFJSixNQUFNO0FBQ3hCO0FBQ0FULG9DQUFvQyxHQUFHRSw4QkFDdkMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzYWZlLWdsb2JhbCtzYWZlLWNvcmUtc2RrQDMuMy41X2V0aGVyc0A1LjcuMi9ub2RlX21vZHVsZXMvQHNhZmUtZ2xvYmFsL3NhZmUtY29yZS1zZGsvZGlzdC9zcmMvc2FmZUZhY3RvcnkvdXRpbHMuanM/ZDVkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVTYWZlRGVwbG95bWVudENvbmZpZyA9IGV4cG9ydHMudmFsaWRhdGVTYWZlQWNjb3VudENvbmZpZyA9IHZvaWQgMDtcbmNvbnN0IGJpZ251bWJlcl8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiKTtcbmNvbnN0IHZhbGlkYXRlU2FmZUFjY291bnRDb25maWcgPSAoeyBvd25lcnMsIHRocmVzaG9sZCB9KSA9PiB7XG4gICAgaWYgKG93bmVycy5sZW5ndGggPD0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPd25lciBsaXN0IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgb3duZXInKTtcbiAgICBpZiAodGhyZXNob2xkIDw9IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhyZXNob2xkIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDEnKTtcbiAgICBpZiAodGhyZXNob2xkID4gb3duZXJzLmxlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaHJlc2hvbGQgbXVzdCBiZSBsb3dlciB0aGFuIG9yIGVxdWFsIHRvIG93bmVycyBsZW5ndGgnKTtcbn07XG5leHBvcnRzLnZhbGlkYXRlU2FmZUFjY291bnRDb25maWcgPSB2YWxpZGF0ZVNhZmVBY2NvdW50Q29uZmlnO1xuY29uc3QgdmFsaWRhdGVTYWZlRGVwbG95bWVudENvbmZpZyA9ICh7IHNhbHROb25jZSB9KSA9PiB7XG4gICAgaWYgKGJpZ251bWJlcl8xLkJpZ051bWJlci5mcm9tKHNhbHROb25jZSkubHQoMCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2FsdE5vbmNlIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDAnKTtcbn07XG5leHBvcnRzLnZhbGlkYXRlU2FmZURlcGxveW1lbnRDb25maWcgPSB2YWxpZGF0ZVNhZmVEZXBsb3ltZW50Q29uZmlnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmFsaWRhdGVTYWZlRGVwbG95bWVudENvbmZpZyIsInZhbGlkYXRlU2FmZUFjY291bnRDb25maWciLCJiaWdudW1iZXJfMSIsInJlcXVpcmUiLCJvd25lcnMiLCJ0aHJlc2hvbGQiLCJsZW5ndGgiLCJFcnJvciIsInNhbHROb25jZSIsIkJpZ051bWJlciIsImZyb20iLCJsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/safeFactory/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SENTINEL_ADDRESS = exports.EMPTY_DATA = exports.ZERO_ADDRESS = void 0;\nexports.ZERO_ADDRESS = `0x${\"0\".repeat(40)}`;\nexports.EMPTY_DATA = \"0x\";\nexports.SENTINEL_ADDRESS = \"0x0000000000000000000000000000000000000001\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHQSxrQkFBa0IsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUM1RUEsb0JBQW9CLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSUssTUFBTSxDQUFDLElBQUksQ0FBQztBQUM1Q0wsa0JBQWtCLEdBQUc7QUFDckJBLHdCQUF3QixHQUFHLDhDQUMzQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy9jb25zdGFudHMuanM/N2FiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU0VOVElORUxfQUREUkVTUyA9IGV4cG9ydHMuRU1QVFlfREFUQSA9IGV4cG9ydHMuWkVST19BRERSRVNTID0gdm9pZCAwO1xuZXhwb3J0cy5aRVJPX0FERFJFU1MgPSBgMHgkeycwJy5yZXBlYXQoNDApfWA7XG5leHBvcnRzLkVNUFRZX0RBVEEgPSAnMHgnO1xuZXhwb3J0cy5TRU5USU5FTF9BRERSRVNTID0gJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU0VOVElORUxfQUREUkVTUyIsIkVNUFRZX0RBVEEiLCJaRVJPX0FERFJFU1MiLCJyZXBlYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isSafeMultisigTransactionResponse = exports.isMetaTransactionArray = exports.isRestrictedAddress = exports.isZeroAddress = exports.sameString = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js\");\nfunction sameString(str1, str2) {\n    return str1.toLowerCase() === str2.toLowerCase();\n}\nexports.sameString = sameString;\nfunction isZeroAddress(address) {\n    return sameString(address, constants_1.ZERO_ADDRESS);\n}\nexports.isZeroAddress = isZeroAddress;\nfunction isSentinelAddress(address) {\n    return sameString(address, constants_1.SENTINEL_ADDRESS);\n}\nfunction isRestrictedAddress(address) {\n    return isZeroAddress(address) || isSentinelAddress(address);\n}\nexports.isRestrictedAddress = isRestrictedAddress;\nfunction isMetaTransactionArray(safeTransactions) {\n    return (safeTransactions === null || safeTransactions === void 0 ? void 0 : safeTransactions.length) !== undefined;\n}\nexports.isMetaTransactionArray = isMetaTransactionArray;\nfunction isSafeMultisigTransactionResponse(safeTransaction) {\n    return safeTransaction.isExecuted !== undefined;\n}\nexports.isSafeMultisigTransactionResponse = isSafeMultisigTransactionResponse; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUNBQXlDLEdBQUdBLDhCQUE4QixHQUFHQSwyQkFBMkIsR0FBR0EscUJBQXFCLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDN0osTUFBTU8sY0FBY0MsbUJBQU9BLENBQUMsaUtBQWE7QUFDekMsU0FBU0YsV0FBV0csSUFBSSxFQUFFQyxJQUFJO0lBQzFCLE9BQU9ELEtBQUtFLFdBQVcsT0FBT0QsS0FBS0MsV0FBVztBQUNsRDtBQUNBWCxrQkFBa0IsR0FBR007QUFDckIsU0FBU0QsY0FBY08sT0FBTztJQUMxQixPQUFPTixXQUFXTSxTQUFTTCxZQUFZTSxZQUFZO0FBQ3ZEO0FBQ0FiLHFCQUFxQixHQUFHSztBQUN4QixTQUFTUyxrQkFBa0JGLE9BQU87SUFDOUIsT0FBT04sV0FBV00sU0FBU0wsWUFBWVEsZ0JBQWdCO0FBQzNEO0FBQ0EsU0FBU1gsb0JBQW9CUSxPQUFPO0lBQ2hDLE9BQU9QLGNBQWNPLFlBQVlFLGtCQUFrQkY7QUFDdkQ7QUFDQVosMkJBQTJCLEdBQUdJO0FBQzlCLFNBQVNELHVCQUF1QmEsZ0JBQWdCO0lBQzVDLE9BQU8sQ0FBQ0EscUJBQXFCLFFBQVFBLHFCQUFxQixLQUFLLElBQUksS0FBSyxJQUFJQSxpQkFBaUJDLE1BQU0sTUFBTUM7QUFDN0c7QUFDQWxCLDhCQUE4QixHQUFHRztBQUNqQyxTQUFTRCxrQ0FBa0NpQixlQUFlO0lBQ3RELE9BQU9BLGdCQUFnQkMsVUFBVSxLQUFLRjtBQUMxQztBQUNBbEIseUNBQXlDLEdBQUdFLG1DQUM1QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy9pbmRleC5qcz82NjllIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1NhZmVNdWx0aXNpZ1RyYW5zYWN0aW9uUmVzcG9uc2UgPSBleHBvcnRzLmlzTWV0YVRyYW5zYWN0aW9uQXJyYXkgPSBleHBvcnRzLmlzUmVzdHJpY3RlZEFkZHJlc3MgPSBleHBvcnRzLmlzWmVyb0FkZHJlc3MgPSBleHBvcnRzLnNhbWVTdHJpbmcgPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmZ1bmN0aW9uIHNhbWVTdHJpbmcoc3RyMSwgc3RyMikge1xuICAgIHJldHVybiBzdHIxLnRvTG93ZXJDYXNlKCkgPT09IHN0cjIudG9Mb3dlckNhc2UoKTtcbn1cbmV4cG9ydHMuc2FtZVN0cmluZyA9IHNhbWVTdHJpbmc7XG5mdW5jdGlvbiBpc1plcm9BZGRyZXNzKGFkZHJlc3MpIHtcbiAgICByZXR1cm4gc2FtZVN0cmluZyhhZGRyZXNzLCBjb25zdGFudHNfMS5aRVJPX0FERFJFU1MpO1xufVxuZXhwb3J0cy5pc1plcm9BZGRyZXNzID0gaXNaZXJvQWRkcmVzcztcbmZ1bmN0aW9uIGlzU2VudGluZWxBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICByZXR1cm4gc2FtZVN0cmluZyhhZGRyZXNzLCBjb25zdGFudHNfMS5TRU5USU5FTF9BRERSRVNTKTtcbn1cbmZ1bmN0aW9uIGlzUmVzdHJpY3RlZEFkZHJlc3MoYWRkcmVzcykge1xuICAgIHJldHVybiBpc1plcm9BZGRyZXNzKGFkZHJlc3MpIHx8IGlzU2VudGluZWxBZGRyZXNzKGFkZHJlc3MpO1xufVxuZXhwb3J0cy5pc1Jlc3RyaWN0ZWRBZGRyZXNzID0gaXNSZXN0cmljdGVkQWRkcmVzcztcbmZ1bmN0aW9uIGlzTWV0YVRyYW5zYWN0aW9uQXJyYXkoc2FmZVRyYW5zYWN0aW9ucykge1xuICAgIHJldHVybiAoc2FmZVRyYW5zYWN0aW9ucyA9PT0gbnVsbCB8fCBzYWZlVHJhbnNhY3Rpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzYWZlVHJhbnNhY3Rpb25zLmxlbmd0aCkgIT09IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuaXNNZXRhVHJhbnNhY3Rpb25BcnJheSA9IGlzTWV0YVRyYW5zYWN0aW9uQXJyYXk7XG5mdW5jdGlvbiBpc1NhZmVNdWx0aXNpZ1RyYW5zYWN0aW9uUmVzcG9uc2Uoc2FmZVRyYW5zYWN0aW9uKSB7XG4gICAgcmV0dXJuIHNhZmVUcmFuc2FjdGlvbi5pc0V4ZWN1dGVkICE9PSB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmlzU2FmZU11bHRpc2lnVHJhbnNhY3Rpb25SZXNwb25zZSA9IGlzU2FmZU11bHRpc2lnVHJhbnNhY3Rpb25SZXNwb25zZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzU2FmZU11bHRpc2lnVHJhbnNhY3Rpb25SZXNwb25zZSIsImlzTWV0YVRyYW5zYWN0aW9uQXJyYXkiLCJpc1Jlc3RyaWN0ZWRBZGRyZXNzIiwiaXNaZXJvQWRkcmVzcyIsInNhbWVTdHJpbmciLCJjb25zdGFudHNfMSIsInJlcXVpcmUiLCJzdHIxIiwic3RyMiIsInRvTG93ZXJDYXNlIiwiYWRkcmVzcyIsIlpFUk9fQUREUkVTUyIsImlzU2VudGluZWxBZGRyZXNzIiwiU0VOVElORUxfQUREUkVTUyIsInNhZmVUcmFuc2FjdGlvbnMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJzYWZlVHJhbnNhY3Rpb24iLCJpc0V4ZWN1dGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass EthSignSignature {\n    /**\n     * Creates an instance of a Safe signature.\n     *\n     * @param signer - Ethers signer\n     * @param signature - The Safe signature\n     * @returns The Safe signature instance\n     */ constructor(signer, signature){\n        this.signer = signer;\n        this.data = signature;\n    }\n    /**\n     * Returns the static part of the Safe signature.\n     *\n     * @returns The static part of the Safe signature\n     */ staticPart() {\n        return this.data;\n    }\n    /**\n     * Returns the dynamic part of the Safe signature.\n     *\n     * @returns The dynamic part of the Safe signature\n     */ dynamicPart() {\n        return \"\";\n    }\n}\nexports[\"default\"] = EthSignSignature; //# sourceMappingURL=SafeSignature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy9zaWduYXR1cmVzL1NhZmVTaWduYXR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUM7SUFDRjs7Ozs7O0tBTUMsR0FDREMsWUFBWUMsTUFBTSxFQUFFQyxTQUFTLENBQUU7UUFDM0IsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDRSxJQUFJLEdBQUdEO0lBQ2hCO0lBQ0E7Ozs7S0FJQyxHQUNERSxhQUF5QztRQUNyQyxPQUFPLElBQUksQ0FBQ0QsSUFBSTtJQUNwQjtJQUNBOzs7O0tBSUMsR0FDREUsY0FBYztRQUNWLE9BQU87SUFDWDtBQUNKO0FBQ0FSLGtCQUFlLEdBQUdFLGtCQUNsQix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy9zaWduYXR1cmVzL1NhZmVTaWduYXR1cmUuanM/OWEwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIEV0aFNpZ25TaWduYXR1cmUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYSBTYWZlIHNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaWduZXIgLSBFdGhlcnMgc2lnbmVyXG4gICAgICogQHBhcmFtIHNpZ25hdHVyZSAtIFRoZSBTYWZlIHNpZ25hdHVyZVxuICAgICAqIEByZXR1cm5zIFRoZSBTYWZlIHNpZ25hdHVyZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNpZ25lciwgc2lnbmF0dXJlKSB7XG4gICAgICAgIHRoaXMuc2lnbmVyID0gc2lnbmVyO1xuICAgICAgICB0aGlzLmRhdGEgPSBzaWduYXR1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0YXRpYyBwYXJ0IG9mIHRoZSBTYWZlIHNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBzdGF0aWMgcGFydCBvZiB0aGUgU2FmZSBzaWduYXR1cmVcbiAgICAgKi9cbiAgICBzdGF0aWNQYXJ0KCAvKiBkeW5hbWljT2Zmc2V0OiBudW1iZXIgKi8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZHluYW1pYyBwYXJ0IG9mIHRoZSBTYWZlIHNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBkeW5hbWljIHBhcnQgb2YgdGhlIFNhZmUgc2lnbmF0dXJlXG4gICAgICovXG4gICAgZHluYW1pY1BhcnQoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBFdGhTaWduU2lnbmF0dXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2FmZVNpZ25hdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJFdGhTaWduU2lnbmF0dXJlIiwiY29uc3RydWN0b3IiLCJzaWduZXIiLCJzaWduYXR1cmUiLCJkYXRhIiwic3RhdGljUGFydCIsImR5bmFtaWNQYXJ0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/index.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/index.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generateEIP712Signature = exports.generateSignature = exports.adjustVInSignature = exports.isTxHashSignedWithPrefix = exports.generatePreValidatedSignature = void 0;\nconst ethereumjs_util_1 = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/.pnpm/ethereumjs-util@7.1.5/node_modules/ethereumjs-util/dist/index.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/index.js\");\nconst SafeSignature_1 = __importDefault(__webpack_require__(/*! ./SafeSignature */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/SafeSignature.js\"));\nfunction generatePreValidatedSignature(ownerAddress) {\n    const signature = \"0x000000000000000000000000\" + ownerAddress.slice(2) + \"0000000000000000000000000000000000000000000000000000000000000000\" + \"01\";\n    return new SafeSignature_1.default(ownerAddress, signature);\n}\nexports.generatePreValidatedSignature = generatePreValidatedSignature;\nfunction isTxHashSignedWithPrefix(txHash, signature, ownerAddress) {\n    let hasPrefix;\n    try {\n        const rsvSig = {\n            r: Buffer.from(signature.slice(2, 66), \"hex\"),\n            s: Buffer.from(signature.slice(66, 130), \"hex\"),\n            v: parseInt(signature.slice(130, 132), 16)\n        };\n        const recoveredData = (0, ethereumjs_util_1.ecrecover)(Buffer.from(txHash.slice(2), \"hex\"), rsvSig.v, rsvSig.r, rsvSig.s);\n        const recoveredAddress = (0, ethereumjs_util_1.bufferToHex)((0, ethereumjs_util_1.pubToAddress)(recoveredData));\n        hasPrefix = !(0, utils_1.sameString)(recoveredAddress, ownerAddress);\n    } catch (e) {\n        hasPrefix = true;\n    }\n    return hasPrefix;\n}\nexports.isTxHashSignedWithPrefix = isTxHashSignedWithPrefix;\nconst adjustVInSignature = (signingMethod, signature, safeTxHash, signerAddress)=>{\n    const ETHEREUM_V_VALUES = [\n        0,\n        1,\n        27,\n        28\n    ];\n    const MIN_VALID_V_VALUE_FOR_SAFE_ECDSA = 27;\n    let signatureV = parseInt(signature.slice(-2), 16);\n    if (!ETHEREUM_V_VALUES.includes(signatureV)) {\n        throw new Error(\"Invalid signature\");\n    }\n    if (signingMethod === \"eth_sign\") {\n        /*\n          The Safe's expected V value for ECDSA signature is:\n          - 27 or 28\n          - 31 or 32 if the message was signed with a EIP-191 prefix. Should be calculated as ECDSA V value + 4\n          Some wallets do that, some wallets don't, V > 30 is used by contracts to differentiate between\n          prefixed and non-prefixed messages. The only way to know if the message was signed with a\n          prefix is to check if the signer address is the same as the recovered address.\n    \n          More info:\n          https://docs.gnosis-safe.io/contracts/signatures\n        */ if (signatureV < MIN_VALID_V_VALUE_FOR_SAFE_ECDSA) {\n            signatureV += MIN_VALID_V_VALUE_FOR_SAFE_ECDSA;\n        }\n        const adjustedSignature = signature.slice(0, -2) + signatureV.toString(16);\n        const signatureHasPrefix = isTxHashSignedWithPrefix(safeTxHash, adjustedSignature, signerAddress);\n        if (signatureHasPrefix) {\n            signatureV += 4;\n        }\n    }\n    if (signingMethod === \"eth_signTypedData\") {\n        // Metamask with ledger returns V=0/1 here too, we need to adjust it to be ethereum's valid value (27 or 28)\n        if (signatureV < MIN_VALID_V_VALUE_FOR_SAFE_ECDSA) {\n            signatureV += MIN_VALID_V_VALUE_FOR_SAFE_ECDSA;\n        }\n    }\n    signature = signature.slice(0, -2) + signatureV.toString(16);\n    return signature;\n};\nexports.adjustVInSignature = adjustVInSignature;\nasync function generateSignature(ethAdapter, hash) {\n    const signerAddress = await ethAdapter.getSignerAddress();\n    if (!signerAddress) {\n        throw new Error(\"EthAdapter must be initialized with a signer to use this method\");\n    }\n    let signature = await ethAdapter.signMessage(hash);\n    signature = (0, exports.adjustVInSignature)(\"eth_sign\", signature, hash, signerAddress);\n    return new SafeSignature_1.default(signerAddress, signature);\n}\nexports.generateSignature = generateSignature;\nasync function generateEIP712Signature(ethAdapter, safeTransactionEIP712Args, methodVersion) {\n    const signerAddress = await ethAdapter.getSignerAddress();\n    if (!signerAddress) {\n        throw new Error(\"EthAdapter must be initialized with a signer to use this method\");\n    }\n    let signature = await ethAdapter.signTypedData(safeTransactionEIP712Args, methodVersion);\n    signature = (0, exports.adjustVInSignature)(\"eth_signTypedData\", signature);\n    return new SafeSignature_1.default(signerAddress, signature);\n}\nexports.generateEIP712Signature = generateEIP712Signature; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/signatures/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/SafeTransaction.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/SafeTransaction.js ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass EthSafeTransaction {\n    constructor(data){\n        this.signatures = new Map();\n        this.data = data;\n    }\n    addSignature(signature) {\n        this.signatures.set(signature.signer.toLowerCase(), signature);\n    }\n    encodedSignatures() {\n        const signers = Array.from(this.signatures.keys()).sort();\n        const baseOffset = signers.length * 65;\n        let staticParts = \"\";\n        let dynamicParts = \"\";\n        signers.forEach((signerAddress)=>{\n            const signature = this.signatures.get(signerAddress);\n            staticParts += signature === null || signature === void 0 ? void 0 : signature.staticPart().slice(2);\n            dynamicParts += signature === null || signature === void 0 ? void 0 : signature.dynamicPart();\n        });\n        return \"0x\" + staticParts + dynamicParts;\n    }\n}\nexports[\"default\"] = EthSafeTransaction; //# sourceMappingURL=SafeTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy90cmFuc2FjdGlvbnMvU2FmZVRyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DO0lBQ0ZDLFlBQVlDLElBQUksQ0FBRTtRQUNkLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUlDO1FBQ3RCLElBQUksQ0FBQ0YsSUFBSSxHQUFHQTtJQUNoQjtJQUNBRyxhQUFhQyxTQUFTLEVBQUU7UUFDcEIsSUFBSSxDQUFDSCxVQUFVLENBQUNJLEdBQUcsQ0FBQ0QsVUFBVUUsTUFBTSxDQUFDQyxXQUFXLElBQUlIO0lBQ3hEO0lBQ0FJLG9CQUFvQjtRQUNoQixNQUFNQyxVQUFVQyxNQUFNQyxJQUFJLENBQUMsSUFBSSxDQUFDVixVQUFVLENBQUNXLElBQUksSUFBSUMsSUFBSTtRQUN2RCxNQUFNQyxhQUFhTCxRQUFRTSxNQUFNLEdBQUc7UUFDcEMsSUFBSUMsY0FBYztRQUNsQixJQUFJQyxlQUFlO1FBQ25CUixRQUFRUyxPQUFPLENBQUMsQ0FBQ0M7WUFDYixNQUFNZixZQUFZLElBQUksQ0FBQ0gsVUFBVSxDQUFDbUIsR0FBRyxDQUFDRDtZQUN0Q0gsZUFBZVosY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVVpQixVQUFVLEdBQTRDQyxLQUFLLENBQUM7WUFDM0lMLGdCQUFnQmIsY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVVtQixXQUFXO1FBQy9GO1FBQ0EsT0FBTyxPQUFPUCxjQUFjQztJQUNoQztBQUNKO0FBQ0FyQixrQkFBZSxHQUFHRSxvQkFDbEIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzYWZlLWdsb2JhbCtzYWZlLWNvcmUtc2RrQDMuMy41X2V0aGVyc0A1LjcuMi9ub2RlX21vZHVsZXMvQHNhZmUtZ2xvYmFsL3NhZmUtY29yZS1zZGsvZGlzdC9zcmMvdXRpbHMvdHJhbnNhY3Rpb25zL1NhZmVUcmFuc2FjdGlvbi5qcz8wZTUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgRXRoU2FmZVRyYW5zYWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHRoaXMuc2lnbmF0dXJlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgYWRkU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICAgICAgICB0aGlzLnNpZ25hdHVyZXMuc2V0KHNpZ25hdHVyZS5zaWduZXIudG9Mb3dlckNhc2UoKSwgc2lnbmF0dXJlKTtcbiAgICB9XG4gICAgZW5jb2RlZFNpZ25hdHVyZXMoKSB7XG4gICAgICAgIGNvbnN0IHNpZ25lcnMgPSBBcnJheS5mcm9tKHRoaXMuc2lnbmF0dXJlcy5rZXlzKCkpLnNvcnQoKTtcbiAgICAgICAgY29uc3QgYmFzZU9mZnNldCA9IHNpZ25lcnMubGVuZ3RoICogNjU7XG4gICAgICAgIGxldCBzdGF0aWNQYXJ0cyA9ICcnO1xuICAgICAgICBsZXQgZHluYW1pY1BhcnRzID0gJyc7XG4gICAgICAgIHNpZ25lcnMuZm9yRWFjaCgoc2lnbmVyQWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gdGhpcy5zaWduYXR1cmVzLmdldChzaWduZXJBZGRyZXNzKTtcbiAgICAgICAgICAgIHN0YXRpY1BhcnRzICs9IHNpZ25hdHVyZSA9PT0gbnVsbCB8fCBzaWduYXR1cmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNpZ25hdHVyZS5zdGF0aWNQYXJ0KCAvKmJhc2VPZmZzZXQgKyBkeW5hbWljUGFydHMubGVuZ3RoIC8gMiovKS5zbGljZSgyKTtcbiAgICAgICAgICAgIGR5bmFtaWNQYXJ0cyArPSBzaWduYXR1cmUgPT09IG51bGwgfHwgc2lnbmF0dXJlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaWduYXR1cmUuZHluYW1pY1BhcnQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAnMHgnICsgc3RhdGljUGFydHMgKyBkeW5hbWljUGFydHM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXRoU2FmZVRyYW5zYWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2FmZVRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkV0aFNhZmVUcmFuc2FjdGlvbiIsImNvbnN0cnVjdG9yIiwiZGF0YSIsInNpZ25hdHVyZXMiLCJNYXAiLCJhZGRTaWduYXR1cmUiLCJzaWduYXR1cmUiLCJzZXQiLCJzaWduZXIiLCJ0b0xvd2VyQ2FzZSIsImVuY29kZWRTaWduYXR1cmVzIiwic2lnbmVycyIsIkFycmF5IiwiZnJvbSIsImtleXMiLCJzb3J0IiwiYmFzZU9mZnNldCIsImxlbmd0aCIsInN0YXRpY1BhcnRzIiwiZHluYW1pY1BhcnRzIiwiZm9yRWFjaCIsInNpZ25lckFkZHJlc3MiLCJnZXQiLCJzdGF0aWNQYXJ0Iiwic2xpY2UiLCJkeW5hbWljUGFydCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/SafeTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/gas.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/gas.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.estimateTxGas = void 0;\nconst bignumber_1 = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/index.js\");\nconst safe_core_sdk_types_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-types */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js\");\nfunction estimateDataGasCosts(data) {\n    const reducer = (accumulator, currentValue)=>{\n        if (currentValue === \"0x\") {\n            return accumulator + 0;\n        }\n        if (currentValue === \"00\") {\n            return accumulator + 4;\n        }\n        return accumulator + 16;\n    };\n    return data.match(/.{2}/g).reduce(reducer, 0);\n}\nasync function estimateTxGas(safeContract, ethAdapter, to, valueInWei, data, operation) {\n    let txGasEstimation = 0;\n    const safeAddress = safeContract.getAddress();\n    const estimateData = safeContract.encode(\"requiredTxGas\", [\n        to,\n        valueInWei,\n        data,\n        operation\n    ]);\n    try {\n        const estimateResponse = (await ethAdapter.estimateGas({\n            to: safeAddress,\n            from: safeAddress,\n            data: estimateData\n        })).toString();\n        txGasEstimation = bignumber_1.BigNumber.from(\"0x\" + estimateResponse.substring(138)).toNumber() + 10000;\n    } catch (error) {}\n    if (txGasEstimation > 0) {\n        const dataGasEstimation = estimateDataGasCosts(estimateData);\n        let additionalGas = 10000;\n        for(let i = 0; i < 10; i++){\n            try {\n                const estimateResponse = await ethAdapter.call({\n                    to: safeAddress,\n                    from: safeAddress,\n                    data: estimateData,\n                    gasPrice: 0,\n                    gasLimit: txGasEstimation + dataGasEstimation + additionalGas\n                });\n                if (estimateResponse !== \"0x\") {\n                    break;\n                }\n            } catch (error) {}\n            txGasEstimation += additionalGas;\n            additionalGas *= 2;\n        }\n        return txGasEstimation + additionalGas;\n    }\n    try {\n        const estimateGas = await ethAdapter.estimateGas({\n            to,\n            from: safeAddress,\n            value: valueInWei,\n            data\n        });\n        return estimateGas;\n    } catch (error) {\n        if (operation === safe_core_sdk_types_1.OperationType.DelegateCall) {\n            return 0;\n        }\n        return Promise.reject(error);\n    }\n}\nexports.estimateTxGas = estimateTxGas; //# sourceMappingURL=gas.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy90cmFuc2FjdGlvbnMvZ2FzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLGNBQWNDLG1CQUFPQSxDQUFDLGtKQUEwQjtBQUN0RCxNQUFNQyx3QkFBd0JELG1CQUFPQSxDQUFDLDRLQUFrQztBQUN4RSxTQUFTRSxxQkFBcUJDLElBQUk7SUFDOUIsTUFBTUMsVUFBVSxDQUFDQyxhQUFhQztRQUMxQixJQUFJQSxpQkFBaUIsTUFBTTtZQUN2QixPQUFPRCxjQUFjO1FBQ3pCO1FBQ0EsSUFBSUMsaUJBQWlCLE1BQU07WUFDdkIsT0FBT0QsY0FBYztRQUN6QjtRQUNBLE9BQU9BLGNBQWM7SUFDekI7SUFDQSxPQUFPRixLQUFLSSxLQUFLLENBQUMsU0FBU0MsTUFBTSxDQUFDSixTQUFTO0FBQy9DO0FBQ0EsZUFBZU4sY0FBY1csWUFBWSxFQUFFQyxVQUFVLEVBQUVDLEVBQUUsRUFBRUMsVUFBVSxFQUFFVCxJQUFJLEVBQUVVLFNBQVM7SUFDbEYsSUFBSUMsa0JBQWtCO0lBQ3RCLE1BQU1DLGNBQWNOLGFBQWFPLFVBQVU7SUFDM0MsTUFBTUMsZUFBZVIsYUFBYVMsTUFBTSxDQUFDLGlCQUFpQjtRQUN0RFA7UUFDQUM7UUFDQVQ7UUFDQVU7S0FDSDtJQUNELElBQUk7UUFDQSxNQUFNTSxtQkFBbUIsQ0FBQyxNQUFNVCxXQUFXVSxXQUFXLENBQUM7WUFDbkRULElBQUlJO1lBQ0pNLE1BQU1OO1lBQ05aLE1BQU1jO1FBQ1YsRUFBQyxFQUFHSyxRQUFRO1FBQ1pSLGtCQUFrQmYsWUFBWXdCLFNBQVMsQ0FBQ0YsSUFBSSxDQUFDLE9BQU9GLGlCQUFpQkssU0FBUyxDQUFDLE1BQU1DLFFBQVEsS0FBSztJQUN0RyxFQUNBLE9BQU9DLE9BQU8sQ0FBRTtJQUNoQixJQUFJWixrQkFBa0IsR0FBRztRQUNyQixNQUFNYSxvQkFBb0J6QixxQkFBcUJlO1FBQy9DLElBQUlXLGdCQUFnQjtRQUNwQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxJQUFJQSxJQUFLO1lBQ3pCLElBQUk7Z0JBQ0EsTUFBTVYsbUJBQW1CLE1BQU1ULFdBQVdvQixJQUFJLENBQUM7b0JBQzNDbkIsSUFBSUk7b0JBQ0pNLE1BQU1OO29CQUNOWixNQUFNYztvQkFDTmMsVUFBVTtvQkFDVkMsVUFBVWxCLGtCQUFrQmEsb0JBQW9CQztnQkFDcEQ7Z0JBQ0EsSUFBSVQscUJBQXFCLE1BQU07b0JBQzNCO2dCQUNKO1lBQ0osRUFDQSxPQUFPTyxPQUFPLENBQUU7WUFDaEJaLG1CQUFtQmM7WUFDbkJBLGlCQUFpQjtRQUNyQjtRQUNBLE9BQU9kLGtCQUFrQmM7SUFDN0I7SUFDQSxJQUFJO1FBQ0EsTUFBTVIsY0FBYyxNQUFNVixXQUFXVSxXQUFXLENBQUM7WUFDN0NUO1lBQ0FVLE1BQU1OO1lBQ05sQixPQUFPZTtZQUNQVDtRQUNKO1FBQ0EsT0FBT2lCO0lBQ1gsRUFDQSxPQUFPTSxPQUFPO1FBQ1YsSUFBSWIsY0FBY1osc0JBQXNCZ0MsYUFBYSxDQUFDQyxZQUFZLEVBQUU7WUFDaEUsT0FBTztRQUNYO1FBQ0EsT0FBT0MsUUFBUUMsTUFBTSxDQUFDVjtJQUMxQjtBQUNKO0FBQ0E5QixxQkFBcUIsR0FBR0UsZUFDeEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzYWZlLWdsb2JhbCtzYWZlLWNvcmUtc2RrQDMuMy41X2V0aGVyc0A1LjcuMi9ub2RlX21vZHVsZXMvQHNhZmUtZ2xvYmFsL3NhZmUtY29yZS1zZGsvZGlzdC9zcmMvdXRpbHMvdHJhbnNhY3Rpb25zL2dhcy5qcz8yM2U0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lc3RpbWF0ZVR4R2FzID0gdm9pZCAwO1xuY29uc3QgYmlnbnVtYmVyXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCIpO1xuY29uc3Qgc2FmZV9jb3JlX3Nka190eXBlc18xID0gcmVxdWlyZShcIkBzYWZlLWdsb2JhbC9zYWZlLWNvcmUtc2RrLXR5cGVzXCIpO1xuZnVuY3Rpb24gZXN0aW1hdGVEYXRhR2FzQ29zdHMoZGF0YSkge1xuICAgIGNvbnN0IHJlZHVjZXIgPSAoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSkgPT4ge1xuICAgICAgICBpZiAoY3VycmVudFZhbHVlID09PSAnMHgnKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3IgKyAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUgPT09ICcwMCcpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvciArIDQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yICsgMTY7XG4gICAgfTtcbiAgICByZXR1cm4gZGF0YS5tYXRjaCgvLnsyfS9nKS5yZWR1Y2UocmVkdWNlciwgMCk7XG59XG5hc3luYyBmdW5jdGlvbiBlc3RpbWF0ZVR4R2FzKHNhZmVDb250cmFjdCwgZXRoQWRhcHRlciwgdG8sIHZhbHVlSW5XZWksIGRhdGEsIG9wZXJhdGlvbikge1xuICAgIGxldCB0eEdhc0VzdGltYXRpb24gPSAwO1xuICAgIGNvbnN0IHNhZmVBZGRyZXNzID0gc2FmZUNvbnRyYWN0LmdldEFkZHJlc3MoKTtcbiAgICBjb25zdCBlc3RpbWF0ZURhdGEgPSBzYWZlQ29udHJhY3QuZW5jb2RlKCdyZXF1aXJlZFR4R2FzJywgW1xuICAgICAgICB0byxcbiAgICAgICAgdmFsdWVJbldlaSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgb3BlcmF0aW9uXG4gICAgXSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZXN0aW1hdGVSZXNwb25zZSA9IChhd2FpdCBldGhBZGFwdGVyLmVzdGltYXRlR2FzKHtcbiAgICAgICAgICAgIHRvOiBzYWZlQWRkcmVzcyxcbiAgICAgICAgICAgIGZyb206IHNhZmVBZGRyZXNzLFxuICAgICAgICAgICAgZGF0YTogZXN0aW1hdGVEYXRhXG4gICAgICAgIH0pKS50b1N0cmluZygpO1xuICAgICAgICB0eEdhc0VzdGltYXRpb24gPSBiaWdudW1iZXJfMS5CaWdOdW1iZXIuZnJvbSgnMHgnICsgZXN0aW1hdGVSZXNwb25zZS5zdWJzdHJpbmcoMTM4KSkudG9OdW1iZXIoKSArIDEwMDAwO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIGlmICh0eEdhc0VzdGltYXRpb24gPiAwKSB7XG4gICAgICAgIGNvbnN0IGRhdGFHYXNFc3RpbWF0aW9uID0gZXN0aW1hdGVEYXRhR2FzQ29zdHMoZXN0aW1hdGVEYXRhKTtcbiAgICAgICAgbGV0IGFkZGl0aW9uYWxHYXMgPSAxMDAwMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVzdGltYXRlUmVzcG9uc2UgPSBhd2FpdCBldGhBZGFwdGVyLmNhbGwoe1xuICAgICAgICAgICAgICAgICAgICB0bzogc2FmZUFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIGZyb206IHNhZmVBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBlc3RpbWF0ZURhdGEsXG4gICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlOiAwLFxuICAgICAgICAgICAgICAgICAgICBnYXNMaW1pdDogdHhHYXNFc3RpbWF0aW9uICsgZGF0YUdhc0VzdGltYXRpb24gKyBhZGRpdGlvbmFsR2FzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGVzdGltYXRlUmVzcG9uc2UgIT09ICcweCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgIHR4R2FzRXN0aW1hdGlvbiArPSBhZGRpdGlvbmFsR2FzO1xuICAgICAgICAgICAgYWRkaXRpb25hbEdhcyAqPSAyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eEdhc0VzdGltYXRpb24gKyBhZGRpdGlvbmFsR2FzO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBlc3RpbWF0ZUdhcyA9IGF3YWl0IGV0aEFkYXB0ZXIuZXN0aW1hdGVHYXMoe1xuICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICBmcm9tOiBzYWZlQWRkcmVzcyxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUluV2VpLFxuICAgICAgICAgICAgZGF0YVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVzdGltYXRlR2FzO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKG9wZXJhdGlvbiA9PT0gc2FmZV9jb3JlX3Nka190eXBlc18xLk9wZXJhdGlvblR5cGUuRGVsZWdhdGVDYWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbn1cbmV4cG9ydHMuZXN0aW1hdGVUeEdhcyA9IGVzdGltYXRlVHhHYXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nYXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXN0aW1hdGVUeEdhcyIsImJpZ251bWJlcl8xIiwicmVxdWlyZSIsInNhZmVfY29yZV9zZGtfdHlwZXNfMSIsImVzdGltYXRlRGF0YUdhc0Nvc3RzIiwiZGF0YSIsInJlZHVjZXIiLCJhY2N1bXVsYXRvciIsImN1cnJlbnRWYWx1ZSIsIm1hdGNoIiwicmVkdWNlIiwic2FmZUNvbnRyYWN0IiwiZXRoQWRhcHRlciIsInRvIiwidmFsdWVJbldlaSIsIm9wZXJhdGlvbiIsInR4R2FzRXN0aW1hdGlvbiIsInNhZmVBZGRyZXNzIiwiZ2V0QWRkcmVzcyIsImVzdGltYXRlRGF0YSIsImVuY29kZSIsImVzdGltYXRlUmVzcG9uc2UiLCJlc3RpbWF0ZUdhcyIsImZyb20iLCJ0b1N0cmluZyIsIkJpZ051bWJlciIsInN1YnN0cmluZyIsInRvTnVtYmVyIiwiZXJyb3IiLCJkYXRhR2FzRXN0aW1hdGlvbiIsImFkZGl0aW9uYWxHYXMiLCJpIiwiY2FsbCIsImdhc1ByaWNlIiwiZ2FzTGltaXQiLCJPcGVyYXRpb25UeXBlIiwiRGVsZWdhdGVDYWxsIiwiUHJvbWlzZSIsInJlamVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/gas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.encodeMultiSendData = exports.standardizeSafeTransactionData = exports.standardizeMetaTransactionData = void 0;\nconst bytes_1 = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/lib.esm/index.js\");\nconst solidity_1 = __webpack_require__(/*! @ethersproject/solidity */ \"(ssr)/./node_modules/.pnpm/@ethersproject+solidity@5.7.0/node_modules/@ethersproject/solidity/lib.esm/index.js\");\nconst safe_core_sdk_types_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-types */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-types@1.10.1/node_modules/@safe-global/safe-core-sdk-types/dist/src/index.js\");\nconst safe_core_sdk_utils_1 = __webpack_require__(/*! @safe-global/safe-core-sdk-utils */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk-utils@1.7.4/node_modules/@safe-global/safe-core-sdk-utils/dist/src/index.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/constants.js\");\nconst gas_1 = __webpack_require__(/*! ./gas */ \"(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/gas.js\");\nfunction standardizeMetaTransactionData(tx) {\n    var _a;\n    const standardizedTxs = {\n        ...tx,\n        operation: (_a = tx.operation) !== null && _a !== void 0 ? _a : safe_core_sdk_types_1.OperationType.Call\n    };\n    return standardizedTxs;\n}\nexports.standardizeMetaTransactionData = standardizeMetaTransactionData;\nasync function standardizeSafeTransactionData(safeContract, ethAdapter, tx) {\n    var _a, _b, _c, _d;\n    const standardizedTxs = {\n        to: tx.to,\n        value: tx.value,\n        data: tx.data,\n        operation: (_a = tx.operation) !== null && _a !== void 0 ? _a : safe_core_sdk_types_1.OperationType.Call,\n        baseGas: (_b = tx.baseGas) !== null && _b !== void 0 ? _b : 0,\n        gasPrice: (_c = tx.gasPrice) !== null && _c !== void 0 ? _c : 0,\n        gasToken: tx.gasToken || constants_1.ZERO_ADDRESS,\n        refundReceiver: tx.refundReceiver || constants_1.ZERO_ADDRESS,\n        nonce: (_d = tx.nonce) !== null && _d !== void 0 ? _d : await safeContract.getNonce()\n    };\n    let safeTxGas;\n    if (typeof tx.safeTxGas !== \"undefined\") {\n        return {\n            ...standardizedTxs,\n            safeTxGas: tx.safeTxGas\n        };\n    }\n    const safeVersion = await safeContract.getVersion();\n    if ((0, safe_core_sdk_utils_1.hasSafeFeature)(safe_core_sdk_utils_1.SAFE_FEATURES.SAFE_TX_GAS_OPTIONAL, safeVersion) && standardizedTxs.gasPrice === 0) {\n        safeTxGas = 0;\n    } else {\n        safeTxGas = await (0, gas_1.estimateTxGas)(safeContract, ethAdapter, standardizedTxs.to, standardizedTxs.value, standardizedTxs.data, standardizedTxs.operation);\n    }\n    return {\n        ...standardizedTxs,\n        safeTxGas\n    };\n}\nexports.standardizeSafeTransactionData = standardizeSafeTransactionData;\nfunction encodeMetaTransaction(tx) {\n    const data = (0, bytes_1.arrayify)(tx.data);\n    const encoded = (0, solidity_1.pack)([\n        \"uint8\",\n        \"address\",\n        \"uint256\",\n        \"uint256\",\n        \"bytes\"\n    ], [\n        tx.operation,\n        tx.to,\n        tx.value,\n        data.length,\n        data\n    ]);\n    return encoded.slice(2);\n}\nfunction encodeMultiSendData(txs) {\n    return \"0x\" + txs.map((tx)=>encodeMetaTransaction(tx)).join(\"\");\n}\nexports.encodeMultiSendData = encodeMultiSendData; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhZmUtZ2xvYmFsK3NhZmUtY29yZS1zZGtAMy4zLjVfZXRoZXJzQDUuNy4yL25vZGVfbW9kdWxlcy9Ac2FmZS1nbG9iYWwvc2FmZS1jb3JlLXNkay9kaXN0L3NyYy91dGlscy90cmFuc2FjdGlvbnMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSxzQ0FBc0MsR0FBR0Esc0NBQXNDLEdBQUcsS0FBSztBQUNySCxNQUFNSyxVQUFVQyxtQkFBT0EsQ0FBQyxzSUFBc0I7QUFDOUMsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsK0lBQXlCO0FBQ3BELE1BQU1FLHdCQUF3QkYsbUJBQU9BLENBQUMsNEtBQWtDO0FBQ3hFLE1BQU1HLHdCQUF3QkgsbUJBQU9BLENBQUMsMktBQWtDO0FBQ3hFLE1BQU1JLGNBQWNKLG1CQUFPQSxDQUFDLGtLQUFjO0FBQzFDLE1BQU1LLFFBQVFMLG1CQUFPQSxDQUFDLGtLQUFPO0FBQzdCLFNBQVNGLCtCQUErQlEsRUFBRTtJQUN0QyxJQUFJQztJQUNKLE1BQU1DLGtCQUFrQjtRQUNwQixHQUFHRixFQUFFO1FBQ0xHLFdBQVcsQ0FBQ0YsS0FBS0QsR0FBR0csU0FBUyxNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJQSxLQUFLTCxzQkFBc0JRLGFBQWEsQ0FBQ0MsSUFBSTtJQUM1RztJQUNBLE9BQU9IO0FBQ1g7QUFDQWQsc0NBQXNDLEdBQUdJO0FBQ3pDLGVBQWVELCtCQUErQmUsWUFBWSxFQUFFQyxVQUFVLEVBQUVQLEVBQUU7SUFDdEUsSUFBSUMsSUFBSU8sSUFBSUMsSUFBSUM7SUFDaEIsTUFBTVIsa0JBQWtCO1FBQ3BCUyxJQUFJWCxHQUFHVyxFQUFFO1FBQ1R0QixPQUFPVyxHQUFHWCxLQUFLO1FBQ2Z1QixNQUFNWixHQUFHWSxJQUFJO1FBQ2JULFdBQVcsQ0FBQ0YsS0FBS0QsR0FBR0csU0FBUyxNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJQSxLQUFLTCxzQkFBc0JRLGFBQWEsQ0FBQ0MsSUFBSTtRQUN4R1EsU0FBUyxDQUFDTCxLQUFLUixHQUFHYSxPQUFPLE1BQU0sUUFBUUwsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDNURNLFVBQVUsQ0FBQ0wsS0FBS1QsR0FBR2MsUUFBUSxNQUFNLFFBQVFMLE9BQU8sS0FBSyxJQUFJQSxLQUFLO1FBQzlETSxVQUFVZixHQUFHZSxRQUFRLElBQUlqQixZQUFZa0IsWUFBWTtRQUNqREMsZ0JBQWdCakIsR0FBR2lCLGNBQWMsSUFBSW5CLFlBQVlrQixZQUFZO1FBQzdERSxPQUFPLENBQUNSLEtBQUtWLEdBQUdrQixLQUFLLE1BQU0sUUFBUVIsT0FBTyxLQUFLLElBQUlBLEtBQU0sTUFBTUosYUFBYWEsUUFBUTtJQUN4RjtJQUNBLElBQUlDO0lBQ0osSUFBSSxPQUFPcEIsR0FBR29CLFNBQVMsS0FBSyxhQUFhO1FBQ3JDLE9BQU87WUFDSCxHQUFHbEIsZUFBZTtZQUNsQmtCLFdBQVdwQixHQUFHb0IsU0FBUztRQUMzQjtJQUNKO0lBQ0EsTUFBTUMsY0FBYyxNQUFNZixhQUFhZ0IsVUFBVTtJQUNqRCxJQUFJLENBQUMsR0FBR3pCLHNCQUFzQjBCLGNBQWMsRUFBRTFCLHNCQUFzQjJCLGFBQWEsQ0FBQ0Msb0JBQW9CLEVBQUVKLGdCQUNwR25CLGdCQUFnQlksUUFBUSxLQUFLLEdBQUc7UUFDaENNLFlBQVk7SUFDaEIsT0FDSztRQUNEQSxZQUFZLE1BQU0sQ0FBQyxHQUFHckIsTUFBTTJCLGFBQWEsRUFBRXBCLGNBQWNDLFlBQVlMLGdCQUFnQlMsRUFBRSxFQUFFVCxnQkFBZ0JiLEtBQUssRUFBRWEsZ0JBQWdCVSxJQUFJLEVBQUVWLGdCQUFnQkMsU0FBUztJQUNuSztJQUNBLE9BQU87UUFDSCxHQUFHRCxlQUFlO1FBQ2xCa0I7SUFDSjtBQUNKO0FBQ0FoQyxzQ0FBc0MsR0FBR0c7QUFDekMsU0FBU29DLHNCQUFzQjNCLEVBQUU7SUFDN0IsTUFBTVksT0FBTyxDQUFDLEdBQUduQixRQUFRbUMsUUFBUSxFQUFFNUIsR0FBR1ksSUFBSTtJQUMxQyxNQUFNaUIsVUFBVSxDQUFDLEdBQUdsQyxXQUFXbUMsSUFBSSxFQUFFO1FBQUM7UUFBUztRQUFXO1FBQVc7UUFBVztLQUFRLEVBQUU7UUFBQzlCLEdBQUdHLFNBQVM7UUFBRUgsR0FBR1csRUFBRTtRQUFFWCxHQUFHWCxLQUFLO1FBQUV1QixLQUFLbUIsTUFBTTtRQUFFbkI7S0FBSztJQUM1SSxPQUFPaUIsUUFBUUcsS0FBSyxDQUFDO0FBQ3pCO0FBQ0EsU0FBUzFDLG9CQUFvQjJDLEdBQUc7SUFDNUIsT0FBTyxPQUFPQSxJQUFJQyxHQUFHLENBQUMsQ0FBQ2xDLEtBQU8yQixzQkFBc0IzQixLQUFLbUMsSUFBSSxDQUFDO0FBQ2xFO0FBQ0EvQywyQkFBMkIsR0FBR0UscUJBQzlCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FmZS1nbG9iYWwrc2FmZS1jb3JlLXNka0AzLjMuNV9ldGhlcnNANS43LjIvbm9kZV9tb2R1bGVzL0BzYWZlLWdsb2JhbC9zYWZlLWNvcmUtc2RrL2Rpc3Qvc3JjL3V0aWxzL3RyYW5zYWN0aW9ucy91dGlscy5qcz9hMWQ3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbmNvZGVNdWx0aVNlbmREYXRhID0gZXhwb3J0cy5zdGFuZGFyZGl6ZVNhZmVUcmFuc2FjdGlvbkRhdGEgPSBleHBvcnRzLnN0YW5kYXJkaXplTWV0YVRyYW5zYWN0aW9uRGF0YSA9IHZvaWQgMDtcbmNvbnN0IGJ5dGVzXzEgPSByZXF1aXJlKFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIik7XG5jb25zdCBzb2xpZGl0eV8xID0gcmVxdWlyZShcIkBldGhlcnNwcm9qZWN0L3NvbGlkaXR5XCIpO1xuY29uc3Qgc2FmZV9jb3JlX3Nka190eXBlc18xID0gcmVxdWlyZShcIkBzYWZlLWdsb2JhbC9zYWZlLWNvcmUtc2RrLXR5cGVzXCIpO1xuY29uc3Qgc2FmZV9jb3JlX3Nka191dGlsc18xID0gcmVxdWlyZShcIkBzYWZlLWdsb2JhbC9zYWZlLWNvcmUtc2RrLXV0aWxzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZ2FzXzEgPSByZXF1aXJlKFwiLi9nYXNcIik7XG5mdW5jdGlvbiBzdGFuZGFyZGl6ZU1ldGFUcmFuc2FjdGlvbkRhdGEodHgpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgc3RhbmRhcmRpemVkVHhzID0ge1xuICAgICAgICAuLi50eCxcbiAgICAgICAgb3BlcmF0aW9uOiAoX2EgPSB0eC5vcGVyYXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHNhZmVfY29yZV9zZGtfdHlwZXNfMS5PcGVyYXRpb25UeXBlLkNhbGxcbiAgICB9O1xuICAgIHJldHVybiBzdGFuZGFyZGl6ZWRUeHM7XG59XG5leHBvcnRzLnN0YW5kYXJkaXplTWV0YVRyYW5zYWN0aW9uRGF0YSA9IHN0YW5kYXJkaXplTWV0YVRyYW5zYWN0aW9uRGF0YTtcbmFzeW5jIGZ1bmN0aW9uIHN0YW5kYXJkaXplU2FmZVRyYW5zYWN0aW9uRGF0YShzYWZlQ29udHJhY3QsIGV0aEFkYXB0ZXIsIHR4KSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIGNvbnN0IHN0YW5kYXJkaXplZFR4cyA9IHtcbiAgICAgICAgdG86IHR4LnRvLFxuICAgICAgICB2YWx1ZTogdHgudmFsdWUsXG4gICAgICAgIGRhdGE6IHR4LmRhdGEsXG4gICAgICAgIG9wZXJhdGlvbjogKF9hID0gdHgub3BlcmF0aW9uKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBzYWZlX2NvcmVfc2RrX3R5cGVzXzEuT3BlcmF0aW9uVHlwZS5DYWxsLFxuICAgICAgICBiYXNlR2FzOiAoX2IgPSB0eC5iYXNlR2FzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwLFxuICAgICAgICBnYXNQcmljZTogKF9jID0gdHguZ2FzUHJpY2UpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDAsXG4gICAgICAgIGdhc1Rva2VuOiB0eC5nYXNUb2tlbiB8fCBjb25zdGFudHNfMS5aRVJPX0FERFJFU1MsXG4gICAgICAgIHJlZnVuZFJlY2VpdmVyOiB0eC5yZWZ1bmRSZWNlaXZlciB8fCBjb25zdGFudHNfMS5aRVJPX0FERFJFU1MsXG4gICAgICAgIG5vbmNlOiAoX2QgPSB0eC5ub25jZSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogKGF3YWl0IHNhZmVDb250cmFjdC5nZXROb25jZSgpKVxuICAgIH07XG4gICAgbGV0IHNhZmVUeEdhcztcbiAgICBpZiAodHlwZW9mIHR4LnNhZmVUeEdhcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN0YW5kYXJkaXplZFR4cyxcbiAgICAgICAgICAgIHNhZmVUeEdhczogdHguc2FmZVR4R2FzXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHNhZmVWZXJzaW9uID0gYXdhaXQgc2FmZUNvbnRyYWN0LmdldFZlcnNpb24oKTtcbiAgICBpZiAoKDAsIHNhZmVfY29yZV9zZGtfdXRpbHNfMS5oYXNTYWZlRmVhdHVyZSkoc2FmZV9jb3JlX3Nka191dGlsc18xLlNBRkVfRkVBVFVSRVMuU0FGRV9UWF9HQVNfT1BUSU9OQUwsIHNhZmVWZXJzaW9uKSAmJlxuICAgICAgICBzdGFuZGFyZGl6ZWRUeHMuZ2FzUHJpY2UgPT09IDApIHtcbiAgICAgICAgc2FmZVR4R2FzID0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNhZmVUeEdhcyA9IGF3YWl0ICgwLCBnYXNfMS5lc3RpbWF0ZVR4R2FzKShzYWZlQ29udHJhY3QsIGV0aEFkYXB0ZXIsIHN0YW5kYXJkaXplZFR4cy50bywgc3RhbmRhcmRpemVkVHhzLnZhbHVlLCBzdGFuZGFyZGl6ZWRUeHMuZGF0YSwgc3RhbmRhcmRpemVkVHhzLm9wZXJhdGlvbik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YW5kYXJkaXplZFR4cyxcbiAgICAgICAgc2FmZVR4R2FzXG4gICAgfTtcbn1cbmV4cG9ydHMuc3RhbmRhcmRpemVTYWZlVHJhbnNhY3Rpb25EYXRhID0gc3RhbmRhcmRpemVTYWZlVHJhbnNhY3Rpb25EYXRhO1xuZnVuY3Rpb24gZW5jb2RlTWV0YVRyYW5zYWN0aW9uKHR4KSB7XG4gICAgY29uc3QgZGF0YSA9ICgwLCBieXRlc18xLmFycmF5aWZ5KSh0eC5kYXRhKTtcbiAgICBjb25zdCBlbmNvZGVkID0gKDAsIHNvbGlkaXR5XzEucGFjaykoWyd1aW50OCcsICdhZGRyZXNzJywgJ3VpbnQyNTYnLCAndWludDI1NicsICdieXRlcyddLCBbdHgub3BlcmF0aW9uLCB0eC50bywgdHgudmFsdWUsIGRhdGEubGVuZ3RoLCBkYXRhXSk7XG4gICAgcmV0dXJuIGVuY29kZWQuc2xpY2UoMik7XG59XG5mdW5jdGlvbiBlbmNvZGVNdWx0aVNlbmREYXRhKHR4cykge1xuICAgIHJldHVybiAnMHgnICsgdHhzLm1hcCgodHgpID0+IGVuY29kZU1ldGFUcmFuc2FjdGlvbih0eCkpLmpvaW4oJycpO1xufVxuZXhwb3J0cy5lbmNvZGVNdWx0aVNlbmREYXRhID0gZW5jb2RlTXVsdGlTZW5kRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVuY29kZU11bHRpU2VuZERhdGEiLCJzdGFuZGFyZGl6ZVNhZmVUcmFuc2FjdGlvbkRhdGEiLCJzdGFuZGFyZGl6ZU1ldGFUcmFuc2FjdGlvbkRhdGEiLCJieXRlc18xIiwicmVxdWlyZSIsInNvbGlkaXR5XzEiLCJzYWZlX2NvcmVfc2RrX3R5cGVzXzEiLCJzYWZlX2NvcmVfc2RrX3V0aWxzXzEiLCJjb25zdGFudHNfMSIsImdhc18xIiwidHgiLCJfYSIsInN0YW5kYXJkaXplZFR4cyIsIm9wZXJhdGlvbiIsIk9wZXJhdGlvblR5cGUiLCJDYWxsIiwic2FmZUNvbnRyYWN0IiwiZXRoQWRhcHRlciIsIl9iIiwiX2MiLCJfZCIsInRvIiwiZGF0YSIsImJhc2VHYXMiLCJnYXNQcmljZSIsImdhc1Rva2VuIiwiWkVST19BRERSRVNTIiwicmVmdW5kUmVjZWl2ZXIiLCJub25jZSIsImdldE5vbmNlIiwic2FmZVR4R2FzIiwic2FmZVZlcnNpb24iLCJnZXRWZXJzaW9uIiwiaGFzU2FmZUZlYXR1cmUiLCJTQUZFX0ZFQVRVUkVTIiwiU0FGRV9UWF9HQVNfT1BUSU9OQUwiLCJlc3RpbWF0ZVR4R2FzIiwiZW5jb2RlTWV0YVRyYW5zYWN0aW9uIiwiYXJyYXlpZnkiLCJlbmNvZGVkIiwicGFjayIsImxlbmd0aCIsInNsaWNlIiwidHhzIiwibWFwIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@safe-global+safe-core-sdk@3.3.5_ethers@5.7.2/node_modules/@safe-global/safe-core-sdk/dist/src/utils/transactions/utils.js\n");

/***/ })

};
;