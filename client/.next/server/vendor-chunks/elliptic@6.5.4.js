"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/elliptic@6.5.4";
exports.ids = ["vendor-chunks/elliptic@6.5.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar elliptic = exports;\nelliptic.version = (__webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/package.json\").version);\nelliptic.utils = __webpack_require__(/*! ./elliptic/utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nelliptic.rand = __webpack_require__(/*! brorand */ \"(ssr)/./node_modules/.pnpm/brorand@1.1.0/node_modules/brorand/index.js\");\nelliptic.curve = __webpack_require__(/*! ./elliptic/curve */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js\");\nelliptic.curves = __webpack_require__(/*! ./elliptic/curves */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js\");\n// Protocols\nelliptic.ec = __webpack_require__(/*! ./elliptic/ec */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/index.js\");\nelliptic.eddsa = __webpack_require__(/*! ./elliptic/eddsa */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZWxsaXB0aWNANi41LjQvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFdBQVdDO0FBRWZELFNBQVNFLE9BQU8sR0FBR0Msb0lBQWtDO0FBQ3JESCxTQUFTSSxLQUFLLEdBQUdELG1CQUFPQSxDQUFDO0FBQ3pCSCxTQUFTSyxJQUFJLEdBQUdGLG1CQUFPQSxDQUFDO0FBQ3hCSCxTQUFTTSxLQUFLLEdBQUdILG1CQUFPQSxDQUFDO0FBQ3pCSCxTQUFTTyxNQUFNLEdBQUdKLG1CQUFPQSxDQUFDO0FBRTFCLFlBQVk7QUFDWkgsU0FBU1EsRUFBRSxHQUFHTCxtQkFBT0EsQ0FBQztBQUN0QkgsU0FBU1MsS0FBSyxHQUFHTixtQkFBT0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9lbGxpcHRpY0A2LjUuNC9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljLmpzPzBhZDEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpO1xuZWxsaXB0aWMucmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbmVsbGlwdGljLmN1cnZlID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZScpO1xuZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTtcblxuLy8gUHJvdG9jb2xzXG5lbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTtcbmVsbGlwdGljLmVkZHNhID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lZGRzYScpO1xuIl0sIm5hbWVzIjpbImVsbGlwdGljIiwiZXhwb3J0cyIsInZlcnNpb24iLCJyZXF1aXJlIiwidXRpbHMiLCJyYW5kIiwiY3VydmUiLCJjdXJ2ZXMiLCJlYyIsImVkZHNhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\nfunction BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new BN(conf.p, 16);\n    // Use Montgomery, when there is no fast reduction for the prime\n    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n    // Useful for many curves\n    this.zero = new BN(0).toRed(this.red);\n    this.one = new BN(1).toRed(this.red);\n    this.two = new BN(2).toRed(this.red);\n    // Curve configuration, optional\n    this.n = conf.n && new BN(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n    // Temporary arrays\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4);\n    this._bitLength = this.n ? this.n.bitLength() : 0;\n    // Generalized Greg Maxwell's trick\n    var adjustCount = this.n && this.p.div(this.n);\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n        this.redN = null;\n    } else {\n        this._maxwellTrick = true;\n        this.redN = this.n.toRed(this.red);\n    }\n}\nmodule.exports = BaseCurve;\nBaseCurve.prototype.point = function point() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype.validate = function validate() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n    assert(p.precomputed);\n    var doubles = p._getDoubles();\n    var naf = getNAF(k, 1, this._bitLength);\n    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n    I /= 3;\n    // Translate into more windowed form\n    var repr = [];\n    var j;\n    var nafW;\n    for(j = 0; j < naf.length; j += doubles.step){\n        nafW = 0;\n        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];\n        repr.push(nafW);\n    }\n    var a = this.jpoint(null, null, null);\n    var b = this.jpoint(null, null, null);\n    for(var i = I; i > 0; i--){\n        for(j = 0; j < repr.length; j++){\n            nafW = repr[j];\n            if (nafW === i) b = b.mixedAdd(doubles.points[j]);\n            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n        }\n        a = a.add(b);\n    }\n    return a.toP();\n};\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n    var w = 4;\n    // Precompute window\n    var nafPoints = p._getNAFPoints(w);\n    w = nafPoints.wnd;\n    var wnd = nafPoints.points;\n    // Get NAF form\n    var naf = getNAF(k, w, this._bitLength);\n    // Add `this`*(N+1) for every w-NAF index\n    var acc = this.jpoint(null, null, null);\n    for(var i = naf.length - 1; i >= 0; i--){\n        // Count zeroes\n        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;\n        if (i >= 0) l++;\n        acc = acc.dblp(l);\n        if (i < 0) break;\n        var z = naf[i];\n        assert(z !== 0);\n        if (p.type === \"affine\") {\n            // J +- P\n            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);\n            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n        } else {\n            // J +- J\n            if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);\n            else acc = acc.add(wnd[-z - 1 >> 1].neg());\n        }\n    }\n    return p.type === \"affine\" ? acc.toP() : acc;\n};\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n    var wndWidth = this._wnafT1;\n    var wnd = this._wnafT2;\n    var naf = this._wnafT3;\n    // Fill all arrays\n    var max = 0;\n    var i;\n    var j;\n    var p;\n    for(i = 0; i < len; i++){\n        p = points[i];\n        var nafPoints = p._getNAFPoints(defW);\n        wndWidth[i] = nafPoints.wnd;\n        wnd[i] = nafPoints.points;\n    }\n    // Comb small window NAFs\n    for(i = len - 1; i >= 1; i -= 2){\n        var a = i - 1;\n        var b = i;\n        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n            max = Math.max(naf[a].length, max);\n            max = Math.max(naf[b].length, max);\n            continue;\n        }\n        var comb = [\n            points[a],\n            /* 1 */ null,\n            /* 3 */ null,\n            /* 5 */ points[b]\n        ];\n        // Try to avoid Projective points, if possible\n        if (points[a].y.cmp(points[b].y) === 0) {\n            comb[1] = points[a].add(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].add(points[b].neg());\n        } else {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        }\n        var index = [\n            -3,\n            /* -1 -1 */ -1,\n            /* -1 0 */ -5,\n            /* -1 1 */ -7,\n            /* 0 -1 */ 0,\n            /* 0 0 */ 7,\n            /* 0 1 */ 5,\n            /* 1 -1 */ 1,\n            /* 1 0 */ 3\n        ];\n        var jsf = getJSF(coeffs[a], coeffs[b]);\n        max = Math.max(jsf[0].length, max);\n        naf[a] = new Array(max);\n        naf[b] = new Array(max);\n        for(j = 0; j < max; j++){\n            var ja = jsf[0][j] | 0;\n            var jb = jsf[1][j] | 0;\n            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n            naf[b][j] = 0;\n            wnd[a] = comb;\n        }\n    }\n    var acc = this.jpoint(null, null, null);\n    var tmp = this._wnafT4;\n    for(i = max; i >= 0; i--){\n        var k = 0;\n        while(i >= 0){\n            var zero = true;\n            for(j = 0; j < len; j++){\n                tmp[j] = naf[j][i] | 0;\n                if (tmp[j] !== 0) zero = false;\n            }\n            if (!zero) break;\n            k++;\n            i--;\n        }\n        if (i >= 0) k++;\n        acc = acc.dblp(k);\n        if (i < 0) break;\n        for(j = 0; j < len; j++){\n            var z = tmp[j];\n            p;\n            if (z === 0) continue;\n            else if (z > 0) p = wnd[j][z - 1 >> 1];\n            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n            if (p.type === \"affine\") acc = acc.mixedAdd(p);\n            else acc = acc.add(p);\n        }\n    }\n    // Zeroify references\n    for(i = 0; i < len; i++)wnd[i] = null;\n    if (jacobianResult) return acc;\n    else return acc.toP();\n};\nfunction BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\nBasePoint.prototype.eq = function eq() {\n    throw new Error(\"Not implemented\");\n};\nBasePoint.prototype.validate = function validate() {\n    return this.curve.validate(this);\n};\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    bytes = utils.toArray(bytes, enc);\n    var len = this.p.byteLength();\n    // uncompressed, hybrid-odd, hybrid-even\n    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);\n        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);\n        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n        return res;\n    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n    }\n    throw new Error(\"Unknown point format\");\n};\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n    return this.encode(enc, true);\n};\nBasePoint.prototype._encode = function _encode(compact) {\n    var len = this.curve.p.byteLength();\n    var x = this.getX().toArray(\"be\", len);\n    if (compact) return [\n        this.getY().isEven() ? 0x02 : 0x03\n    ].concat(x);\n    return [\n        0x04\n    ].concat(x, this.getY().toArray(\"be\", len));\n};\nBasePoint.prototype.encode = function encode(enc, compact) {\n    return utils.encode(this._encode(compact), enc);\n};\nBasePoint.prototype.precompute = function precompute(power) {\n    if (this.precomputed) return this;\n    var precomputed = {\n        doubles: null,\n        naf: null,\n        beta: null\n    };\n    precomputed.naf = this._getNAFPoints(8);\n    precomputed.doubles = this._getDoubles(4, power);\n    precomputed.beta = this._getBeta();\n    this.precomputed = precomputed;\n    return this;\n};\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n    if (!this.precomputed) return false;\n    var doubles = this.precomputed.doubles;\n    if (!doubles) return false;\n    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    var doubles = [\n        this\n    ];\n    var acc = this;\n    for(var i = 0; i < power; i += step){\n        for(var j = 0; j < step; j++)acc = acc.dbl();\n        doubles.push(acc);\n    }\n    return {\n        step: step,\n        points: doubles\n    };\n};\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    var res = [\n        this\n    ];\n    var max = (1 << wnd) - 1;\n    var dbl = max === 1 ? null : this.dbl();\n    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);\n    return {\n        wnd: wnd,\n        points: res\n    };\n};\nBasePoint.prototype._getBeta = function _getBeta() {\n    return null;\n};\nBasePoint.prototype.dblp = function dblp(k) {\n    var r = this;\n    for(var i = 0; i < k; i++)r = r.dbl();\n    return r;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZWxsaXB0aWNANi41LjQvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUUsU0FBU0QsTUFBTUMsTUFBTTtBQUN6QixJQUFJQyxTQUFTRixNQUFNRSxNQUFNO0FBQ3pCLElBQUlDLFNBQVNILE1BQU1HLE1BQU07QUFFekIsU0FBU0MsVUFBVUMsSUFBSSxFQUFFQyxJQUFJO0lBQzNCLElBQUksQ0FBQ0QsSUFBSSxHQUFHQTtJQUNaLElBQUksQ0FBQ0UsQ0FBQyxHQUFHLElBQUlULEdBQUdRLEtBQUtDLENBQUMsRUFBRTtJQUV4QixnRUFBZ0U7SUFDaEUsSUFBSSxDQUFDQyxHQUFHLEdBQUdGLEtBQUtHLEtBQUssR0FBR1gsR0FBR1UsR0FBRyxDQUFDRixLQUFLRyxLQUFLLElBQUlYLEdBQUdZLElBQUksQ0FBQyxJQUFJLENBQUNILENBQUM7SUFFM0QseUJBQXlCO0lBQ3pCLElBQUksQ0FBQ0ksSUFBSSxHQUFHLElBQUliLEdBQUcsR0FBR2MsS0FBSyxDQUFDLElBQUksQ0FBQ0osR0FBRztJQUNwQyxJQUFJLENBQUNLLEdBQUcsR0FBRyxJQUFJZixHQUFHLEdBQUdjLEtBQUssQ0FBQyxJQUFJLENBQUNKLEdBQUc7SUFDbkMsSUFBSSxDQUFDTSxHQUFHLEdBQUcsSUFBSWhCLEdBQUcsR0FBR2MsS0FBSyxDQUFDLElBQUksQ0FBQ0osR0FBRztJQUVuQyxnQ0FBZ0M7SUFDaEMsSUFBSSxDQUFDTyxDQUFDLEdBQUdULEtBQUtTLENBQUMsSUFBSSxJQUFJakIsR0FBR1EsS0FBS1MsQ0FBQyxFQUFFO0lBQ2xDLElBQUksQ0FBQ0MsQ0FBQyxHQUFHVixLQUFLVSxDQUFDLElBQUksSUFBSSxDQUFDQyxhQUFhLENBQUNYLEtBQUtVLENB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Q0Y7QUFFQThDLFVBQVVyRCxTQUFTLENBQUM4QixhQUFhLEdBQUcsU0FBU0EsY0FBY0MsR0FBRztJQUM1RCxJQUFJLElBQUksQ0FBQ3pCLFdBQVcsSUFBSSxJQUFJLENBQUNBLFdBQVcsQ0FBQ0csR0FBRyxFQUMxQyxPQUFPLElBQUksQ0FBQ0gsV0FBVyxDQUFDRyxHQUFHO0lBRTdCLElBQUlvRCxNQUFNO1FBQUUsSUFBSTtLQUFFO0lBQ2xCLElBQUlwQixNQUFNLENBQUMsS0FBS1YsR0FBRSxJQUFLO0lBQ3ZCLElBQUlnRCxNQUFNdEMsUUFBUSxJQUFJLE9BQU8sSUFBSSxDQUFDc0MsR0FBRztJQUNyQyxJQUFLLElBQUkxRCxJQUFJLEdBQUdBLElBQUlvQixLQUFLcEIsSUFDdkJ3QyxHQUFHLENBQUN4QyxFQUFFLEdBQUd3QyxHQUFHLENBQUN4QyxJQUFJLEVBQUUsQ0FBQ0ksR0FBRyxDQUFDc0Q7SUFDMUIsT0FBTztRQUNMaEQsS0FBS0E7UUFDTFIsUUFBUXNDO0lBQ1Y7QUFDRjtBQUVBUixVQUFVckQsU0FBUyxDQUFDNEUsUUFBUSxHQUFHLFNBQVNBO0lBQ3RDLE9BQU87QUFDVDtBQUVBdkIsVUFBVXJELFNBQVMsQ0FBQ2lDLElBQUksR0FBRyxTQUFTQSxLQUFLNUIsQ0FBQztJQUN4QyxJQUFJMkUsSUFBSSxJQUFJO0lBQ1osSUFBSyxJQUFJM0QsSUFBSSxHQUFHQSxJQUFJaEIsR0FBR2dCLElBQ3JCMkQsSUFBSUEsRUFBRUQsR0FBRztJQUNYLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vZWxsaXB0aWNANi41LjQvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzPzFhODYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBnZXROQUYgPSB1dGlscy5nZXROQUY7XG52YXIgZ2V0SlNGID0gdXRpbHMuZ2V0SlNGO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gQmFzZUN1cnZlKHR5cGUsIGNvbmYpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5wID0gbmV3IEJOKGNvbmYucCwgMTYpO1xuXG4gIC8vIFVzZSBNb250Z29tZXJ5LCB3aGVuIHRoZXJlIGlzIG5vIGZhc3QgcmVkdWN0aW9uIGZvciB0aGUgcHJpbWVcbiAgdGhpcy5yZWQgPSBjb25mLnByaW1lID8gQk4ucmVkKGNvbmYucHJpbWUpIDogQk4ubW9udCh0aGlzLnApO1xuXG4gIC8vIFVzZWZ1bCBmb3IgbWFueSBjdXJ2ZXNcbiAgdGhpcy56ZXJvID0gbmV3IEJOKDApLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5vbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLnR3byA9IG5ldyBCTigyKS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8gQ3VydmUgY29uZmlndXJhdGlvbiwgb3B0aW9uYWxcbiAgdGhpcy5uID0gY29uZi5uICYmIG5ldyBCTihjb25mLm4sIDE2KTtcbiAgdGhpcy5nID0gY29uZi5nICYmIHRoaXMucG9pbnRGcm9tSlNPTihjb25mLmcsIGNvbmYuZ1JlZCk7XG5cbiAgLy8gVGVtcG9yYXJ5IGFycmF5c1xuICB0aGlzLl93bmFmVDEgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUMiA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQzID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDQgPSBuZXcgQXJyYXkoNCk7XG5cbiAgdGhpcy5fYml0TGVuZ3RoID0gdGhpcy5uID8gdGhpcy5uLmJpdExlbmd0aCgpIDogMDtcblxuICAvLyBHZW5lcmFsaXplZCBHcmVnIE1heHdlbGwncyB0cmlja1xuICB2YXIgYWRqdXN0Q291bnQgPSB0aGlzLm4gJiYgdGhpcy5wLmRpdih0aGlzLm4pO1xuICBpZiAoIWFkanVzdENvdW50IHx8IGFkanVzdENvdW50LmNtcG4oMTAwKSA+IDApIHtcbiAgICB0aGlzLnJlZE4gPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX21heHdlbGxUcmljayA9IHRydWU7XG4gICAgdGhpcy5yZWROID0gdGhpcy5uLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ3VydmU7XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX2ZpeGVkTmFmTXVsID0gZnVuY3Rpb24gX2ZpeGVkTmFmTXVsKHAsIGspIHtcbiAgYXNzZXJ0KHAucHJlY29tcHV0ZWQpO1xuICB2YXIgZG91YmxlcyA9IHAuX2dldERvdWJsZXMoKTtcblxuICB2YXIgbmFmID0gZ2V0TkFGKGssIDEsIHRoaXMuX2JpdExlbmd0aCk7XG4gIHZhciBJID0gKDEgPDwgKGRvdWJsZXMuc3RlcCArIDEpKSAtIChkb3VibGVzLnN0ZXAgJSAyID09PSAwID8gMiA6IDEpO1xuICBJIC89IDM7XG5cbiAgLy8gVHJhbnNsYXRlIGludG8gbW9yZSB3aW5kb3dlZCBmb3JtXG4gIHZhciByZXByID0gW107XG4gIHZhciBqO1xuICB2YXIgbmFmVztcbiAgZm9yIChqID0gMDsgaiA8IG5hZi5sZW5ndGg7IGogKz0gZG91Ymxlcy5zdGVwKSB7XG4gICAgbmFmVyA9IDA7XG4gICAgZm9yICh2YXIgbCA9IGogKyBkb3VibGVzLnN0ZXAgLSAxOyBsID49IGo7IGwtLSlcbiAgICAgIG5hZlcgPSAobmFmVyA8PCAxKSArIG5hZltsXTtcbiAgICByZXByLnB1c2gobmFmVyk7XG4gIH1cblxuICB2YXIgYSA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgYiA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICBmb3IgKHZhciBpID0gSTsgaSA+IDA7IGktLSkge1xuICAgIGZvciAoaiA9IDA7IGogPCByZXByLmxlbmd0aDsgaisrKSB7XG4gICAgICBuYWZXID0gcmVwcltqXTtcbiAgICAgIGlmIChuYWZXID09PSBpKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7XG4gICAgICBlbHNlIGlmIChuYWZXID09PSAtaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0ubmVnKCkpO1xuICAgIH1cbiAgICBhID0gYS5hZGQoYik7XG4gIH1cbiAgcmV0dXJuIGEudG9QKCk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsID0gZnVuY3Rpb24gX3duYWZNdWwocCwgaykge1xuICB2YXIgdyA9IDQ7XG5cbiAgLy8gUHJlY29tcHV0ZSB3aW5kb3dcbiAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyh3KTtcbiAgdyA9IG5hZlBvaW50cy53bmQ7XG4gIHZhciB3bmQgPSBuYWZQb2ludHMucG9pbnRzO1xuXG4gIC8vIEdldCBOQUYgZm9ybVxuICB2YXIgbmFmID0gZ2V0TkFGKGssIHcsIHRoaXMuX2JpdExlbmd0aCk7XG5cbiAgLy8gQWRkIGB0aGlzYCooTisxKSBmb3IgZXZlcnkgdy1OQUYgaW5kZXhcbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICBmb3IgKHZhciBpID0gbmFmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgLy8gQ291bnQgemVyb2VzXG4gICAgZm9yICh2YXIgbCA9IDA7IGkgPj0gMCAmJiBuYWZbaV0gPT09IDA7IGktLSlcbiAgICAgIGwrKztcbiAgICBpZiAoaSA+PSAwKVxuICAgICAgbCsrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGwpO1xuXG4gICAgaWYgKGkgPCAwKVxuICAgICAgYnJlYWs7XG4gICAgdmFyIHogPSBuYWZbaV07XG4gICAgYXNzZXJ0KHogIT09IDApO1xuICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKSB7XG4gICAgICAvLyBKICstIFBcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEogKy0gSlxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoeiAtIDEpID4+IDFdKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcC50eXBlID09PSAnYWZmaW5lJyA/IGFjYy50b1AoKSA6IGFjYztcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWxBZGQgPSBmdW5jdGlvbiBfd25hZk11bEFkZChkZWZXLFxuICBwb2ludHMsXG4gIGNvZWZmcyxcbiAgbGVuLFxuICBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgd25kV2lkdGggPSB0aGlzLl93bmFmVDE7XG4gIHZhciB3bmQgPSB0aGlzLl93bmFmVDI7XG4gIHZhciBuYWYgPSB0aGlzLl93bmFmVDM7XG5cbiAgLy8gRmlsbCBhbGwgYXJyYXlzXG4gIHZhciBtYXggPSAwO1xuICB2YXIgaTtcbiAgdmFyIGo7XG4gIHZhciBwO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHMoZGVmVyk7XG4gICAgd25kV2lkdGhbaV0gPSBuYWZQb2ludHMud25kO1xuICAgIHduZFtpXSA9IG5hZlBvaW50cy5wb2ludHM7XG4gIH1cblxuICAvLyBDb21iIHNtYWxsIHdpbmRvdyBOQUZzXG4gIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMTsgaSAtPSAyKSB7XG4gICAgdmFyIGEgPSBpIC0gMTtcbiAgICB2YXIgYiA9IGk7XG4gICAgaWYgKHduZFdpZHRoW2FdICE9PSAxIHx8IHduZFdpZHRoW2JdICE9PSAxKSB7XG4gICAgICBuYWZbYV0gPSBnZXROQUYoY29lZmZzW2FdLCB3bmRXaWR0aFthXSwgdGhpcy5fYml0TGVuZ3RoKTtcbiAgICAgIG5hZltiXSA9IGdldE5BRihjb2VmZnNbYl0sIHduZFdpZHRoW2JdLCB0aGlzLl9iaXRMZW5ndGgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2FdLmxlbmd0aCwgbWF4KTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZltiXS5sZW5ndGgsIG1heCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgY29tYiA9IFtcbiAgICAgIHBvaW50c1thXSwgLyogMSAqL1xuICAgICAgbnVsbCwgLyogMyAqL1xuICAgICAgbnVsbCwgLyogNSAqL1xuICAgICAgcG9pbnRzW2JdLCAvKiA3ICovXG4gICAgXTtcblxuICAgIC8vIFRyeSB0byBhdm9pZCBQcm9qZWN0aXZlIHBvaW50cywgaWYgcG9zc2libGVcbiAgICBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55KSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2UgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueS5yZWROZWcoKSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBbXG4gICAgICAtMywgLyogLTEgLTEgKi9cbiAgICAgIC0xLCAvKiAtMSAwICovXG4gICAgICAtNSwgLyogLTEgMSAqL1xuICAgICAgLTcsIC8qIDAgLTEgKi9cbiAgICAgIDAsIC8qIDAgMCAqL1xuICAgICAgNywgLyogMCAxICovXG4gICAgICA1LCAvKiAxIC0xICovXG4gICAgICAxLCAvKiAxIDAgKi9cbiAgICAgIDMsICAvKiAxIDEgKi9cbiAgICBdO1xuXG4gICAgdmFyIGpzZiA9IGdldEpTRihjb2VmZnNbYV0sIGNvZWZmc1tiXSk7XG4gICAgbWF4ID0gTWF0aC5tYXgoanNmWzBdLmxlbmd0aCwgbWF4KTtcbiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBuYWZbYl0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbWF4OyBqKyspIHtcbiAgICAgIHZhciBqYSA9IGpzZlswXVtqXSB8IDA7XG4gICAgICB2YXIgamIgPSBqc2ZbMV1bal0gfCAwO1xuXG4gICAgICBuYWZbYV1bal0gPSBpbmRleFsoamEgKyAxKSAqIDMgKyAoamIgKyAxKV07XG4gICAgICBuYWZbYl1bal0gPSAwO1xuICAgICAgd25kW2FdID0gY29tYjtcbiAgICB9XG4gIH1cblxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciB0bXAgPSB0aGlzLl93bmFmVDQ7XG4gIGZvciAoaSA9IG1heDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgayA9IDA7XG5cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICB2YXIgemVybyA9IHRydWU7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDtcbiAgICAgICAgaWYgKHRtcFtqXSAhPT0gMClcbiAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXplcm8pXG4gICAgICAgIGJyZWFrO1xuICAgICAgaysrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICB2YXIgeiA9IHRtcFtqXTtcbiAgICAgIHA7XG4gICAgICBpZiAoeiA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBlbHNlIGlmICh6ID4gMClcbiAgICAgICAgcCA9IHduZFtqXVsoeiAtIDEpID4+IDFdO1xuICAgICAgZWxzZSBpZiAoeiA8IDApXG4gICAgICAgIHAgPSB3bmRbal1bKC16IC0gMSkgPj4gMV0ubmVnKCk7XG5cbiAgICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQocCk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQocCk7XG4gICAgfVxuICB9XG4gIC8vIFplcm9pZnkgcmVmZXJlbmNlc1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgd25kW2ldID0gbnVsbDtcblxuICBpZiAoamFjb2JpYW5SZXN1bHQpXG4gICAgcmV0dXJuIGFjYztcbiAgZWxzZVxuICAgIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSgvKm90aGVyKi8pIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICBieXRlcyA9IHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyk7XG5cbiAgdmFyIGxlbiA9IHRoaXMucC5ieXRlTGVuZ3RoKCk7XG5cbiAgLy8gdW5jb21wcmVzc2VkLCBoeWJyaWQtb2RkLCBoeWJyaWQtZXZlblxuICBpZiAoKGJ5dGVzWzBdID09PSAweDA0IHx8IGJ5dGVzWzBdID09PSAweDA2IHx8IGJ5dGVzWzBdID09PSAweDA3KSAmJlxuICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gMiAqIGxlbikge1xuICAgIGlmIChieXRlc1swXSA9PT0gMHgwNilcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDApO1xuICAgIGVsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMSk7XG5cbiAgICB2YXIgcmVzID0gIHRoaXMucG9pbnQoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksXG4gICAgICBieXRlcy5zbGljZSgxICsgbGVuLCAxICsgMiAqIGxlbikpO1xuXG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmICgoYnl0ZXNbMF0gPT09IDB4MDIgfHwgYnl0ZXNbMF0gPT09IDB4MDMpICYmXG4gICAgICAgICAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IGxlbikge1xuICAgIHJldHVybiB0aGlzLnBvaW50RnJvbVgoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksIGJ5dGVzWzBdID09PSAweDAzKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcG9pbnQgZm9ybWF0Jyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZUNvbXByZXNzZWQgPSBmdW5jdGlvbiBlbmNvZGVDb21wcmVzc2VkKGVuYykge1xuICByZXR1cm4gdGhpcy5lbmNvZGUoZW5jLCB0cnVlKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoY29tcGFjdCkge1xuICB2YXIgbGVuID0gdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIHggPSB0aGlzLmdldFgoKS50b0FycmF5KCdiZScsIGxlbik7XG5cbiAgaWYgKGNvbXBhY3QpXG4gICAgcmV0dXJuIFsgdGhpcy5nZXRZKCkuaXNFdmVuKCkgPyAweDAyIDogMHgwMyBdLmNvbmNhdCh4KTtcblxuICByZXR1cm4gWyAweDA0IF0uY29uY2F0KHgsIHRoaXMuZ2V0WSgpLnRvQXJyYXkoJ2JlJywgbGVuKSk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShlbmMsIGNvbXBhY3QpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksIGVuYyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsLFxuICB9O1xuICBwcmVjb21wdXRlZC5uYWYgPSB0aGlzLl9nZXROQUZQb2ludHMoOCk7XG4gIHByZWNvbXB1dGVkLmRvdWJsZXMgPSB0aGlzLl9nZXREb3VibGVzKDQsIHBvd2VyKTtcbiAgcHJlY29tcHV0ZWQuYmV0YSA9IHRoaXMuX2dldEJldGEoKTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IHByZWNvbXB1dGVkO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5faGFzRG91YmxlcyA9IGZ1bmN0aW9uIF9oYXNEb3VibGVzKGspIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgZG91YmxlcyA9IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcbiAgaWYgKCFkb3VibGVzKVxuICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gZG91Ymxlcy5wb2ludHMubGVuZ3RoID49IE1hdGguY2VpbCgoay5iaXRMZW5ndGgoKSArIDEpIC8gZG91Ymxlcy5zdGVwKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldERvdWJsZXMgPSBmdW5jdGlvbiBfZ2V0RG91YmxlcyhzdGVwLCBwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcblxuICB2YXIgZG91YmxlcyA9IFsgdGhpcyBdO1xuICB2YXIgYWNjID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3dlcjsgaSArPSBzdGVwKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdGVwOyBqKyspXG4gICAgICBhY2MgPSBhY2MuZGJsKCk7XG4gICAgZG91Ymxlcy5wdXNoKGFjYyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGVwOiBzdGVwLFxuICAgIHBvaW50czogZG91YmxlcyxcbiAgfTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldE5BRlBvaW50cyA9IGZ1bmN0aW9uIF9nZXROQUZQb2ludHMod25kKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQubmFmKVxuICAgIHJldHVybiB0aGlzLnByZWNvbXB1dGVkLm5hZjtcblxuICB2YXIgcmVzID0gWyB0aGlzIF07XG4gIHZhciBtYXggPSAoMSA8PCB3bmQpIC0gMTtcbiAgdmFyIGRibCA9IG1heCA9PT0gMSA/IG51bGwgOiB0aGlzLmRibCgpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IG1heDsgaSsrKVxuICAgIHJlc1tpXSA9IHJlc1tpIC0gMV0uYWRkKGRibCk7XG4gIHJldHVybiB7XG4gICAgd25kOiB3bmQsXG4gICAgcG9pbnRzOiByZXMsXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiJdLCJuYW1lcyI6WyJCTiIsInJlcXVpcmUiLCJ1dGlscyIsImdldE5BRiIsImdldEpTRiIsImFzc2VydCIsIkJhc2VDdXJ2ZSIsInR5cGUiLCJjb25mIiwicCIsInJlZCIsInByaW1lIiwibW9udCIsInplcm8iLCJ0b1JlZCIsIm9uZSIsInR3byIsIm4iLCJnIiwicG9pbnRGcm9tSlNPTiIsImdSZWQiLCJfd25hZlQxIiwiQXJyYXkiLCJfd25hZlQyIiwiX3duYWZUMyIsIl93bmFmVDQiLCJfYml0TGVuZ3RoIiwiYml0TGVuZ3RoIiwiYWRqdXN0Q291bnQiLCJkaXYiLCJjbXBuIiwicmVkTiIsIl9tYXh3ZWxsVHJpY2siLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvdG90eXBlIiwicG9pbnQiLCJFcnJvciIsInZhbGlkYXRlIiwiX2ZpeGVkTmFmTXVsIiwiayIsInByZWNvbXB1dGVkIiwiZG91YmxlcyIsIl9nZXREb3VibGVzIiwibmFmIiwiSSIsInN0ZXAiLCJyZXByIiwiaiIsIm5hZlciLCJsZW5ndGgiLCJsIiwicHVzaCIsImEiLCJqcG9pbnQiLCJiIiwiaSIsIm1peGVkQWRkIiwicG9pbnRzIiwibmVnIiwiYWRkIiwidG9QIiwiX3duYWZNdWwiLCJ3IiwibmFmUG9pbnRzIiwiX2dldE5BRlBvaW50cyIsInduZCIsImFjYyIsImRibHAiLCJ6IiwiX3duYWZNdWxBZGQiLCJkZWZXIiwiY29lZmZzIiwibGVuIiwiamFjb2JpYW5SZXN1bHQiLCJ3bmRXaWR0aCIsIm1heCIsIk1hdGgiLCJjb21iIiwieSIsImNtcCIsInRvSiIsInJlZE5lZyIsImluZGV4IiwianNmIiwiamEiLCJqYiIsInRtcCIsIkJhc2VQb2ludCIsImN1cnZlIiwiZXEiLCJkZWNvZGVQb2ludCIsImJ5dGVzIiwiZW5jIiwidG9BcnJheSIsImJ5dGVMZW5ndGgiLCJyZXMiLCJzbGljZSIsInBvaW50RnJvbVgiLCJlbmNvZGVDb21wcmVzc2VkIiwiZW5jb2RlIiwiX2VuY29kZSIsImNvbXBhY3QiLCJ4IiwiZ2V0WCIsImdldFkiLCJpc0V2ZW4iLCJjb25jYXQiLCJwcmVjb21wdXRlIiwicG93ZXIiLCJiZXRhIiwiX2dldEJldGEiLCJfaGFzRG91YmxlcyIsImNlaWwiLCJkYmwiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/edwards.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/edwards.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nvar Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js\");\nvar assert = utils.assert;\nfunction EdwardsCurve(conf) {\n    // NOTE: Important as we are creating point in Base.call()\n    this.twisted = (conf.a | 0) !== 1;\n    this.mOneA = this.twisted && (conf.a | 0) === -1;\n    this.extended = this.mOneA;\n    Base.call(this, \"edwards\", conf);\n    this.a = new BN(conf.a, 16).umod(this.red.m);\n    this.a = this.a.toRed(this.red);\n    this.c = new BN(conf.c, 16).toRed(this.red);\n    this.c2 = this.c.redSqr();\n    this.d = new BN(conf.d, 16).toRed(this.red);\n    this.dd = this.d.redAdd(this.d);\n    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n    this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n    if (this.mOneA) return num.redNeg();\n    else return this.a.redMul(num);\n};\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n    if (this.oneC) return num;\n    else return this.c.redMul(num);\n};\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n    return this.point(x, y, z, t);\n};\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new BN(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var x2 = x.redSqr();\n    var rhs = this.c2.redSub(this.a.redMul(x2));\n    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n    var y2 = rhs.redMul(lhs.redInvm());\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n};\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n    y = new BN(y, 16);\n    if (!y.red) y = y.toRed(this.red);\n    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n    var y2 = y.redSqr();\n    var lhs = y2.redSub(this.c2);\n    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n    var x2 = lhs.redMul(rhs.redInvm());\n    if (x2.cmp(this.zero) === 0) {\n        if (odd) throw new Error(\"invalid point\");\n        else return this.point(this.zero, y);\n    }\n    var x = x2.redSqrt();\n    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    if (x.fromRed().isOdd() !== odd) x = x.redNeg();\n    return this.point(x, y);\n};\nEdwardsCurve.prototype.validate = function validate(point) {\n    if (point.isInfinity()) return true;\n    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n    point.normalize();\n    var x2 = point.x.redSqr();\n    var y2 = point.y.redSqr();\n    var lhs = x2.redMul(this.a).redAdd(y2);\n    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n    return lhs.cmp(rhs) === 0;\n};\nfunction Point(curve, x, y, z, t) {\n    Base.BasePoint.call(this, curve, \"projective\");\n    if (x === null && y === null && z === null) {\n        this.x = this.curve.zero;\n        this.y = this.curve.one;\n        this.z = this.curve.one;\n        this.t = this.curve.zero;\n        this.zOne = true;\n    } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        this.z = z ? new BN(z, 16) : this.curve.one;\n        this.t = t && new BN(t, 16);\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n        if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);\n        this.zOne = this.z === this.curve.one;\n        // Use extended coordinates\n        if (this.curve.extended && !this.t) {\n            this.t = this.x.redMul(this.y);\n            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());\n        }\n    }\n}\ninherits(Point, Base.BasePoint);\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n    return Point.fromJSON(this, obj);\n};\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n    return new Point(this, x, y, z, t);\n};\nPoint.fromJSON = function fromJSON(curve, obj) {\n    return new Point(curve, obj[0], obj[1], obj[2]);\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \" z: \" + this.z.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);\n};\nPoint.prototype._extDbl = function _extDbl() {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n    //     #doubling-dbl-2008-hwcd\n    // 4M + 4S\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = 2 * Z1^2\n    var c = this.z.redSqr();\n    c = c.redIAdd(c);\n    // D = a * A\n    var d = this.curve._mulA(a);\n    // E = (X1 + Y1)^2 - A - B\n    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n    // G = D + B\n    var g = d.redAdd(b);\n    // F = G - C\n    var f = g.redSub(c);\n    // H = D - B\n    var h = d.redSub(b);\n    // X3 = E * F\n    var nx = e.redMul(f);\n    // Y3 = G * H\n    var ny = g.redMul(h);\n    // T3 = E * H\n    var nt = e.redMul(h);\n    // Z3 = F * G\n    var nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n};\nPoint.prototype._projDbl = function _projDbl() {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n    //     #doubling-dbl-2008-bbjlp\n    //     #doubling-dbl-2007-bl\n    // and others\n    // Generally 3M + 4S or 2M + 4S\n    // B = (X1 + Y1)^2\n    var b = this.x.redAdd(this.y).redSqr();\n    // C = X1^2\n    var c = this.x.redSqr();\n    // D = Y1^2\n    var d = this.y.redSqr();\n    var nx;\n    var ny;\n    var nz;\n    var e;\n    var h;\n    var j;\n    if (this.curve.twisted) {\n        // E = a * C\n        e = this.curve._mulA(c);\n        // F = E + D\n        var f = e.redAdd(d);\n        if (this.zOne) {\n            // X3 = (B - C - D) * (F - 2)\n            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n            // Y3 = F * (E - D)\n            ny = f.redMul(e.redSub(d));\n            // Z3 = F^2 - 2 * F\n            nz = f.redSqr().redSub(f).redSub(f);\n        } else {\n            // H = Z1^2\n            h = this.z.redSqr();\n            // J = F - 2 * H\n            j = f.redSub(h).redISub(h);\n            // X3 = (B-C-D)*J\n            nx = b.redSub(c).redISub(d).redMul(j);\n            // Y3 = F * (E - D)\n            ny = f.redMul(e.redSub(d));\n            // Z3 = F * J\n            nz = f.redMul(j);\n        }\n    } else {\n        // E = C + D\n        e = c.redAdd(d);\n        // H = (c * Z1)^2\n        h = this.curve._mulC(this.z).redSqr();\n        // J = E - 2 * H\n        j = e.redSub(h).redSub(h);\n        // X3 = c * (B - E) * J\n        nx = this.curve._mulC(b.redISub(e)).redMul(j);\n        // Y3 = c * E * (C - D)\n        ny = this.curve._mulC(e).redMul(c.redISub(d));\n        // Z3 = E * J\n        nz = e.redMul(j);\n    }\n    return this.curve.point(nx, ny, nz);\n};\nPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    // Double in extended coordinates\n    if (this.curve.extended) return this._extDbl();\n    else return this._projDbl();\n};\nPoint.prototype._extAdd = function _extAdd(p) {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n    //     #addition-add-2008-hwcd-3\n    // 8M\n    // A = (Y1 - X1) * (Y2 - X2)\n    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n    // B = (Y1 + X1) * (Y2 + X2)\n    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n    // C = T1 * k * T2\n    var c = this.t.redMul(this.curve.dd).redMul(p.t);\n    // D = Z1 * 2 * Z2\n    var d = this.z.redMul(p.z.redAdd(p.z));\n    // E = B - A\n    var e = b.redSub(a);\n    // F = D - C\n    var f = d.redSub(c);\n    // G = D + C\n    var g = d.redAdd(c);\n    // H = B + A\n    var h = b.redAdd(a);\n    // X3 = E * F\n    var nx = e.redMul(f);\n    // Y3 = G * H\n    var ny = g.redMul(h);\n    // T3 = E * H\n    var nt = e.redMul(h);\n    // Z3 = F * G\n    var nz = f.redMul(g);\n    return this.curve.point(nx, ny, nz, nt);\n};\nPoint.prototype._projAdd = function _projAdd(p) {\n    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n    //     #addition-add-2008-bbjlp\n    //     #addition-add-2007-bl\n    // 10M + 1S\n    // A = Z1 * Z2\n    var a = this.z.redMul(p.z);\n    // B = A^2\n    var b = a.redSqr();\n    // C = X1 * X2\n    var c = this.x.redMul(p.x);\n    // D = Y1 * Y2\n    var d = this.y.redMul(p.y);\n    // E = d * C * D\n    var e = this.curve.d.redMul(c).redMul(d);\n    // F = B - E\n    var f = b.redSub(e);\n    // G = B + E\n    var g = b.redAdd(e);\n    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n    var nx = a.redMul(f).redMul(tmp);\n    var ny;\n    var nz;\n    if (this.curve.twisted) {\n        // Y3 = A * G * (D - a * C)\n        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n        // Z3 = F * G\n        nz = f.redMul(g);\n    } else {\n        // Y3 = A * G * (D - C)\n        ny = a.redMul(g).redMul(d.redSub(c));\n        // Z3 = c * F * G\n        nz = this.curve._mulC(f).redMul(g);\n    }\n    return this.curve.point(nx, ny, nz);\n};\nPoint.prototype.add = function add(p) {\n    if (this.isInfinity()) return p;\n    if (p.isInfinity()) return this;\n    if (this.curve.extended) return this._extAdd(p);\n    else return this._projAdd(p);\n};\nPoint.prototype.mul = function mul(k) {\n    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n    else return this.curve._wnafMul(this, k);\n};\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n    return this.curve._wnafMulAdd(1, [\n        this,\n        p\n    ], [\n        k1,\n        k2\n    ], 2, false);\n};\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n    return this.curve._wnafMulAdd(1, [\n        this,\n        p\n    ], [\n        k1,\n        k2\n    ], 2, true);\n};\nPoint.prototype.normalize = function normalize() {\n    if (this.zOne) return this;\n    // Normalize coordinates\n    var zi = this.z.redInvm();\n    this.x = this.x.redMul(zi);\n    this.y = this.y.redMul(zi);\n    if (this.t) this.t = this.t.redMul(zi);\n    this.z = this.curve.one;\n    this.zOne = true;\n    return this;\n};\nPoint.prototype.neg = function neg() {\n    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());\n};\nPoint.prototype.getX = function getX() {\n    this.normalize();\n    return this.x.fromRed();\n};\nPoint.prototype.getY = function getY() {\n    this.normalize();\n    return this.y.fromRed();\n};\nPoint.prototype.eq = function eq(other) {\n    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;\n};\nPoint.prototype.eqXToP = function eqXToP(x) {\n    var rx = x.toRed(this.curve.red).redMul(this.z);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(this.z);\n    for(;;){\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0) return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0) return true;\n    }\n};\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/edwards.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar curve = exports;\ncurve.base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js\");\ncurve.short = __webpack_require__(/*! ./short */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/short.js\");\ncurve.mont = __webpack_require__(/*! ./mont */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/mont.js\");\ncurve.edwards = __webpack_require__(/*! ./edwards */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/edwards.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZWxsaXB0aWNANi41LjQvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDO0FBRVpELE1BQU1FLElBQUksR0FBR0MsbUJBQU9BLENBQUM7QUFDckJILE1BQU1JLEtBQUssR0FBR0QsbUJBQU9BLENBQUM7QUFDdEJILE1BQU1LLElBQUksR0FBR0YsbUJBQU9BLENBQUM7QUFDckJILE1BQU1NLE9BQU8sR0FBR0gsbUJBQU9BLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vZWxsaXB0aWNANi41LjQvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9pbmRleC5qcz9iYTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gZXhwb3J0cztcblxuY3VydmUuYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuY3VydmUuc2hvcnQgPSByZXF1aXJlKCcuL3Nob3J0Jyk7XG5jdXJ2ZS5tb250ID0gcmVxdWlyZSgnLi9tb250Jyk7XG5jdXJ2ZS5lZHdhcmRzID0gcmVxdWlyZSgnLi9lZHdhcmRzJyk7XG4iXSwibmFtZXMiOlsiY3VydmUiLCJleHBvcnRzIiwiYmFzZSIsInJlcXVpcmUiLCJzaG9ydCIsIm1vbnQiLCJlZHdhcmRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/mont.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/mont.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nvar Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nfunction MontCurve(conf) {\n    Base.call(this, \"mont\", conf);\n    this.a = new BN(conf.a, 16).toRed(this.red);\n    this.b = new BN(conf.b, 16).toRed(this.red);\n    this.i4 = new BN(4).toRed(this.red).redInvm();\n    this.two = new BN(2).toRed(this.red);\n    this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\nMontCurve.prototype.validate = function validate(point) {\n    var x = point.normalize().x;\n    var x2 = x.redSqr();\n    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n    var y = rhs.redSqrt();\n    return y.redSqr().cmp(rhs) === 0;\n};\nfunction Point(curve, x, z) {\n    Base.BasePoint.call(this, curve, \"projective\");\n    if (x === null && z === null) {\n        this.x = this.curve.one;\n        this.z = this.curve.zero;\n    } else {\n        this.x = new BN(x, 16);\n        this.z = new BN(z, 16);\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    }\n}\ninherits(Point, Base.BasePoint);\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    return this.point(utils.toArray(bytes, enc), 1);\n};\nMontCurve.prototype.point = function point(x, z) {\n    return new Point(this, x, z);\n};\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n    return Point.fromJSON(this, obj);\n};\nPoint.prototype.precompute = function precompute() {\n// No-op\n};\nPoint.prototype._encode = function _encode() {\n    return this.getX().toArray(\"be\", this.curve.p.byteLength());\n};\nPoint.fromJSON = function fromJSON(curve, obj) {\n    return new Point(curve, obj[0], obj[1] || curve.one);\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" z: \" + this.z.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n};\nPoint.prototype.dbl = function dbl() {\n    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n    // 2M + 2S + 4A\n    // A = X1 + Z1\n    var a = this.x.redAdd(this.z);\n    // AA = A^2\n    var aa = a.redSqr();\n    // B = X1 - Z1\n    var b = this.x.redSub(this.z);\n    // BB = B^2\n    var bb = b.redSqr();\n    // C = AA - BB\n    var c = aa.redSub(bb);\n    // X3 = AA * BB\n    var nx = aa.redMul(bb);\n    // Z3 = C * (BB + A24 * C)\n    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n    return this.curve.point(nx, nz);\n};\nPoint.prototype.add = function add() {\n    throw new Error(\"Not supported on Montgomery curve\");\n};\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n    // 4M + 2S + 6A\n    // A = X2 + Z2\n    var a = this.x.redAdd(this.z);\n    // B = X2 - Z2\n    var b = this.x.redSub(this.z);\n    // C = X3 + Z3\n    var c = p.x.redAdd(p.z);\n    // D = X3 - Z3\n    var d = p.x.redSub(p.z);\n    // DA = D * A\n    var da = d.redMul(a);\n    // CB = C * B\n    var cb = c.redMul(b);\n    // X5 = Z1 * (DA + CB)^2\n    var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n    // Z5 = X1 * (DA - CB)^2\n    var nz = diff.x.redMul(da.redISub(cb).redSqr());\n    return this.curve.point(nx, nz);\n};\nPoint.prototype.mul = function mul(k) {\n    var t = k.clone();\n    var a = this; // (N / 2) * Q + Q\n    var b = this.curve.point(null, null); // (N / 2) * Q\n    var c = this; // Q\n    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));\n    for(var i = bits.length - 1; i >= 0; i--){\n        if (bits[i] === 0) {\n            // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n            a = a.diffAdd(b, c);\n            // N * Q = 2 * ((N / 2) * Q + Q))\n            b = b.dbl();\n        } else {\n            // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n            b = a.diffAdd(b, c);\n            // N * Q + Q = 2 * ((N / 2) * Q + Q)\n            a = a.dbl();\n        }\n    }\n    return b;\n};\nPoint.prototype.mulAdd = function mulAdd() {\n    throw new Error(\"Not supported on Montgomery curve\");\n};\nPoint.prototype.jumlAdd = function jumlAdd() {\n    throw new Error(\"Not supported on Montgomery curve\");\n};\nPoint.prototype.eq = function eq(other) {\n    return this.getX().cmp(other.getX()) === 0;\n};\nPoint.prototype.normalize = function normalize() {\n    this.x = this.x.redMul(this.z.redInvm());\n    this.z = this.curve.one;\n    return this;\n};\nPoint.prototype.getX = function getX() {\n    // Normalize coordinates\n    this.normalize();\n    return this.x.fromRed();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/mont.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/short.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/short.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js\");\nvar Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/base.js\");\nvar assert = utils.assert;\nfunction ShortCurve(conf) {\n    Base.call(this, \"short\", conf);\n    this.a = new BN(conf.a, 16).toRed(this.red);\n    this.b = new BN(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n    // If the curve is endomorphic, precalculate beta and lambda\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n    // No efficient endomorphism\n    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;\n    // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n    var beta;\n    var lambda;\n    if (conf.beta) {\n        beta = new BN(conf.beta, 16).toRed(this.red);\n    } else {\n        var betas = this._getEndoRoots(this.p);\n        // Choose the smallest beta\n        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n        beta = beta.toRed(this.red);\n    }\n    if (conf.lambda) {\n        lambda = new BN(conf.lambda, 16);\n    } else {\n        // Choose the lambda that is matching selected beta\n        var lambdas = this._getEndoRoots(this.n);\n        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n            lambda = lambdas[0];\n        } else {\n            lambda = lambdas[1];\n            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n        }\n    }\n    // Get basis vectors, used for balanced length-two representation\n    var basis;\n    if (conf.basis) {\n        basis = conf.basis.map(function(vec) {\n            return {\n                a: new BN(vec.a, 16),\n                b: new BN(vec.b, 16)\n            };\n        });\n    } else {\n        basis = this._getEndoBasis(lambda);\n    }\n    return {\n        beta: beta,\n        lambda: lambda,\n        basis: basis\n    };\n};\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n    // Find roots of for x^2 + x + 1 in F\n    // Root = (-1 +- Sqrt(-3)) / 2\n    //\n    var red = num === this.p ? this.red : BN.mont(num);\n    var tinv = new BN(2).toRed(red).redInvm();\n    var ntinv = tinv.redNeg();\n    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n    var l1 = ntinv.redAdd(s).fromRed();\n    var l2 = ntinv.redSub(s).fromRed();\n    return [\n        l1,\n        l2\n    ];\n};\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n    // aprxSqrt >= sqrt(this.n)\n    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n    // 3.74\n    // Run EGCD, until r(L + 1) < aprxSqrt\n    var u = lambda;\n    var v = this.n.clone();\n    var x1 = new BN(1);\n    var y1 = new BN(0);\n    var x2 = new BN(0);\n    var y2 = new BN(1);\n    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n    var a0;\n    var b0;\n    // First vector\n    var a1;\n    var b1;\n    // Second vector\n    var a2;\n    var b2;\n    var prevR;\n    var i = 0;\n    var r;\n    var x;\n    while(u.cmpn(0) !== 0){\n        var q = v.div(u);\n        r = v.sub(q.mul(u));\n        x = x2.sub(q.mul(x1));\n        var y = y2.sub(q.mul(y1));\n        if (!a1 && r.cmp(aprxSqrt) < 0) {\n            a0 = prevR.neg();\n            b0 = x1;\n            a1 = r.neg();\n            b1 = x;\n        } else if (a1 && ++i === 2) {\n            break;\n        }\n        prevR = r;\n        v = u;\n        u = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    a2 = r.neg();\n    b2 = x;\n    var len1 = a1.sqr().add(b1.sqr());\n    var len2 = a2.sqr().add(b2.sqr());\n    if (len2.cmp(len1) >= 0) {\n        a2 = a0;\n        b2 = b0;\n    }\n    // Normalize signs\n    if (a1.negative) {\n        a1 = a1.neg();\n        b1 = b1.neg();\n    }\n    if (a2.negative) {\n        a2 = a2.neg();\n        b2 = b2.neg();\n    }\n    return [\n        {\n            a: a1,\n            b: b1\n        },\n        {\n            a: a2,\n            b: b2\n        }\n    ];\n};\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n    var basis = this.endo.basis;\n    var v1 = basis[0];\n    var v2 = basis[1];\n    var c1 = v2.b.mul(k).divRound(this.n);\n    var c2 = v1.b.neg().mul(k).divRound(this.n);\n    var p1 = c1.mul(v1.a);\n    var p2 = c2.mul(v2.a);\n    var q1 = c1.mul(v1.b);\n    var q2 = c2.mul(v2.b);\n    // Calculate answer\n    var k1 = k.sub(p1).sub(p2);\n    var k2 = q1.add(q2).neg();\n    return {\n        k1: k1,\n        k2: k2\n    };\n};\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new BN(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    // XXX Is there any way to tell if the number is odd without converting it\n    // to non-red form?\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n};\nShortCurve.prototype.validate = function validate(point) {\n    if (point.inf) return true;\n    var x = point.x;\n    var y = point.y;\n    var ax = this.a.redMul(x);\n    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n    return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\nShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n    var npoints = this._endoWnafT1;\n    var ncoeffs = this._endoWnafT2;\n    for(var i = 0; i < points.length; i++){\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n        if (split.k1.negative) {\n            split.k1.ineg();\n            p = p.neg(true);\n        }\n        if (split.k2.negative) {\n            split.k2.ineg();\n            beta = beta.neg(true);\n        }\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n    }\n    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n    // Clean-up references to points and coefficients\n    for(var j = 0; j < i * 2; j++){\n        npoints[j] = null;\n        ncoeffs[j] = null;\n    }\n    return res;\n};\nfunction Point(curve, x, y, isRed) {\n    Base.BasePoint.call(this, curve, \"affine\");\n    if (x === null && y === null) {\n        this.x = null;\n        this.y = null;\n        this.inf = true;\n    } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        // Force redgomery representation when loading from JSON\n        if (isRed) {\n            this.x.forceRed(this.curve.red);\n            this.y.forceRed(this.curve.red);\n        }\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n        this.inf = false;\n    }\n}\ninherits(Point, Base.BasePoint);\nShortCurve.prototype.point = function point(x, y, isRed) {\n    return new Point(this, x, y, isRed);\n};\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n    return Point.fromJSON(this, obj, red);\n};\nPoint.prototype._getBeta = function _getBeta() {\n    if (!this.curve.endo) return;\n    var pre = this.precomputed;\n    if (pre && pre.beta) return pre.beta;\n    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n    if (pre) {\n        var curve = this.curve;\n        var endoMul = function(p) {\n            return curve.point(p.x.redMul(curve.endo.beta), p.y);\n        };\n        pre.beta = beta;\n        beta.precomputed = {\n            beta: null,\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(endoMul)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(endoMul)\n            }\n        };\n    }\n    return beta;\n};\nPoint.prototype.toJSON = function toJSON() {\n    if (!this.precomputed) return [\n        this.x,\n        this.y\n    ];\n    return [\n        this.x,\n        this.y,\n        this.precomputed && {\n            doubles: this.precomputed.doubles && {\n                step: this.precomputed.doubles.step,\n                points: this.precomputed.doubles.points.slice(1)\n            },\n            naf: this.precomputed.naf && {\n                wnd: this.precomputed.naf.wnd,\n                points: this.precomputed.naf.points.slice(1)\n            }\n        }\n    ];\n};\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n    if (typeof obj === \"string\") obj = JSON.parse(obj);\n    var res = curve.point(obj[0], obj[1], red);\n    if (!obj[2]) return res;\n    function obj2point(obj) {\n        return curve.point(obj[0], obj[1], red);\n    }\n    var pre = obj[2];\n    res.precomputed = {\n        beta: null,\n        doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: [\n                res\n            ].concat(pre.doubles.points.map(obj2point))\n        },\n        naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: [\n                res\n            ].concat(pre.naf.points.map(obj2point))\n        }\n    };\n    return res;\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    return this.inf;\n};\nPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.inf) return p;\n    // P + O = P\n    if (p.inf) return this;\n    // P + P = 2P\n    if (this.eq(p)) return this.dbl();\n    // P + (-P) = O\n    if (this.neg().eq(p)) return this.curve.point(null, null);\n    // P + Q = O\n    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n    var c = this.y.redSub(p.y);\n    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n    var nx = c.redSqr().redISub(this.x).redISub(p.x);\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.dbl = function dbl() {\n    if (this.inf) return this;\n    // 2P = O\n    var ys1 = this.y.redAdd(this.y);\n    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n    var a = this.curve.a;\n    var x2 = this.x.redSqr();\n    var dyinv = ys1.redInvm();\n    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n    var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.getX = function getX() {\n    return this.x.fromRed();\n};\nPoint.prototype.getY = function getY() {\n    return this.y.fromRed();\n};\nPoint.prototype.mul = function mul(k) {\n    k = new BN(k, 16);\n    if (this.isInfinity()) return this;\n    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n    else if (this.curve.endo) return this.curve._endoWnafMulAdd([\n        this\n    ], [\n        k\n    ]);\n    else return this.curve._wnafMul(this, k);\n};\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\nPoint.prototype.eq = function eq(p) {\n    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\nPoint.prototype.neg = function neg(_precompute) {\n    if (this.inf) return this;\n    var res = this.curve.point(this.x, this.y.redNeg());\n    if (_precompute && this.precomputed) {\n        var pre = this.precomputed;\n        var negate = function(p) {\n            return p.neg();\n        };\n        res.precomputed = {\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(negate)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(negate)\n            }\n        };\n    }\n    return res;\n};\nPoint.prototype.toJ = function toJ() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return res;\n};\nfunction JPoint(curve, x, y, z) {\n    Base.BasePoint.call(this, curve, \"jacobian\");\n    if (x === null && y === null && z === null) {\n        this.x = this.curve.one;\n        this.y = this.curve.one;\n        this.z = new BN(0);\n    } else {\n        this.x = new BN(x, 16);\n        this.y = new BN(y, 16);\n        this.z = new BN(z, 16);\n    }\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n};\nJPoint.prototype.toP = function toP() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var zinv = this.z.redInvm();\n    var zinv2 = zinv.redSqr();\n    var ax = this.x.redMul(zinv2);\n    var ay = this.y.redMul(zinv2).redMul(zinv);\n    return this.curve.point(ax, ay);\n};\nJPoint.prototype.neg = function neg() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\nJPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.isInfinity()) return p;\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 12M + 4S + 7A\n    var pz2 = p.z.redSqr();\n    var z2 = this.z.redSqr();\n    var u1 = this.x.redMul(pz2);\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y.redMul(pz2.redMul(p.z));\n    var s2 = p.y.redMul(z2.redMul(this.z));\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n    // O + P = P\n    if (this.isInfinity()) return p.toJ();\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 8M + 3S + 7A\n    var z2 = this.z.redSqr();\n    var u1 = this.x;\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y;\n    var s2 = p.y.redMul(z2).redMul(this.z);\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.dblp = function dblp(pow) {\n    if (pow === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!pow) return this.dbl();\n    var i;\n    if (this.curve.zeroA || this.curve.threeA) {\n        var r = this;\n        for(i = 0; i < pow; i++)r = r.dbl();\n        return r;\n    }\n    // 1M + 2S + 1A + N * (4S + 5M + 8A)\n    // N = 1 => 6M + 6S + 9A\n    var a = this.curve.a;\n    var tinv = this.curve.tinv;\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    // Reuse results\n    var jyd = jy.redAdd(jy);\n    for(i = 0; i < pow; i++){\n        var jx2 = jx.redSqr();\n        var jyd2 = jyd.redSqr();\n        var jyd4 = jyd2.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var t1 = jx.redMul(jyd2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var dny = c.redMul(t2);\n        dny = dny.redIAdd(dny).redISub(jyd4);\n        var nz = jyd.redMul(jz);\n        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n        jx = nx;\n        jz = nz;\n        jyd = dny;\n    }\n    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\nJPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    if (this.curve.zeroA) return this._zeroDbl();\n    else if (this.curve.threeA) return this._threeDbl();\n    else return this._dbl();\n};\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 14A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a; a = 0\n        var m = xx.redAdd(xx).redIAdd(xx);\n        // T = M ^ 2 - 2*S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2*Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-dbl-2009-l\n        // 2M + 5S + 13A\n        // A = X1^2\n        var a = this.x.redSqr();\n        // B = Y1^2\n        var b = this.y.redSqr();\n        // C = B^2\n        var c = b.redSqr();\n        // D = 2 * ((X1 + B)^2 - A - C)\n        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n        d = d.redIAdd(d);\n        // E = 3 * A\n        var e = a.redAdd(a).redIAdd(a);\n        // F = E^2\n        var f = e.redSqr();\n        // 8 * C\n        var c8 = c.redIAdd(c);\n        c8 = c8.redIAdd(c8);\n        c8 = c8.redIAdd(c8);\n        // X3 = F - 2 * D\n        nx = f.redISub(d).redISub(d);\n        // Y3 = E * (D - X3) - 8 * C\n        ny = e.redMul(d.redISub(nx)).redISub(c8);\n        // Z3 = 2 * Y1 * Z1\n        nz = this.y.redMul(this.z);\n        nz = nz.redIAdd(nz);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._threeDbl = function _threeDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 15A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a\n        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n        // T = M^2 - 2 * S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2 * Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n        // 3M + 5S\n        // delta = Z1^2\n        var delta = this.z.redSqr();\n        // gamma = Y1^2\n        var gamma = this.y.redSqr();\n        // beta = X1 * gamma\n        var beta = this.x.redMul(gamma);\n        // alpha = 3 * (X1 - delta) * (X1 + delta)\n        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n        alpha = alpha.redAdd(alpha).redIAdd(alpha);\n        // X3 = alpha^2 - 8 * beta\n        var beta4 = beta.redIAdd(beta);\n        beta4 = beta4.redIAdd(beta4);\n        var beta8 = beta4.redAdd(beta4);\n        nx = alpha.redSqr().redISub(beta8);\n        // Z3 = (Y1 + Z1)^2 - gamma - delta\n        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n        var ggamma8 = gamma.redSqr();\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._dbl = function _dbl() {\n    var a = this.curve.a;\n    // 4M + 6S + 10A\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    var jx2 = jx.redSqr();\n    var jy2 = jy.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n    var jxd4 = jx.redAdd(jx);\n    jxd4 = jxd4.redIAdd(jxd4);\n    var t1 = jxd4.redMul(jy2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var jyd8 = jy2.redSqr();\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    var ny = c.redMul(t2).redISub(jyd8);\n    var nz = jy.redAdd(jy).redMul(jz);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.trpl = function trpl() {\n    if (!this.curve.zeroA) return this.dbl().add(this);\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n    // 5M + 10S + ...\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // ZZ = Z1^2\n    var zz = this.z.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // M = 3 * XX + a * ZZ2; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // MM = M^2\n    var mm = m.redSqr();\n    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    e = e.redIAdd(e);\n    e = e.redAdd(e).redIAdd(e);\n    e = e.redISub(mm);\n    // EE = E^2\n    var ee = e.redSqr();\n    // T = 16*YYYY\n    var t = yyyy.redIAdd(yyyy);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    // U = (M + E)^2 - MM - EE - T\n    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n    // X3 = 4 * (X1 * EE - 4 * YY * U)\n    var yyu4 = yy.redMul(u);\n    yyu4 = yyu4.redIAdd(yyu4);\n    yyu4 = yyu4.redIAdd(yyu4);\n    var nx = this.x.redMul(ee).redISub(yyu4);\n    nx = nx.redIAdd(nx);\n    nx = nx.redIAdd(nx);\n    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    // Z3 = (Z1 + E)^2 - ZZ - EE\n    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mul = function mul(k, kbase) {\n    k = new BN(k, kbase);\n    return this.curve._wnafMul(this, k);\n};\nJPoint.prototype.eq = function eq(p) {\n    if (p.type === \"affine\") return this.eq(p.toJ());\n    if (this === p) return true;\n    // x1 * z2^2 == x2 * z1^2\n    var z2 = this.z.redSqr();\n    var pz2 = p.z.redSqr();\n    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;\n    // y1 * z2^3 == y2 * z1^3\n    var z3 = z2.redMul(this.z);\n    var pz3 = pz2.redMul(p.z);\n    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\nJPoint.prototype.eqXToP = function eqXToP(x) {\n    var zs = this.z.redSqr();\n    var rx = x.toRed(this.curve.red).redMul(zs);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(zs);\n    for(;;){\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0) return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0) return true;\n    }\n};\nJPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC JPoint Infinity>\";\n    return \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n};\nJPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/short.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar curves = exports;\nvar hash = __webpack_require__(/*! hash.js */ \"(ssr)/./node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js\");\nvar curve = __webpack_require__(/*! ./curve */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curve/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nfunction PresetCurve(options) {\n    if (options.type === \"short\") this.curve = new curve.short(options);\n    else if (options.type === \"edwards\") this.curve = new curve.edwards(options);\n    else this.curve = new curve.mont(options);\n    this.g = this.curve.g;\n    this.n = this.curve.n;\n    this.hash = options.hash;\n    assert(this.g.validate(), \"Invalid curve\");\n    assert(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n}\ncurves.PresetCurve = PresetCurve;\nfunction defineCurve(name, options) {\n    Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        get: function() {\n            var curve = new PresetCurve(options);\n            Object.defineProperty(curves, name, {\n                configurable: true,\n                enumerable: true,\n                value: curve\n            });\n            return curve;\n        }\n    });\n}\ndefineCurve(\"p192\", {\n    type: \"short\",\n    prime: \"p192\",\n    p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n    a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n    b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n    n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n        \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n    ]\n});\ndefineCurve(\"p224\", {\n    type: \"short\",\n    prime: \"p224\",\n    p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n    a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n    b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n    n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n        \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n    ]\n});\ndefineCurve(\"p256\", {\n    type: \"short\",\n    prime: null,\n    p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n    a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n    b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n    n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n        \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n    ]\n});\ndefineCurve(\"p384\", {\n    type: \"short\",\n    prime: null,\n    p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 ffffffff\",\n    a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 fffffffc\",\n    b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f \" + \"5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n    n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 \" + \"f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n    hash: hash.sha384,\n    gRed: false,\n    g: [\n        \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 \" + \"5502f25d bf55296c 3a545e38 72760ab7\",\n        \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 \" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n    ]\n});\ndefineCurve(\"p521\", {\n    type: \"short\",\n    prime: null,\n    p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff\",\n    a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff fffffffc\",\n    b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b \" + \"99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd \" + \"3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n    n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 \" + \"f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n    hash: hash.sha512,\n    gRed: false,\n    g: [\n        \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 \" + \"053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 \" + \"a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n        \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 \" + \"579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 \" + \"3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n    ]\n});\ndefineCurve(\"curve25519\", {\n    type: \"mont\",\n    prime: \"p25519\",\n    p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n    a: \"76d06\",\n    b: \"1\",\n    n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"9\"\n    ]\n});\ndefineCurve(\"ed25519\", {\n    type: \"edwards\",\n    prime: \"p25519\",\n    p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n    a: \"-1\",\n    c: \"1\",\n    // -121665 * (121666^(-1)) (mod P)\n    d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n    n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n    hash: hash.sha256,\n    gRed: false,\n    g: [\n        \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n        // 4/5\n        \"6666666666666666666666666666666666666666666666666666666666666658\"\n    ]\n});\nvar pre;\ntry {\n    pre = __webpack_require__(/*! ./precomputed/secp256k1 */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js\");\n} catch (e) {\n    pre = undefined;\n}\ndefineCurve(\"secp256k1\", {\n    type: \"short\",\n    prime: \"k256\",\n    p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n    a: \"0\",\n    b: \"7\",\n    n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n    h: \"1\",\n    hash: hash.sha256,\n    // Precomputed endomorphism\n    beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n    lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n    basis: [\n        {\n            a: \"3086d221a7d46bcde86c90e49284eb15\",\n            b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n        },\n        {\n            a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n            b: \"3086d221a7d46bcde86c90e49284eb15\"\n        }\n    ],\n    gRed: false,\n    g: [\n        \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n        \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n        pre\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/index.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar HmacDRBG = __webpack_require__(/*! hmac-drbg */ \"(ssr)/./node_modules/.pnpm/hmac-drbg@1.0.1/node_modules/hmac-drbg/lib/hmac-drbg.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar curves = __webpack_require__(/*! ../curves */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js\");\nvar rand = __webpack_require__(/*! brorand */ \"(ssr)/./node_modules/.pnpm/brorand@1.1.0/node_modules/brorand/index.js\");\nvar assert = utils.assert;\nvar KeyPair = __webpack_require__(/*! ./key */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/key.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/signature.js\");\nfunction EC(options) {\n    if (!(this instanceof EC)) return new EC(options);\n    // Shortcut `elliptic.ec(curve-name)`\n    if (typeof options === \"string\") {\n        assert(Object.prototype.hasOwnProperty.call(curves, options), \"Unknown curve \" + options);\n        options = curves[options];\n    }\n    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n    if (options instanceof curves.PresetCurve) options = {\n        curve: options\n    };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g;\n    // Point on curve\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1);\n    // Hash for function for DRBG\n    this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\nEC.prototype.keyPair = function keyPair(options) {\n    return new KeyPair(this, options);\n};\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n    return KeyPair.fromPrivate(this, priv, enc);\n};\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n    return KeyPair.fromPublic(this, pub, enc);\n};\nEC.prototype.genKeyPair = function genKeyPair(options) {\n    if (!options) options = {};\n    // Instantiate Hmac_DRBG\n    var drbg = new HmacDRBG({\n        hash: this.hash,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\",\n        entropy: options.entropy || rand(this.hash.hmacStrength),\n        entropyEnc: options.entropy && options.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n    });\n    var bytes = this.n.byteLength();\n    var ns2 = this.n.sub(new BN(2));\n    for(;;){\n        var priv = new BN(drbg.generate(bytes));\n        if (priv.cmp(ns2) > 0) continue;\n        priv.iaddn(1);\n        return this.keyFromPrivate(priv);\n    }\n};\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n    var delta = msg.byteLength() * 8 - this.n.bitLength();\n    if (delta > 0) msg = msg.ushrn(delta);\n    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);\n    else return msg;\n};\nEC.prototype.sign = function sign(msg, key, enc, options) {\n    if (typeof enc === \"object\") {\n        options = enc;\n        enc = null;\n    }\n    if (!options) options = {};\n    key = this.keyFromPrivate(key, enc);\n    msg = this._truncateToN(new BN(msg, 16));\n    // Zero-extend key to provide enough entropy\n    var bytes = this.n.byteLength();\n    var bkey = key.getPrivate().toArray(\"be\", bytes);\n    // Zero-extend nonce to have the same byte size as N\n    var nonce = msg.toArray(\"be\", bytes);\n    // Instantiate Hmac_DRBG\n    var drbg = new HmacDRBG({\n        hash: this.hash,\n        entropy: bkey,\n        nonce: nonce,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\"\n    });\n    // Number of bytes to generate\n    var ns1 = this.n.sub(new BN(1));\n    for(var iter = 0;; iter++){\n        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));\n        k = this._truncateToN(k, true);\n        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n        var kp = this.g.mul(k);\n        if (kp.isInfinity()) continue;\n        var kpX = kp.getX();\n        var r = kpX.umod(this.n);\n        if (r.cmpn(0) === 0) continue;\n        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n        s = s.umod(this.n);\n        if (s.cmpn(0) === 0) continue;\n        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);\n        // Use complement of `s`, if it is > `n / 2`\n        if (options.canonical && s.cmp(this.nh) > 0) {\n            s = this.n.sub(s);\n            recoveryParam ^= 1;\n        }\n        return new Signature({\n            r: r,\n            s: s,\n            recoveryParam: recoveryParam\n        });\n    }\n};\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n    msg = this._truncateToN(new BN(msg, 16));\n    key = this.keyFromPublic(key, enc);\n    signature = new Signature(signature, \"hex\");\n    // Perform primitive values validation\n    var r = signature.r;\n    var s = signature.s;\n    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;\n    // Validate signature\n    var sinv = s.invm(this.n);\n    var u1 = sinv.mul(msg).umod(this.n);\n    var u2 = sinv.mul(r).umod(this.n);\n    var p;\n    if (!this.curve._maxwellTrick) {\n        p = this.g.mulAdd(u1, key.getPublic(), u2);\n        if (p.isInfinity()) return false;\n        return p.getX().umod(this.n).cmp(r) === 0;\n    }\n    // NOTE: Greg Maxwell's trick, inspired by:\n    // https://git.io/vad3K\n    p = this.g.jmulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity()) return false;\n    // Compare `p.x` of Jacobian point with `r`,\n    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n    // inverse of `p.z^2`\n    return p.eqXToP(r);\n};\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n    assert((3 & j) === j, \"The recovery param is more than two bits\");\n    signature = new Signature(signature, enc);\n    var n = this.n;\n    var e = new BN(msg);\n    var r = signature.r;\n    var s = signature.s;\n    // A set LSB signifies that the y-coordinate is odd\n    var isYOdd = j & 1;\n    var isSecondKey = j >> 1;\n    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error(\"Unable to find sencond key candinate\");\n    // 1.1. Let x = r + jn.\n    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n    else r = this.curve.pointFromX(r, isYOdd);\n    var rInv = signature.r.invm(n);\n    var s1 = n.sub(e).mul(rInv).umod(n);\n    var s2 = s.mul(rInv).umod(n);\n    // 1.6.1 Compute Q = r^-1 (sR -  eG)\n    //               Q = r^-1 (sR + -eG)\n    return this.g.mulAdd(s1, r, s2);\n};\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n    signature = new Signature(signature, enc);\n    if (signature.recoveryParam !== null) return signature.recoveryParam;\n    for(var i = 0; i < 4; i++){\n        var Qprime;\n        try {\n            Qprime = this.recoverPubKey(e, signature, i);\n        } catch (e) {\n            continue;\n        }\n        if (Qprime.eq(Q)) return i;\n    }\n    throw new Error(\"Unable to find valid recovery factor\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/key.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/key.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nfunction KeyPair(ec, options) {\n    this.ec = ec;\n    this.priv = null;\n    this.pub = null;\n    // KeyPair(ec, { priv: ..., pub: ... })\n    if (options.priv) this._importPrivate(options.priv, options.privEnc);\n    if (options.pub) this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(ec, {\n        pub: pub,\n        pubEnc: enc\n    });\n};\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n    if (priv instanceof KeyPair) return priv;\n    return new KeyPair(ec, {\n        priv: priv,\n        privEnc: enc\n    });\n};\nKeyPair.prototype.validate = function validate() {\n    var pub = this.getPublic();\n    if (pub.isInfinity()) return {\n        result: false,\n        reason: \"Invalid public key\"\n    };\n    if (!pub.validate()) return {\n        result: false,\n        reason: \"Public key is not a point\"\n    };\n    if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n        result: false,\n        reason: \"Public key * N != O\"\n    };\n    return {\n        result: true,\n        reason: null\n    };\n};\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n    // compact is optional argument\n    if (typeof compact === \"string\") {\n        enc = compact;\n        compact = null;\n    }\n    if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n    if (!enc) return this.pub;\n    return this.pub.encode(enc, compact);\n};\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n    if (enc === \"hex\") return this.priv.toString(16, 2);\n    else return this.priv;\n};\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n    this.priv = new BN(key, enc || 16);\n    // Ensure that the priv won't be bigger than n, otherwise we may fail\n    // in fixed multiplication method\n    this.priv = this.priv.umod(this.ec.curve.n);\n};\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n    if (key.x || key.y) {\n        // Montgomery points only have an `x` coordinate.\n        // Weierstrass/Edwards points on the other hand have both `x` and\n        // `y` coordinates.\n        if (this.ec.curve.type === \"mont\") {\n            assert(key.x, \"Need x coordinate\");\n        } else if (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") {\n            assert(key.x && key.y, \"Need both x and y coordinate\");\n        }\n        this.pub = this.ec.curve.point(key.x, key.y);\n        return;\n    }\n    this.pub = this.ec.curve.decodePoint(key, enc);\n};\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n    if (!pub.validate()) {\n        assert(pub.validate(), \"public point not validated\");\n    }\n    return pub.mul(this.priv).getX();\n};\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n    return this.ec.sign(msg, this, enc, options);\n};\nKeyPair.prototype.verify = function verify(msg, signature) {\n    return this.ec.verify(msg, signature, this);\n};\nKeyPair.prototype.inspect = function inspect() {\n    return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/key.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/signature.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/signature.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nfunction Signature(options, enc) {\n    if (options instanceof Signature) return options;\n    if (this._importDER(options, enc)) return;\n    assert(options.r && options.s, \"Signature without r or s\");\n    this.r = new BN(options.r, 16);\n    this.s = new BN(options.s, 16);\n    if (options.recoveryParam === undefined) this.recoveryParam = null;\n    else this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\nfunction Position() {\n    this.place = 0;\n}\nfunction getLength(buf, p) {\n    var initial = buf[p.place++];\n    if (!(initial & 0x80)) {\n        return initial;\n    }\n    var octetLen = initial & 0xf;\n    // Indefinite length or overflow\n    if (octetLen === 0 || octetLen > 4) {\n        return false;\n    }\n    var val = 0;\n    for(var i = 0, off = p.place; i < octetLen; i++, off++){\n        val <<= 8;\n        val |= buf[off];\n        val >>>= 0;\n    }\n    // Leading zeroes\n    if (val <= 0x7f) {\n        return false;\n    }\n    p.place = off;\n    return val;\n}\nfunction rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len){\n        i++;\n    }\n    if (i === 0) {\n        return buf;\n    }\n    return buf.slice(i);\n}\nSignature.prototype._importDER = function _importDER(data, enc) {\n    data = utils.toArray(data, enc);\n    var p = new Position();\n    if (data[p.place++] !== 0x30) {\n        return false;\n    }\n    var len = getLength(data, p);\n    if (len === false) {\n        return false;\n    }\n    if (len + p.place !== data.length) {\n        return false;\n    }\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var rlen = getLength(data, p);\n    if (rlen === false) {\n        return false;\n    }\n    var r = data.slice(p.place, rlen + p.place);\n    p.place += rlen;\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var slen = getLength(data, p);\n    if (slen === false) {\n        return false;\n    }\n    if (data.length !== slen + p.place) {\n        return false;\n    }\n    var s = data.slice(p.place, slen + p.place);\n    if (r[0] === 0) {\n        if (r[1] & 0x80) {\n            r = r.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    if (s[0] === 0) {\n        if (s[1] & 0x80) {\n            s = s.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    this.r = new BN(r);\n    this.s = new BN(s);\n    this.recoveryParam = null;\n    return true;\n};\nfunction constructLength(arr, len) {\n    if (len < 0x80) {\n        arr.push(len);\n        return;\n    }\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 0x80);\n    while(--octets){\n        arr.push(len >>> (octets << 3) & 0xff);\n    }\n    arr.push(len);\n}\nSignature.prototype.toDER = function toDER(enc) {\n    var r = this.r.toArray();\n    var s = this.s.toArray();\n    // Pad values\n    if (r[0] & 0x80) r = [\n        0\n    ].concat(r);\n    // Pad values\n    if (s[0] & 0x80) s = [\n        0\n    ].concat(s);\n    r = rmPadding(r);\n    s = rmPadding(s);\n    while(!s[0] && !(s[1] & 0x80)){\n        s = s.slice(1);\n    }\n    var arr = [\n        0x02\n    ];\n    constructLength(arr, r.length);\n    arr = arr.concat(r);\n    arr.push(0x02);\n    constructLength(arr, s.length);\n    var backHalf = arr.concat(s);\n    var res = [\n        0x30\n    ];\n    constructLength(res, backHalf.length);\n    res = res.concat(backHalf);\n    return utils.encode(res, enc);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/ec/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/index.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar hash = __webpack_require__(/*! hash.js */ \"(ssr)/./node_modules/.pnpm/hash.js@1.1.7/node_modules/hash.js/lib/hash.js\");\nvar curves = __webpack_require__(/*! ../curves */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/curves.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = __webpack_require__(/*! ./key */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/key.js\");\nvar Signature = __webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/signature.js\");\nfunction EDDSA(curve) {\n    assert(curve === \"ed25519\", \"only tested with ed25519 so far\");\n    if (!(this instanceof EDDSA)) return new EDDSA(curve);\n    curve = curves[curve].curve;\n    this.curve = curve;\n    this.g = curve.g;\n    this.g.precompute(curve.n.bitLength() + 1);\n    this.pointClass = curve.point().constructor;\n    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n    this.hash = hash.sha512;\n}\nmodule.exports = EDDSA;\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/ EDDSA.prototype.sign = function sign(message, secret) {\n    message = parseBytes(message);\n    var key = this.keyFromSecret(secret);\n    var r = this.hashInt(key.messagePrefix(), message);\n    var R = this.g.mul(r);\n    var Rencoded = this.encodePoint(R);\n    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n    var S = r.add(s_).umod(this.curve.n);\n    return this.makeSignature({\n        R: R,\n        S: S,\n        Rencoded: Rencoded\n    });\n};\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/ EDDSA.prototype.verify = function verify(message, sig, pub) {\n    message = parseBytes(message);\n    sig = this.makeSignature(sig);\n    var key = this.keyFromPublic(pub);\n    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n    var SG = this.g.mul(sig.S());\n    var RplusAh = sig.R().add(key.pub().mul(h));\n    return RplusAh.eq(SG);\n};\nEDDSA.prototype.hashInt = function hashInt() {\n    var hash = this.hash();\n    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);\n    return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n    return KeyPair.fromPublic(this, pub);\n};\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n    return KeyPair.fromSecret(this, secret);\n};\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n    if (sig instanceof Signature) return sig;\n    return new Signature(this, sig);\n};\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/ EDDSA.prototype.encodePoint = function encodePoint(point) {\n    var enc = point.getY().toArray(\"le\", this.encodingLength);\n    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n    return enc;\n};\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n    bytes = utils.parseBytes(bytes);\n    var lastIx = bytes.length - 1;\n    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n    var y = utils.intFromLE(normed);\n    return this.curve.pointFromY(y, xIsOdd);\n};\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n    return num.toArray(\"le\", this.encodingLength);\n};\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n    return utils.intFromLE(bytes);\n};\nEDDSA.prototype.isPoint = function isPoint(val) {\n    return val instanceof this.pointClass;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/key.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/key.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/ function KeyPair(eddsa, params) {\n    this.eddsa = eddsa;\n    this._secret = parseBytes(params.secret);\n    if (eddsa.isPoint(params.pub)) this._pub = params.pub;\n    else this._pubBytes = parseBytes(params.pub);\n}\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(eddsa, {\n        pub: pub\n    });\n};\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n    if (secret instanceof KeyPair) return secret;\n    return new KeyPair(eddsa, {\n        secret: secret\n    });\n};\nKeyPair.prototype.secret = function secret() {\n    return this._secret;\n};\ncachedProperty(KeyPair, \"pubBytes\", function pubBytes() {\n    return this.eddsa.encodePoint(this.pub());\n});\ncachedProperty(KeyPair, \"pub\", function pub() {\n    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);\n    return this.eddsa.g.mul(this.priv());\n});\ncachedProperty(KeyPair, \"privBytes\", function privBytes() {\n    var eddsa = this.eddsa;\n    var hash = this.hash();\n    var lastIx = eddsa.encodingLength - 1;\n    var a = hash.slice(0, eddsa.encodingLength);\n    a[0] &= 248;\n    a[lastIx] &= 127;\n    a[lastIx] |= 64;\n    return a;\n});\ncachedProperty(KeyPair, \"priv\", function priv() {\n    return this.eddsa.decodeInt(this.privBytes());\n});\ncachedProperty(KeyPair, \"hash\", function hash() {\n    return this.eddsa.hash().update(this.secret()).digest();\n});\ncachedProperty(KeyPair, \"messagePrefix\", function messagePrefix() {\n    return this.hash().slice(this.eddsa.encodingLength);\n});\nKeyPair.prototype.sign = function sign(message) {\n    assert(this._secret, \"KeyPair can only verify\");\n    return this.eddsa.sign(message, this);\n};\nKeyPair.prototype.verify = function verify(message, sig) {\n    return this.eddsa.verify(message, sig, this);\n};\nKeyPair.prototype.getSecret = function getSecret(enc) {\n    assert(this._secret, \"KeyPair is public only\");\n    return utils.encode(this.secret(), enc);\n};\nKeyPair.prototype.getPublic = function getPublic(enc) {\n    return utils.encode(this.pubBytes(), enc);\n};\nmodule.exports = KeyPair;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZWxsaXB0aWNANi41LjQvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9rZXkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRixNQUFNRSxNQUFNO0FBQ3pCLElBQUlDLGFBQWFILE1BQU1HLFVBQVU7QUFDakMsSUFBSUMsaUJBQWlCSixNQUFNSSxjQUFjO0FBRXpDOzs7Ozs7OztBQVFBLEdBQ0EsU0FBU0MsUUFBUUMsS0FBSyxFQUFFQyxNQUFNO0lBQzVCLElBQUksQ0FBQ0QsS0FBSyxHQUFHQTtJQUNiLElBQUksQ0FBQ0UsT0FBTyxHQUFHTCxXQUFXSSxPQUFPRSxNQUFNO0lBQ3ZDLElBQUlILE1BQU1JLE9BQU8sQ0FBQ0gsT0FBT0ksR0FBRyxHQUMxQixJQUFJLENBQUNDLElBQUksR0FBR0wsT0FBT0ksR0FBRztTQUV0QixJQUFJLENBQUNFLFNBQVMsR0FBR1YsV0FBV0ksT0FBT0ksR0FBRztBQUMxQztBQUVBTixRQUFRUyxVQUFVLEdBQUcsU0FBU0EsV0FBV1IsS0FBSyxFQUFFSyxHQUFHO0lBQ2pELElBQUlBLGVBQWVOLFNBQ2pCLE9BQU9NO0lBQ1QsT0FBTyxJQUFJTixRQUFRQyxPQUFPO1FBQUVLLEtBQUtBO0lBQUk7QUFDdkM7QUFFQU4sUUFBUVUsVUFBVSxHQUFHLFNBQVNBLFdBQVdULEtBQUssRUFBRUcsTUFBTTtJQUNwRCxJQUFJQSxrQkFBa0JKLFNBQ3BCLE9BQU9JO0lBQ1QsT0FBTyxJQUFJSixRQUFRQyxPQUFPO1FBQUVHLFFBQVFBO0lBQU87QUFDN0M7QUFFQUosUUFBUVcsU0FBUyxDQUFDUCxNQUFNLEdBQUcsU0FBU0E7SUFDbEMsT0FBTyxJQUFJLENBQUNELE9BQU87QUFDckI7QUFFQUosZUFBZUMsU0FBUyxZQUFZLFNBQVNZO0lBQzNDLE9BQU8sSUFBSSxDQUFDWCxLQUFLLENBQUNZLFdBQVcsQ0FBQyxJQUFJLENBQUNQLEdBQUc7QUFDeEM7QUFFQVAsZUFBZUMsU0FBUyxPQUFPLFNBQVNNO0lBQ3RDLElBQUksSUFBSSxDQUFDRSxTQUFTLEVBQ2hCLE9BQU8sSUFBSSxDQUFDUCxLQUFLLENBQUNhLFdBQVcsQ0FBQyxJQUFJLENBQUNOLFNBQVM7SUFDOUMsT0FBTyxJQUFJLENBQUNQLEtBQUssQ0FBQ2MsQ0FBQyxDQUFDQyxHQUFHLENBQUMsSUFBSSxDQUFDQyxJQUFJO0FBQ25DO0FBRUFsQixlQUFlQyxTQUFTLGFBQWEsU0FBU2tCO0lBQzVDLElBQUlqQixRQUFRLElBQUksQ0FBQ0EsS0FBSztJQUN0QixJQUFJa0IsT0FBTyxJQUFJLENBQUNBLElBQUk7SUFDcEIsSUFBSUMsU0FBU25CLE1BQU1vQixjQUFjLEdBQUc7SUFFcEMsSUFBSUMsSUFBSUgsS0FBS0ksS0FBSyxDQUFDLEdBQUd0QixNQUFNb0IsY0FBYztJQUMxQ0MsQ0FBQyxDQUFDLEVBQUUsSUFBSTtJQUNSQSxDQUFDLENBQUNGLE9BQU8sSUFBSTtJQUNiRSxDQUFDLENBQUNGLE9BQU8sSUFBSTtJQUViLE9BQU9FO0FBQ1Q7QUFFQXZCLGVBQWVDLFNBQVMsUUFBUSxTQUFTaUI7SUFDdkMsT0FBTyxJQUFJLENBQUNoQixLQUFLLENBQUN1QixTQUFTLENBQUMsSUFBSSxDQUFDTixTQUFTO0FBQzVDO0FBRUFuQixlQUFlQyxTQUFTLFFBQVEsU0FBU21CO0lBQ3ZDLE9BQU8sSUFBSSxDQUFDbEIsS0FBSyxDQUFDa0IsSUFBSSxHQUFHTSxNQUFNLENBQUMsSUFBSSxDQUFDckIsTUFBTSxJQUFJc0IsTUFBTTtBQUN2RDtBQUVBM0IsZUFBZUMsU0FBUyxpQkFBaUIsU0FBUzJCO0lBQ2hELE9BQU8sSUFBSSxDQUFDUixJQUFJLEdBQUdJLEtBQUssQ0FBQyxJQUFJLENBQUN0QixLQUFLLENBQUNvQixjQUFjO0FBQ3BEO0FBRUFyQixRQUFRVyxTQUFTLENBQUNpQixJQUFJLEdBQUcsU0FBU0EsS0FBS0MsT0FBTztJQUM1Q2hDLE9BQU8sSUFBSSxDQUFDTSxPQUFPLEVBQUU7SUFDckIsT0FBTyxJQUFJLENBQUNGLEtBQUssQ0FBQzJCLElBQUksQ0FBQ0MsU0FBUyxJQUFJO0FBQ3RDO0FBRUE3QixRQUFRVyxTQUFTLENBQUNtQixNQUFNLEdBQUcsU0FBU0EsT0FBT0QsT0FBTyxFQUFFRSxHQUFHO0lBQ3JELE9BQU8sSUFBSSxDQUFDOUIsS0FBSyxDQUFDNkIsTUFBTSxDQUFDRCxTQUFTRSxLQUFLLElBQUk7QUFDN0M7QUFFQS9CLFFBQVFXLFNBQVMsQ0FBQ3FCLFNBQVMsR0FBRyxTQUFTQSxVQUFVQyxHQUFHO0lBQ2xEcEMsT0FBTyxJQUFJLENBQUNNLE9BQU8sRUFBRTtJQUNyQixPQUFPUixNQUFNdUMsTUFBTSxDQUFDLElBQUksQ0FBQzlCLE1BQU0sSUFBSTZCO0FBQ3JDO0FBRUFqQyxRQUFRVyxTQUFTLENBQUN3QixTQUFTLEdBQUcsU0FBU0EsVUFBVUYsR0FBRztJQUNsRCxPQUFPdEMsTUFBTXVDLE1BQU0sQ0FBQyxJQUFJLENBQUN0QixRQUFRLElBQUlxQjtBQUN2QztBQUVBRyxPQUFPQyxPQUFPLEdBQUdyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9lbGxpcHRpY0A2LjUuNC9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2tleS5qcz9hNzZjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG52YXIgY2FjaGVkUHJvcGVydHkgPSB1dGlscy5jYWNoZWRQcm9wZXJ0eTtcblxuLyoqXG4qIEBwYXJhbSB7RUREU0F9IGVkZHNhIC0gaW5zdGFuY2VcbiogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIHB1YmxpYy9wcml2YXRlIGtleSBwYXJhbWV0ZXJzXG4qXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZT59IFtwYXJhbXMuc2VjcmV0XSAtIHNlY3JldCBzZWVkIGJ5dGVzXG4qIEBwYXJhbSB7UG9pbnR9IFtwYXJhbXMucHViXSAtIHB1YmxpYyBrZXkgcG9pbnQgKGFrYSBgQWAgaW4gZWRkc2EgdGVybXMpXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZT59IFtwYXJhbXMucHViXSAtIHB1YmxpYyBrZXkgcG9pbnQgZW5jb2RlZCBhcyBieXRlc1xuKlxuKi9cbmZ1bmN0aW9uIEtleVBhaXIoZWRkc2EsIHBhcmFtcykge1xuICB0aGlzLmVkZHNhID0gZWRkc2E7XG4gIHRoaXMuX3NlY3JldCA9IHBhcnNlQnl0ZXMocGFyYW1zLnNlY3JldCk7XG4gIGlmIChlZGRzYS5pc1BvaW50KHBhcmFtcy5wdWIpKVxuICAgIHRoaXMuX3B1YiA9IHBhcmFtcy5wdWI7XG4gIGVsc2VcbiAgICB0aGlzLl9wdWJCeXRlcyA9IHBhcnNlQnl0ZXMocGFyYW1zLnB1Yik7XG59XG5cbktleVBhaXIuZnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGZyb21QdWJsaWMoZWRkc2EsIHB1Yikge1xuICBpZiAocHViIGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHViO1xuICByZXR1cm4gbmV3IEtleVBhaXIoZWRkc2EsIHsgcHViOiBwdWIgfSk7XG59O1xuXG5LZXlQYWlyLmZyb21TZWNyZXQgPSBmdW5jdGlvbiBmcm9tU2VjcmV0KGVkZHNhLCBzZWNyZXQpIHtcbiAgaWYgKHNlY3JldCBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHNlY3JldDtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7IHNlY3JldDogc2VjcmV0IH0pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuc2VjcmV0ID0gZnVuY3Rpb24gc2VjcmV0KCkge1xuICByZXR1cm4gdGhpcy5fc2VjcmV0O1xufTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3B1YkJ5dGVzJywgZnVuY3Rpb24gcHViQnl0ZXMoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZVBvaW50KHRoaXMucHViKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWInLCBmdW5jdGlvbiBwdWIoKSB7XG4gIGlmICh0aGlzLl9wdWJCeXRlcylcbiAgICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLl9wdWJCeXRlcyk7XG4gIHJldHVybiB0aGlzLmVkZHNhLmcubXVsKHRoaXMucHJpdigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHJpdkJ5dGVzJywgZnVuY3Rpb24gcHJpdkJ5dGVzKCkge1xuICB2YXIgZWRkc2EgPSB0aGlzLmVkZHNhO1xuICB2YXIgaGFzaCA9IHRoaXMuaGFzaCgpO1xuICB2YXIgbGFzdEl4ID0gZWRkc2EuZW5jb2RpbmdMZW5ndGggLSAxO1xuXG4gIHZhciBhID0gaGFzaC5zbGljZSgwLCBlZGRzYS5lbmNvZGluZ0xlbmd0aCk7XG4gIGFbMF0gJj0gMjQ4O1xuICBhW2xhc3RJeF0gJj0gMTI3O1xuICBhW2xhc3RJeF0gfD0gNjQ7XG5cbiAgcmV0dXJuIGE7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXYnLCBmdW5jdGlvbiBwcml2KCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVJbnQodGhpcy5wcml2Qnl0ZXMoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ2hhc2gnLCBmdW5jdGlvbiBoYXNoKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5oYXNoKCkudXBkYXRlKHRoaXMuc2VjcmV0KCkpLmRpZ2VzdCgpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdtZXNzYWdlUHJlZml4JywgZnVuY3Rpb24gbWVzc2FnZVByZWZpeCgpIHtcbiAgcmV0dXJuIHRoaXMuaGFzaCgpLnNsaWNlKHRoaXMuZWRkc2EuZW5jb2RpbmdMZW5ndGgpO1xufSk7XG5cbktleVBhaXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1lc3NhZ2UpIHtcbiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgY2FuIG9ubHkgdmVyaWZ5Jyk7XG4gIHJldHVybiB0aGlzLmVkZHNhLnNpZ24obWVzc2FnZSwgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLnZlcmlmeShtZXNzYWdlLCBzaWcsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0U2VjcmV0ID0gZnVuY3Rpb24gZ2V0U2VjcmV0KGVuYykge1xuICBhc3NlcnQodGhpcy5fc2VjcmV0LCAnS2V5UGFpciBpcyBwdWJsaWMgb25seScpO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMuc2VjcmV0KCksIGVuYyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRQdWJsaWMgPSBmdW5jdGlvbiBnZXRQdWJsaWMoZW5jKSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5wdWJCeXRlcygpLCBlbmMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBLZXlQYWlyO1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImFzc2VydCIsInBhcnNlQnl0ZXMiLCJjYWNoZWRQcm9wZXJ0eSIsIktleVBhaXIiLCJlZGRzYSIsInBhcmFtcyIsIl9zZWNyZXQiLCJzZWNyZXQiLCJpc1BvaW50IiwicHViIiwiX3B1YiIsIl9wdWJCeXRlcyIsImZyb21QdWJsaWMiLCJmcm9tU2VjcmV0IiwicHJvdG90eXBlIiwicHViQnl0ZXMiLCJlbmNvZGVQb2ludCIsImRlY29kZVBvaW50IiwiZyIsIm11bCIsInByaXYiLCJwcml2Qnl0ZXMiLCJoYXNoIiwibGFzdEl4IiwiZW5jb2RpbmdMZW5ndGgiLCJhIiwic2xpY2UiLCJkZWNvZGVJbnQiLCJ1cGRhdGUiLCJkaWdlc3QiLCJtZXNzYWdlUHJlZml4Iiwic2lnbiIsIm1lc3NhZ2UiLCJ2ZXJpZnkiLCJzaWciLCJnZXRTZWNyZXQiLCJlbmMiLCJlbmNvZGUiLCJnZXRQdWJsaWMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/key.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/signature.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\");\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/ function Signature(eddsa, sig) {\n    this.eddsa = eddsa;\n    if (typeof sig !== \"object\") sig = parseBytes(sig);\n    if (Array.isArray(sig)) {\n        sig = {\n            R: sig.slice(0, eddsa.encodingLength),\n            S: sig.slice(eddsa.encodingLength)\n        };\n    }\n    assert(sig.R && sig.S, \"Signature without R or S\");\n    if (eddsa.isPoint(sig.R)) this._R = sig.R;\n    if (sig.S instanceof BN) this._S = sig.S;\n    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\ncachedProperty(Signature, \"S\", function S() {\n    return this.eddsa.decodeInt(this.Sencoded());\n});\ncachedProperty(Signature, \"R\", function R() {\n    return this.eddsa.decodePoint(this.Rencoded());\n});\ncachedProperty(Signature, \"Rencoded\", function Rencoded() {\n    return this.eddsa.encodePoint(this.R());\n});\ncachedProperty(Signature, \"Sencoded\", function Sencoded() {\n    return this.eddsa.encodeInt(this.S());\n});\nSignature.prototype.toBytes = function toBytes() {\n    return this.Rencoded().concat(this.Sencoded());\n};\nSignature.prototype.toHex = function toHex() {\n    return utils.encode(this.toBytes(), \"hex\").toUpperCase();\n};\nmodule.exports = Signature;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZWxsaXB0aWNANi41LjQvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9zaWduYXR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUFLQyxtQkFBT0EsQ0FBQztBQUNqQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJRSxTQUFTRCxNQUFNQyxNQUFNO0FBQ3pCLElBQUlDLGlCQUFpQkYsTUFBTUUsY0FBYztBQUN6QyxJQUFJQyxhQUFhSCxNQUFNRyxVQUFVO0FBRWpDOzs7Ozs7O0FBT0EsR0FDQSxTQUFTQyxVQUFVQyxLQUFLLEVBQUVDLEdBQUc7SUFDM0IsSUFBSSxDQUFDRCxLQUFLLEdBQUdBO0lBRWIsSUFBSSxPQUFPQyxRQUFRLFVBQ2pCQSxNQUFNSCxXQUFXRztJQUVuQixJQUFJQyxNQUFNQyxPQUFPLENBQUNGLE1BQU07UUFDdEJBLE1BQU07WUFDSkcsR0FBR0gsSUFBSUksS0FBSyxDQUFDLEdBQUdMLE1BQU1NLGNBQWM7WUFDcENDLEdBQUdOLElBQUlJLEtBQUssQ0FBQ0wsTUFBTU0sY0FBYztRQUNuQztJQUNGO0lBRUFWLE9BQU9LLElBQUlHLENBQUMsSUFBSUgsSUFBSU0sQ0FBQyxFQUFFO0lBRXZCLElBQUlQLE1BQU1RLE9BQU8sQ0FBQ1AsSUFBSUcsQ0FBQyxHQUNyQixJQUFJLENBQUNLLEVBQUUsR0FBR1IsSUFBSUcsQ0FBQztJQUNqQixJQUFJSCxJQUFJTSxDQUFDLFlBQVlkLElBQ25CLElBQUksQ0FBQ2lCLEVBQUUsR0FBR1QsSUFBSU0sQ0FBQztJQUVqQixJQUFJLENBQUNJLFNBQVMsR0FBR1QsTUFBTUMsT0FBTyxDQUFDRixJQUFJRyxDQUFDLElBQUlILElBQUlHLENBQUMsR0FBR0gsSUFBSVcsUUFBUTtJQUM1RCxJQUFJLENBQUNDLFNBQVMsR0FBR1gsTUFBTUMsT0FBTyxDQUFDRixJQUFJTSxDQUFDLElBQUlOLElBQUlNLENBQUMsR0FBR04sSUFBSWEsUUFBUTtBQUM5RDtBQUVBakIsZUFBZUUsV0FBVyxLQUFLLFNBQVNRO0lBQ3RDLE9BQU8sSUFBSSxDQUFDUCxLQUFLLENBQUNlLFNBQVMsQ0FBQyxJQUFJLENBQUNELFFBQVE7QUFDM0M7QUFFQWpCLGVBQWVFLFdBQVcsS0FBSyxTQUFTSztJQUN0QyxPQUFPLElBQUksQ0FBQ0osS0FBSyxDQUFDZ0IsV0FBVyxDQUFDLElBQUksQ0FBQ0osUUFBUTtBQUM3QztBQUVBZixlQUFlRSxXQUFXLFlBQVksU0FBU2E7SUFDN0MsT0FBTyxJQUFJLENBQUNaLEtBQUssQ0FBQ2lCLFdBQVcsQ0FBQyxJQUFJLENBQUNiLENBQUM7QUFDdEM7QUFFQVAsZUFBZUUsV0FBVyxZQUFZLFNBQVNlO0lBQzdDLE9BQU8sSUFBSSxDQUFDZCxLQUFLLENBQUNrQixTQUFTLENBQUMsSUFBSSxDQUFDWCxDQUFDO0FBQ3BDO0FBRUFSLFVBQVVvQixTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQTtJQUNyQyxPQUFPLElBQUksQ0FBQ1IsUUFBUSxHQUFHUyxNQUFNLENBQUMsSUFBSSxDQUFDUCxRQUFRO0FBQzdDO0FBRUFmLFVBQVVvQixTQUFTLENBQUNHLEtBQUssR0FBRyxTQUFTQTtJQUNuQyxPQUFPM0IsTUFBTTRCLE1BQU0sQ0FBQyxJQUFJLENBQUNILE9BQU8sSUFBSSxPQUFPSSxXQUFXO0FBQ3hEO0FBRUFDLE9BQU9DLE9BQU8sR0FBRzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzLy5wbnBtL2VsbGlwdGljQDYuNS40L25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Evc2lnbmF0dXJlLmpzPzk2ODAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgY2FjaGVkUHJvcGVydHkgPSB1dGlscy5jYWNoZWRQcm9wZXJ0eTtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcblxuLyoqXG4qIEBwYXJhbSB7RUREU0F9IGVkZHNhIC0gZWRkc2EgaW5zdGFuY2VcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58T2JqZWN0fSBzaWcgLVxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxQb2ludH0gW3NpZy5SXSAtIFIgcG9pbnQgYXMgUG9pbnQgb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58Ym59IFtzaWcuU10gLSBTIHNjYWxhciBhcyBibiBvciBieXRlc1xuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPn0gW3NpZy5SZW5jb2RlZF0gLSBSIHBvaW50IGVuY29kZWRcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuU2VuY29kZWRdIC0gUyBzY2FsYXIgZW5jb2RlZFxuKi9cbmZ1bmN0aW9uIFNpZ25hdHVyZShlZGRzYSwgc2lnKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcblxuICBpZiAodHlwZW9mIHNpZyAhPT0gJ29iamVjdCcpXG4gICAgc2lnID0gcGFyc2VCeXRlcyhzaWcpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHNpZykpIHtcbiAgICBzaWcgPSB7XG4gICAgICBSOiBzaWcuc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpLFxuICAgICAgUzogc2lnLnNsaWNlKGVkZHNhLmVuY29kaW5nTGVuZ3RoKSxcbiAgICB9O1xuICB9XG5cbiAgYXNzZXJ0KHNpZy5SICYmIHNpZy5TLCAnU2lnbmF0dXJlIHdpdGhvdXQgUiBvciBTJyk7XG5cbiAgaWYgKGVkZHNhLmlzUG9pbnQoc2lnLlIpKVxuICAgIHRoaXMuX1IgPSBzaWcuUjtcbiAgaWYgKHNpZy5TIGluc3RhbmNlb2YgQk4pXG4gICAgdGhpcy5fUyA9IHNpZy5TO1xuXG4gIHRoaXMuX1JlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUikgPyBzaWcuUiA6IHNpZy5SZW5jb2RlZDtcbiAgdGhpcy5fU2VuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5TKSA/IHNpZy5TIDogc2lnLlNlbmNvZGVkO1xufVxuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTJywgZnVuY3Rpb24gUygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMuU2VuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUicsIGZ1bmN0aW9uIFIoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuUmVuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUmVuY29kZWQnLCBmdW5jdGlvbiBSZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5SKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1NlbmNvZGVkJywgZnVuY3Rpb24gU2VuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZUludCh0aGlzLlMoKSk7XG59KTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuUmVuY29kZWQoKS5jb25jYXQodGhpcy5TZW5jb2RlZCgpKTtcbn07XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbiB0b0hleCgpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnRvQnl0ZXMoKSwgJ2hleCcpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25hdHVyZTtcbiJdLCJuYW1lcyI6WyJCTiIsInJlcXVpcmUiLCJ1dGlscyIsImFzc2VydCIsImNhY2hlZFByb3BlcnR5IiwicGFyc2VCeXRlcyIsIlNpZ25hdHVyZSIsImVkZHNhIiwic2lnIiwiQXJyYXkiLCJpc0FycmF5IiwiUiIsInNsaWNlIiwiZW5jb2RpbmdMZW5ndGgiLCJTIiwiaXNQb2ludCIsIl9SIiwiX1MiLCJfUmVuY29kZWQiLCJSZW5jb2RlZCIsIl9TZW5jb2RlZCIsIlNlbmNvZGVkIiwiZGVjb2RlSW50IiwiZGVjb2RlUG9pbnQiLCJlbmNvZGVQb2ludCIsImVuY29kZUludCIsInByb3RvdHlwZSIsInRvQnl0ZXMiLCJjb25jYXQiLCJ0b0hleCIsImVuY29kZSIsInRvVXBwZXJDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/eddsa/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js ***!
  \*******************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    doubles: {\n        step: 4,\n        points: [\n            [\n                \"e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a\",\n                \"f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821\"\n            ],\n            [\n                \"8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\n                \"11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf\"\n            ],\n            [\n                \"175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739\",\n                \"d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695\"\n            ],\n            [\n                \"363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n                \"4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9\"\n            ],\n            [\n                \"8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c\",\n                \"4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36\"\n            ],\n            [\n                \"723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda\",\n                \"96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f\"\n            ],\n            [\n                \"eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa\",\n                \"5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999\"\n            ],\n            [\n                \"100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0\",\n                \"cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09\"\n            ],\n            [\n                \"e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d\",\n                \"9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d\"\n            ],\n            [\n                \"feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d\",\n                \"e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088\"\n            ],\n            [\n                \"da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1\",\n                \"9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d\"\n            ],\n            [\n                \"53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0\",\n                \"5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8\"\n            ],\n            [\n                \"8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047\",\n                \"10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a\"\n            ],\n            [\n                \"385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862\",\n                \"283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453\"\n            ],\n            [\n                \"6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7\",\n                \"7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160\"\n            ],\n            [\n                \"3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd\",\n                \"56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0\"\n            ],\n            [\n                \"85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83\",\n                \"7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6\"\n            ],\n            [\n                \"948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a\",\n                \"53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589\"\n            ],\n            [\n                \"6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8\",\n                \"bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17\"\n            ],\n            [\n                \"e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d\",\n                \"4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda\"\n            ],\n            [\n                \"e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725\",\n                \"7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd\"\n            ],\n            [\n                \"213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754\",\n                \"4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2\"\n            ],\n            [\n                \"4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c\",\n                \"17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6\"\n            ],\n            [\n                \"fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6\",\n                \"6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f\"\n            ],\n            [\n                \"76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39\",\n                \"c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01\"\n            ],\n            [\n                \"c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891\",\n                \"893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3\"\n            ],\n            [\n                \"d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b\",\n                \"febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f\"\n            ],\n            [\n                \"b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03\",\n                \"2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7\"\n            ],\n            [\n                \"e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d\",\n                \"eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78\"\n            ],\n            [\n                \"a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070\",\n                \"7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1\"\n            ],\n            [\n                \"90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4\",\n                \"e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150\"\n            ],\n            [\n                \"8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da\",\n                \"662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82\"\n            ],\n            [\n                \"e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11\",\n                \"1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc\"\n            ],\n            [\n                \"8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e\",\n                \"efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b\"\n            ],\n            [\n                \"e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41\",\n                \"2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51\"\n            ],\n            [\n                \"b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef\",\n                \"67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45\"\n            ],\n            [\n                \"d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8\",\n                \"db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120\"\n            ],\n            [\n                \"324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d\",\n                \"648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84\"\n            ],\n            [\n                \"4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96\",\n                \"35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d\"\n            ],\n            [\n                \"9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd\",\n                \"ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d\"\n            ],\n            [\n                \"6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5\",\n                \"9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8\"\n            ],\n            [\n                \"a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266\",\n                \"40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8\"\n            ],\n            [\n                \"7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71\",\n                \"34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac\"\n            ],\n            [\n                \"928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac\",\n                \"c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f\"\n            ],\n            [\n                \"85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751\",\n                \"1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962\"\n            ],\n            [\n                \"ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e\",\n                \"493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907\"\n            ],\n            [\n                \"827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241\",\n                \"c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec\"\n            ],\n            [\n                \"eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3\",\n                \"be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d\"\n            ],\n            [\n                \"e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f\",\n                \"4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414\"\n            ],\n            [\n                \"1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19\",\n                \"aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd\"\n            ],\n            [\n                \"146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be\",\n                \"b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0\"\n            ],\n            [\n                \"fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9\",\n                \"6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811\"\n            ],\n            [\n                \"da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2\",\n                \"8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1\"\n            ],\n            [\n                \"a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13\",\n                \"7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c\"\n            ],\n            [\n                \"174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c\",\n                \"ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73\"\n            ],\n            [\n                \"959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba\",\n                \"2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd\"\n            ],\n            [\n                \"d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151\",\n                \"e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405\"\n            ],\n            [\n                \"64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073\",\n                \"d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589\"\n            ],\n            [\n                \"8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458\",\n                \"38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e\"\n            ],\n            [\n                \"13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b\",\n                \"69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27\"\n            ],\n            [\n                \"bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366\",\n                \"d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1\"\n            ],\n            [\n                \"8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa\",\n                \"40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482\"\n            ],\n            [\n                \"8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0\",\n                \"620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945\"\n            ],\n            [\n                \"dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787\",\n                \"7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573\"\n            ],\n            [\n                \"f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e\",\n                \"ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82\"\n            ]\n        ]\n    },\n    naf: {\n        wnd: 7,\n        points: [\n            [\n                \"f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9\",\n                \"388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672\"\n            ],\n            [\n                \"2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4\",\n                \"d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6\"\n            ],\n            [\n                \"5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc\",\n                \"6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da\"\n            ],\n            [\n                \"acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe\",\n                \"cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37\"\n            ],\n            [\n                \"774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb\",\n                \"d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b\"\n            ],\n            [\n                \"f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8\",\n                \"ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81\"\n            ],\n            [\n                \"d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e\",\n                \"581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58\"\n            ],\n            [\n                \"defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34\",\n                \"4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77\"\n            ],\n            [\n                \"2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c\",\n                \"85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a\"\n            ],\n            [\n                \"352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5\",\n                \"321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c\"\n            ],\n            [\n                \"2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f\",\n                \"2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67\"\n            ],\n            [\n                \"9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714\",\n                \"73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402\"\n            ],\n            [\n                \"daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729\",\n                \"a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55\"\n            ],\n            [\n                \"c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db\",\n                \"2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482\"\n            ],\n            [\n                \"6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4\",\n                \"e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82\"\n            ],\n            [\n                \"1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5\",\n                \"b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396\"\n            ],\n            [\n                \"605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479\",\n                \"2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49\"\n            ],\n            [\n                \"62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d\",\n                \"80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf\"\n            ],\n            [\n                \"80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f\",\n                \"1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a\"\n            ],\n            [\n                \"7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb\",\n                \"d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7\"\n            ],\n            [\n                \"d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9\",\n                \"eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933\"\n            ],\n            [\n                \"49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963\",\n                \"758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a\"\n            ],\n            [\n                \"77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74\",\n                \"958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6\"\n            ],\n            [\n                \"f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530\",\n                \"e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37\"\n            ],\n            [\n                \"463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b\",\n                \"5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e\"\n            ],\n            [\n                \"f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247\",\n                \"cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6\"\n            ],\n            [\n                \"caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1\",\n                \"cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476\"\n            ],\n            [\n                \"2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120\",\n                \"4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40\"\n            ],\n            [\n                \"7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435\",\n                \"91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61\"\n            ],\n            [\n                \"754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18\",\n                \"673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683\"\n            ],\n            [\n                \"e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8\",\n                \"59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5\"\n            ],\n            [\n                \"186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb\",\n                \"3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b\"\n            ],\n            [\n                \"df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f\",\n                \"55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417\"\n            ],\n            [\n                \"5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143\",\n                \"efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868\"\n            ],\n            [\n                \"290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba\",\n                \"e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a\"\n            ],\n            [\n                \"af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45\",\n                \"f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6\"\n            ],\n            [\n                \"766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a\",\n                \"744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996\"\n            ],\n            [\n                \"59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e\",\n                \"c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e\"\n            ],\n            [\n                \"f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8\",\n                \"e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d\"\n            ],\n            [\n                \"7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c\",\n                \"30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2\"\n            ],\n            [\n                \"948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519\",\n                \"e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e\"\n            ],\n            [\n                \"7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab\",\n                \"100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437\"\n            ],\n            [\n                \"3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca\",\n                \"ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311\"\n            ],\n            [\n                \"d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf\",\n                \"8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4\"\n            ],\n            [\n                \"1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610\",\n                \"68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575\"\n            ],\n            [\n                \"733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4\",\n                \"f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d\"\n            ],\n            [\n                \"15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c\",\n                \"d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d\"\n            ],\n            [\n                \"a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940\",\n                \"edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629\"\n            ],\n            [\n                \"e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980\",\n                \"a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06\"\n            ],\n            [\n                \"311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3\",\n                \"66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374\"\n            ],\n            [\n                \"34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf\",\n                \"9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee\"\n            ],\n            [\n                \"f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63\",\n                \"4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1\"\n            ],\n            [\n                \"d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448\",\n                \"fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b\"\n            ],\n            [\n                \"32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf\",\n                \"5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661\"\n            ],\n            [\n                \"7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5\",\n                \"8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6\"\n            ],\n            [\n                \"ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6\",\n                \"8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e\"\n            ],\n            [\n                \"16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5\",\n                \"5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d\"\n            ],\n            [\n                \"eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99\",\n                \"f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc\"\n            ],\n            [\n                \"78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51\",\n                \"f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4\"\n            ],\n            [\n                \"494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5\",\n                \"42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c\"\n            ],\n            [\n                \"a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5\",\n                \"204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b\"\n            ],\n            [\n                \"c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997\",\n                \"4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913\"\n            ],\n            [\n                \"841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881\",\n                \"73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154\"\n            ],\n            [\n                \"5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5\",\n                \"39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865\"\n            ],\n            [\n                \"36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66\",\n                \"d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc\"\n            ],\n            [\n                \"336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726\",\n                \"ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224\"\n            ],\n            [\n                \"8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede\",\n                \"6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e\"\n            ],\n            [\n                \"1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94\",\n                \"60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6\"\n            ],\n            [\n                \"85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31\",\n                \"3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511\"\n            ],\n            [\n                \"29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51\",\n                \"b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b\"\n            ],\n            [\n                \"a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252\",\n                \"ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2\"\n            ],\n            [\n                \"4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5\",\n                \"cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c\"\n            ],\n            [\n                \"d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b\",\n                \"6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3\"\n            ],\n            [\n                \"ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4\",\n                \"322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d\"\n            ],\n            [\n                \"af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f\",\n                \"6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700\"\n            ],\n            [\n                \"e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889\",\n                \"2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4\"\n            ],\n            [\n                \"591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246\",\n                \"b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196\"\n            ],\n            [\n                \"11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984\",\n                \"998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4\"\n            ],\n            [\n                \"3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a\",\n                \"b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257\"\n            ],\n            [\n                \"cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030\",\n                \"bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13\"\n            ],\n            [\n                \"c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197\",\n                \"6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096\"\n            ],\n            [\n                \"c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593\",\n                \"c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38\"\n            ],\n            [\n                \"a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef\",\n                \"21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f\"\n            ],\n            [\n                \"347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38\",\n                \"60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448\"\n            ],\n            [\n                \"da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a\",\n                \"49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a\"\n            ],\n            [\n                \"c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111\",\n                \"5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4\"\n            ],\n            [\n                \"4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502\",\n                \"7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437\"\n            ],\n            [\n                \"3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea\",\n                \"be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7\"\n            ],\n            [\n                \"cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26\",\n                \"8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d\"\n            ],\n            [\n                \"b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986\",\n                \"39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a\"\n            ],\n            [\n                \"d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e\",\n                \"62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54\"\n            ],\n            [\n                \"48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4\",\n                \"25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77\"\n            ],\n            [\n                \"dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda\",\n                \"ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517\"\n            ],\n            [\n                \"6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859\",\n                \"cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10\"\n            ],\n            [\n                \"e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f\",\n                \"f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125\"\n            ],\n            [\n                \"eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c\",\n                \"6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e\"\n            ],\n            [\n                \"13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942\",\n                \"fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1\"\n            ],\n            [\n                \"ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a\",\n                \"1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2\"\n            ],\n            [\n                \"b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80\",\n                \"5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423\"\n            ],\n            [\n                \"ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d\",\n                \"438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8\"\n            ],\n            [\n                \"8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1\",\n                \"cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758\"\n            ],\n            [\n                \"52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63\",\n                \"c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375\"\n            ],\n            [\n                \"e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352\",\n                \"6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d\"\n            ],\n            [\n                \"7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193\",\n                \"ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec\"\n            ],\n            [\n                \"5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00\",\n                \"9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0\"\n            ],\n            [\n                \"32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58\",\n                \"ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c\"\n            ],\n            [\n                \"e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7\",\n                \"d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4\"\n            ],\n            [\n                \"8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8\",\n                \"c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f\"\n            ],\n            [\n                \"4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e\",\n                \"67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649\"\n            ],\n            [\n                \"3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d\",\n                \"cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826\"\n            ],\n            [\n                \"674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b\",\n                \"299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5\"\n            ],\n            [\n                \"d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f\",\n                \"f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87\"\n            ],\n            [\n                \"30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6\",\n                \"462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b\"\n            ],\n            [\n                \"be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297\",\n                \"62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc\"\n            ],\n            [\n                \"93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a\",\n                \"7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c\"\n            ],\n            [\n                \"b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c\",\n                \"ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f\"\n            ],\n            [\n                \"d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52\",\n                \"4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a\"\n            ],\n            [\n                \"d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb\",\n                \"bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46\"\n            ],\n            [\n                \"463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065\",\n                \"bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f\"\n            ],\n            [\n                \"7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917\",\n                \"603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03\"\n            ],\n            [\n                \"74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9\",\n                \"cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08\"\n            ],\n            [\n                \"30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3\",\n                \"553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8\"\n            ],\n            [\n                \"9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57\",\n                \"712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373\"\n            ],\n            [\n                \"176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66\",\n                \"ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3\"\n            ],\n            [\n                \"75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8\",\n                \"9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8\"\n            ],\n            [\n                \"809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721\",\n                \"9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1\"\n            ],\n            [\n                \"1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180\",\n                \"4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9\"\n            ]\n        ]\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar utils = exports;\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/.pnpm/bn.js@4.12.0/node_modules/bn.js/lib/bn.js\");\nvar minAssert = __webpack_require__(/*! minimalistic-assert */ \"(ssr)/./node_modules/.pnpm/minimalistic-assert@1.0.1/node_modules/minimalistic-assert/index.js\");\nvar minUtils = __webpack_require__(/*! minimalistic-crypto-utils */ \"(ssr)/./node_modules/.pnpm/minimalistic-crypto-utils@1.0.1/node_modules/minimalistic-crypto-utils/lib/utils.js\");\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n    var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n    naf.fill(0);\n    var ws = 1 << w + 1;\n    var k = num.clone();\n    for(var i = 0; i < naf.length; i++){\n        var z;\n        var mod = k.andln(ws - 1);\n        if (k.isOdd()) {\n            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;\n            else z = mod;\n            k.isubn(z);\n        } else {\n            z = 0;\n        }\n        naf[i] = z;\n        k.iushrn(1);\n    }\n    return naf;\n}\nutils.getNAF = getNAF;\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n    var jsf = [\n        [],\n        []\n    ];\n    k1 = k1.clone();\n    k2 = k2.clone();\n    var d1 = 0;\n    var d2 = 0;\n    var m8;\n    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){\n        // First phase\n        var m14 = k1.andln(3) + d1 & 3;\n        var m24 = k2.andln(3) + d2 & 3;\n        if (m14 === 3) m14 = -1;\n        if (m24 === 3) m24 = -1;\n        var u1;\n        if ((m14 & 1) === 0) {\n            u1 = 0;\n        } else {\n            m8 = k1.andln(7) + d1 & 7;\n            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;\n            else u1 = m14;\n        }\n        jsf[0].push(u1);\n        var u2;\n        if ((m24 & 1) === 0) {\n            u2 = 0;\n        } else {\n            m8 = k2.andln(7) + d2 & 7;\n            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;\n            else u2 = m24;\n        }\n        jsf[1].push(u2);\n        // Second phase\n        if (2 * d1 === u1 + 1) d1 = 1 - d1;\n        if (2 * d2 === u2 + 1) d2 = 1 - d2;\n        k1.iushrn(1);\n        k2.iushrn(1);\n    }\n    return jsf;\n}\nutils.getJSF = getJSF;\nfunction cachedProperty(obj, name, computer) {\n    var key = \"_\" + name;\n    obj.prototype[name] = function cachedProperty() {\n        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n    };\n}\nutils.cachedProperty = cachedProperty;\nfunction parseBytes(bytes) {\n    return typeof bytes === \"string\" ? utils.toArray(bytes, \"hex\") : bytes;\n}\nutils.parseBytes = parseBytes;\nfunction intFromLE(bytes) {\n    return new BN(bytes, \"hex\", \"le\");\n}\nutils.intFromLE = intFromLE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZWxsaXB0aWNANi41LjQvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDO0FBQ1osSUFBSUMsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFFdkJILE1BQU1NLE1BQU0sR0FBR0Y7QUFDZkosTUFBTU8sT0FBTyxHQUFHRixTQUFTRSxPQUFPO0FBQ2hDUCxNQUFNUSxLQUFLLEdBQUdILFNBQVNHLEtBQUs7QUFDNUJSLE1BQU1TLEtBQUssR0FBR0osU0FBU0ksS0FBSztBQUM1QlQsTUFBTVUsTUFBTSxHQUFHTCxTQUFTSyxNQUFNO0FBRTlCLGdDQUFnQztBQUNoQyxTQUFTQyxPQUFPQyxHQUFHLEVBQUVDLENBQUMsRUFBRUMsSUFBSTtJQUMxQixJQUFJQyxNQUFNLElBQUlDLE1BQU1DLEtBQUtDLEdBQUcsQ0FBQ04sSUFBSU8sU0FBUyxJQUFJTCxRQUFRO0lBQ3REQyxJQUFJSyxJQUFJLENBQUM7SUFFVCxJQUFJQyxLQUFLLEtBQU1SLElBQUk7SUFDbkIsSUFBSVMsSUFBSVYsSUFBSVcsS0FBSztJQUVqQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSVQsSUFBSVUsTUFBTSxFQUFFRCxJQUFLO1FBQ25DLElBQUlFO1FBQ0osSUFBSUMsTUFBTUwsRUFBRU0sS0FBSyxDQUFDUCxLQUFLO1FBQ3ZCLElBQUlDLEVBQUVPLEtBQUssSUFBSTtZQUNiLElBQUlGLE1BQU0sQ0FBQ04sTUFBTSxLQUFLLEdBQ3BCSyxJQUFJLENBQUNMLE1BQU0sS0FBS007aUJBRWhCRCxJQUFJQztZQUNOTCxFQUFFUSxLQUFLLENBQUNKO1FBQ1YsT0FBTztZQUNMQSxJQUFJO1FBQ047UUFFQVgsR0FBRyxDQUFDUyxFQUFFLEdBQUdFO1FBQ1RKLEVBQUVTLE1BQU0sQ0FBQztJQUNYO0lBRUEsT0FBT2hCO0FBQ1Q7QUFDQWYsTUFBTVcsTUFBTSxHQUFHQTtBQUVmLDBDQUEwQztBQUMxQyxTQUFTcUIsT0FBT0MsRUFBRSxFQUFFQyxFQUFFO0lBQ3BCLElBQUlDLE1BQU07UUFDUixFQUFFO1FBQ0YsRUFBRTtLQUNIO0lBRURGLEtBQUtBLEdBQUdWLEtBQUs7SUFDYlcsS0FBS0EsR0FBR1gsS0FBSztJQUNiLElBQUlhLEtBQUs7SUFDVCxJQUFJQyxLQUFLO0lBQ1QsSUFBSUM7SUFDSixNQUFPTCxHQUFHTSxJQUFJLENBQUMsQ0FBQ0gsTUFBTSxLQUFLRixHQUFHSyxJQUFJLENBQUMsQ0FBQ0YsTUFBTSxFQUFHO1FBQzNDLGNBQWM7UUFDZCxJQUFJRyxNQUFNLEdBQUlaLEtBQUssQ0FBQyxLQUFLUSxLQUFNO1FBQy9CLElBQUlLLE1BQU0sR0FBSWIsS0FBSyxDQUFDLEtBQUtTLEtBQU07UUFDL0IsSUFBSUcsUUFBUSxHQUNWQSxNQUFNLENBQUM7UUFDVCxJQUFJQyxRQUFRLEdBQ1ZBLE1BQU0sQ0FBQztRQUNULElBQUlDO1FBQ0osSUFBSSxDQUFDRixNQUFNLE9BQU8sR0FBRztZQUNuQkUsS0FBSztRQUNQLE9BQU87WUFDTEosS0FBSyxHQUFJVixLQUFLLENBQUMsS0FBS1EsS0FBTTtZQUMxQixJQUFJLENBQUNFLE9BQU8sS0FBS0EsT0FBTyxNQUFNRyxRQUFRLEdBQ3BDQyxLQUFLLENBQUNGO2lCQUVORSxLQUFLRjtRQUNUO1FBQ0FMLEdBQUcsQ0FBQyxFQUFFLENBQUNRLElBQUksQ0FBQ0Q7UUFFWixJQUFJRTtRQUNKLElBQUksQ0FBQ0gsTUFBTSxPQUFPLEdBQUc7WUFDbkJHLEtBQUs7UUFDUCxPQUFPO1lBQ0xOLEtBQUssR0FBSVYsS0FBSyxDQUFDLEtBQUtTLEtBQU07WUFDMUIsSUFBSSxDQUFDQyxPQUFPLEtBQUtBLE9BQU8sTUFBTUUsUUFBUSxHQUNwQ0ksS0FBSyxDQUFDSDtpQkFFTkcsS0FBS0g7UUFDVDtRQUNBTixHQUFHLENBQUMsRUFBRSxDQUFDUSxJQUFJLENBQUNDO1FBRVosZUFBZTtRQUNmLElBQUksSUFBSVIsT0FBT00sS0FBSyxHQUNsQk4sS0FBSyxJQUFJQTtRQUNYLElBQUksSUFBSUMsT0FBT08sS0FBSyxHQUNsQlAsS0FBSyxJQUFJQTtRQUNYSixHQUFHRixNQUFNLENBQUM7UUFDVkcsR0FBR0gsTUFBTSxDQUFDO0lBQ1o7SUFFQSxPQUFPSTtBQUNUO0FBQ0FuQyxNQUFNZ0MsTUFBTSxHQUFHQTtBQUVmLFNBQVNhLGVBQWVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxRQUFRO0lBQ3pDLElBQUlDLE1BQU0sTUFBTUY7SUFDaEJELElBQUlJLFNBQVMsQ0FBQ0gsS0FBSyxHQUFHLFNBQVNGO1FBQzdCLE9BQU8sSUFBSSxDQUFDSSxJQUFJLEtBQUtFLFlBQVksSUFBSSxDQUFDRixJQUFJLEdBQ3hDLElBQUksQ0FBQ0EsSUFBSSxHQUFHRCxTQUFTSSxJQUFJLENBQUMsSUFBSTtJQUNsQztBQUNGO0FBQ0FwRCxNQUFNNkMsY0FBYyxHQUFHQTtBQUV2QixTQUFTUSxXQUFXQyxLQUFLO0lBQ3ZCLE9BQU8sT0FBT0EsVUFBVSxXQUFXdEQsTUFBTU8sT0FBTyxDQUFDK0MsT0FBTyxTQUN0REE7QUFDSjtBQUNBdEQsTUFBTXFELFVBQVUsR0FBR0E7QUFFbkIsU0FBU0UsVUFBVUQsS0FBSztJQUN0QixPQUFPLElBQUlwRCxHQUFHb0QsT0FBTyxPQUFPO0FBQzlCO0FBQ0F0RCxNQUFNdUQsU0FBUyxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9lbGxpcHRpY0A2LjUuNC9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3V0aWxzLmpzPzQyM2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBtaW5Bc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgbWluVXRpbHMgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzJyk7XG5cbnV0aWxzLmFzc2VydCA9IG1pbkFzc2VydDtcbnV0aWxzLnRvQXJyYXkgPSBtaW5VdGlscy50b0FycmF5O1xudXRpbHMuemVybzIgPSBtaW5VdGlscy56ZXJvMjtcbnV0aWxzLnRvSGV4ID0gbWluVXRpbHMudG9IZXg7XG51dGlscy5lbmNvZGUgPSBtaW5VdGlscy5lbmNvZGU7XG5cbi8vIFJlcHJlc2VudCBudW0gaW4gYSB3LU5BRiBmb3JtXG5mdW5jdGlvbiBnZXROQUYobnVtLCB3LCBiaXRzKSB7XG4gIHZhciBuYWYgPSBuZXcgQXJyYXkoTWF0aC5tYXgobnVtLmJpdExlbmd0aCgpLCBiaXRzKSArIDEpO1xuICBuYWYuZmlsbCgwKTtcblxuICB2YXIgd3MgPSAxIDw8ICh3ICsgMSk7XG4gIHZhciBrID0gbnVtLmNsb25lKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYWYubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgejtcbiAgICB2YXIgbW9kID0gay5hbmRsbih3cyAtIDEpO1xuICAgIGlmIChrLmlzT2RkKCkpIHtcbiAgICAgIGlmIChtb2QgPiAod3MgPj4gMSkgLSAxKVxuICAgICAgICB6ID0gKHdzID4+IDEpIC0gbW9kO1xuICAgICAgZWxzZVxuICAgICAgICB6ID0gbW9kO1xuICAgICAgay5pc3Vibih6KTtcbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IDA7XG4gICAgfVxuXG4gICAgbmFmW2ldID0gejtcbiAgICBrLml1c2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdLFxuICBdO1xuXG4gIGsxID0gazEuY2xvbmUoKTtcbiAgazIgPSBrMi5jbG9uZSgpO1xuICB2YXIgZDEgPSAwO1xuICB2YXIgZDIgPSAwO1xuICB2YXIgbTg7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcbiAgICAvLyBGaXJzdCBwaGFzZVxuICAgIHZhciBtMTQgPSAoazEuYW5kbG4oMykgKyBkMSkgJiAzO1xuICAgIHZhciBtMjQgPSAoazIuYW5kbG4oMykgKyBkMikgJiAzO1xuICAgIGlmIChtMTQgPT09IDMpXG4gICAgICBtMTQgPSAtMTtcbiAgICBpZiAobTI0ID09PSAzKVxuICAgICAgbTI0ID0gLTE7XG4gICAgdmFyIHUxO1xuICAgIGlmICgobTE0ICYgMSkgPT09IDApIHtcbiAgICAgIHUxID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBtOCA9IChrMi5hbmRsbig3KSArIGQyKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMTQgPT09IDIpXG4gICAgICAgIHUyID0gLW0yNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTIgPSBtMjQ7XG4gICAgfVxuICAgIGpzZlsxXS5wdXNoKHUyKTtcblxuICAgIC8vIFNlY29uZCBwaGFzZVxuICAgIGlmICgyICogZDEgPT09IHUxICsgMSlcbiAgICAgIGQxID0gMSAtIGQxO1xuICAgIGlmICgyICogZDIgPT09IHUyICsgMSlcbiAgICAgIGQyID0gMSAtIGQyO1xuICAgIGsxLml1c2hybigxKTtcbiAgICBrMi5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4ganNmO1xufVxudXRpbHMuZ2V0SlNGID0gZ2V0SlNGO1xuXG5mdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosIG5hbWUsIGNvbXB1dGVyKSB7XG4gIHZhciBrZXkgPSAnXycgKyBuYW1lO1xuICBvYmoucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkID8gdGhpc1trZXldIDpcbiAgICAgIHRoaXNba2V5XSA9IGNvbXB1dGVyLmNhbGwodGhpcyk7XG4gIH07XG59XG51dGlscy5jYWNoZWRQcm9wZXJ0eSA9IGNhY2hlZFByb3BlcnR5O1xuXG5mdW5jdGlvbiBwYXJzZUJ5dGVzKGJ5dGVzKSB7XG4gIHJldHVybiB0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnID8gdXRpbHMudG9BcnJheShieXRlcywgJ2hleCcpIDpcbiAgICBieXRlcztcbn1cbnV0aWxzLnBhcnNlQnl0ZXMgPSBwYXJzZUJ5dGVzO1xuXG5mdW5jdGlvbiBpbnRGcm9tTEUoYnl0ZXMpIHtcbiAgcmV0dXJuIG5ldyBCTihieXRlcywgJ2hleCcsICdsZScpO1xufVxudXRpbHMuaW50RnJvbUxFID0gaW50RnJvbUxFO1xuXG4iXSwibmFtZXMiOlsidXRpbHMiLCJleHBvcnRzIiwiQk4iLCJyZXF1aXJlIiwibWluQXNzZXJ0IiwibWluVXRpbHMiLCJhc3NlcnQiLCJ0b0FycmF5IiwiemVybzIiLCJ0b0hleCIsImVuY29kZSIsImdldE5BRiIsIm51bSIsInciLCJiaXRzIiwibmFmIiwiQXJyYXkiLCJNYXRoIiwibWF4IiwiYml0TGVuZ3RoIiwiZmlsbCIsIndzIiwiayIsImNsb25lIiwiaSIsImxlbmd0aCIsInoiLCJtb2QiLCJhbmRsbiIsImlzT2RkIiwiaXN1Ym4iLCJpdXNocm4iLCJnZXRKU0YiLCJrMSIsImsyIiwianNmIiwiZDEiLCJkMiIsIm04IiwiY21wbiIsIm0xNCIsIm0yNCIsInUxIiwicHVzaCIsInUyIiwiY2FjaGVkUHJvcGVydHkiLCJvYmoiLCJuYW1lIiwiY29tcHV0ZXIiLCJrZXkiLCJwcm90b3R5cGUiLCJ1bmRlZmluZWQiLCJjYWxsIiwicGFyc2VCeXRlcyIsImJ5dGVzIiwiaW50RnJvbUxFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/lib/elliptic/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/package.json":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/elliptic@6.5.4/node_modules/elliptic/package.json ***!
  \******************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"elliptic","version":"6.5.4","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}');

/***/ })

};
;