"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect+utils@2.11.0";
exports.ids = ["vendor-chunks/@walletconnect+utils@2.11.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@walletconnect+utils@2.11.0/node_modules/@walletconnect/utils/dist/index.es.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+utils@2.11.0/node_modules/@walletconnect/utils/dist/index.es.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: () => (/* binding */ J),\n/* harmony export */   BASE16: () => (/* binding */ p),\n/* harmony export */   BASE64: () => (/* binding */ F),\n/* harmony export */   COLON: () => (/* binding */ zn),\n/* harmony export */   DEFAULT_DEPTH: () => (/* binding */ ne),\n/* harmony export */   EMPTY_SPACE: () => (/* binding */ q),\n/* harmony export */   ENV_MAP: () => (/* binding */ m),\n/* harmony export */   INTERNAL_ERRORS: () => (/* binding */ tn),\n/* harmony export */   MemoryStore: () => (/* binding */ tr),\n/* harmony export */   ONE_THOUSAND: () => (/* binding */ Yn),\n/* harmony export */   REACT_NATIVE_PRODUCT: () => (/* binding */ je),\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: () => (/* binding */ He),\n/* harmony export */   SDK_ERRORS: () => (/* binding */ nn),\n/* harmony export */   SDK_TYPE: () => (/* binding */ De),\n/* harmony export */   SLASH: () => (/* binding */ $e),\n/* harmony export */   TYPE_0: () => (/* binding */ Q),\n/* harmony export */   TYPE_1: () => (/* binding */ _),\n/* harmony export */   UTF8: () => (/* binding */ H),\n/* harmony export */   appendToQueryString: () => (/* binding */ ke),\n/* harmony export */   assertType: () => (/* binding */ nt),\n/* harmony export */   buildApprovedNamespaces: () => (/* binding */ $t),\n/* harmony export */   calcExpiry: () => (/* binding */ pt),\n/* harmony export */   capitalize: () => (/* binding */ ct),\n/* harmony export */   capitalizeWord: () => (/* binding */ Fe),\n/* harmony export */   createDelayedPromise: () => (/* binding */ at),\n/* harmony export */   createExpiringPromise: () => (/* binding */ ut),\n/* harmony export */   decodeTypeByte: () => (/* binding */ $),\n/* harmony export */   decrypt: () => (/* binding */ Fn),\n/* harmony export */   deriveSymKey: () => (/* binding */ Mn),\n/* harmony export */   deserialize: () => (/* binding */ ee),\n/* harmony export */   encodeTypeByte: () => (/* binding */ Re),\n/* harmony export */   encrypt: () => (/* binding */ xn),\n/* harmony export */   engineEvent: () => (/* binding */ yt),\n/* harmony export */   enumify: () => (/* binding */ it),\n/* harmony export */   formatAccountId: () => (/* binding */ be),\n/* harmony export */   formatAccountWithChain: () => (/* binding */ Tn),\n/* harmony export */   formatChainId: () => (/* binding */ Ee),\n/* harmony export */   formatExpirerTarget: () => (/* binding */ re),\n/* harmony export */   formatIdTarget: () => (/* binding */ dt),\n/* harmony export */   formatMessage: () => (/* binding */ $n),\n/* harmony export */   formatMessageContext: () => (/* binding */ tt),\n/* harmony export */   formatRelayParams: () => (/* binding */ ze),\n/* harmony export */   formatRelayRpcUrl: () => (/* binding */ Xn),\n/* harmony export */   formatTopicTarget: () => (/* binding */ lt),\n/* harmony export */   formatUA: () => (/* binding */ Ke),\n/* harmony export */   formatUri: () => (/* binding */ It),\n/* harmony export */   generateKeyPair: () => (/* binding */ kn),\n/* harmony export */   generateRandomBytes32: () => (/* binding */ Vn),\n/* harmony export */   getAccountsChains: () => (/* binding */ A),\n/* harmony export */   getAccountsFromNamespaces: () => (/* binding */ Un),\n/* harmony export */   getAddressFromAccount: () => (/* binding */ Ne),\n/* harmony export */   getAddressesFromAccounts: () => (/* binding */ An),\n/* harmony export */   getAppMetadata: () => (/* binding */ Qn),\n/* harmony export */   getBrowserOnlineStatus: () => (/* binding */ mn),\n/* harmony export */   getBundleId: () => (/* binding */ Jn),\n/* harmony export */   getChainFromAccount: () => (/* binding */ Oe),\n/* harmony export */   getChainsFromAccounts: () => (/* binding */ Se),\n/* harmony export */   getChainsFromNamespace: () => (/* binding */ L),\n/* harmony export */   getChainsFromNamespaces: () => (/* binding */ _n),\n/* harmony export */   getChainsFromRequiredNamespaces: () => (/* binding */ Cn),\n/* harmony export */   getDeepLink: () => (/* binding */ gt),\n/* harmony export */   getDidAddress: () => (/* binding */ Ie),\n/* harmony export */   getDidAddressSegments: () => (/* binding */ x),\n/* harmony export */   getDidChainId: () => (/* binding */ we),\n/* harmony export */   getEnvironment: () => (/* binding */ T),\n/* harmony export */   getHttpUrl: () => (/* binding */ et),\n/* harmony export */   getInternalError: () => (/* binding */ N),\n/* harmony export */   getJavascriptID: () => (/* binding */ Me),\n/* harmony export */   getJavascriptOS: () => (/* binding */ Ve),\n/* harmony export */   getLastItems: () => (/* binding */ xe),\n/* harmony export */   getNamespacedDidChainId: () => (/* binding */ jn),\n/* harmony export */   getNamespacesChains: () => (/* binding */ Qe),\n/* harmony export */   getNamespacesEventsForChainId: () => (/* binding */ Xe),\n/* harmony export */   getNamespacesMethodsForChainId: () => (/* binding */ Ze),\n/* harmony export */   getNodeOnlineStatus: () => (/* binding */ hn),\n/* harmony export */   getReactNativeOnlineStatus: () => (/* binding */ yn),\n/* harmony export */   getRelayClientMetadata: () => (/* binding */ Zn),\n/* harmony export */   getRelayProtocolApi: () => (/* binding */ Et),\n/* harmony export */   getRelayProtocolName: () => (/* binding */ vt),\n/* harmony export */   getRequiredNamespacesFromNamespaces: () => (/* binding */ jt),\n/* harmony export */   getSdkError: () => (/* binding */ U),\n/* harmony export */   getUniqueValues: () => (/* binding */ Y),\n/* harmony export */   handleDeeplinkRedirect: () => (/* binding */ ht),\n/* harmony export */   hasOverlap: () => (/* binding */ O),\n/* harmony export */   hashKey: () => (/* binding */ Kn),\n/* harmony export */   hashMessage: () => (/* binding */ Ln),\n/* harmony export */   isBrowser: () => (/* binding */ D),\n/* harmony export */   isCaipNamespace: () => (/* binding */ oe),\n/* harmony export */   isConformingNamespaces: () => (/* binding */ fn),\n/* harmony export */   isExpired: () => (/* binding */ mt),\n/* harmony export */   isNode: () => (/* binding */ te),\n/* harmony export */   isOnline: () => (/* binding */ er),\n/* harmony export */   isProposalStruct: () => (/* binding */ Vt),\n/* harmony export */   isReactNative: () => (/* binding */ C),\n/* harmony export */   isSessionCompatible: () => (/* binding */ Dt),\n/* harmony export */   isSessionStruct: () => (/* binding */ Mt),\n/* harmony export */   isTypeOneEnvelope: () => (/* binding */ qn),\n/* harmony export */   isUndefined: () => (/* binding */ w),\n/* harmony export */   isValidAccountId: () => (/* binding */ rn),\n/* harmony export */   isValidAccounts: () => (/* binding */ cn),\n/* harmony export */   isValidActions: () => (/* binding */ un),\n/* harmony export */   isValidArray: () => (/* binding */ k),\n/* harmony export */   isValidChainId: () => (/* binding */ V),\n/* harmony export */   isValidChains: () => (/* binding */ on),\n/* harmony export */   isValidController: () => (/* binding */ Kt),\n/* harmony export */   isValidErrorReason: () => (/* binding */ qt),\n/* harmony export */   isValidEvent: () => (/* binding */ Wt),\n/* harmony export */   isValidId: () => (/* binding */ Ft),\n/* harmony export */   isValidNamespaceAccounts: () => (/* binding */ an),\n/* harmony export */   isValidNamespaceActions: () => (/* binding */ ce),\n/* harmony export */   isValidNamespaceChains: () => (/* binding */ sn),\n/* harmony export */   isValidNamespaceMethodsOrEvents: () => (/* binding */ ie),\n/* harmony export */   isValidNamespaces: () => (/* binding */ ln),\n/* harmony export */   isValidNamespacesChainId: () => (/* binding */ zt),\n/* harmony export */   isValidNamespacesEvent: () => (/* binding */ Jt),\n/* harmony export */   isValidNamespacesRequest: () => (/* binding */ Yt),\n/* harmony export */   isValidNumber: () => (/* binding */ G),\n/* harmony export */   isValidObject: () => (/* binding */ B),\n/* harmony export */   isValidParams: () => (/* binding */ Ht),\n/* harmony export */   isValidRelay: () => (/* binding */ dn),\n/* harmony export */   isValidRelays: () => (/* binding */ xt),\n/* harmony export */   isValidRequest: () => (/* binding */ Bt),\n/* harmony export */   isValidRequestExpiry: () => (/* binding */ Xt),\n/* harmony export */   isValidRequiredNamespaces: () => (/* binding */ Lt),\n/* harmony export */   isValidResponse: () => (/* binding */ Gt),\n/* harmony export */   isValidString: () => (/* binding */ h),\n/* harmony export */   isValidUrl: () => (/* binding */ kt),\n/* harmony export */   mapEntries: () => (/* binding */ st),\n/* harmony export */   mapToObj: () => (/* binding */ rt),\n/* harmony export */   mergeArrays: () => (/* binding */ S),\n/* harmony export */   normalizeNamespaces: () => (/* binding */ se),\n/* harmony export */   objToMap: () => (/* binding */ ot),\n/* harmony export */   parseAccountId: () => (/* binding */ z),\n/* harmony export */   parseChainId: () => (/* binding */ ve),\n/* harmony export */   parseContextNames: () => (/* binding */ Le),\n/* harmony export */   parseExpirerTarget: () => (/* binding */ ft),\n/* harmony export */   parseNamespaceKey: () => (/* binding */ en),\n/* harmony export */   parseRelayParams: () => (/* binding */ Ge),\n/* harmony export */   parseTopic: () => (/* binding */ We),\n/* harmony export */   parseUri: () => (/* binding */ wt),\n/* harmony export */   serialize: () => (/* binding */ Te),\n/* harmony export */   subscribeToBrowserNetworkChange: () => (/* binding */ gn),\n/* harmony export */   subscribeToNetworkChange: () => (/* binding */ nr),\n/* harmony export */   subscribeToReactNativeNetworkChange: () => (/* binding */ vn),\n/* harmony export */   validateDecoding: () => (/* binding */ Hn),\n/* harmony export */   validateEncoding: () => (/* binding */ Ae)\n/* harmony export */ });\n/* harmony import */ var _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stablelib/chacha20poly1305 */ \"(ssr)/./node_modules/.pnpm/@stablelib+chacha20poly1305@1.0.1/node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js\");\n/* harmony import */ var _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/hkdf */ \"(ssr)/./node_modules/.pnpm/@stablelib+hkdf@1.0.1/node_modules/@stablelib/hkdf/lib/hkdf.js\");\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stablelib/random */ \"(ssr)/./node_modules/.pnpm/@stablelib+random@1.0.2/node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stablelib/sha256 */ \"(ssr)/./node_modules/.pnpm/@stablelib+sha256@1.0.1/node_modules/@stablelib/sha256/lib/sha256.js\");\n/* harmony import */ var _stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stablelib/x25519 */ \"(ssr)/./node_modules/.pnpm/@stablelib+x25519@1.0.3/node_modules/@stablelib/x25519/lib/x25519.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/.pnpm/uint8arrays@3.1.1/node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! detect-browser */ \"(ssr)/./node_modules/.pnpm/detect-browser@5.3.0/node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/.pnpm/@walletconnect+time@1.0.2/node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/.pnpm/@walletconnect+window-getters@1.0.1/node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"(ssr)/./node_modules/.pnpm/@walletconnect+window-metadata@1.0.1/node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/.pnpm/query-string@7.1.3/node_modules/query-string/index.js\");\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/relay-api */ \"(ssr)/./node_modules/.pnpm/@walletconnect+relay-api@1.0.9/node_modules/@walletconnect/relay-api/dist/esm/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst K = \":\";\nfunction ve(e) {\n    const [n, t] = e.split(K);\n    return {\n        namespace: n,\n        reference: t\n    };\n}\nfunction Ee(e) {\n    const { namespace: n, reference: t } = e;\n    return [\n        n,\n        t\n    ].join(K);\n}\nfunction z(e) {\n    const [n, t, r] = e.split(K);\n    return {\n        namespace: n,\n        reference: t,\n        address: r\n    };\n}\nfunction be(e) {\n    const { namespace: n, reference: t, address: r } = e;\n    return [\n        n,\n        t,\n        r\n    ].join(K);\n}\nfunction Y(e, n) {\n    const t = [];\n    return e.forEach((r)=>{\n        const o = n(r);\n        t.includes(o) || t.push(o);\n    }), t;\n}\nfunction Ne(e) {\n    const { address: n } = z(e);\n    return n;\n}\nfunction Oe(e) {\n    const { namespace: n, reference: t } = z(e);\n    return Ee({\n        namespace: n,\n        reference: t\n    });\n}\nfunction Tn(e, n) {\n    const { namespace: t, reference: r } = ve(n);\n    return be({\n        namespace: t,\n        reference: r,\n        address: e\n    });\n}\nfunction An(e) {\n    return Y(e, Ne);\n}\nfunction Se(e) {\n    return Y(e, Oe);\n}\nfunction Un(e, n = []) {\n    const t = [];\n    return Object.keys(e).forEach((r)=>{\n        if (n.length && !n.includes(r)) return;\n        const o = e[r];\n        t.push(...o.accounts);\n    }), t;\n}\nfunction _n(e, n = []) {\n    const t = [];\n    return Object.keys(e).forEach((r)=>{\n        if (n.length && !n.includes(r)) return;\n        const o = e[r];\n        t.push(...Se(o.accounts));\n    }), t;\n}\nfunction Cn(e, n = []) {\n    const t = [];\n    return Object.keys(e).forEach((r)=>{\n        if (n.length && !n.includes(r)) return;\n        const o = e[r];\n        t.push(...L(r, o));\n    }), t;\n}\nfunction L(e, n) {\n    return e.includes(\":\") ? [\n        e\n    ] : n.chains || [];\n}\nconst x = (e)=>e?.split(\":\"), we = (e)=>{\n    const n = e && x(e);\n    if (n) return n[3];\n}, jn = (e)=>{\n    const n = e && x(e);\n    if (n) return n[2] + \":\" + n[3];\n}, Ie = (e)=>{\n    const n = e && x(e);\n    if (n) return n.pop();\n}, $n = (e, n)=>{\n    const t = `${e.domain} wants you to sign in with your Ethereum account:`, r = Ie(n), o = e.statement, s = `URI: ${e.aud}`, i = `Version: ${e.version}`, d = `Chain ID: ${we(n)}`, l = `Nonce: ${e.nonce}`, c = `Issued At: ${e.iat}`, u = e.resources && e.resources.length > 0 ? `Resources:\n${e.resources.map((a)=>`- ${a}`).join(`\n`)}` : void 0;\n    return [\n        t,\n        r,\n        \"\",\n        o,\n        \"\",\n        s,\n        i,\n        d,\n        l,\n        c,\n        u\n    ].filter((a)=>a != null).join(`\n`);\n}, J = \"base10\", p = \"base16\", F = \"base64pad\", H = \"utf8\", Q = 0, _ = 1, Dn = 0, Pe = 1, Z = 12, X = 32;\nfunction kn() {\n    const e = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__.generateKeyPair();\n    return {\n        privateKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e.secretKey, p),\n        publicKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e.publicKey, p)\n    };\n}\nfunction Vn() {\n    const e = (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(X);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e, p);\n}\nfunction Mn(e, n) {\n    const t = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__.sharedKey((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, p), (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(n, p), !0), r = new _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_1__.HKDF(_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.SHA256, t).expand(X);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(r, p);\n}\nfunction Kn(e) {\n    const n = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, p));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(n, p);\n}\nfunction Ln(e) {\n    const n = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, H));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(n, p);\n}\nfunction Re(e) {\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(`${e}`, J);\n}\nfunction $(e) {\n    return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e, J));\n}\nfunction xn(e) {\n    const n = Re(typeof e.type < \"u\" ? e.type : Q);\n    if ($(n) === _ && typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const t = typeof e.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.senderPublicKey, p) : void 0, r = typeof e.iv < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.iv, p) : (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(Z), o = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.symKey, p)).seal(r, (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.message, H));\n    return Te({\n        type: n,\n        sealed: o,\n        iv: r,\n        senderPublicKey: t\n    });\n}\nfunction Fn(e) {\n    const n = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.symKey, p)), { sealed: t, iv: r } = ee(e.encoded), o = n.open(r, t);\n    if (o === null) throw new Error(\"Failed to decrypt\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(o, H);\n}\nfunction Te(e) {\n    if ($(e.type) === _) {\n        if (typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n            e.type,\n            e.senderPublicKey,\n            e.iv,\n            e.sealed\n        ]), F);\n    }\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n        e.type,\n        e.iv,\n        e.sealed\n    ]), F);\n}\nfunction ee(e) {\n    const n = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, F), t = n.slice(Dn, Pe), r = Pe;\n    if ($(t) === _) {\n        const d = r + X, l = d + Z, c = n.slice(r, d), u = n.slice(d, l), a = n.slice(l);\n        return {\n            type: t,\n            sealed: a,\n            iv: u,\n            senderPublicKey: c\n        };\n    }\n    const o = r + Z, s = n.slice(r, o), i = n.slice(o);\n    return {\n        type: t,\n        sealed: i,\n        iv: s\n    };\n}\nfunction Hn(e, n) {\n    const t = ee(e);\n    return Ae({\n        type: $(t.type),\n        senderPublicKey: typeof t.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(t.senderPublicKey, p) : void 0,\n        receiverPublicKey: n?.receiverPublicKey\n    });\n}\nfunction Ae(e) {\n    const n = e?.type || Q;\n    if (n === _) {\n        if (typeof e?.senderPublicKey > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof e?.receiverPublicKey > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: n,\n        senderPublicKey: e?.senderPublicKey,\n        receiverPublicKey: e?.receiverPublicKey\n    };\n}\nfunction qn(e) {\n    return e.type === _ && typeof e.senderPublicKey == \"string\" && typeof e.receiverPublicKey == \"string\";\n}\nvar Bn = Object.defineProperty, Ue = Object.getOwnPropertySymbols, Gn = Object.prototype.hasOwnProperty, Wn = Object.prototype.propertyIsEnumerable, _e = (e, n, t)=>n in e ? Bn(e, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : e[n] = t, Ce = (e, n)=>{\n    for(var t in n || (n = {}))Gn.call(n, t) && _e(e, t, n[t]);\n    if (Ue) for (var t of Ue(n))Wn.call(n, t) && _e(e, t, n[t]);\n    return e;\n};\nconst je = \"ReactNative\", m = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, q = \" \", zn = \":\", $e = \"/\", ne = 2, Yn = 1e3, De = \"js\";\nfunction te() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction C() {\n    return !(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getDocument)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getNavigator)() && navigator.product === je;\n}\nfunction D() {\n    return !te() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getNavigator)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getDocument)();\n}\nfunction T() {\n    return C() ? m.reactNative : te() ? m.node : D() ? m.browser : m.unknown;\n}\nfunction Jn() {\n    var e;\n    try {\n        return C() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Application) < \"u\" ? (e = global.Application) == null ? void 0 : e.applicationId : void 0;\n    } catch  {\n        return;\n    }\n}\nfunction ke(e, n) {\n    let t = query_string__WEBPACK_IMPORTED_MODULE_9__.parse(e);\n    return t = Ce(Ce({}, t), n), e = query_string__WEBPACK_IMPORTED_MODULE_9__.stringify(t), e;\n}\nfunction Qn() {\n    return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_8__.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\nfunction Zn(e, n) {\n    var t;\n    const r = T(), o = {\n        protocol: e,\n        version: n,\n        env: r\n    };\n    return r === \"browser\" && (o.host = ((t = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getLocation)()) == null ? void 0 : t.host) || \"unknown\"), o;\n}\nfunction Ve() {\n    if (T() === m.reactNative && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\") {\n        const { OS: t, Version: r } = global.Platform;\n        return [\n            t,\n            r\n        ].join(\"-\");\n    }\n    const e = (0,detect_browser__WEBPACK_IMPORTED_MODULE_11__.detect)();\n    if (e === null) return \"unknown\";\n    const n = e.os ? e.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return e.type === \"browser\" ? [\n        n,\n        e.name,\n        e.version\n    ].join(\"-\") : [\n        n,\n        e.version\n    ].join(\"-\");\n}\nfunction Me() {\n    var e;\n    const n = T();\n    return n === m.browser ? [\n        n,\n        ((e = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getLocation)()) == null ? void 0 : e.host) || \"unknown\"\n    ].join(\":\") : n;\n}\nfunction Ke(e, n, t) {\n    const r = Ve(), o = Me();\n    return [\n        [\n            e,\n            n\n        ].join(\"-\"),\n        [\n            De,\n            t\n        ].join(\"-\"),\n        r,\n        o\n    ].join(\"/\");\n}\nfunction Xn({ protocol: e, version: n, relayUrl: t, sdkVersion: r, auth: o, projectId: s, useOnCloseEvent: i, bundleId: d }) {\n    const l = t.split(\"?\"), c = Ke(e, n, r), u = {\n        auth: o,\n        ua: c,\n        projectId: s,\n        useOnCloseEvent: i || void 0,\n        origin: d || void 0\n    }, a = ke(l[1] || \"\", u);\n    return l[0] + \"?\" + a;\n}\nfunction et(e) {\n    let n = (e.match(/^[^:]+(?=:\\/\\/)/gi) || [])[0];\n    const t = typeof n < \"u\" ? e.split(\"://\")[1] : e;\n    return n = n === \"wss\" ? \"https\" : \"http\", [\n        n,\n        t\n    ].join(\"://\");\n}\nfunction nt(e, n, t) {\n    if (!e[n] || typeof e[n] !== t) throw new Error(`Missing or invalid \"${n}\" param`);\n}\nfunction Le(e, n = ne) {\n    return xe(e.split($e), n);\n}\nfunction tt(e) {\n    return Le(e).join(q);\n}\nfunction O(e, n) {\n    return e.filter((t)=>n.includes(t)).length === e.length;\n}\nfunction xe(e, n = ne) {\n    return e.slice(Math.max(e.length - n, 0));\n}\nfunction rt(e) {\n    return Object.fromEntries(e.entries());\n}\nfunction ot(e) {\n    return new Map(Object.entries(e));\n}\nfunction st(e, n) {\n    const t = {};\n    return Object.keys(e).forEach((r)=>{\n        t[r] = n(e[r]);\n    }), t;\n}\nconst it = (e)=>e;\nfunction Fe(e) {\n    return e.trim().replace(/^\\w/, (n)=>n.toUpperCase());\n}\nfunction ct(e) {\n    return e.split(q).map((n)=>Fe(n)).join(q);\n}\nfunction at(e = _walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.FIVE_MINUTES, n) {\n    const t = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e || _walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.FIVE_MINUTES);\n    let r, o, s;\n    return {\n        resolve: (i)=>{\n            s && r && (clearTimeout(s), r(i));\n        },\n        reject: (i)=>{\n            s && o && (clearTimeout(s), o(i));\n        },\n        done: ()=>new Promise((i, d)=>{\n                s = setTimeout(()=>{\n                    d(new Error(n));\n                }, t), r = i, o = d;\n            })\n    };\n}\nfunction ut(e, n, t) {\n    return new Promise(async (r, o)=>{\n        const s = setTimeout(()=>o(new Error(t)), n);\n        try {\n            const i = await e;\n            r(i);\n        } catch (i) {\n            o(i);\n        }\n        clearTimeout(s);\n    });\n}\nfunction re(e, n) {\n    if (typeof n == \"string\" && n.startsWith(`${e}:`)) return n;\n    if (e.toLowerCase() === \"topic\") {\n        if (typeof n != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return `topic:${n}`;\n    } else if (e.toLowerCase() === \"id\") {\n        if (typeof n != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return `id:${n}`;\n    }\n    throw new Error(`Unknown expirer target type: ${e}`);\n}\nfunction lt(e) {\n    return re(\"topic\", e);\n}\nfunction dt(e) {\n    return re(\"id\", e);\n}\nfunction ft(e) {\n    const [n, t] = e.split(\":\"), r = {\n        id: void 0,\n        topic: void 0\n    };\n    if (n === \"topic\" && typeof t == \"string\") r.topic = t;\n    else if (n === \"id\" && Number.isInteger(Number(t))) r.id = Number(t);\n    else throw new Error(`Invalid target, expected id:number or topic:string, got ${n}:${t}`);\n    return r;\n}\nfunction pt(e, n) {\n    return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.fromMiliseconds)((n || Date.now()) + (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e));\n}\nfunction mt(e) {\n    return Date.now() >= (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e);\n}\nfunction yt(e, n) {\n    return `${e}${n ? `:${n}` : \"\"}`;\n}\nfunction S(e = [], n = []) {\n    return [\n        ...new Set([\n            ...e,\n            ...n\n        ])\n    ];\n}\nasync function ht({ id: e, topic: n, wcDeepLink: t }) {\n    try {\n        if (!t) return;\n        const r = typeof t == \"string\" ? JSON.parse(t) : t;\n        let o = r?.href;\n        if (typeof o != \"string\") return;\n        o.endsWith(\"/\") && (o = o.slice(0, -1));\n        const s = `${o}/wc?requestId=${e}&sessionTopic=${n}`, i = T();\n        i === m.browser ? s.startsWith(\"https://\") ? window.open(s, \"_blank\", \"noreferrer noopener\") : window.open(s, \"_self\", \"noreferrer noopener\") : i === m.reactNative && typeof (global == null ? void 0 : global.Linking) < \"u\" && await global.Linking.openURL(s);\n    } catch (r) {\n        console.error(r);\n    }\n}\nasync function gt(e, n) {\n    try {\n        return await e.getItem(n) || (D() ? localStorage.getItem(n) : void 0);\n    } catch (t) {\n        console.error(t);\n    }\n}\nconst He = \"irn\";\nfunction vt(e) {\n    return e?.relay || {\n        protocol: He\n    };\n}\nfunction Et(e) {\n    const n = _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__.RELAY_JSONRPC[e];\n    if (typeof n > \"u\") throw new Error(`Relay Protocol not supported: ${e}`);\n    return n;\n}\nvar bt = Object.defineProperty, qe = Object.getOwnPropertySymbols, Nt = Object.prototype.hasOwnProperty, Ot = Object.prototype.propertyIsEnumerable, Be = (e, n, t)=>n in e ? bt(e, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : e[n] = t, St = (e, n)=>{\n    for(var t in n || (n = {}))Nt.call(n, t) && Be(e, t, n[t]);\n    if (qe) for (var t of qe(n))Ot.call(n, t) && Be(e, t, n[t]);\n    return e;\n};\nfunction Ge(e, n = \"-\") {\n    const t = {}, r = \"relay\" + n;\n    return Object.keys(e).forEach((o)=>{\n        if (o.startsWith(r)) {\n            const s = o.replace(r, \"\"), i = e[o];\n            t[s] = i;\n        }\n    }), t;\n}\nfunction wt(e) {\n    e = e.includes(\"wc://\") ? e.replace(\"wc://\", \"\") : e, e = e.includes(\"wc:\") ? e.replace(\"wc:\", \"\") : e;\n    const n = e.indexOf(\":\"), t = e.indexOf(\"?\") !== -1 ? e.indexOf(\"?\") : void 0, r = e.substring(0, n), o = e.substring(n + 1, t).split(\"@\"), s = typeof t < \"u\" ? e.substring(t) : \"\", i = query_string__WEBPACK_IMPORTED_MODULE_9__.parse(s);\n    return {\n        protocol: r,\n        topic: We(o[0]),\n        version: parseInt(o[1], 10),\n        symKey: i.symKey,\n        relay: Ge(i)\n    };\n}\nfunction We(e) {\n    return e.startsWith(\"//\") ? e.substring(2) : e;\n}\nfunction ze(e, n = \"-\") {\n    const t = \"relay\", r = {};\n    return Object.keys(e).forEach((o)=>{\n        const s = t + n + o;\n        e[o] && (r[s] = e[o]);\n    }), r;\n}\nfunction It(e) {\n    return `${e.protocol}:${e.topic}@${e.version}?` + query_string__WEBPACK_IMPORTED_MODULE_9__.stringify(St({\n        symKey: e.symKey\n    }, ze(e.relay)));\n}\nvar Pt = Object.defineProperty, Rt = Object.defineProperties, Tt = Object.getOwnPropertyDescriptors, Ye = Object.getOwnPropertySymbols, At = Object.prototype.hasOwnProperty, Ut = Object.prototype.propertyIsEnumerable, Je = (e, n, t)=>n in e ? Pt(e, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : e[n] = t, _t = (e, n)=>{\n    for(var t in n || (n = {}))At.call(n, t) && Je(e, t, n[t]);\n    if (Ye) for (var t of Ye(n))Ut.call(n, t) && Je(e, t, n[t]);\n    return e;\n}, Ct = (e, n)=>Rt(e, Tt(n));\nfunction A(e) {\n    const n = [];\n    return e.forEach((t)=>{\n        const [r, o] = t.split(\":\");\n        n.push(`${r}:${o}`);\n    }), n;\n}\nfunction Qe(e) {\n    const n = [];\n    return Object.values(e).forEach((t)=>{\n        n.push(...A(t.accounts));\n    }), n;\n}\nfunction Ze(e, n) {\n    const t = [];\n    return Object.values(e).forEach((r)=>{\n        A(r.accounts).includes(n) && t.push(...r.methods);\n    }), t;\n}\nfunction Xe(e, n) {\n    const t = [];\n    return Object.values(e).forEach((r)=>{\n        A(r.accounts).includes(n) && t.push(...r.events);\n    }), t;\n}\nfunction jt(e, n) {\n    const t = ln(e, n);\n    if (t) throw new Error(t.message);\n    const r = {};\n    for (const [o, s] of Object.entries(e))r[o] = {\n        methods: s.methods,\n        events: s.events,\n        chains: s.accounts.map((i)=>`${i.split(\":\")[0]}:${i.split(\":\")[1]}`)\n    };\n    return r;\n}\nfunction $t(e) {\n    const { proposal: { requiredNamespaces: n, optionalNamespaces: t = {} }, supportedNamespaces: r } = e, o = se(n), s = se(t), i = {};\n    Object.keys(r).forEach((c)=>{\n        const u = r[c].chains, a = r[c].methods, b = r[c].events, I = r[c].accounts;\n        u.forEach((y)=>{\n            if (!I.some((f)=>f.includes(y))) throw new Error(`No accounts provided for chain ${y} in namespace ${c}`);\n        }), i[c] = {\n            chains: u,\n            methods: a,\n            events: b,\n            accounts: I\n        };\n    });\n    const d = fn(n, i, \"approve()\");\n    if (d) throw new Error(d.message);\n    const l = {};\n    return !Object.keys(n).length && !Object.keys(t).length ? i : (Object.keys(o).forEach((c)=>{\n        const u = r[c].chains.filter((y)=>{\n            var f, g;\n            return (g = (f = o[c]) == null ? void 0 : f.chains) == null ? void 0 : g.includes(y);\n        }), a = r[c].methods.filter((y)=>{\n            var f, g;\n            return (g = (f = o[c]) == null ? void 0 : f.methods) == null ? void 0 : g.includes(y);\n        }), b = r[c].events.filter((y)=>{\n            var f, g;\n            return (g = (f = o[c]) == null ? void 0 : f.events) == null ? void 0 : g.includes(y);\n        }), I = u.map((y)=>r[c].accounts.filter((f)=>f.includes(`${y}:`))).flat();\n        l[c] = {\n            chains: u,\n            methods: a,\n            events: b,\n            accounts: I\n        };\n    }), Object.keys(s).forEach((c)=>{\n        var u, a, b, I, y, f;\n        if (!r[c]) return;\n        const g = (a = (u = s[c]) == null ? void 0 : u.chains) == null ? void 0 : a.filter((P)=>r[c].chains.includes(P)), En = r[c].methods.filter((P)=>{\n            var R, j;\n            return (j = (R = s[c]) == null ? void 0 : R.methods) == null ? void 0 : j.includes(P);\n        }), bn = r[c].events.filter((P)=>{\n            var R, j;\n            return (j = (R = s[c]) == null ? void 0 : R.events) == null ? void 0 : j.includes(P);\n        }), Nn = g?.map((P)=>r[c].accounts.filter((R)=>R.includes(`${P}:`))).flat();\n        l[c] = {\n            chains: S((b = l[c]) == null ? void 0 : b.chains, g),\n            methods: S((I = l[c]) == null ? void 0 : I.methods, En),\n            events: S((y = l[c]) == null ? void 0 : y.events, bn),\n            accounts: S((f = l[c]) == null ? void 0 : f.accounts, Nn)\n        };\n    }), l);\n}\nfunction oe(e) {\n    return e.includes(\":\");\n}\nfunction en(e) {\n    return oe(e) ? e.split(\":\")[0] : e;\n}\nfunction se(e) {\n    var n, t, r;\n    const o = {};\n    if (!B(e)) return o;\n    for (const [s, i] of Object.entries(e)){\n        const d = oe(s) ? [\n            s\n        ] : i.chains, l = i.methods || [], c = i.events || [], u = en(s);\n        o[u] = Ct(_t({}, o[u]), {\n            chains: S(d, (n = o[u]) == null ? void 0 : n.chains),\n            methods: S(l, (t = o[u]) == null ? void 0 : t.methods),\n            events: S(c, (r = o[u]) == null ? void 0 : r.events)\n        });\n    }\n    return o;\n}\nconst nn = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, tn = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction N(e, n) {\n    const { message: t, code: r } = tn[e];\n    return {\n        message: n ? `${t} ${n}` : t,\n        code: r\n    };\n}\nfunction U(e, n) {\n    const { message: t, code: r } = nn[e];\n    return {\n        message: n ? `${t} ${n}` : t,\n        code: r\n    };\n}\nfunction k(e, n) {\n    return Array.isArray(e) ? typeof n < \"u\" && e.length ? e.every(n) : !0 : !1;\n}\nfunction B(e) {\n    return Object.getPrototypeOf(e) === Object.prototype && Object.keys(e).length;\n}\nfunction w(e) {\n    return typeof e > \"u\";\n}\nfunction h(e, n) {\n    return n && w(e) ? !0 : typeof e == \"string\" && !!e.trim().length;\n}\nfunction G(e, n) {\n    return n && w(e) ? !0 : typeof e == \"number\" && !isNaN(e);\n}\nfunction Dt(e, n) {\n    const { requiredNamespaces: t } = n, r = Object.keys(e.namespaces), o = Object.keys(t);\n    let s = !0;\n    return O(o, r) ? (r.forEach((i)=>{\n        const { accounts: d, methods: l, events: c } = e.namespaces[i], u = A(d), a = t[i];\n        (!O(L(i, a), u) || !O(a.methods, l) || !O(a.events, c)) && (s = !1);\n    }), s) : !1;\n}\nfunction V(e) {\n    return h(e, !1) && e.includes(\":\") ? e.split(\":\").length === 2 : !1;\n}\nfunction rn(e) {\n    if (h(e, !1) && e.includes(\":\")) {\n        const n = e.split(\":\");\n        if (n.length === 3) {\n            const t = n[0] + \":\" + n[1];\n            return !!n[2] && V(t);\n        }\n    }\n    return !1;\n}\nfunction kt(e) {\n    if (h(e, !1)) try {\n        return typeof new URL(e) < \"u\";\n    } catch  {\n        return !1;\n    }\n    return !1;\n}\nfunction Vt(e) {\n    var n;\n    return (n = e?.proposer) == null ? void 0 : n.publicKey;\n}\nfunction Mt(e) {\n    return e?.topic;\n}\nfunction Kt(e, n) {\n    let t = null;\n    return h(e?.publicKey, !1) || (t = N(\"MISSING_OR_INVALID\", `${n} controller public key should be a string`)), t;\n}\nfunction ie(e) {\n    let n = !0;\n    return k(e) ? e.length && (n = e.every((t)=>h(t, !1))) : n = !1, n;\n}\nfunction on(e, n, t) {\n    let r = null;\n    return k(n) && n.length ? n.forEach((o)=>{\n        r || V(o) || (r = U(\"UNSUPPORTED_CHAINS\", `${t}, chain ${o} should be a string and conform to \"namespace:chainId\" format`));\n    }) : V(e) || (r = U(\"UNSUPPORTED_CHAINS\", `${t}, chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }`)), r;\n}\nfunction sn(e, n, t) {\n    let r = null;\n    return Object.entries(e).forEach(([o, s])=>{\n        if (r) return;\n        const i = on(o, L(o, s), `${n} ${t}`);\n        i && (r = i);\n    }), r;\n}\nfunction cn(e, n) {\n    let t = null;\n    return k(e) ? e.forEach((r)=>{\n        t || rn(r) || (t = U(\"UNSUPPORTED_ACCOUNTS\", `${n}, account ${r} should be a string and conform to \"namespace:chainId:address\" format`));\n    }) : t = U(\"UNSUPPORTED_ACCOUNTS\", `${n}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`), t;\n}\nfunction an(e, n) {\n    let t = null;\n    return Object.values(e).forEach((r)=>{\n        if (t) return;\n        const o = cn(r?.accounts, `${n} namespace`);\n        o && (t = o);\n    }), t;\n}\nfunction un(e, n) {\n    let t = null;\n    return ie(e?.methods) ? ie(e?.events) || (t = U(\"UNSUPPORTED_EVENTS\", `${n}, events should be an array of strings or empty array for no events`)) : t = U(\"UNSUPPORTED_METHODS\", `${n}, methods should be an array of strings or empty array for no methods`), t;\n}\nfunction ce(e, n) {\n    let t = null;\n    return Object.values(e).forEach((r)=>{\n        if (t) return;\n        const o = un(r, `${n}, namespace`);\n        o && (t = o);\n    }), t;\n}\nfunction Lt(e, n, t) {\n    let r = null;\n    if (e && B(e)) {\n        const o = ce(e, n);\n        o && (r = o);\n        const s = sn(e, n, t);\n        s && (r = s);\n    } else r = N(\"MISSING_OR_INVALID\", `${n}, ${t} should be an object with data`);\n    return r;\n}\nfunction ln(e, n) {\n    let t = null;\n    if (e && B(e)) {\n        const r = ce(e, n);\n        r && (t = r);\n        const o = an(e, n);\n        o && (t = o);\n    } else t = N(\"MISSING_OR_INVALID\", `${n}, namespaces should be an object with data`);\n    return t;\n}\nfunction dn(e) {\n    return h(e.protocol, !0);\n}\nfunction xt(e, n) {\n    let t = !1;\n    return n && !e ? t = !0 : e && k(e) && e.length && e.forEach((r)=>{\n        t = dn(r);\n    }), t;\n}\nfunction Ft(e) {\n    return typeof e == \"number\";\n}\nfunction Ht(e) {\n    return typeof e < \"u\" && typeof e !== null;\n}\nfunction qt(e) {\n    return !(!e || typeof e != \"object\" || !e.code || !G(e.code, !1) || !e.message || !h(e.message, !1));\n}\nfunction Bt(e) {\n    return !(w(e) || !h(e.method, !1));\n}\nfunction Gt(e) {\n    return !(w(e) || w(e.result) && w(e.error) || !G(e.id, !1) || !h(e.jsonrpc, !1));\n}\nfunction Wt(e) {\n    return !(w(e) || !h(e.name, !1));\n}\nfunction zt(e, n) {\n    return !(!V(n) || !Qe(e).includes(n));\n}\nfunction Yt(e, n, t) {\n    return h(t, !1) ? Ze(e, n).includes(t) : !1;\n}\nfunction Jt(e, n, t) {\n    return h(t, !1) ? Xe(e, n).includes(t) : !1;\n}\nfunction fn(e, n, t) {\n    let r = null;\n    const o = Qt(e), s = Zt(n), i = Object.keys(o), d = Object.keys(s), l = pn(Object.keys(e)), c = pn(Object.keys(n)), u = l.filter((a)=>!c.includes(a));\n    return u.length && (r = N(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${u.toString()}\n      Received: ${Object.keys(n).toString()}`)), O(i, d) || (r = N(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces chains don't satisfy required namespaces.\n      Required: ${i.toString()}\n      Approved: ${d.toString()}`)), Object.keys(n).forEach((a)=>{\n        if (!a.includes(\":\") || r) return;\n        const b = A(n[a].accounts);\n        b.includes(a) || (r = N(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces accounts don't satisfy namespace accounts for ${a}\n        Required: ${a}\n        Approved: ${b.toString()}`));\n    }), i.forEach((a)=>{\n        r || (O(o[a].methods, s[a].methods) ? O(o[a].events, s[a].events) || (r = N(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces events don't satisfy namespace events for ${a}`)) : r = N(\"NON_CONFORMING_NAMESPACES\", `${t} namespaces methods don't satisfy namespace methods for ${a}`));\n    }), r;\n}\nfunction Qt(e) {\n    const n = {};\n    return Object.keys(e).forEach((t)=>{\n        var r;\n        t.includes(\":\") ? n[t] = e[t] : (r = e[t].chains) == null || r.forEach((o)=>{\n            n[o] = {\n                methods: e[t].methods,\n                events: e[t].events\n            };\n        });\n    }), n;\n}\nfunction pn(e) {\n    return [\n        ...new Set(e.map((n)=>n.includes(\":\") ? n.split(\":\")[0] : n))\n    ];\n}\nfunction Zt(e) {\n    const n = {};\n    return Object.keys(e).forEach((t)=>{\n        if (t.includes(\":\")) n[t] = e[t];\n        else {\n            const r = A(e[t].accounts);\n            r?.forEach((o)=>{\n                n[o] = {\n                    accounts: e[t].accounts.filter((s)=>s.includes(`${o}:`)),\n                    methods: e[t].methods,\n                    events: e[t].events\n                };\n            });\n        }\n    }), n;\n}\nfunction Xt(e, n) {\n    return G(e, !1) && e <= n.max && e >= n.min;\n}\nfunction er() {\n    const e = T();\n    return new Promise((n)=>{\n        switch(e){\n            case m.browser:\n                n(mn());\n                break;\n            case m.reactNative:\n                n(yn());\n                break;\n            case m.node:\n                n(hn());\n                break;\n            default:\n                n(!0);\n        }\n    });\n}\nfunction mn() {\n    return D() && navigator?.onLine;\n}\nasync function yn() {\n    if (C() && typeof global < \"u\" && global != null && global.NetInfo) {\n        const e = await (global == null ? void 0 : global.NetInfo.fetch());\n        return e?.isConnected;\n    }\n    return !0;\n}\nfunction hn() {\n    return !0;\n}\nfunction nr(e) {\n    switch(T()){\n        case m.browser:\n            gn(e);\n            break;\n        case m.reactNative:\n            vn(e);\n            break;\n        case m.node:\n            break;\n    }\n}\nfunction gn(e) {\n    !C() && D() && (window.addEventListener(\"online\", ()=>e(!0)), window.addEventListener(\"offline\", ()=>e(!1)));\n}\nfunction vn(e) {\n    C() && typeof global < \"u\" && global != null && global.NetInfo && global?.NetInfo.addEventListener((n)=>e(n?.isConnected));\n}\nconst ae = {};\nclass tr {\n    static get(n) {\n        return ae[n];\n    }\n    static set(n, t) {\n        ae[n] = t;\n    }\n    static delete(n) {\n        delete ae[n];\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@walletconnect+utils@2.11.0/node_modules/@walletconnect/utils/dist/index.es.js\n");

/***/ })

};
;