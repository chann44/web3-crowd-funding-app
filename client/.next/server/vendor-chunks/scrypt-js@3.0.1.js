"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/scrypt-js@3.0.1";
exports.ids = ["vendor-chunks/scrypt-js@3.0.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/scrypt-js@3.0.1/node_modules/scrypt-js/scrypt.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/scrypt-js@3.0.1/node_modules/scrypt-js/scrypt.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\n(function(root) {\n    const MAX_VALUE = 0x7fffffff;\n    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n    // See: https://github.com/dchest/scrypt-async-js\n    function SHA256(m) {\n        const K = new Uint32Array([\n            0x428a2f98,\n            0x71374491,\n            0xb5c0fbcf,\n            0xe9b5dba5,\n            0x3956c25b,\n            0x59f111f1,\n            0x923f82a4,\n            0xab1c5ed5,\n            0xd807aa98,\n            0x12835b01,\n            0x243185be,\n            0x550c7dc3,\n            0x72be5d74,\n            0x80deb1fe,\n            0x9bdc06a7,\n            0xc19bf174,\n            0xe49b69c1,\n            0xefbe4786,\n            0x0fc19dc6,\n            0x240ca1cc,\n            0x2de92c6f,\n            0x4a7484aa,\n            0x5cb0a9dc,\n            0x76f988da,\n            0x983e5152,\n            0xa831c66d,\n            0xb00327c8,\n            0xbf597fc7,\n            0xc6e00bf3,\n            0xd5a79147,\n            0x06ca6351,\n            0x14292967,\n            0x27b70a85,\n            0x2e1b2138,\n            0x4d2c6dfc,\n            0x53380d13,\n            0x650a7354,\n            0x766a0abb,\n            0x81c2c92e,\n            0x92722c85,\n            0xa2bfe8a1,\n            0xa81a664b,\n            0xc24b8b70,\n            0xc76c51a3,\n            0xd192e819,\n            0xd6990624,\n            0xf40e3585,\n            0x106aa070,\n            0x19a4c116,\n            0x1e376c08,\n            0x2748774c,\n            0x34b0bcb5,\n            0x391c0cb3,\n            0x4ed8aa4a,\n            0x5b9cca4f,\n            0x682e6ff3,\n            0x748f82ee,\n            0x78a5636f,\n            0x84c87814,\n            0x8cc70208,\n            0x90befffa,\n            0xa4506ceb,\n            0xbef9a3f7,\n            0xc67178f2\n        ]);\n        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;\n        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;\n        const w = new Uint32Array(64);\n        function blocks(p) {\n            let off = 0, len = p.length;\n            while(len >= 64){\n                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;\n                for(i = 0; i < 16; i++){\n                    j = off + i * 4;\n                    w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n                }\n                for(i = 16; i < 64; i++){\n                    u = w[i - 2];\n                    t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n                    u = w[i - 15];\n                    t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n                    w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0) | 0;\n                }\n                for(i = 0; i < 64; i++){\n                    t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n                    t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n                    h = g;\n                    g = f;\n                    f = e;\n                    e = d + t1 | 0;\n                    d = c;\n                    c = b;\n                    b = a;\n                    a = t1 + t2 | 0;\n                }\n                h0 = h0 + a | 0;\n                h1 = h1 + b | 0;\n                h2 = h2 + c | 0;\n                h3 = h3 + d | 0;\n                h4 = h4 + e | 0;\n                h5 = h5 + f | 0;\n                h6 = h6 + g | 0;\n                h7 = h7 + h | 0;\n                off += 64;\n                len -= 64;\n            }\n        }\n        blocks(m);\n        let i, bytesLeft = m.length % 64, bitLenHi = m.length / 0x20000000 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p = m.slice(m.length - bytesLeft, m.length);\n        p.push(0x80);\n        for(i = bytesLeft + 1; i < numZeros; i++){\n            p.push(0);\n        }\n        p.push(bitLenHi >>> 24 & 0xff);\n        p.push(bitLenHi >>> 16 & 0xff);\n        p.push(bitLenHi >>> 8 & 0xff);\n        p.push(bitLenHi >>> 0 & 0xff);\n        p.push(bitLenLo >>> 24 & 0xff);\n        p.push(bitLenLo >>> 16 & 0xff);\n        p.push(bitLenLo >>> 8 & 0xff);\n        p.push(bitLenLo >>> 0 & 0xff);\n        blocks(p);\n        return [\n            h0 >>> 24 & 0xff,\n            h0 >>> 16 & 0xff,\n            h0 >>> 8 & 0xff,\n            h0 >>> 0 & 0xff,\n            h1 >>> 24 & 0xff,\n            h1 >>> 16 & 0xff,\n            h1 >>> 8 & 0xff,\n            h1 >>> 0 & 0xff,\n            h2 >>> 24 & 0xff,\n            h2 >>> 16 & 0xff,\n            h2 >>> 8 & 0xff,\n            h2 >>> 0 & 0xff,\n            h3 >>> 24 & 0xff,\n            h3 >>> 16 & 0xff,\n            h3 >>> 8 & 0xff,\n            h3 >>> 0 & 0xff,\n            h4 >>> 24 & 0xff,\n            h4 >>> 16 & 0xff,\n            h4 >>> 8 & 0xff,\n            h4 >>> 0 & 0xff,\n            h5 >>> 24 & 0xff,\n            h5 >>> 16 & 0xff,\n            h5 >>> 8 & 0xff,\n            h5 >>> 0 & 0xff,\n            h6 >>> 24 & 0xff,\n            h6 >>> 16 & 0xff,\n            h6 >>> 8 & 0xff,\n            h6 >>> 0 & 0xff,\n            h7 >>> 24 & 0xff,\n            h7 >>> 16 & 0xff,\n            h7 >>> 8 & 0xff,\n            h7 >>> 0 & 0xff\n        ];\n    }\n    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n        // compress password if it's longer than hash block length\n        password = password.length <= 64 ? password : SHA256(password);\n        const innerLen = 64 + salt.length + 4;\n        const inner = new Array(innerLen);\n        const outerKey = new Array(64);\n        let i;\n        let dk = [];\n        // inner = (password ^ ipad) || salt || counter\n        for(i = 0; i < 64; i++){\n            inner[i] = 0x36;\n        }\n        for(i = 0; i < password.length; i++){\n            inner[i] ^= password[i];\n        }\n        for(i = 0; i < salt.length; i++){\n            inner[64 + i] = salt[i];\n        }\n        for(i = innerLen - 4; i < innerLen; i++){\n            inner[i] = 0;\n        }\n        // outerKey = password ^ opad\n        for(i = 0; i < 64; i++)outerKey[i] = 0x5c;\n        for(i = 0; i < password.length; i++)outerKey[i] ^= password[i];\n        // increments counter inside inner\n        function incrementCounter() {\n            for(let i = innerLen - 1; i >= innerLen - 4; i--){\n                inner[i]++;\n                if (inner[i] <= 0xff) return;\n                inner[i] = 0;\n            }\n        }\n        // output blocks = SHA256(outerKey || SHA256(inner)) ...\n        while(dkLen >= 32){\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n            dkLen -= 32;\n        }\n        if (dkLen > 0) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n        }\n        return dk;\n    }\n    // The following is an adaptation of scryptsy\n    // See: https://www.npmjs.com/package/scryptsy\n    function blockmix_salsa8(BY, Yi, r, x, _X) {\n        let i;\n        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n        for(i = 0; i < 2 * r; i++){\n            blockxor(BY, i * 16, _X, 16);\n            salsa20_8(_X, x);\n            arraycopy(_X, 0, BY, Yi + i * 16, 16);\n        }\n        for(i = 0; i < r; i++){\n            arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);\n        }\n        for(i = 0; i < r; i++){\n            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n        }\n    }\n    function R(a, b) {\n        return a << b | a >>> 32 - b;\n    }\n    function salsa20_8(B, x) {\n        arraycopy(B, 0, x, 0, 16);\n        for(let i = 8; i > 0; i -= 2){\n            x[4] ^= R(x[0] + x[12], 7);\n            x[8] ^= R(x[4] + x[0], 9);\n            x[12] ^= R(x[8] + x[4], 13);\n            x[0] ^= R(x[12] + x[8], 18);\n            x[9] ^= R(x[5] + x[1], 7);\n            x[13] ^= R(x[9] + x[5], 9);\n            x[1] ^= R(x[13] + x[9], 13);\n            x[5] ^= R(x[1] + x[13], 18);\n            x[14] ^= R(x[10] + x[6], 7);\n            x[2] ^= R(x[14] + x[10], 9);\n            x[6] ^= R(x[2] + x[14], 13);\n            x[10] ^= R(x[6] + x[2], 18);\n            x[3] ^= R(x[15] + x[11], 7);\n            x[7] ^= R(x[3] + x[15], 9);\n            x[11] ^= R(x[7] + x[3], 13);\n            x[15] ^= R(x[11] + x[7], 18);\n            x[1] ^= R(x[0] + x[3], 7);\n            x[2] ^= R(x[1] + x[0], 9);\n            x[3] ^= R(x[2] + x[1], 13);\n            x[0] ^= R(x[3] + x[2], 18);\n            x[6] ^= R(x[5] + x[4], 7);\n            x[7] ^= R(x[6] + x[5], 9);\n            x[4] ^= R(x[7] + x[6], 13);\n            x[5] ^= R(x[4] + x[7], 18);\n            x[11] ^= R(x[10] + x[9], 7);\n            x[8] ^= R(x[11] + x[10], 9);\n            x[9] ^= R(x[8] + x[11], 13);\n            x[10] ^= R(x[9] + x[8], 18);\n            x[12] ^= R(x[15] + x[14], 7);\n            x[13] ^= R(x[12] + x[15], 9);\n            x[14] ^= R(x[13] + x[12], 13);\n            x[15] ^= R(x[14] + x[13], 18);\n        }\n        for(let i = 0; i < 16; ++i){\n            B[i] += x[i];\n        }\n    }\n    // naive approach... going back to loop unrolling may yield additional performance\n    function blockxor(S, Si, D, len) {\n        for(let i = 0; i < len; i++){\n            D[i] ^= S[Si + i];\n        }\n    }\n    function arraycopy(src, srcPos, dest, destPos, length) {\n        while(length--){\n            dest[destPos++] = src[srcPos++];\n        }\n    }\n    function checkBufferish(o) {\n        if (!o || typeof o.length !== \"number\") {\n            return false;\n        }\n        for(let i = 0; i < o.length; i++){\n            const v = o[i];\n            if (typeof v !== \"number\" || v % 1 || v < 0 || v >= 256) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function ensureInteger(value, name) {\n        if (typeof value !== \"number\" || value % 1) {\n            throw new Error(\"invalid \" + name);\n        }\n        return value;\n    }\n    // N = Cpu cost, r = Memory cost, p = parallelization cost\n    // callback(error, progress, key)\n    function _scrypt(password, salt, N, r, p, dkLen, callback) {\n        N = ensureInteger(N, \"N\");\n        r = ensureInteger(r, \"r\");\n        p = ensureInteger(p, \"p\");\n        dkLen = ensureInteger(dkLen, \"dkLen\");\n        if (N === 0 || (N & N - 1) !== 0) {\n            throw new Error(\"N must be power of 2\");\n        }\n        if (N > MAX_VALUE / 128 / r) {\n            throw new Error(\"N too large\");\n        }\n        if (r > MAX_VALUE / 128 / p) {\n            throw new Error(\"r too large\");\n        }\n        if (!checkBufferish(password)) {\n            throw new Error(\"password must be an array or buffer\");\n        }\n        password = Array.prototype.slice.call(password);\n        if (!checkBufferish(salt)) {\n            throw new Error(\"salt must be an array or buffer\");\n        }\n        salt = Array.prototype.slice.call(salt);\n        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n        const B = new Uint32Array(p * 32 * r);\n        for(let i = 0; i < B.length; i++){\n            const j = i * 4;\n            B[i] = (b[j + 3] & 0xff) << 24 | (b[j + 2] & 0xff) << 16 | (b[j + 1] & 0xff) << 8 | (b[j + 0] & 0xff) << 0;\n        }\n        const XY = new Uint32Array(64 * r);\n        const V = new Uint32Array(32 * r * N);\n        const Yi = 32 * r;\n        // scratch space\n        const x = new Uint32Array(16); // salsa20_8\n        const _X = new Uint32Array(16); // blockmix_salsa8\n        const totalOps = p * N * 2;\n        let currentOp = 0;\n        let lastPercent10 = null;\n        // Set this to true to abandon the scrypt on the next step\n        let stop = false;\n        // State information\n        let state = 0;\n        let i0 = 0, i1;\n        let Bi;\n        // How many blockmix_salsa8 can we do per step?\n        const limit = callback ? parseInt(1000 / r) : 0xffffffff;\n        // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n        const nextTick = typeof setImmediate !== \"undefined\" ? setImmediate : setTimeout;\n        // This is really all I changed; making scryptsy a state machine so we occasionally\n        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n        const incrementalSMix = function() {\n            if (stop) {\n                return callback(new Error(\"cancelled\"), currentOp / totalOps);\n            }\n            let steps;\n            switch(state){\n                case 0:\n                    // for (var i = 0; i < p; i++)...\n                    Bi = i0 * 32 * r;\n                    arraycopy(B, Bi, XY, 0, Yi); // ROMix - 1\n                    state = 1; // Move to ROMix 2\n                    i1 = 0;\n                // Fall through\n                case 1:\n                    // Run up to 1000 steps of the first inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) {\n                        steps = limit;\n                    }\n                    for(let i = 0; i < steps; i++){\n                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi) // ROMix - 3\n                        ;\n                        blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 4\n                    }\n                    // for (var i = 0; i < N; i++)\n                    i1 += steps;\n                    currentOp += steps;\n                    if (callback) {\n                        // Call the callback with the progress (optionally stopping us)\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) {\n                                break;\n                            }\n                            lastPercent10 = percent10;\n                        }\n                    }\n                    if (i1 < N) {\n                        break;\n                    }\n                    i1 = 0; // Move to ROMix 6\n                    state = 2;\n                // Fall through\n                case 2:\n                    // Run up to 1000 steps of the second inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) {\n                        steps = limit;\n                    }\n                    for(let i = 0; i < steps; i++){\n                        const offset = (2 * r - 1) * 16; // ROMix - 7\n                        const j = XY[offset] & N - 1;\n                        blockxor(V, j * Yi, XY, Yi); // ROMix - 8 (inner)\n                        blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 9 (outer)\n                    }\n                    // for (var i = 0; i < N; i++)...\n                    i1 += steps;\n                    currentOp += steps;\n                    // Call the callback with the progress (optionally stopping us)\n                    if (callback) {\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) {\n                                break;\n                            }\n                            lastPercent10 = percent10;\n                        }\n                    }\n                    if (i1 < N) {\n                        break;\n                    }\n                    arraycopy(XY, 0, B, Bi, Yi); // ROMix - 10\n                    // for (var i = 0; i < p; i++)...\n                    i0++;\n                    if (i0 < p) {\n                        state = 0;\n                        break;\n                    }\n                    b = [];\n                    for(let i = 0; i < B.length; i++){\n                        b.push(B[i] >> 0 & 0xff);\n                        b.push(B[i] >> 8 & 0xff);\n                        b.push(B[i] >> 16 & 0xff);\n                        b.push(B[i] >> 24 & 0xff);\n                    }\n                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);\n                    // Send the result to the callback\n                    if (callback) {\n                        callback(null, 1.0, derivedKey);\n                    }\n                    // Done; don't break (which would reschedule)\n                    return derivedKey;\n            }\n            // Schedule the next steps\n            if (callback) {\n                nextTick(incrementalSMix);\n            }\n        };\n        // Run the smix state machine until completion\n        if (!callback) {\n            while(true){\n                const derivedKey = incrementalSMix();\n                if (derivedKey != undefined) {\n                    return derivedKey;\n                }\n            }\n        }\n        // Bootstrap the async incremental smix\n        incrementalSMix();\n    }\n    const lib = {\n        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {\n            return new Promise(function(resolve, reject) {\n                let lastProgress = 0;\n                if (progressCallback) {\n                    progressCallback(0);\n                }\n                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {\n                    if (error) {\n                        reject(error);\n                    } else if (key) {\n                        if (progressCallback && lastProgress !== 1) {\n                            progressCallback(1);\n                        }\n                        resolve(new Uint8Array(key));\n                    } else if (progressCallback && progress !== lastProgress) {\n                        lastProgress = progress;\n                        return progressCallback(progress);\n                    }\n                });\n            });\n        },\n        syncScrypt: function(password, salt, N, r, p, dkLen) {\n            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n        }\n    };\n    // node.js\n    if (true) {\n        module.exports = lib;\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else {}\n})(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/scrypt-js@3.0.1/node_modules/scrypt-js/scrypt.js\n");

/***/ })

};
;