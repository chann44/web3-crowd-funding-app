"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@thirdweb-dev+merkletree@0.2.0";
exports.ids = ["vendor-chunks/@thirdweb-dev+merkletree@0.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@thirdweb-dev+merkletree@0.2.0/node_modules/@thirdweb-dev/merkletree/dist/thirdweb-dev-merkletree.esm.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+merkletree@0.2.0/node_modules/@thirdweb-dev/merkletree/dist/thirdweb-dev-merkletree.esm.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MerkleTree: () => (/* binding */ MerkleTree)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var buffer_reverse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer-reverse */ \"(ssr)/./node_modules/.pnpm/buffer-reverse@1.0.1/node_modules/buffer-reverse/index.js\");\n/* harmony import */ var buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer_reverse__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var treeify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! treeify */ \"(ssr)/./node_modules/.pnpm/treeify@1.1.0/node_modules/treeify/treeify.js\");\n/* harmony import */ var treeify__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(treeify__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// ADAPTED FROM https://github.com/merkletreejs/merkletreejs\nclass Base {\n    /**\n   * print\n   * @desc Prints out a visual representation of the merkle tree.\n   * @example\n   *```js\n   *tree.print()\n   *```\n   */ print() {\n        Base.print(this);\n    }\n    /**\n   * bufferIndexOf\n   * @desc Returns the first index of which given buffer is found in array.\n   * @param {Buffer[]} haystack - Array of buffers.\n   * @param {Buffer} needle - Buffer to find.\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.bufferIndexOf(haystack, needle)\n   *```\n   */ bufferIndexOf(array, element) {\n        let isSorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        if (isSorted) {\n            return this.binarySearch(array, element, buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare);\n        }\n        const eqChecker = (buffer1, buffer2)=>buffer1.equals(buffer2);\n        return this.linearSearch(array, element, eqChecker);\n    }\n    /**\n   * binarySearch\n   * @desc Returns the first index of which given item is found in array using binary search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} compareFunction\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = MerkleTree.binarySearch(array, element, Buffer.compare)\n   *```\n   */ static binarySearch(array, element, compareFunction) {\n        let start = 0;\n        let end = array.length - 1;\n        // Iterate while start not meets end\n        while(start <= end){\n            // Find the mid index\n            const mid = Math.floor((start + end) / 2);\n            // Check if the mid value is greater than, equal to, or less than search element.\n            const ordering = compareFunction(array[mid], element);\n            // If element is present at mid, start iterating for searching first appearance.\n            if (ordering === 0) {\n                // Linear reverse iteration until the first matching item index is found.\n                for(let i = mid - 1; i >= 0; i--){\n                    if (compareFunction(array[i], element) === 0) {\n                        continue;\n                    }\n                    return i + 1;\n                }\n                return 0;\n            } else if (ordering < 0) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n   * binarySearch\n   * @desc Returns the first index of which given item is found in array using binary search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} compareFunction\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.binarySearch(array, element, Buffer.compare)\n   *```\n   */ binarySearch(array, element, compareFunction) {\n        return Base.binarySearch(array, element, compareFunction);\n    }\n    /**\n   * linearSearch\n   * @desc Returns the first index of which given item is found in array using linear search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} eqChecker\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = MerkleTree.linearSearch(array, element, (a, b) => a === b)\n   *```\n   */ static linearSearch(array, element, eqChecker) {\n        for(let i = 0; i < array.length; i++){\n            if (eqChecker(array[i], element)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n   * linearSearch\n   * @desc Returns the first index of which given item is found in array using linear search.\n   * @param {Buffer[]} array - Array of items.\n   * @param {Buffer} element - Item to find.\n   * @param {Function} eqChecker\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.linearSearch(array, element, (a, b) => a === b)\n   *```\n   */ linearSearch(array, element, eqChecker) {\n        return Base.linearSearch(array, element, eqChecker);\n    }\n    /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer|ArrayBuffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = MerkleTree.bufferify('0x1234')\n   *```\n   */ static bufferify(value) {\n        if (!buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(value)) {\n            // crypto-js support\n            if (typeof value === \"object\" && value.words) {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value.toString(convertWordsToBuffer), \"hex\");\n            } else if (Base.isHexString(value)) {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value.replace(/^0x/, \"\"), \"hex\");\n            } else if (typeof value === \"string\") {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value);\n            } else if (typeof value === \"bigint\") {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value.toString(16), \"hex\");\n            } else if (value instanceof Uint8Array) {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value.buffer);\n            } else if (typeof value === \"number\") {\n                let s = value.toString();\n                if (s.length % 2) {\n                    s = `0${s}`;\n                }\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(s, \"hex\");\n            } else if (ArrayBuffer.isView(value)) {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n            }\n        }\n        return value;\n    }\n    bigNumberify(value) {\n        return Base.bigNumberify(value);\n    }\n    static bigNumberify(value) {\n        if (typeof value === \"bigint\") {\n            return value;\n        }\n        if (typeof value === \"string\") {\n            if (value.startsWith(\"0x\") && Base.isHexString(value)) {\n                return BigInt(\"0x\" + value.replace(\"0x\", \"\").toString());\n            }\n            return BigInt(value);\n        }\n        if (buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(value)) {\n            return BigInt(\"0x\" + value.toString(\"hex\"));\n        }\n        if (value instanceof Uint8Array) {\n            return uint8ArrayToBigInt(value);\n        }\n        if (typeof value === \"number\") {\n            return BigInt(value);\n        }\n        throw new Error(\"cannot bigNumberify\");\n    }\n    /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */ static isHexString(v) {\n        return typeof v === \"string\" && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n    }\n    /**\n   * print\n   * @desc Prints out a visual representation of the given merkle tree.\n   * @param {Object} tree - Merkle tree instance.\n   * @return {String}\n   * @example\n   *```js\n   *MerkleTree.print(tree)\n   *```\n   */ static print(tree) {\n        console.log(tree.toString());\n    }\n    /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = tree.bufferToHex(Buffer.from('A'))\n   *```\n   */ bufferToHex(value) {\n        let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return Base.bufferToHex(value, withPrefix);\n    }\n    /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n   *```\n   */ static bufferToHex(value) {\n        let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return `${withPrefix ? \"0x\" : \"\"}${(value || buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(0)).toString(\"hex\")}`;\n    }\n    /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = tree.bufferify('0x1234')\n   *```\n   */ bufferify(value) {\n        return Base.bufferify(value);\n    }\n    /**\n   * bufferifyFn\n   * @desc Returns a function that will bufferify the return value.\n   * @param {Function}\n   * @return {Function}\n   *\n   * @example\n   * ```js\n   *const fn = tree.bufferifyFn((value) => sha256(value))\n   *```\n   */ bufferifyFn(f) {\n        return (value)=>{\n            const v = f(value);\n            if (buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(v)) {\n                return v;\n            }\n            if (this.isHexString(v)) {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v.replace(\"0x\", \"\"), \"hex\");\n            }\n            if (typeof v === \"string\") {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v);\n            }\n            if (typeof v === \"bigint\") {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value.toString(16), \"hex\");\n            }\n            if (ArrayBuffer.isView(v)) {\n                return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n            }\n            // crypto-js support\n            const arrayBuffer = hexStringToArrayBuffer(value.toString(\"hex\"));\n            // Assuming f now works with ArrayBuffers\n            const processedBuffer = f(arrayBuffer);\n            const hexResult = arrayBufferToHexString(processedBuffer);\n            return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hexResult, \"hex\");\n        };\n    }\n    /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */ isHexString(value) {\n        return Base.isHexString(value);\n    }\n    /**\n   * log2\n   * @desc Returns the log2 of number.\n   * @param {Number} value\n   * @return {Number}\n   */ log2(n) {\n        return n === 1 ? 0 : 1 + this.log2(n / 2 | 0);\n    }\n    /**\n   * zip\n   * @desc Returns true if value is a hex string.\n   * @param {String[]|Number[]|Buffer[]} a - first array\n   * @param {String[]|Number[]|Buffer[]} b -  second array\n   * @return {String[][]|Number[][]|Buffer[][]}\n   *\n   * @example\n   * ```js\n   *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n   *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n   *```\n   */ zip(a, b) {\n        return a.map((e, i)=>[\n                e,\n                b[i]\n            ]);\n    }\n    static hexZeroPad(hexStr, length) {\n        return \"0x\" + hexStr.replace(\"0x\", \"\").padStart(length, \"0\");\n    }\n}\nvar Base$1 = Base;\n// UTILS\n// replaces CryptoJS.enc.Hex\nfunction convertWordsToBuffer(value) {\n    const wordArray = value.words;\n    const arrayBuffer = new ArrayBuffer(wordArray.length * 4); // 4 bytes per word\n    const uint8View = new Uint8Array(arrayBuffer);\n    for(let i = 0; i < wordArray.length; i++){\n        uint8View[i * 4] = wordArray[i] >> 24 & 0xff;\n        uint8View[i * 4 + 1] = wordArray[i] >> 16 & 0xff;\n        uint8View[i * 4 + 2] = wordArray[i] >> 8 & 0xff;\n        uint8View[i * 4 + 3] = wordArray[i] & 0xff;\n    }\n    return arrayBuffer;\n}\nfunction hexStringToArrayBuffer(hexString) {\n    const buffer = new Uint8Array(hexString.length / 2);\n    for(let i = 0; i < hexString.length; i += 2){\n        buffer[i / 2] = parseInt(hexString.substring(i, i + 2), 16);\n    }\n    return buffer.buffer;\n}\nfunction arrayBufferToHexString(arrayBuffer) {\n    const uint8View = new Uint8Array(arrayBuffer);\n    return Array.from(uint8View).map((byte)=>byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction uint8ArrayToBigInt(u8a) {\n    const hex = Array.from(u8a).map((byte)=>byte.toString(16).padStart(2, \"0\")).join(\"\");\n    return BigInt(`0x${hex}`);\n}\n// ADAPTED FROM https://github.com/merkletreejs/merkletreejs\n// TODO: Clean up and DRY up code\n// Disclaimer: The multiproof code is unaudited and may possibly contain serious issues. It's in a hacky state as is and needs to be rewritten.\n/**\n * Class reprensenting a Merkle Tree\n * @namespace MerkleTree\n */ class MerkleTree extends Base$1 {\n    /**\n   * @desc Constructs a Merkle Tree.\n   * All nodes and leaves are stored as Buffers.\n   * Lonely leaf nodes are promoted to the next level up without being hashed again.\n   * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.\n   * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes\n   * @param {Object} options - Additional options\n   * @example\n   *```js\n   *const MerkleTree = require('merkletreejs')\n   *const crypto = require('crypto')\n   *\n   *function sha256(data) {\n   *  // returns Buffer\n   *  return crypto.createHash('sha256').update(data).digest()\n   *}\n   *\n   *const leaves = ['a', 'b', 'c'].map(value => keccak(value))\n   *\n   *const tree = new MerkleTree(leaves, sha256)\n   *```\n   */ constructor(leaves, hashFn){\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        super();\n        this.duplicateOdd = false;\n        this.concatenator = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat;\n        this.hashLeaves = false;\n        this.isBitcoinTree = false;\n        this.leaves = [];\n        this.layers = [];\n        this.sortLeaves = false;\n        this.sortPairs = false;\n        this.sort = false;\n        this.fillDefaultHash = null;\n        this.complete = false;\n        if (options.complete) {\n            if (options.isBitcoinTree) {\n                throw new Error('option \"complete\" is incompatible with \"isBitcoinTree\"');\n            }\n            if (options.duplicateOdd) {\n                throw new Error('option \"complete\" is incompatible with \"duplicateOdd\"');\n            }\n        }\n        this.isBitcoinTree = !!options.isBitcoinTree;\n        this.hashLeaves = !!options.hashLeaves;\n        this.sortLeaves = !!options.sortLeaves;\n        this.sortPairs = !!options.sortPairs;\n        this.complete = !!options.complete;\n        if (options.fillDefaultHash) {\n            if (typeof options.fillDefaultHash === \"function\") {\n                this.fillDefaultHash = options.fillDefaultHash;\n            } else if (buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === \"string\") {\n                this.fillDefaultHash = (idx, hashFn)=>options.fillDefaultHash;\n            } else {\n                throw new Error('method \"fillDefaultHash\" must be a function, Buffer, or string');\n            }\n        }\n        this.sort = !!options.sort;\n        if (this.sort) {\n            this.sortLeaves = true;\n            this.sortPairs = true;\n        }\n        this.duplicateOdd = !!options.duplicateOdd;\n        if (options.concatenator) {\n            this.concatenator = options.concatenator;\n        }\n        this.hashFn = this.bufferifyFn(hashFn);\n        this.processLeaves(leaves);\n    }\n    getOptions() {\n        return {\n            complete: this.complete,\n            isBitcoinTree: this.isBitcoinTree,\n            hashLeaves: this.hashLeaves,\n            sortLeaves: this.sortLeaves,\n            sortPairs: this.sortPairs,\n            sort: this.sort,\n            fillDefaultHash: this.fillDefaultHash?.toString() ?? null,\n            duplicateOdd: this.duplicateOdd\n        };\n    }\n    processLeaves(leaves) {\n        if (this.hashLeaves) {\n            leaves = leaves.map(this.hashFn);\n        }\n        this.leaves = leaves.map(this.bufferify);\n        if (this.sortLeaves) {\n            this.leaves = this.leaves.sort(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare);\n        }\n        if (this.fillDefaultHash) {\n            for(let i = this.leaves.length; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++){\n                this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));\n            }\n        }\n        this.createHashes(this.leaves);\n    }\n    createHashes(nodes) {\n        this.layers = [\n            nodes\n        ];\n        while(nodes.length > 1){\n            const layerIndex = this.layers.length;\n            this.layers.push([]);\n            const layerLimit = this.complete && layerIndex === 1 && !Number.isInteger(Math.log2(nodes.length)) ? 2 * nodes.length - 2 ** Math.ceil(Math.log2(nodes.length)) : nodes.length;\n            for(let i = 0; i < nodes.length; i += 2){\n                if (i >= layerLimit) {\n                    this.layers[layerIndex].push(...nodes.slice(layerLimit));\n                    break;\n                } else if (i + 1 === nodes.length) {\n                    if (nodes.length % 2 === 1) {\n                        const data = nodes[nodes.length - 1];\n                        let hash = data;\n                        // is bitcoin tree\n                        if (this.isBitcoinTree) {\n                            // Bitcoin method of duplicating the odd ending nodes\n                            hash = this.hashFn(this.concatenator([\n                                buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(data),\n                                buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(data)\n                            ]));\n                            hash = buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(this.hashFn(hash));\n                            this.layers[layerIndex].push(hash);\n                            continue;\n                        } else {\n                            if (this.duplicateOdd) ;\n                            else {\n                                // push copy of hash and continue iteration\n                                this.layers[layerIndex].push(nodes[i]);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                const left = nodes[i];\n                const right = i + 1 === nodes.length ? left : nodes[i + 1];\n                let combined = null;\n                if (this.isBitcoinTree) {\n                    combined = [\n                        buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(left),\n                        buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(right)\n                    ];\n                } else {\n                    combined = [\n                        left,\n                        right\n                    ];\n                }\n                if (this.sortPairs) {\n                    combined.sort(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare);\n                }\n                let hash = this.hashFn(this.concatenator(combined));\n                // double hash if bitcoin tree\n                if (this.isBitcoinTree) {\n                    hash = buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(this.hashFn(hash));\n                }\n                this.layers[layerIndex].push(hash);\n            }\n            nodes = this.layers[layerIndex];\n        }\n    }\n    /**\n   * addLeaf\n   * @desc Adds a leaf to the tree and re-calculates layers.\n   * @param {String|Buffer} - Leaf\n   * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.\n   * @example\n   *```js\n   *tree.addLeaf(newLeaf)\n   *```\n   */ addLeaf(leaf) {\n        let shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (shouldHash) {\n            leaf = this.hashFn(leaf);\n        }\n        this.processLeaves(this.leaves.concat(leaf));\n    }\n    /**\n   * addLeaves\n   * @desc Adds multiple leaves to the tree and re-calculates layers.\n   * @param {String[]|Buffer[]} - Array of leaves\n   * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.\n   * @example\n   *```js\n   *tree.addLeaves(newLeaves)\n   *```\n   */ addLeaves(leaves) {\n        let shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (shouldHash) {\n            leaves = leaves.map(this.hashFn);\n        }\n        this.processLeaves(this.leaves.concat(leaves));\n    }\n    /**\n   * getLeaves\n   * @desc Returns array of leaves of Merkle Tree.\n   * @return {Buffer[]}\n   * @example\n   *```js\n   *const leaves = tree.getLeaves()\n   *```\n   */ getLeaves(values) {\n        if (Array.isArray(values)) {\n            if (this.hashLeaves) {\n                values = values.map(this.hashFn);\n                if (this.sortLeaves) {\n                    values = values.sort(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare);\n                }\n            }\n            return this.leaves.filter(// @ts-expect-error - issue from original code\n            (leaf)=>this.bufferIndexOf(values, leaf, this.sortLeaves) !== -1);\n        }\n        return this.leaves;\n    }\n    /**\n   * getLeaf\n   * @desc Returns the leaf at the given index.\n   * @param {Number} - Index number\n   * @return {Buffer}\n   * @example\n   *```js\n   *const leaf = tree.getLeaf(1)\n   *```\n   */ getLeaf(index) {\n        if (index < 0 || index > this.leaves.length - 1) {\n            return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n        }\n        return this.leaves[index];\n    }\n    /**\n   * getLeafIndex\n   * @desc Returns the index of the given leaf, or -1 if the leaf is not found.\n   * @param {String|Buffer} - Target leaf\n   * @return {number}\n   * @example\n   *```js\n   *const leaf = Buffer.from('abc')\n   *const index = tree.getLeafIndex(leaf)\n   *```\n   */ getLeafIndex(target) {\n        target = this.bufferify(target);\n        const leaves = this.getLeaves();\n        for(let i = 0; i < leaves.length; i++){\n            const leaf = leaves[i];\n            if (leaf.equals(target)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n   * getLeafCount\n   * @desc Returns the total number of leaves.\n   * @return {number}\n   * @example\n   *```js\n   *const count = tree.getLeafCount()\n   *```\n   */ getLeafCount() {\n        return this.leaves.length;\n    }\n    /**\n   * getHexLeaves\n   * @desc Returns array of leaves of Merkle Tree as hex strings.\n   * @return {String[]}\n   * @example\n   *```js\n   *const leaves = tree.getHexLeaves()\n   *```\n   */ getHexLeaves() {\n        return this.leaves.map((leaf)=>this.bufferToHex(leaf));\n    }\n    /**\n   * marshalLeaves\n   * @desc Returns array of leaves of Merkle Tree as a JSON string.\n   * @param {String[]|Buffer[]} - Merkle tree leaves\n   * @return {String} - List of leaves as JSON string\n   * @example\n   *```js\n   *const jsonStr = MerkleTree.marshalLeaves(leaves)\n   *```\n   */ static marshalLeaves(leaves) {\n        return JSON.stringify(leaves.map((leaf)=>MerkleTree.bufferToHex(leaf)), null, 2);\n    }\n    /**\n   * unmarshalLeaves\n   * @desc Returns array of leaves of Merkle Tree as a Buffers.\n   * @param {String|Object} - JSON stringified leaves\n   * @return {Buffer[]} - Unmarshalled list of leaves\n   * @example\n   *```js\n   *const leaves = MerkleTree.unmarshalLeaves(jsonStr)\n   *```\n   */ static unmarshalLeaves(jsonStr) {\n        let parsed = null;\n        if (typeof jsonStr === \"string\") {\n            parsed = JSON.parse(jsonStr);\n        } else if (jsonStr instanceof Object) {\n            parsed = jsonStr;\n        } else {\n            throw new Error(\"Expected type of string or object\");\n        }\n        if (!parsed) {\n            return [];\n        }\n        if (!Array.isArray(parsed)) {\n            throw new Error(\"Expected JSON string to be array\");\n        }\n        return parsed.map(MerkleTree.bufferify);\n    }\n    /**\n   * getLayers\n   * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.\n   * @return {Buffer[][]}\n   * @example\n   *```js\n   *const layers = tree.getLayers()\n   *```\n   */ getLayers() {\n        return this.layers;\n    }\n    /**\n   * getHexLayers\n   * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.\n   * @return {String[][]}\n   * @example\n   *```js\n   *const layers = tree.getHexLayers()\n   *```\n   */ getHexLayers() {\n        return this.layers.reduce((acc, item)=>{\n            if (Array.isArray(item)) {\n                acc.push(item.map((layer)=>this.bufferToHex(layer)));\n            } else {\n                acc.push(item);\n            }\n            return acc;\n        }, []);\n    }\n    /**\n   * getLayersFlat\n   * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.\n   * @return {Buffer[]}\n   * @example\n   *```js\n   *const layers = tree.getLayersFlat()\n   *```\n   */ getLayersFlat() {\n        const layers = this.layers.reduce((acc, item)=>{\n            if (Array.isArray(item)) {\n                acc.unshift(...item);\n            } else {\n                acc.unshift(item);\n            }\n            return acc;\n        }, []);\n        layers.unshift(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([\n            0\n        ]));\n        return layers;\n    }\n    /**\n   * getHexLayersFlat\n   * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.\n   * @return {String[]}\n   * @example\n   *```js\n   *const layers = tree.getHexLayersFlat()\n   *```\n   */ getHexLayersFlat() {\n        return this.getLayersFlat().map((layer)=>this.bufferToHex(layer));\n    }\n    /**\n   * getLayerCount\n   * @desc Returns the total number of layers.\n   * @return {number}\n   * @example\n   *```js\n   *const count = tree.getLayerCount()\n   *```\n   */ getLayerCount() {\n        return this.getLayers().length;\n    }\n    /**\n   * getRoot\n   * @desc Returns the Merkle root hash as a Buffer.\n   * @return {Buffer}\n   * @example\n   *```js\n   *const root = tree.getRoot()\n   *```\n   */ getRoot() {\n        if (this.layers.length === 0) {\n            return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n        }\n        return this.layers[this.layers.length - 1][0] || buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([]);\n    }\n    /**\n   * getHexRoot\n   * @desc Returns the Merkle root hash as a hex string.\n   * @return {String}\n   * @example\n   *```js\n   *const root = tree.getHexRoot()\n   *```\n   */ getHexRoot() {\n        return this.bufferToHex(this.getRoot());\n    }\n    /**\n   * getProof\n   * @desc Returns the proof for a target leaf.\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {Object[]} - Array of objects containing a position property of type string\n   * with values of 'left' or 'right' and a data property of type Buffer.\n   * @example\n   * ```js\n   *const proof = tree.getProof(leaves[2])\n   *```\n   *\n   * @example\n   *```js\n   *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n   *const tree = new MerkleTree(leaves, keccak)\n   *const proof = tree.getProof(leaves[2], 2)\n   *```\n   */ getProof(leaf, index) {\n        if (typeof leaf === \"undefined\") {\n            throw new Error(\"leaf is required\");\n        }\n        leaf = this.bufferify(leaf);\n        const proof = [];\n        if (!Number.isInteger(index)) {\n            index = -1;\n            for(let i = 0; i < this.leaves.length; i++){\n                if (buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare(leaf, this.leaves[i]) === 0) {\n                    index = i;\n                }\n            }\n        }\n        // @ts-expect-error - issue from original code\n        if (index <= -1) {\n            return [];\n        }\n        for(let i = 0; i < this.layers.length; i++){\n            const layer = this.layers[i];\n            // @ts-expect-error - issue from original code\n            const isRightNode = index % 2;\n            const pairIndex = isRightNode ? // @ts-expect-error - issue from original code\n            index - 1 : this.isBitcoinTree && index === layer.length - 1 && i < this.layers.length - 1 ? // Proof Generation for Bitcoin Trees\n            index : // Proof Generation for Non-Bitcoin Trees\n            // @ts-expect-error - issue from original code\n            index + 1;\n            if (pairIndex < layer.length) {\n                proof.push({\n                    position: isRightNode ? \"left\" : \"right\",\n                    data: layer[pairIndex]\n                });\n            }\n            // set index to parent index\n            // @ts-expect-error - issue from original code\n            index = index / 2 | 0;\n        }\n        // @ts-expect-error - issue from original code\n        return proof;\n    }\n    /**\n   * getHexProof\n   * @desc Returns the proof for a target leaf as hex strings.\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {String[]} - Proof array as hex strings.\n   * @example\n   * ```js\n   *const proof = tree.getHexProof(leaves[2])\n   *```\n   */ getHexProof(leaf, index) {\n        return this.getProof(leaf, index).map((item)=>this.bufferToHex(item.data));\n    }\n    /**\n   * getProofs\n   * @desc Returns the proofs for all leaves.\n   * @return {Object[]} - Array of objects containing a position property of type string\n   * with values of 'left' or 'right' and a data property of type Buffer for all leaves.\n   * @example\n   * ```js\n   *const proofs = tree.getProofs()\n   *```\n   *\n   * @example\n   *```js\n   *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n   *const tree = new MerkleTree(leaves, keccak)\n   *const proofs = tree.getProofs()\n   *```\n   */ getProofs() {\n        // @ts-expect-error - issue from original code\n        const proof = [];\n        // @ts-expect-error - issue from original code\n        const proofs = [];\n        // @ts-expect-error - issue from original code\n        this.getProofsDFS(this.layers.length - 1, 0, proof, proofs);\n        // @ts-expect-error - issue from original code\n        return proofs;\n    }\n    /**\n   * getProofsDFS\n   * @desc Get all proofs through single traverse\n   * @param {Number} currentLayer - Current layer index in traverse.\n   * @param {Number} index - Current tarvese node index in traverse.\n   * @param {Object[]} proof - Proof chain for single leaf.\n   * @param {Object[]} proofs - Proofs for all leaves\n   * @example\n   * ```js\n   *const layers = tree.getLayers()\n   *const index = 0;\n   *let proof = [];\n   *let proofs = [];\n   *const proof = tree.getProofsDFS(layers, index, proof, proofs)\n   *```\n   */ // @ts-expect-error - issue from original code\n    getProofsDFS(currentLayer, index, proof, proofs) {\n        const isRightNode = index % 2;\n        if (currentLayer === -1) {\n            if (!isRightNode) {\n                proofs.push([\n                    ...proof\n                ].reverse());\n            }\n            // @ts-expect-error - issue from original code\n            return;\n        }\n        if (index >= this.layers[currentLayer].length) {\n            // @ts-expect-error - issue from original code\n            return;\n        }\n        const layer = this.layers[currentLayer];\n        const pairIndex = isRightNode ? index - 1 : index + 1;\n        let pushed = false;\n        if (pairIndex < layer.length) {\n            pushed = true;\n            proof.push({\n                position: isRightNode ? \"left\" : \"right\",\n                data: layer[pairIndex]\n            });\n        }\n        const leftchildIndex = index * 2;\n        const rightchildIndex = index * 2 + 1;\n        this.getProofsDFS(currentLayer - 1, leftchildIndex, proof, proofs);\n        this.getProofsDFS(currentLayer - 1, rightchildIndex, proof, proofs);\n        if (pushed) {\n            proof.splice(proof.length - 1, 1);\n        }\n    }\n    /**\n   * getHexProofs\n   * @desc Returns the proofs for all leaves as hex strings.\n   * @return {String[]} - Proofs array as hex strings.\n   * @example\n   * ```js\n   *const proofs = tree.getHexProofs()\n   *```\n   */ getHexProofs() {\n        return this.getProofs().map((item)=>this.bufferToHex(item.data));\n    }\n    /**\n   * getPositionalHexProof\n   * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).\n   * @param {Buffer} leaf - Target leaf\n   * @param {Number} [index] - Target leaf index in leaves array.\n   * Use if there are leaves containing duplicate data in order to distinguish it.\n   * @return {(string | number)[][]} - Proof array as hex strings. position at index 0\n   * @example\n   * ```js\n   *const proof = tree.getPositionalHexProof(leaves[2])\n   *```\n   */ getPositionalHexProof(leaf, index) {\n        return this.getProof(leaf, index).map((item)=>{\n            return [\n                item.position === \"left\" ? 0 : 1,\n                this.bufferToHex(item.data)\n            ];\n        });\n    }\n    /**\n   * getProofIndices\n   * @desc Returns the proof indices for given tree indices.\n   * @param {Number[]} treeIndices - Tree indices\n   * @param {Number} depth - Tree depth; number of layers.\n   * @return {Number[]} - Proof indices\n   * @example\n   * ```js\n   *const proofIndices = tree.getProofIndices([2,5,6], 4)\n   *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]\n   *```\n   */ getProofIndices(treeIndices, depth) {\n        const leafCount = 2 ** depth;\n        let maximalIndices = new Set();\n        for (const index of treeIndices){\n            let x = leafCount + index;\n            while(x > 1){\n                maximalIndices.add(x ^ 1);\n                x = x / 2 | 0;\n            }\n        }\n        const a = treeIndices.map((index)=>leafCount + index);\n        const b = Array.from(maximalIndices).sort((x, y)=>x - y).reverse();\n        maximalIndices = a.concat(b);\n        const redundantIndices = new Set();\n        const proof = [];\n        for (let index of maximalIndices){\n            if (!redundantIndices.has(index)) {\n                proof.push(index);\n                while(index > 1){\n                    redundantIndices.add(index);\n                    if (!redundantIndices.has(index ^ 1)) {\n                        break;\n                    }\n                    index = index / 2 | 0;\n                }\n            }\n        }\n        return proof.filter((index)=>{\n            return !treeIndices.includes(index - leafCount);\n        });\n    }\n    getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {\n        const depth = Math.ceil(Math.log2(leavesCount));\n        const unevenLayers = [];\n        for(let index = 0; index < depth; index++){\n            const unevenLayer = leavesCount % 2 !== 0;\n            if (unevenLayer) {\n                unevenLayers.push({\n                    index,\n                    leavesCount\n                });\n            }\n            leavesCount = Math.ceil(leavesCount / 2);\n        }\n        const proofIndices = [];\n        let layerNodes = sortedLeafIndices;\n        for(let layerIndex = 0; layerIndex < depth; layerIndex++){\n            const siblingIndices = layerNodes.map((index)=>{\n                if (index % 2 === 0) {\n                    return index + 1;\n                }\n                return index - 1;\n            });\n            let proofNodeIndices = siblingIndices.filter((index)=>!layerNodes.includes(index));\n            const unevenLayer = unevenLayers.find((_ref)=>{\n                let { index } = _ref;\n                return index === layerIndex;\n            });\n            if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {\n                proofNodeIndices = proofNodeIndices.slice(0, -1);\n            }\n            proofIndices.push(proofNodeIndices);\n            layerNodes = [\n                ...new Set(layerNodes.map((index)=>{\n                    if (index % 2 === 0) {\n                        return index / 2;\n                    }\n                    if (index % 2 === 0) {\n                        return (index + 1) / 2;\n                    }\n                    return (index - 1) / 2;\n                }))\n            ];\n        }\n        return proofIndices;\n    }\n    /**\n   * getMultiProof\n   * @desc Returns the multiproof for given tree indices.\n   * @param {Number[]} indices - Tree indices.\n   * @return {Buffer[]} - Multiproofs\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getMultiProof(indices)\n   *```\n   */ getMultiProof(tree, indices) {\n        if (!this.complete) {\n            console.warn(\"Warning: For correct multiProofs it's strongly recommended to set complete: true\");\n        }\n        if (!indices) {\n            indices = tree;\n            tree = this.getLayersFlat();\n        }\n        const isUneven = this.isUnevenTree();\n        if (isUneven) {\n            // @ts-expect-error - issue from original code\n            if (indices.every(Number.isInteger)) {\n                return this.getMultiProofForUnevenTree(indices);\n            }\n        }\n        // @ts-expect-error - issue from original code\n        if (!indices.every(Number.isInteger)) {\n            let els = indices;\n            if (this.sortPairs) {\n                // @ts-expect-error - issue from original code\n                els = els.sort(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare);\n            }\n            // @ts-expect-error - issue from original code\n            let ids = els.map((el)=>this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b)=>a === b ? 0 : a > b ? 1 : -1);\n            if (!ids.every((idx)=>idx !== -1)) {\n                throw new Error(\"Element does not exist in Merkle tree\");\n            }\n            // @ts-expect-error - issue from original code\n            const hashes = [];\n            const proof = [];\n            let nextIds = [];\n            for(let i = 0; i < this.layers.length; i++){\n                const layer = this.layers[i];\n                for(let j = 0; j < ids.length; j++){\n                    const idx = ids[j];\n                    const pairElement = this.getPairNode(layer, idx);\n                    hashes.push(layer[idx]);\n                    if (pairElement) {\n                        proof.push(pairElement);\n                    }\n                    nextIds.push(idx / 2 | 0);\n                }\n                ids = nextIds.filter((value, j, self)=>self.indexOf(value) === j);\n                nextIds = [];\n            }\n            // @ts-expect-error - issue from original code\n            return proof.filter((value)=>!hashes.includes(value));\n        }\n        // @ts-expect-error - issue from original code\n        return this.getProofIndices(indices, Math.log2(tree.length / 2 | 0)).map(// @ts-expect-error - issue from original code\n        (index)=>tree[index]);\n    }\n    getMultiProofForUnevenTree(tree, indices) {\n        if (!indices) {\n            indices = tree;\n            tree = this.getLayers();\n        }\n        let proofHashes = [];\n        // @ts-expect-error - issue from original code\n        let currentLayerIndices = indices;\n        // @ts-expect-error - issue from original code\n        for (const treeLayer of tree){\n            const siblings = [];\n            for (const index of currentLayerIndices){\n                if (index % 2 === 0) {\n                    const idx = index + 1;\n                    if (!currentLayerIndices.includes(idx)) {\n                        if (treeLayer[idx]) {\n                            siblings.push(treeLayer[idx]);\n                            continue;\n                        }\n                    }\n                }\n                const idx = index - 1;\n                if (!currentLayerIndices.includes(idx)) {\n                    if (treeLayer[idx]) {\n                        siblings.push(treeLayer[idx]);\n                        continue;\n                    }\n                }\n            }\n            proofHashes = proofHashes.concat(siblings);\n            const uniqueIndices = new Set();\n            for (const index of currentLayerIndices){\n                if (index % 2 === 0) {\n                    uniqueIndices.add(index / 2);\n                    continue;\n                }\n                if (index % 2 === 0) {\n                    uniqueIndices.add((index + 1) / 2);\n                    continue;\n                }\n                uniqueIndices.add((index - 1) / 2);\n            }\n            currentLayerIndices = Array.from(uniqueIndices);\n        }\n        return proofHashes;\n    }\n    /**\n   * getHexMultiProof\n   * @desc Returns the multiproof for given tree indices as hex strings.\n   * @param {Number[]} indices - Tree indices.\n   * @return {String[]} - Multiproofs as hex strings.\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getHexMultiProof(indices)\n   *```\n   */ getHexMultiProof(tree, indices) {\n        return this.getMultiProof(tree, indices).map((x)=>this.bufferToHex(x));\n    }\n    /**\n   * getProofFlags\n   * @desc Returns list of booleans where proofs should be used instead of hashing.\n   * Proof flags are used in the Solidity multiproof verifiers.\n   * @param {Number[]|Buffer[]} leaves\n   * @param {Buffer[]} proofs\n   * @return {Boolean[]} - Boolean flags\n   * @example\n   * ```js\n   *const indices = [2, 5, 6]\n   *const proof = tree.getMultiProof(indices)\n   *const proofFlags = tree.getProofFlags(leaves, proof)\n   *```\n   */ getProofFlags(leaves, proofs) {\n        if (!Array.isArray(leaves) || leaves.length <= 0) {\n            throw new Error(\"Invalid Inputs!\");\n        }\n        let ids;\n        if (leaves.every(Number.isInteger)) {\n            ids = [\n                ...leaves\n            ].sort((a, b)=>a === b ? 0 : a > b ? 1 : -1); // Indices where passed\n        } else {\n            ids = leaves.map((el)=>this.bufferIndexOf(this.leaves, el, this.sortLeaves)).sort((a, b)=>a === b ? 0 : a > b ? 1 : -1);\n        }\n        if (!ids.every((idx)=>idx !== -1)) {\n            throw new Error(\"Element does not exist in Merkle tree\");\n        }\n        const _proofs = proofs.map((item)=>this.bufferify(item));\n        // @ts-expect-error - issue from original code\n        const tested = [];\n        // @ts-expect-error - issue from original code\n        const flags = [];\n        for(let index = 0; index < this.layers.length; index++){\n            const layer = this.layers[index];\n            ids = ids.reduce((ids_, idx)=>{\n                // @ts-expect-error - issue from original code\n                const skipped = tested.includes(layer[idx]);\n                if (!skipped) {\n                    const pairElement = this.getPairNode(layer, idx);\n                    const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);\n                    // eslint-disable-next-line no-unused-expressions\n                    pairElement && flags.push(!proofUsed);\n                    tested.push(layer[idx]);\n                    tested.push(pairElement);\n                }\n                // @ts-expect-error - issue from original code\n                ids_.push(idx / 2 | 0);\n                return ids_;\n            }, []);\n        }\n        // @ts-expect-error - issue from original code\n        return flags;\n    }\n    /**\n   * verify\n   * @desc Returns true if the proof path (array of hashes) can connect the target node\n   * to the Merkle root.\n   * @param {Object[]} proof - Array of proof objects that should connect\n   * target node to Merkle root.\n   * @param {Buffer} targetNode - Target node Buffer\n   * @param {Buffer} root - Merkle root Buffer\n   * @return {Boolean}\n   * @example\n   *```js\n   *const root = tree.getRoot()\n   *const proof = tree.getProof(leaves[2])\n   *const verified = tree.verify(proof, leaves[2], root)\n   *```\n   */ verify(proof, targetNode, root) {\n        let hash = this.bufferify(targetNode);\n        root = this.bufferify(root);\n        if (!Array.isArray(proof) || !targetNode || !root) {\n            return false;\n        }\n        for(let i = 0; i < proof.length; i++){\n            const node = proof[i];\n            let data = null;\n            let isLeftNode = null;\n            // case for when proof is hex values only\n            if (typeof node === \"string\") {\n                data = this.bufferify(node);\n                isLeftNode = true;\n            } else if (Array.isArray(node)) {\n                isLeftNode = node[0] === 0;\n                data = this.bufferify(node[1]);\n            } else if (buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(node)) {\n                data = node;\n                isLeftNode = true;\n            } else if (node instanceof Object) {\n                data = this.bufferify(node.data);\n                isLeftNode = node.position === \"left\";\n            } else {\n                throw new Error(\"Expected node to be of type string or object\");\n            }\n            const buffers = [];\n            if (this.isBitcoinTree) {\n                buffers.push(buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(hash));\n                buffers[isLeftNode ? \"unshift\" : \"push\"](buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(data));\n                hash = this.hashFn(this.concatenator(buffers));\n                hash = buffer_reverse__WEBPACK_IMPORTED_MODULE_1___default()(this.hashFn(hash));\n            } else {\n                if (this.sortPairs) {\n                    if (buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare(hash, data) === -1) {\n                        buffers.push(hash, data);\n                        hash = this.hashFn(this.concatenator(buffers));\n                    } else {\n                        buffers.push(data, hash);\n                        hash = this.hashFn(this.concatenator(buffers));\n                    }\n                } else {\n                    buffers.push(hash);\n                    buffers[isLeftNode ? \"unshift\" : \"push\"](data);\n                    hash = this.hashFn(this.concatenator(buffers));\n                }\n            }\n        }\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare(hash, root) === 0;\n    }\n    /**\n   * verifyMultiProof\n   * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.\n   * @param {Buffer} root - Merkle tree root\n   * @param {Number[]} proofIndices - Leave indices for proof\n   * @param {Buffer[]} proofLeaves - Leaf values at indices for proof\n   * @param {Number} leavesCount - Count of original leaves\n   * @param {Buffer[]} proof - Multiproofs given indices\n   * @return {Boolean}\n   * @example\n   *```js\n   *const leaves = tree.getLeaves()\n   *const root = tree.getRoot()\n   *const treeFlat = tree.getLayersFlat()\n   *const leavesCount = leaves.length\n   *const proofIndices = [2, 5, 6]\n   *const proofLeaves = proofIndices.map(i => leaves[i])\n   *const proof = tree.getMultiProof(treeFlat, indices)\n   *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)\n   *```\n   */ verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {\n        const isUneven = this.isUnevenTree();\n        if (isUneven) {\n            // TODO: combine these functions and simplify\n            return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);\n        }\n        const depth = Math.ceil(Math.log2(leavesCount));\n        root = this.bufferify(root);\n        proofLeaves = proofLeaves.map((leaf)=>this.bufferify(leaf));\n        proof = proof.map((leaf)=>this.bufferify(leaf));\n        const tree = {};\n        for (const [index, leaf] of this.zip(proofIndices, proofLeaves)){\n            // @ts-expect-error - issue from original code\n            tree[2 ** depth + index] = leaf;\n        }\n        for (const [index, proofitem] of this.zip(this.getProofIndices(proofIndices, depth), proof)){\n            // @ts-expect-error - issue from original code\n            tree[index] = proofitem;\n        }\n        let indexqueue = Object.keys(tree).map((value)=>Number(value)).sort((a, b)=>a - b);\n        indexqueue = indexqueue.slice(0, indexqueue.length - 1);\n        let i = 0;\n        while(i < indexqueue.length){\n            const index = indexqueue[i];\n            if (index >= 2 && ({}).hasOwnProperty.call(tree, index ^ 1)) {\n                // @ts-expect-error - issue from original code\n                let pair = [\n                    tree[index - index % 2],\n                    tree[index - index % 2 + 1]\n                ];\n                if (this.sortPairs) {\n                    pair = pair.sort(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare);\n                }\n                const hash = pair[1] ? this.hashFn(this.concatenator(pair)) : pair[0];\n                // @ts-expect-error - issue from original code\n                tree[index / 2 | 0] = hash;\n                indexqueue.push(index / 2 | 0);\n            }\n            i += 1;\n        }\n        return !proofIndices.length || // @ts-expect-error - issue from original code\n        ({}).hasOwnProperty.call(tree, 1) && tree[1].equals(root);\n    }\n    verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {\n        root = this.bufferify(root);\n        leaves = leaves.map(this.bufferify);\n        proofs = proofs.map(this.bufferify);\n        const leavesLen = leaves.length;\n        const totalHashes = proofFlag.length;\n        const hashes = [];\n        let leafPos = 0;\n        let hashPos = 0;\n        let proofPos = 0;\n        for(let i = 0; i < totalHashes; i++){\n            const bufA = proofFlag[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proofs[proofPos++];\n            const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            const buffers = [\n                bufA,\n                bufB\n            ].sort(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare);\n            hashes[i] = this.hashFn(this.concatenator(buffers));\n        }\n        return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.compare(hashes[totalHashes - 1], root) === 0;\n    }\n    verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {\n        root = this.bufferify(root);\n        leaves = leaves.map((leaf)=>this.bufferify(leaf));\n        proof = proof.map((leaf)=>this.bufferify(leaf));\n        const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);\n        return root.equals(computedRoot);\n    }\n    /**\n   * getDepth\n   * @desc Returns the tree depth (number of layers)\n   * @return {Number}\n   * @example\n   *```js\n   *const depth = tree.getDepth()\n   *```\n   */ getDepth() {\n        return this.getLayers().length - 1;\n    }\n    /**\n   * getLayersAsObject\n   * @desc Returns the layers as nested objects instead of an array.\n   * @example\n   *```js\n   *const layersObj = tree.getLayersAsObject()\n   *```\n   */ getLayersAsObject() {\n        const layers = this.getLayers().map((layer)=>layer.map((value)=>this.bufferToHex(value, false)));\n        const objs = [];\n        for(let i = 0; i < layers.length; i++){\n            const arr = [];\n            for(let j = 0; j < layers[i].length; j++){\n                const obj = {\n                    [layers[i][j]]: null\n                };\n                if (objs.length) {\n                    // @ts-expect-error - issue from original code\n                    obj[layers[i][j]] = {};\n                    const a = objs.shift();\n                    // @ts-expect-error - issue from original code\n                    const akey = Object.keys(a)[0];\n                    // @ts-expect-error - issue from original code\n                    obj[layers[i][j]][akey] = a[akey];\n                    if (objs.length) {\n                        const b = objs.shift();\n                        // @ts-expect-error - issue from original code\n                        const bkey = Object.keys(b)[0];\n                        // @ts-expect-error - issue from original code\n                        obj[layers[i][j]][bkey] = b[bkey];\n                    }\n                }\n                arr.push(obj);\n            }\n            objs.push(...arr);\n        }\n        return objs[0];\n    }\n    /**\n   * resetTree\n   * @desc Resets the tree by clearing the leaves and layers.\n   * @example\n   *```js\n   *tree.resetTree()\n   *```\n   */ resetTree() {\n        this.leaves = [];\n        this.layers = [];\n    }\n    /**\n   * getPairNode\n   * @desc Returns the node at the index for given layer.\n   * @param {Buffer[]} layer - Tree layer\n   * @param {Number} index - Index at layer.\n   * @return {Buffer} - Node\n   *\n   *@example\n   * ```js\n   *const node = tree.getPairNode(layer, index)\n   *```\n   */ getPairNode(layer, idx) {\n        const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n        if (pairIdx < layer.length) {\n            return layer[pairIdx];\n        } else {\n            // @ts-expect-error - issue from original code\n            return null;\n        }\n    }\n    /**\n   * toTreeString\n   * @desc Returns a visual representation of the merkle tree as a string.\n   * @return {String}\n   * @example\n   *```js\n   *console.log(tree.toTreeString())\n   *```\n   */ toTreeString() {\n        const obj = this.getLayersAsObject();\n        return (0,treeify__WEBPACK_IMPORTED_MODULE_2__.asTree)(obj, true, false);\n    }\n    /**\n   * toString\n   * @desc Returns a visual representation of the merkle tree as a string.\n   * @example\n   *```js\n   *console.log(tree.toString())\n   *```\n   */ toString() {\n        return this.toTreeString();\n    }\n    isUnevenTree(treeLayers) {\n        const depth = treeLayers?.length || this.getDepth();\n        return !this.isPowOf2(depth);\n    }\n    isPowOf2(v) {\n        return v && !(v & v - 1);\n    }\n    calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {\n        const leafTuples = this.zip(leafIndices, leafHashes).sort((_ref2, _ref3)=>{\n            let [indexA] = _ref2;\n            let [indexB] = _ref3;\n            return indexA - indexB;\n        });\n        const leafTupleIndices = leafTuples.map((_ref4)=>{\n            let [index] = _ref4;\n            return index;\n        });\n        const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);\n        let nextSliceStart = 0;\n        const proofTuplesByLayers = [];\n        for(let i = 0; i < proofIndices.length; i++){\n            const indices = proofIndices[i];\n            const sliceStart = nextSliceStart;\n            nextSliceStart += indices.length;\n            proofTuplesByLayers[i] = this.zip(indices, proofHashes.slice(sliceStart, nextSliceStart));\n        }\n        const tree = [\n            leafTuples\n        ];\n        for(let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++){\n            const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex])// @ts-expect-error - issue from original code\n            .sort((_ref5, _ref6)=>{\n                let [indexA] = _ref5;\n                let [indexB] = _ref6;\n                return indexA - indexB;\n            })// @ts-expect-error - issue from original code\n            .map((_ref7)=>{\n                let [, hash] = _ref7;\n                return hash;\n            });\n            const s = tree[layerIndex].map((_ref8)=>{\n                let [layerIndex_] = _ref8;\n                return layerIndex_;\n            });\n            const parentIndices = [\n                ...new Set(s.map((index)=>{\n                    if (index % 2 === 0) {\n                        return index / 2;\n                    }\n                    if (index % 2 === 0) {\n                        return (index + 1) / 2;\n                    }\n                    return (index - 1) / 2;\n                }))\n            ];\n            const parentLayer = [];\n            for(let i = 0; i < parentIndices.length; i++){\n                const parentNodeTreeIndex = parentIndices[i];\n                const bufA = currentLayer[i * 2];\n                const bufB = currentLayer[i * 2 + 1];\n                const hash = bufB ? this.hashFn(this.concatenator([\n                    bufA,\n                    bufB\n                ])) : bufA;\n                parentLayer.push([\n                    parentNodeTreeIndex,\n                    hash\n                ]);\n            }\n            tree.push(parentLayer);\n        }\n        return tree[tree.length - 1][0][1];\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@thirdweb-dev+merkletree@0.2.0/node_modules/@thirdweb-dev/merkletree/dist/thirdweb-dev-merkletree.esm.js\n");

/***/ })

};
;