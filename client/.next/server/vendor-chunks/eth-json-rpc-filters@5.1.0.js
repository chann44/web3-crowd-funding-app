"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-json-rpc-filters@5.1.0";
exports.ids = ["vendor-chunks/eth-json-rpc-filters@5.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter-history.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter-history.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter.js\");\n// tracks all results ever recorded\nclass BaseFilterWithHistory extends BaseFilter {\n    constructor(){\n        super();\n        this.allResults = [];\n    }\n    async update() {\n        throw new Error(\"BaseFilterWithHistory - no update method specified\");\n    }\n    addResults(newResults) {\n        this.allResults = this.allResults.concat(newResults);\n        super.addResults(newResults);\n    }\n    addInitialResults(newResults) {\n        this.allResults = this.allResults.concat(newResults);\n        super.addInitialResults(newResults);\n    }\n    getAllResults() {\n        return this.allResults;\n    }\n}\nmodule.exports = BaseFilterWithHistory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jhc2UtZmlsdGVyLWhpc3RvcnkuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCLG1DQUFtQztBQUNuQyxNQUFNQyw4QkFBOEJGO0lBRWxDRyxhQUFlO1FBQ2IsS0FBSztRQUNMLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEVBQUU7SUFDdEI7SUFFQSxNQUFNQyxTQUFVO1FBQ2QsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBRUFDLFdBQVlDLFVBQVUsRUFBRTtRQUN0QixJQUFJLENBQUNKLFVBQVUsR0FBRyxJQUFJLENBQUNBLFVBQVUsQ0FBQ0ssTUFBTSxDQUFDRDtRQUN6QyxLQUFLLENBQUNELFdBQVdDO0lBQ25CO0lBRUFFLGtCQUFtQkYsVUFBVSxFQUFFO1FBQzdCLElBQUksQ0FBQ0osVUFBVSxHQUFHLElBQUksQ0FBQ0EsVUFBVSxDQUFDSyxNQUFNLENBQUNEO1FBQ3pDLEtBQUssQ0FBQ0Usa0JBQWtCRjtJQUMxQjtJQUVBRyxnQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQ1AsVUFBVTtJQUN4QjtBQUVGO0FBRUFRLE9BQU9DLE9BQU8sR0FBR1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jhc2UtZmlsdGVyLWhpc3RvcnkuanM/YzBkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCYXNlRmlsdGVyID0gcmVxdWlyZSgnLi9iYXNlLWZpbHRlcicpXG5cbi8vIHRyYWNrcyBhbGwgcmVzdWx0cyBldmVyIHJlY29yZGVkXG5jbGFzcyBCYXNlRmlsdGVyV2l0aEhpc3RvcnkgZXh0ZW5kcyBCYXNlRmlsdGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuYWxsUmVzdWx0cyA9IFtdXG4gIH1cblxuICBhc3luYyB1cGRhdGUgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmFzZUZpbHRlcldpdGhIaXN0b3J5IC0gbm8gdXBkYXRlIG1ldGhvZCBzcGVjaWZpZWQnKVxuICB9XG5cbiAgYWRkUmVzdWx0cyAobmV3UmVzdWx0cykge1xuICAgIHRoaXMuYWxsUmVzdWx0cyA9IHRoaXMuYWxsUmVzdWx0cy5jb25jYXQobmV3UmVzdWx0cylcbiAgICBzdXBlci5hZGRSZXN1bHRzKG5ld1Jlc3VsdHMpXG4gIH1cblxuICBhZGRJbml0aWFsUmVzdWx0cyAobmV3UmVzdWx0cykge1xuICAgIHRoaXMuYWxsUmVzdWx0cyA9IHRoaXMuYWxsUmVzdWx0cy5jb25jYXQobmV3UmVzdWx0cylcbiAgICBzdXBlci5hZGRJbml0aWFsUmVzdWx0cyhuZXdSZXN1bHRzKVxuICB9XG5cbiAgZ2V0QWxsUmVzdWx0cyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsUmVzdWx0c1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXNlRmlsdGVyV2l0aEhpc3RvcnkiXSwibmFtZXMiOlsiQmFzZUZpbHRlciIsInJlcXVpcmUiLCJCYXNlRmlsdGVyV2l0aEhpc3RvcnkiLCJjb25zdHJ1Y3RvciIsImFsbFJlc3VsdHMiLCJ1cGRhdGUiLCJFcnJvciIsImFkZFJlc3VsdHMiLCJuZXdSZXN1bHRzIiwiY29uY2F0IiwiYWRkSW5pdGlhbFJlc3VsdHMiLCJnZXRBbGxSZXN1bHRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter-history.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SafeEventEmitter = (__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/./node_modules/.pnpm/@metamask+safe-event-emitter@2.0.0/node_modules/@metamask/safe-event-emitter/index.js\")[\"default\"]);\nclass BaseFilter extends SafeEventEmitter {\n    constructor(){\n        super();\n        this.updates = [];\n    }\n    async initialize() {}\n    async update() {\n        throw new Error(\"BaseFilter - no update method specified\");\n    }\n    addResults(newResults) {\n        this.updates = this.updates.concat(newResults);\n        newResults.forEach((result)=>this.emit(\"update\", result));\n    }\n    addInitialResults(newResults) {}\n    getChangesAndClear() {\n        const updates = this.updates;\n        this.updates = [];\n        return updates;\n    }\n}\nmodule.exports = BaseFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jhc2UtZmlsdGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxtQkFBbUJDLHdMQUErQztBQUV4RSxNQUFNRSxtQkFBbUJIO0lBRXZCSSxhQUFlO1FBQ2IsS0FBSztRQUNMLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7SUFDbkI7SUFFQSxNQUFNQyxhQUFjLENBQUM7SUFFckIsTUFBTUMsU0FBVTtRQUNkLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUVBQyxXQUFZQyxVQUFVLEVBQUU7UUFDdEIsSUFBSSxDQUFDTCxPQUFPLEdBQUcsSUFBSSxDQUFDQSxPQUFPLENBQUNNLE1BQU0sQ0FBQ0Q7UUFDbkNBLFdBQVdFLE9BQU8sQ0FBQ0MsQ0FBQUEsU0FBVSxJQUFJLENBQUNDLElBQUksQ0FBQyxVQUFVRDtJQUNuRDtJQUVBRSxrQkFBbUJMLFVBQVUsRUFBRSxDQUFDO0lBRWhDTSxxQkFBc0I7UUFDcEIsTUFBTVgsVUFBVSxJQUFJLENBQUNBLE9BQU87UUFDNUIsSUFBSSxDQUFDQSxPQUFPLEdBQUcsRUFBRTtRQUNqQixPQUFPQTtJQUNUO0FBRUY7QUFFQVksT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9ldGgtanNvbi1ycGMtZmlsdGVyc0A1LjEuMC9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvYmFzZS1maWx0ZXIuanM/M2YxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTYWZlRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnQG1ldGFtYXNrL3NhZmUtZXZlbnQtZW1pdHRlcicpLmRlZmF1bHRcblxuY2xhc3MgQmFzZUZpbHRlciBleHRlbmRzIFNhZmVFdmVudEVtaXR0ZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cGRhdGVzID0gW11cbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUgKCkge31cblxuICBhc3luYyB1cGRhdGUgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmFzZUZpbHRlciAtIG5vIHVwZGF0ZSBtZXRob2Qgc3BlY2lmaWVkJylcbiAgfVxuXG4gIGFkZFJlc3VsdHMgKG5ld1Jlc3VsdHMpIHtcbiAgICB0aGlzLnVwZGF0ZXMgPSB0aGlzLnVwZGF0ZXMuY29uY2F0KG5ld1Jlc3VsdHMpXG4gICAgbmV3UmVzdWx0cy5mb3JFYWNoKHJlc3VsdCA9PiB0aGlzLmVtaXQoJ3VwZGF0ZScsIHJlc3VsdCkpXG4gIH1cblxuICBhZGRJbml0aWFsUmVzdWx0cyAobmV3UmVzdWx0cykge31cblxuICBnZXRDaGFuZ2VzQW5kQ2xlYXIgKCkge1xuICAgIGNvbnN0IHVwZGF0ZXMgPSB0aGlzLnVwZGF0ZXNcbiAgICB0aGlzLnVwZGF0ZXMgPSBbXVxuICAgIHJldHVybiB1cGRhdGVzXG4gIH1cbiAgXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZUZpbHRlclxuIl0sIm5hbWVzIjpbIlNhZmVFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIkJhc2VGaWx0ZXIiLCJjb25zdHJ1Y3RvciIsInVwZGF0ZXMiLCJpbml0aWFsaXplIiwidXBkYXRlIiwiRXJyb3IiLCJhZGRSZXN1bHRzIiwibmV3UmVzdWx0cyIsImNvbmNhdCIsImZvckVhY2giLCJyZXN1bHQiLCJlbWl0IiwiYWRkSW5pdGlhbFJlc3VsdHMiLCJnZXRDaGFuZ2VzQW5kQ2xlYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/block-filter.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/block-filter.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nconst { incrementHexInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass BlockFilter extends BaseFilter {\n    constructor({ provider, params }){\n        super();\n        this.type = \"block\";\n        this.provider = provider;\n    }\n    async update({ oldBlock, newBlock }) {\n        const toBlock = newBlock;\n        const fromBlock = incrementHexInt(oldBlock);\n        const blockBodies = await getBlocksForRange({\n            provider: this.provider,\n            fromBlock,\n            toBlock\n        });\n        const blockHashes = blockBodies.map((block)=>block.hash);\n        this.addResults(blockHashes);\n    }\n}\nmodule.exports = BlockFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2Jsb2NrLWZpbHRlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDM0IsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQztBQUNsQyxNQUFNLEVBQUVFLGVBQWUsRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUVwQyxNQUFNRyxvQkFBb0JKO0lBRXhCSyxZQUFhLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFLENBQUU7UUFDakMsS0FBSztRQUNMLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRixRQUFRLEdBQUdBO0lBQ2xCO0lBRUEsTUFBTUcsT0FBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRSxFQUFFO1FBQ3BDLE1BQU1DLFVBQVVEO1FBQ2hCLE1BQU1FLFlBQVlWLGdCQUFnQk87UUFDbEMsTUFBTUksY0FBYyxNQUFNWixrQkFBa0I7WUFBRUksVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFBRU87WUFBV0Q7UUFBUTtRQUMxRixNQUFNRyxjQUFjRCxZQUFZRSxHQUFHLENBQUMsQ0FBQ0MsUUFBVUEsTUFBTUMsSUFBSTtRQUN6RCxJQUFJLENBQUNDLFVBQVUsQ0FBQ0o7SUFDbEI7QUFFRjtBQUVBSyxPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9ldGgtanNvbi1ycGMtZmlsdGVyc0A1LjEuMC9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvYmxvY2stZmlsdGVyLmpzPzdlZjAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQmFzZUZpbHRlciA9IHJlcXVpcmUoJy4vYmFzZS1maWx0ZXInKVxuY29uc3QgZ2V0QmxvY2tzRm9yUmFuZ2UgPSByZXF1aXJlKCcuL2dldEJsb2Nrc0ZvclJhbmdlJylcbmNvbnN0IHsgaW5jcmVtZW50SGV4SW50IH0gPSByZXF1aXJlKCcuL2hleFV0aWxzJylcblxuY2xhc3MgQmxvY2tGaWx0ZXIgZXh0ZW5kcyBCYXNlRmlsdGVyIHtcblxuICBjb25zdHJ1Y3RvciAoeyBwcm92aWRlciwgcGFyYW1zIH0pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy50eXBlID0gJ2Jsb2NrJ1xuICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlclxuICB9XG5cbiAgYXN5bmMgdXBkYXRlICh7IG9sZEJsb2NrLCBuZXdCbG9jayB9KSB7XG4gICAgY29uc3QgdG9CbG9jayA9IG5ld0Jsb2NrXG4gICAgY29uc3QgZnJvbUJsb2NrID0gaW5jcmVtZW50SGV4SW50KG9sZEJsb2NrKVxuICAgIGNvbnN0IGJsb2NrQm9kaWVzID0gYXdhaXQgZ2V0QmxvY2tzRm9yUmFuZ2UoeyBwcm92aWRlcjogdGhpcy5wcm92aWRlciwgZnJvbUJsb2NrLCB0b0Jsb2NrIH0pXG4gICAgY29uc3QgYmxvY2tIYXNoZXMgPSBibG9ja0JvZGllcy5tYXAoKGJsb2NrKSA9PiBibG9jay5oYXNoKVxuICAgIHRoaXMuYWRkUmVzdWx0cyhibG9ja0hhc2hlcylcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmxvY2tGaWx0ZXJcbiJdLCJuYW1lcyI6WyJCYXNlRmlsdGVyIiwicmVxdWlyZSIsImdldEJsb2Nrc0ZvclJhbmdlIiwiaW5jcmVtZW50SGV4SW50IiwiQmxvY2tGaWx0ZXIiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVyIiwicGFyYW1zIiwidHlwZSIsInVwZGF0ZSIsIm9sZEJsb2NrIiwibmV3QmxvY2siLCJ0b0Jsb2NrIiwiZnJvbUJsb2NrIiwiYmxvY2tCb2RpZXMiLCJibG9ja0hhc2hlcyIsIm1hcCIsImJsb2NrIiwiaGFzaCIsImFkZFJlc3VsdHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/block-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/getBlocksForRange.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/getBlocksForRange.js ***!
  \**************************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = getBlocksForRange;\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n    if (!fromBlock) fromBlock = toBlock;\n    const fromBlockNumber = hexToInt(fromBlock);\n    const toBlockNumber = hexToInt(toBlock);\n    const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;\n    // load all blocks from old to new (inclusive)\n    const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index)=>fromBlockNumber + index).map(intToHex);\n    const blockBodies = await Promise.all(missingBlockNumbers.map((blockNum)=>query(provider, \"eth_getBlockByNumber\", [\n            blockNum,\n            false\n        ])));\n    return blockBodies;\n}\nfunction hexToInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    const value = hexToInt(hexString);\n    return intToHex(value + 1);\n}\nfunction intToHex(int) {\n    if (int === undefined || int === null) return int;\n    const hexString = int.toString(16);\n    return \"0x\" + hexString;\n}\nfunction sendAsync(provider, request) {\n    return new Promise((resolve, reject)=>{\n        provider.sendAsync(request, (error, response)=>{\n            if (error) {\n                reject(error);\n            } else if (response.error) {\n                reject(response.error);\n            } else if (response.result) {\n                resolve(response.result);\n            } else {\n                reject(new Error(\"Result was empty\"));\n            }\n        });\n    });\n}\nasync function query(provider, method, params) {\n    for(let i = 0; i < 3; i++){\n        try {\n            return await sendAsync(provider, {\n                id: 1,\n                jsonrpc: \"2.0\",\n                method,\n                params\n            });\n        } catch (error) {\n            console.error(`provider.sendAsync failed: ${error.stack || error.message || error}`);\n        }\n    }\n    throw new Error(`Block not found for params: ${JSON.stringify(params)}`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2dldEJsb2Nrc0ZvclJhbmdlLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixlQUFlQSxrQkFBa0IsRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRTtJQUMvRCxJQUFJLENBQUNELFdBQVdBLFlBQVlDO0lBRTVCLE1BQU1DLGtCQUFrQkMsU0FBU0g7SUFDakMsTUFBTUksZ0JBQWdCRCxTQUFTRjtJQUMvQixNQUFNSSxvQkFBb0JELGdCQUFnQkYsa0JBQWtCO0lBQzVELDhDQUE4QztJQUM5QyxNQUFNSSxzQkFBc0JDLE1BQU1GLG1CQUFtQkcsSUFBSSxHQUM1QkMsR0FBRyxDQUFDLENBQUNDLEdBQUVDLFFBQVVULGtCQUFrQlMsT0FDbkNGLEdBQUcsQ0FBQ0c7SUFDakMsTUFBTUMsY0FBYyxNQUFNQyxRQUFRQyxHQUFHLENBQ25DVCxvQkFBb0JHLEdBQUcsQ0FBQ08sQ0FBQUEsV0FBWUMsTUFBTWxCLFVBQVUsd0JBQXdCO1lBQUNpQjtZQUFVO1NBQU07SUFFL0YsT0FBT0g7QUFDVDtBQUVBLFNBQVNWLFNBQVNlLFNBQVM7SUFDekIsSUFBSUEsY0FBY0MsYUFBYUQsY0FBYyxNQUFNLE9BQU9BO0lBQzFELE9BQU9FLE9BQU9DLFFBQVEsQ0FBQ0gsV0FBVztBQUNwQztBQUVBLFNBQVNJLGdCQUFnQkosU0FBUztJQUNoQyxJQUFJQSxjQUFjQyxhQUFhRCxjQUFjLE1BQU0sT0FBT0E7SUFDMUQsTUFBTUssUUFBUXBCLFNBQVNlO0lBQ3ZCLE9BQU9OLFNBQVNXLFFBQVE7QUFDMUI7QUFFQSxTQUFTWCxTQUFTWSxHQUFHO0lBQ25CLElBQUlBLFFBQVFMLGFBQWFLLFFBQVEsTUFBTSxPQUFPQTtJQUM5QyxNQUFNTixZQUFZTSxJQUFJQyxRQUFRLENBQUM7SUFDL0IsT0FBTyxPQUFPUDtBQUNoQjtBQUVBLFNBQVNRLFVBQVUzQixRQUFRLEVBQUU0QixPQUFPO0lBQ2xDLE9BQU8sSUFBSWIsUUFBUSxDQUFDYyxTQUFTQztRQUMzQjlCLFNBQVMyQixTQUFTLENBQUNDLFNBQVMsQ0FBQ0csT0FBT0M7WUFDbEMsSUFBSUQsT0FBTztnQkFDVEQsT0FBT0M7WUFDVCxPQUFPLElBQUlDLFNBQVNELEtBQUssRUFBRTtnQkFDekJELE9BQU9FLFNBQVNELEtBQUs7WUFDdkIsT0FBTyxJQUFJQyxTQUFTQyxNQUFNLEVBQUU7Z0JBQzFCSixRQUFRRyxTQUFTQyxNQUFNO1lBQ3pCLE9BQU87Z0JBQ0xILE9BQU8sSUFBSUksTUFBTTtZQUNuQjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLGVBQWVoQixNQUFNbEIsUUFBUSxFQUFFbUMsTUFBTSxFQUFFQyxNQUFNO0lBQzNDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7UUFDMUIsSUFBSTtZQUNGLE9BQU8sTUFBTVYsVUFBVTNCLFVBQVU7Z0JBQy9Cc0MsSUFBSTtnQkFDSkMsU0FBUztnQkFDVEo7Z0JBQ0FDO1lBQ0Y7UUFDRixFQUFFLE9BQU9MLE9BQU87WUFDZFMsUUFBUVQsS0FBSyxDQUNYLENBQUMsMkJBQTJCLEVBQUVBLE1BQU1VLEtBQUssSUFBSVYsTUFBTVcsT0FBTyxJQUFJWCxNQUFNLENBQUM7UUFFekU7SUFDRjtJQUNBLE1BQU0sSUFBSUcsTUFBTSxDQUFDLDRCQUE0QixFQUFFUyxLQUFLQyxTQUFTLENBQUNSLFFBQVEsQ0FBQztBQUN6RSIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9ldGgtanNvbi1ycGMtZmlsdGVyc0A1LjEuMC9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLWZpbHRlcnMvZ2V0QmxvY2tzRm9yUmFuZ2UuanM/NGUxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGdldEJsb2Nrc0ZvclJhbmdlXG5cbmFzeW5jIGZ1bmN0aW9uIGdldEJsb2Nrc0ZvclJhbmdlKHsgcHJvdmlkZXIsIGZyb21CbG9jaywgdG9CbG9jayB9KSB7XG4gIGlmICghZnJvbUJsb2NrKSBmcm9tQmxvY2sgPSB0b0Jsb2NrXG5cbiAgY29uc3QgZnJvbUJsb2NrTnVtYmVyID0gaGV4VG9JbnQoZnJvbUJsb2NrKVxuICBjb25zdCB0b0Jsb2NrTnVtYmVyID0gaGV4VG9JbnQodG9CbG9jaylcbiAgY29uc3QgYmxvY2tDb3VudFRvUXVlcnkgPSB0b0Jsb2NrTnVtYmVyIC0gZnJvbUJsb2NrTnVtYmVyICsgMVxuICAvLyBsb2FkIGFsbCBibG9ja3MgZnJvbSBvbGQgdG8gbmV3IChpbmNsdXNpdmUpXG4gIGNvbnN0IG1pc3NpbmdCbG9ja051bWJlcnMgPSBBcnJheShibG9ja0NvdW50VG9RdWVyeSkuZmlsbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChfLGluZGV4KSA9PiBmcm9tQmxvY2tOdW1iZXIgKyBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoaW50VG9IZXgpXG4gIGNvbnN0IGJsb2NrQm9kaWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgbWlzc2luZ0Jsb2NrTnVtYmVycy5tYXAoYmxvY2tOdW0gPT4gcXVlcnkocHJvdmlkZXIsICdldGhfZ2V0QmxvY2tCeU51bWJlcicsIFtibG9ja051bSwgZmFsc2VdKSlcbiAgKVxuICByZXR1cm4gYmxvY2tCb2RpZXNcbn1cblxuZnVuY3Rpb24gaGV4VG9JbnQoaGV4U3RyaW5nKSB7XG4gIGlmIChoZXhTdHJpbmcgPT09IHVuZGVmaW5lZCB8fCBoZXhTdHJpbmcgPT09IG51bGwpIHJldHVybiBoZXhTdHJpbmdcbiAgcmV0dXJuIE51bWJlci5wYXJzZUludChoZXhTdHJpbmcsIDE2KVxufVxuXG5mdW5jdGlvbiBpbmNyZW1lbnRIZXhJbnQoaGV4U3RyaW5nKXtcbiAgaWYgKGhleFN0cmluZyA9PT0gdW5kZWZpbmVkIHx8IGhleFN0cmluZyA9PT0gbnVsbCkgcmV0dXJuIGhleFN0cmluZ1xuICBjb25zdCB2YWx1ZSA9IGhleFRvSW50KGhleFN0cmluZylcbiAgcmV0dXJuIGludFRvSGV4KHZhbHVlICsgMSlcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGlmIChpbnQgPT09IHVuZGVmaW5lZCB8fCBpbnQgPT09IG51bGwpIHJldHVybiBpbnRcbiAgY29uc3QgaGV4U3RyaW5nID0gaW50LnRvU3RyaW5nKDE2KVxuICByZXR1cm4gJzB4JyArIGhleFN0cmluZ1xufVxuXG5mdW5jdGlvbiBzZW5kQXN5bmMocHJvdmlkZXIsIHJlcXVlc3QpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBwcm92aWRlci5zZW5kQXN5bmMocmVxdWVzdCwgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgIHJlamVjdChyZXNwb25zZS5lcnJvcik7XG4gICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnJlc3VsdCkge1xuICAgICAgICByZXNvbHZlKHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKFwiUmVzdWx0IHdhcyBlbXB0eVwiKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBxdWVyeShwcm92aWRlciwgbWV0aG9kLCBwYXJhbXMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHNlbmRBc3luYyhwcm92aWRlciwge1xuICAgICAgICBpZDogMSxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYHByb3ZpZGVyLnNlbmRBc3luYyBmYWlsZWQ6ICR7ZXJyb3Iuc3RhY2sgfHwgZXJyb3IubWVzc2FnZSB8fCBlcnJvcn1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYEJsb2NrIG5vdCBmb3VuZCBmb3IgcGFyYW1zOiAke0pTT04uc3RyaW5naWZ5KHBhcmFtcyl9YCk7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdldEJsb2Nrc0ZvclJhbmdlIiwicHJvdmlkZXIiLCJmcm9tQmxvY2siLCJ0b0Jsb2NrIiwiZnJvbUJsb2NrTnVtYmVyIiwiaGV4VG9JbnQiLCJ0b0Jsb2NrTnVtYmVyIiwiYmxvY2tDb3VudFRvUXVlcnkiLCJtaXNzaW5nQmxvY2tOdW1iZXJzIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiXyIsImluZGV4IiwiaW50VG9IZXgiLCJibG9ja0JvZGllcyIsIlByb21pc2UiLCJhbGwiLCJibG9ja051bSIsInF1ZXJ5IiwiaGV4U3RyaW5nIiwidW5kZWZpbmVkIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJpbmNyZW1lbnRIZXhJbnQiLCJ2YWx1ZSIsImludCIsInRvU3RyaW5nIiwic2VuZEFzeW5jIiwicmVxdWVzdCIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvciIsInJlc3BvbnNlIiwicmVzdWx0IiwiRXJyb3IiLCJtZXRob2QiLCJwYXJhbXMiLCJpIiwiaWQiLCJqc29ucnBjIiwiY29uc29sZSIsInN0YWNrIiwibWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/getBlocksForRange.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/hexUtils.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/hexUtils.js ***!
  \*****************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    minBlockRef,\n    maxBlockRef,\n    sortBlockRefs,\n    bnToHex,\n    blockRefIsNumber,\n    hexToInt,\n    incrementHexInt,\n    intToHex,\n    unsafeRandomBytes\n};\nfunction minBlockRef(...refs) {\n    const sortedRefs = sortBlockRefs(refs);\n    return sortedRefs[0];\n}\nfunction maxBlockRef(...refs) {\n    const sortedRefs = sortBlockRefs(refs);\n    return sortedRefs[sortedRefs.length - 1];\n}\nfunction sortBlockRefs(refs) {\n    return refs.sort((refA, refB)=>{\n        if (refA === \"latest\" || refB === \"earliest\") return 1;\n        if (refB === \"latest\" || refA === \"earliest\") return -1;\n        return hexToInt(refA) - hexToInt(refB);\n    });\n}\nfunction bnToHex(bn) {\n    return \"0x\" + bn.toString(16);\n}\nfunction blockRefIsNumber(blockRef) {\n    return blockRef && ![\n        \"earliest\",\n        \"latest\",\n        \"pending\"\n    ].includes(blockRef);\n}\nfunction hexToInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n    if (hexString === undefined || hexString === null) return hexString;\n    const value = hexToInt(hexString);\n    return intToHex(value + 1);\n}\nfunction intToHex(int) {\n    if (int === undefined || int === null) return int;\n    let hexString = int.toString(16);\n    const needsLeftPad = hexString.length % 2;\n    if (needsLeftPad) hexString = \"0\" + hexString;\n    return \"0x\" + hexString;\n}\nfunction unsafeRandomBytes(byteCount) {\n    let result = \"0x\";\n    for(let i = 0; i < byteCount; i++){\n        result += unsafeRandomNibble();\n        result += unsafeRandomNibble();\n    }\n    return result;\n}\nfunction unsafeRandomNibble() {\n    return Math.floor(Math.random() * 16).toString(16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2hleFV0aWxzLmpzIiwibWFwcGluZ3MiOiI7QUFDQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0FBQ0Y7QUFFQSxTQUFTUixZQUFZLEdBQUdTLElBQUk7SUFDMUIsTUFBTUMsYUFBYVIsY0FBY087SUFDakMsT0FBT0MsVUFBVSxDQUFDLEVBQUU7QUFDdEI7QUFFQSxTQUFTVCxZQUFZLEdBQUdRLElBQUk7SUFDMUIsTUFBTUMsYUFBYVIsY0FBY087SUFDakMsT0FBT0MsVUFBVSxDQUFDQSxXQUFXQyxNQUFNLEdBQUMsRUFBRTtBQUN4QztBQUVBLFNBQVNULGNBQWNPLElBQUk7SUFDekIsT0FBT0EsS0FBS0csSUFBSSxDQUFDLENBQUNDLE1BQU1DO1FBQ3RCLElBQUlELFNBQVMsWUFBWUMsU0FBUyxZQUFZLE9BQU87UUFDckQsSUFBSUEsU0FBUyxZQUFZRCxTQUFTLFlBQVksT0FBTyxDQUFDO1FBQ3RELE9BQU9SLFNBQVNRLFFBQVFSLFNBQVNTO0lBQ25DO0FBQ0Y7QUFFQSxTQUFTWCxRQUFRWSxFQUFFO0lBQ2pCLE9BQU8sT0FBT0EsR0FBR0MsUUFBUSxDQUFDO0FBQzVCO0FBRUEsU0FBU1osaUJBQWlCYSxRQUFRO0lBQ2hDLE9BQU9BLFlBQVksQ0FBQztRQUFDO1FBQVk7UUFBVTtLQUFVLENBQUNDLFFBQVEsQ0FBQ0Q7QUFDakU7QUFFQSxTQUFTWixTQUFTYyxTQUFTO0lBQ3pCLElBQUlBLGNBQWNDLGFBQWFELGNBQWMsTUFBTSxPQUFPQTtJQUMxRCxPQUFPRSxPQUFPQyxRQUFRLENBQUNILFdBQVc7QUFDcEM7QUFFQSxTQUFTYixnQkFBZ0JhLFNBQVM7SUFDaEMsSUFBSUEsY0FBY0MsYUFBYUQsY0FBYyxNQUFNLE9BQU9BO0lBQzFELE1BQU1JLFFBQVFsQixTQUFTYztJQUN2QixPQUFPWixTQUFTZ0IsUUFBUTtBQUMxQjtBQUVBLFNBQVNoQixTQUFTaUIsR0FBRztJQUNuQixJQUFJQSxRQUFRSixhQUFhSSxRQUFRLE1BQU0sT0FBT0E7SUFDOUMsSUFBSUwsWUFBWUssSUFBSVIsUUFBUSxDQUFDO0lBQzdCLE1BQU1TLGVBQWVOLFVBQVVSLE1BQU0sR0FBRztJQUN4QyxJQUFJYyxjQUFjTixZQUFZLE1BQU1BO0lBQ3BDLE9BQU8sT0FBT0E7QUFDaEI7QUFFQSxTQUFTWCxrQkFBa0JrQixTQUFTO0lBQ2xDLElBQUlDLFNBQVM7SUFDYixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsV0FBV0UsSUFBSztRQUNsQ0QsVUFBVUU7UUFDVkYsVUFBVUU7SUFDWjtJQUNBLE9BQU9GO0FBQ1Q7QUFFQSxTQUFTRTtJQUNQLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLLElBQUloQixRQUFRLENBQUM7QUFDakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL2hleFV0aWxzLmpzP2EwZGEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWluQmxvY2tSZWYsXG4gIG1heEJsb2NrUmVmLFxuICBzb3J0QmxvY2tSZWZzLFxuICBiblRvSGV4LFxuICBibG9ja1JlZklzTnVtYmVyLFxuICBoZXhUb0ludCxcbiAgaW5jcmVtZW50SGV4SW50LFxuICBpbnRUb0hleCxcbiAgdW5zYWZlUmFuZG9tQnl0ZXMsXG59XG5cbmZ1bmN0aW9uIG1pbkJsb2NrUmVmKC4uLnJlZnMpIHtcbiAgY29uc3Qgc29ydGVkUmVmcyA9IHNvcnRCbG9ja1JlZnMocmVmcylcbiAgcmV0dXJuIHNvcnRlZFJlZnNbMF1cbn1cblxuZnVuY3Rpb24gbWF4QmxvY2tSZWYoLi4ucmVmcykge1xuICBjb25zdCBzb3J0ZWRSZWZzID0gc29ydEJsb2NrUmVmcyhyZWZzKVxuICByZXR1cm4gc29ydGVkUmVmc1tzb3J0ZWRSZWZzLmxlbmd0aC0xXVxufVxuXG5mdW5jdGlvbiBzb3J0QmxvY2tSZWZzKHJlZnMpIHtcbiAgcmV0dXJuIHJlZnMuc29ydCgocmVmQSwgcmVmQikgPT4ge1xuICAgIGlmIChyZWZBID09PSAnbGF0ZXN0JyB8fCByZWZCID09PSAnZWFybGllc3QnKSByZXR1cm4gMVxuICAgIGlmIChyZWZCID09PSAnbGF0ZXN0JyB8fCByZWZBID09PSAnZWFybGllc3QnKSByZXR1cm4gLTFcbiAgICByZXR1cm4gaGV4VG9JbnQocmVmQSkgLSBoZXhUb0ludChyZWZCKVxuICB9KVxufVxuXG5mdW5jdGlvbiBiblRvSGV4KGJuKSB7XG4gIHJldHVybiAnMHgnICsgYm4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIGJsb2NrUmVmSXNOdW1iZXIoYmxvY2tSZWYpe1xuICByZXR1cm4gYmxvY2tSZWYgJiYgIVsnZWFybGllc3QnLCAnbGF0ZXN0JywgJ3BlbmRpbmcnXS5pbmNsdWRlcyhibG9ja1JlZilcbn1cblxuZnVuY3Rpb24gaGV4VG9JbnQoaGV4U3RyaW5nKSB7XG4gIGlmIChoZXhTdHJpbmcgPT09IHVuZGVmaW5lZCB8fCBoZXhTdHJpbmcgPT09IG51bGwpIHJldHVybiBoZXhTdHJpbmdcbiAgcmV0dXJuIE51bWJlci5wYXJzZUludChoZXhTdHJpbmcsIDE2KVxufVxuXG5mdW5jdGlvbiBpbmNyZW1lbnRIZXhJbnQoaGV4U3RyaW5nKXtcbiAgaWYgKGhleFN0cmluZyA9PT0gdW5kZWZpbmVkIHx8IGhleFN0cmluZyA9PT0gbnVsbCkgcmV0dXJuIGhleFN0cmluZ1xuICBjb25zdCB2YWx1ZSA9IGhleFRvSW50KGhleFN0cmluZylcbiAgcmV0dXJuIGludFRvSGV4KHZhbHVlICsgMSlcbn1cblxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGlmIChpbnQgPT09IHVuZGVmaW5lZCB8fCBpbnQgPT09IG51bGwpIHJldHVybiBpbnRcbiAgbGV0IGhleFN0cmluZyA9IGludC50b1N0cmluZygxNilcbiAgY29uc3QgbmVlZHNMZWZ0UGFkID0gaGV4U3RyaW5nLmxlbmd0aCAlIDJcbiAgaWYgKG5lZWRzTGVmdFBhZCkgaGV4U3RyaW5nID0gJzAnICsgaGV4U3RyaW5nXG4gIHJldHVybiAnMHgnICsgaGV4U3RyaW5nXG59XG5cbmZ1bmN0aW9uIHVuc2FmZVJhbmRvbUJ5dGVzKGJ5dGVDb3VudCkge1xuICBsZXQgcmVzdWx0ID0gJzB4J1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVDb3VudDsgaSsrKSB7XG4gICAgcmVzdWx0ICs9IHVuc2FmZVJhbmRvbU5pYmJsZSgpXG4gICAgcmVzdWx0ICs9IHVuc2FmZVJhbmRvbU5pYmJsZSgpXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiB1bnNhZmVSYW5kb21OaWJibGUoKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm1pbkJsb2NrUmVmIiwibWF4QmxvY2tSZWYiLCJzb3J0QmxvY2tSZWZzIiwiYm5Ub0hleCIsImJsb2NrUmVmSXNOdW1iZXIiLCJoZXhUb0ludCIsImluY3JlbWVudEhleEludCIsImludFRvSGV4IiwidW5zYWZlUmFuZG9tQnl0ZXMiLCJyZWZzIiwic29ydGVkUmVmcyIsImxlbmd0aCIsInNvcnQiLCJyZWZBIiwicmVmQiIsImJuIiwidG9TdHJpbmciLCJibG9ja1JlZiIsImluY2x1ZGVzIiwiaGV4U3RyaW5nIiwidW5kZWZpbmVkIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJ2YWx1ZSIsImludCIsIm5lZWRzTGVmdFBhZCIsImJ5dGVDb3VudCIsInJlc3VsdCIsImkiLCJ1bnNhZmVSYW5kb21OaWJibGUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/hexUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/index.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Mutex = (__webpack_require__(/*! async-mutex */ \"(ssr)/./node_modules/.pnpm/async-mutex@0.2.6/node_modules/async-mutex/lib/index.js\").Mutex);\nconst { createAsyncMiddleware, createScaffoldMiddleware } = __webpack_require__(/*! json-rpc-engine */ \"(ssr)/./node_modules/.pnpm/json-rpc-engine@6.1.0/node_modules/json-rpc-engine/dist/index.js\");\nconst LogFilter = __webpack_require__(/*! ./log-filter.js */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/log-filter.js\");\nconst BlockFilter = __webpack_require__(/*! ./block-filter.js */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/block-filter.js\");\nconst TxFilter = __webpack_require__(/*! ./tx-filter.js */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/tx-filter.js\");\nconst { intToHex, hexToInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/hexUtils.js\");\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n    // create filter collection\n    let filterIndex = 0;\n    let filters = {};\n    // create update mutex\n    const mutex = new Mutex();\n    const waitForFree = mutexMiddlewareWrapper({\n        mutex\n    });\n    const middleware = createScaffoldMiddleware({\n        // install filters\n        eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n        eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n        eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n        // uninstall filters\n        eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n        // checking filter changes\n        eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n        eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n    });\n    // setup filter updating and destroy handler\n    const filterUpdater = async ({ oldBlock, newBlock })=>{\n        if (filters.length === 0) return;\n        // lock update reads\n        const releaseLock = await mutex.acquire();\n        try {\n            // process all filters in parallel\n            await Promise.all(objValues(filters).map(async (filter)=>{\n                try {\n                    await filter.update({\n                        oldBlock,\n                        newBlock\n                    });\n                } catch (err) {\n                    // handle each error individually so filter update errors don't affect other filters\n                    console.error(err);\n                }\n            }));\n        } catch (err) {\n            // log error so we don't skip the releaseLock\n            console.error(err);\n        }\n        // unlock update reads\n        releaseLock();\n    };\n    // expose filter methods directly\n    middleware.newLogFilter = newLogFilter;\n    middleware.newBlockFilter = newBlockFilter;\n    middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n    middleware.uninstallFilter = uninstallFilterHandler;\n    middleware.getFilterChanges = getFilterChanges;\n    middleware.getFilterLogs = getFilterLogs;\n    // expose destroy method for cleanup\n    middleware.destroy = ()=>{\n        uninstallAllFilters();\n    };\n    return middleware;\n    //\n    // new filters\n    //\n    async function newLogFilter(params) {\n        const filter = new LogFilter({\n            provider,\n            params\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    async function newBlockFilter() {\n        const filter = new BlockFilter({\n            provider\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    async function newPendingTransactionFilter() {\n        const filter = new TxFilter({\n            provider\n        });\n        const filterIndex = await installFilter(filter);\n        return filter;\n    }\n    //\n    // get filter changes\n    //\n    async function getFilterChanges(filterIndexHex) {\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        if (!filter) {\n            throw new Error(`No filter for index \"${filterIndex}\"`);\n        }\n        const results = filter.getChangesAndClear();\n        return results;\n    }\n    async function getFilterLogs(filterIndexHex) {\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        if (!filter) {\n            throw new Error(`No filter for index \"${filterIndex}\"`);\n        }\n        // only return results for log filters\n        let results = [];\n        if (filter.type === \"log\") {\n            results = filter.getAllResults();\n        }\n        return results;\n    }\n    //\n    // remove filters\n    //\n    async function uninstallFilterHandler(filterIndexHex) {\n        // check filter exists\n        const filterIndex = hexToInt(filterIndexHex);\n        const filter = filters[filterIndex];\n        const result = Boolean(filter);\n        // uninstall filter\n        if (result) {\n            await uninstallFilter(filterIndex);\n        }\n        return result;\n    }\n    //\n    // utils\n    //\n    async function installFilter(filter) {\n        const prevFilterCount = objValues(filters).length;\n        // install filter\n        const currentBlock = await blockTracker.getLatestBlock();\n        await filter.initialize({\n            currentBlock\n        });\n        filterIndex++;\n        filters[filterIndex] = filter;\n        filter.id = filterIndex;\n        filter.idHex = intToHex(filterIndex);\n        // update block tracker subs\n        const newFilterCount = objValues(filters).length;\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount\n        });\n        return filterIndex;\n    }\n    async function uninstallFilter(filterIndex) {\n        const prevFilterCount = objValues(filters).length;\n        delete filters[filterIndex];\n        // update block tracker subs\n        const newFilterCount = objValues(filters).length;\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount\n        });\n    }\n    async function uninstallAllFilters() {\n        const prevFilterCount = objValues(filters).length;\n        filters = {};\n        // update block tracker subs\n        updateBlockTrackerSubs({\n            prevFilterCount,\n            newFilterCount: 0\n        });\n    }\n    function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n        // subscribe\n        if (prevFilterCount === 0 && newFilterCount > 0) {\n            blockTracker.on(\"sync\", filterUpdater);\n            return;\n        }\n        // unsubscribe\n        if (prevFilterCount > 0 && newFilterCount === 0) {\n            blockTracker.removeListener(\"sync\", filterUpdater);\n            return;\n        }\n    }\n}\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n    return toAsyncRpcMiddleware(async (...args)=>{\n        const filter = await createFilterFn(...args);\n        const result = intToHex(filter.id);\n        return result;\n    });\n}\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n    return createAsyncMiddleware(async (req, res)=>{\n        const result = await asyncFn.apply(null, req.params);\n        res.result = result;\n    });\n}\nfunction mutexMiddlewareWrapper({ mutex }) {\n    return (middleware)=>{\n        return async (req, res, next, end)=>{\n            // wait for mutex available\n            // we can release immediately because\n            // we just need to make sure updates aren't active\n            const releaseLock = await mutex.acquire();\n            releaseLock();\n            middleware(req, res, next, end);\n        };\n    };\n}\nfunction objValues(obj, fn) {\n    const values = [];\n    for(let key in obj){\n        values.push(obj[key]);\n    }\n    return values;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/log-filter.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/log-filter.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EthQuery = __webpack_require__(/*! eth-query */ \"(ssr)/./node_modules/.pnpm/eth-query@2.1.2/node_modules/eth-query/index.js\");\nconst pify = __webpack_require__(/*! pify */ \"(ssr)/./node_modules/.pnpm/pify@5.0.0/node_modules/pify/index.js\");\nconst BaseFilterWithHistory = __webpack_require__(/*! ./base-filter-history */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter-history.js\");\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass LogFilter extends BaseFilterWithHistory {\n    constructor({ provider, params }){\n        super();\n        this.type = \"log\";\n        this.ethQuery = new EthQuery(provider);\n        this.params = Object.assign({\n            fromBlock: \"latest\",\n            toBlock: \"latest\",\n            address: undefined,\n            topics: []\n        }, params);\n        // normalize address parameter\n        if (this.params.address) {\n            // ensure array\n            if (!Array.isArray(this.params.address)) {\n                this.params.address = [\n                    this.params.address\n                ];\n            }\n            // ensure lowercase\n            this.params.address = this.params.address.map((address)=>address.toLowerCase());\n        }\n    }\n    async initialize({ currentBlock }) {\n        // resolve params.fromBlock\n        let fromBlock = this.params.fromBlock;\n        if ([\n            \"latest\",\n            \"pending\"\n        ].includes(fromBlock)) fromBlock = currentBlock;\n        if (\"earliest\" === fromBlock) fromBlock = \"0x0\";\n        this.params.fromBlock = fromBlock;\n        // set toBlock for initial lookup\n        const toBlock = minBlockRef(this.params.toBlock, currentBlock);\n        const params = Object.assign({}, this.params, {\n            toBlock\n        });\n        // fetch logs and add to results\n        const newLogs = await this._fetchLogs(params);\n        this.addInitialResults(newLogs);\n    }\n    async update({ oldBlock, newBlock }) {\n        // configure params for this update\n        const toBlock = newBlock;\n        let fromBlock;\n        // oldBlock is empty on first sync\n        if (oldBlock) {\n            fromBlock = incrementHexInt(oldBlock);\n        } else {\n            fromBlock = newBlock;\n        }\n        // fetch logs\n        const params = Object.assign({}, this.params, {\n            fromBlock,\n            toBlock\n        });\n        const newLogs = await this._fetchLogs(params);\n        const matchingLogs = newLogs.filter((log)=>this.matchLog(log));\n        // add to results\n        this.addResults(matchingLogs);\n    }\n    async _fetchLogs(params) {\n        const newLogs = await pify((cb)=>this.ethQuery.getLogs(params, cb))();\n        // add to results\n        return newLogs;\n    }\n    matchLog(log) {\n        // check if block number in bounds:\n        if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;\n        if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false;\n        // address is correct:\n        const normalizedLogAddress = log.address && log.address.toLowerCase();\n        if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false;\n        // topics match:\n        // topics are position-dependant\n        // topics can be nested to represent `or` [[a || b], c]\n        // topics can be null, representing a wild card for that position\n        const topicsMatch = this.params.topics.every((topicPattern, index)=>{\n            // pattern is longer than actual topics\n            let logTopic = log.topics[index];\n            if (!logTopic) return false;\n            logTopic = logTopic.toLowerCase();\n            // normalize subTopics\n            let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [\n                topicPattern\n            ];\n            // check for wild card\n            const subtopicsIncludeWildcard = subtopicsToMatch.includes(null);\n            if (subtopicsIncludeWildcard) return true;\n            subtopicsToMatch = subtopicsToMatch.map((topic)=>topic.toLowerCase());\n            // check each possible matching topic\n            const topicDoesMatch = subtopicsToMatch.includes(logTopic);\n            return topicDoesMatch;\n        });\n        return topicsMatch;\n    }\n}\nmodule.exports = LogFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/log-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/subscriptionManager.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/subscriptionManager.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SafeEventEmitter = (__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/./node_modules/.pnpm/@metamask+safe-event-emitter@2.0.0/node_modules/@metamask/safe-event-emitter/index.js\")[\"default\"]);\nconst { createAsyncMiddleware, createScaffoldMiddleware } = __webpack_require__(/*! json-rpc-engine */ \"(ssr)/./node_modules/.pnpm/json-rpc-engine@6.1.0/node_modules/json-rpc-engine/dist/index.js\");\nconst createFilterMiddleware = __webpack_require__(/*! ./index.js */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/index.js\");\nconst { unsafeRandomBytes, incrementHexInt } = __webpack_require__(/*! ./hexUtils.js */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/hexUtils.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange.js */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n    // state and utilities for handling subscriptions\n    const subscriptions = {};\n    const filterManager = createFilterMiddleware({\n        blockTracker,\n        provider\n    });\n    // internal flag\n    let isDestroyed = false;\n    // create subscriptionManager api object\n    const events = new SafeEventEmitter();\n    const middleware = createScaffoldMiddleware({\n        eth_subscribe: createAsyncMiddleware(subscribe),\n        eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n    });\n    middleware.destroy = destroy;\n    return {\n        events,\n        middleware\n    };\n    async function subscribe(req, res) {\n        if (isDestroyed) throw new Error(\"SubscriptionManager - attempting to use after destroying\");\n        const subscriptionType = req.params[0];\n        // subId is 16 byte hex string\n        const subId = unsafeRandomBytes(16);\n        // create sub\n        let sub;\n        switch(subscriptionType){\n            case \"newHeads\":\n                sub = createSubNewHeads({\n                    subId\n                });\n                break;\n            case \"logs\":\n                const filterParams = req.params[1];\n                const filter = await filterManager.newLogFilter(filterParams);\n                sub = createSubFromFilter({\n                    subId,\n                    filter\n                });\n                break;\n            default:\n                throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`);\n        }\n        subscriptions[subId] = sub;\n        res.result = subId;\n        return;\n        function createSubNewHeads({ subId }) {\n            const sub = {\n                type: subscriptionType,\n                destroy: async ()=>{\n                    blockTracker.removeListener(\"sync\", sub.update);\n                },\n                update: async ({ oldBlock, newBlock })=>{\n                    // for newHeads\n                    const toBlock = newBlock;\n                    const fromBlock = incrementHexInt(oldBlock);\n                    const rawBlocks = await getBlocksForRange({\n                        provider,\n                        fromBlock,\n                        toBlock\n                    });\n                    const results = rawBlocks.map(normalizeBlock).filter((block)=>block !== null);\n                    results.forEach((value)=>{\n                        _emitSubscriptionResult(subId, value);\n                    });\n                }\n            };\n            // check for subscription updates on new block\n            blockTracker.on(\"sync\", sub.update);\n            return sub;\n        }\n        function createSubFromFilter({ subId, filter }) {\n            filter.on(\"update\", (result)=>_emitSubscriptionResult(subId, result));\n            const sub = {\n                type: subscriptionType,\n                destroy: async ()=>{\n                    return await filterManager.uninstallFilter(filter.idHex);\n                }\n            };\n            return sub;\n        }\n    }\n    async function unsubscribe(req, res) {\n        if (isDestroyed) throw new Error(\"SubscriptionManager - attempting to use after destroying\");\n        const id = req.params[0];\n        const subscription = subscriptions[id];\n        // if missing, return \"false\" to indicate it was not removed\n        if (!subscription) {\n            res.result = false;\n            return;\n        }\n        // cleanup subscription\n        delete subscriptions[id];\n        await subscription.destroy();\n        res.result = true;\n    }\n    function _emitSubscriptionResult(filterIdHex, value) {\n        events.emit(\"notification\", {\n            jsonrpc: \"2.0\",\n            method: \"eth_subscription\",\n            params: {\n                subscription: filterIdHex,\n                result: value\n            }\n        });\n    }\n    function destroy() {\n        events.removeAllListeners();\n        for(const id in subscriptions){\n            subscriptions[id].destroy();\n            delete subscriptions[id];\n        }\n        isDestroyed = true;\n    }\n}\nfunction normalizeBlock(block) {\n    if (block === null || block === undefined) {\n        return null;\n    }\n    return {\n        hash: block.hash,\n        parentHash: block.parentHash,\n        sha3Uncles: block.sha3Uncles,\n        miner: block.miner,\n        stateRoot: block.stateRoot,\n        transactionsRoot: block.transactionsRoot,\n        receiptsRoot: block.receiptsRoot,\n        logsBloom: block.logsBloom,\n        difficulty: block.difficulty,\n        number: block.number,\n        gasLimit: block.gasLimit,\n        gasUsed: block.gasUsed,\n        nonce: block.nonce,\n        mixHash: block.mixHash,\n        timestamp: block.timestamp,\n        extraData: block.extraData\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/subscriptionManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/tx-filter.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/tx-filter.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst BaseFilter = __webpack_require__(/*! ./base-filter */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/base-filter.js\");\nconst getBlocksForRange = __webpack_require__(/*! ./getBlocksForRange */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/getBlocksForRange.js\");\nconst { incrementHexInt } = __webpack_require__(/*! ./hexUtils */ \"(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/hexUtils.js\");\nclass TxFilter extends BaseFilter {\n    constructor({ provider }){\n        super();\n        this.type = \"tx\";\n        this.provider = provider;\n    }\n    async update({ oldBlock }) {\n        const toBlock = oldBlock;\n        const fromBlock = incrementHexInt(oldBlock);\n        const blocks = await getBlocksForRange({\n            provider: this.provider,\n            fromBlock,\n            toBlock\n        });\n        const blockTxHashes = [];\n        for (const block of blocks){\n            blockTxHashes.push(...block.transactions);\n        }\n        // add to results\n        this.addResults(blockTxHashes);\n    }\n}\nmodule.exports = TxFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL3R4LWZpbHRlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDM0IsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQztBQUNsQyxNQUFNLEVBQUVFLGVBQWUsRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUVwQyxNQUFNRyxpQkFBaUJKO0lBRXJCSyxZQUFhLEVBQUVDLFFBQVEsRUFBRSxDQUFFO1FBQ3pCLEtBQUs7UUFDTCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtJQUNsQjtJQUVBLE1BQU1FLE9BQVEsRUFBRUMsUUFBUSxFQUFFLEVBQUU7UUFDMUIsTUFBTUMsVUFBVUQ7UUFDaEIsTUFBTUUsWUFBWVIsZ0JBQWdCTTtRQUNsQyxNQUFNRyxTQUFTLE1BQU1WLGtCQUFrQjtZQUFFSSxVQUFVLElBQUksQ0FBQ0EsUUFBUTtZQUFFSztZQUFXRDtRQUFRO1FBQ3JGLE1BQU1HLGdCQUFnQixFQUFFO1FBQ3hCLEtBQUssTUFBTUMsU0FBU0YsT0FBUTtZQUMxQkMsY0FBY0UsSUFBSSxJQUFJRCxNQUFNRSxZQUFZO1FBQzFDO1FBQ0EsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQ0MsVUFBVSxDQUFDSjtJQUNsQjtBQUVGO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvLnBucG0vZXRoLWpzb24tcnBjLWZpbHRlcnNANS4xLjAvbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1maWx0ZXJzL3R4LWZpbHRlci5qcz82YjdhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJhc2VGaWx0ZXIgPSByZXF1aXJlKCcuL2Jhc2UtZmlsdGVyJylcbmNvbnN0IGdldEJsb2Nrc0ZvclJhbmdlID0gcmVxdWlyZSgnLi9nZXRCbG9ja3NGb3JSYW5nZScpXG5jb25zdCB7IGluY3JlbWVudEhleEludCB9ID0gcmVxdWlyZSgnLi9oZXhVdGlscycpXG5cbmNsYXNzIFR4RmlsdGVyIGV4dGVuZHMgQmFzZUZpbHRlciB7XG5cbiAgY29uc3RydWN0b3IgKHsgcHJvdmlkZXIgfSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnR5cGUgPSAndHgnXG4gICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyXG4gIH1cblxuICBhc3luYyB1cGRhdGUgKHsgb2xkQmxvY2sgfSkge1xuICAgIGNvbnN0IHRvQmxvY2sgPSBvbGRCbG9ja1xuICAgIGNvbnN0IGZyb21CbG9jayA9IGluY3JlbWVudEhleEludChvbGRCbG9jaylcbiAgICBjb25zdCBibG9ja3MgPSBhd2FpdCBnZXRCbG9ja3NGb3JSYW5nZSh7IHByb3ZpZGVyOiB0aGlzLnByb3ZpZGVyLCBmcm9tQmxvY2ssIHRvQmxvY2sgfSlcbiAgICBjb25zdCBibG9ja1R4SGFzaGVzID0gW11cbiAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIGJsb2Nrcykge1xuICAgICAgYmxvY2tUeEhhc2hlcy5wdXNoKC4uLmJsb2NrLnRyYW5zYWN0aW9ucylcbiAgICB9XG4gICAgLy8gYWRkIHRvIHJlc3VsdHNcbiAgICB0aGlzLmFkZFJlc3VsdHMoYmxvY2tUeEhhc2hlcylcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHhGaWx0ZXJcbiJdLCJuYW1lcyI6WyJCYXNlRmlsdGVyIiwicmVxdWlyZSIsImdldEJsb2Nrc0ZvclJhbmdlIiwiaW5jcmVtZW50SGV4SW50IiwiVHhGaWx0ZXIiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVyIiwidHlwZSIsInVwZGF0ZSIsIm9sZEJsb2NrIiwidG9CbG9jayIsImZyb21CbG9jayIsImJsb2NrcyIsImJsb2NrVHhIYXNoZXMiLCJibG9jayIsInB1c2giLCJ0cmFuc2FjdGlvbnMiLCJhZGRSZXN1bHRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/eth-json-rpc-filters@5.1.0/node_modules/eth-json-rpc-filters/tx-filter.js\n");

/***/ })

};
;