"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_thirdweb-dev_wallets_2_4_2__ethersproject_abstract-provi-6b85c9"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: function() { return /* binding */ getValidPublicRPCUrl; },\n/* harmony export */   i: function() { return /* binding */ isTwUrl; }\n/* harmony export */ });\n/* harmony import */ var _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thirdweb-dev/chains */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+chains@0.1.64/node_modules/@thirdweb-dev/chains/dist/thirdweb-dev-chains.esm.js\");\n\nfunction isTwUrl(url) {\n    const host = new URL(url).hostname;\n    return host.endsWith(\".thirdweb.com\") || host.endsWith(\".thirdweb-dev.com\") || host === \"localhost\" || host === \"0.0.0.0\";\n}\nfunction getValidPublicRPCUrl(chain) {\n    return (0,_thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_0__.getValidChainRPCs)(chain).map((rpc)=>{\n        try {\n            const url = new URL(rpc);\n            // remove client id from url\n            if (url.hostname.endsWith(\".thirdweb.com\")) {\n                url.pathname = \"\";\n                url.search = \"\";\n            }\n            return url.toString();\n        } catch (e) {\n            return rpc;\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdGhpcmR3ZWItZGV2K3dhbGxldHNAMi40LjJfQGV0aGVyc3Byb2plY3QrYWJzdHJhY3QtcHJvdmlkZXJANS43LjBfQGV0aGVyc3Byb2plY3QrYWJzdHJhY3Qtc2lfcTN1aGo1NHZ3MnRxY2R4b24yNGN2Z3BsYmEvbm9kZV9tb2R1bGVzL0B0aGlyZHdlYi1kZXYvd2FsbGV0cy9kaXN0L3VybC1hNDUyMTliZC5icm93c2VyLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUQ7QUFFekQsU0FBU0MsUUFBUUMsR0FBRztJQUNsQixNQUFNQyxPQUFPLElBQUlDLElBQUlGLEtBQUtHLFFBQVE7SUFDbEMsT0FBT0YsS0FBS0csUUFBUSxDQUFDLG9CQUFvQkgsS0FBS0csUUFBUSxDQUFDLHdCQUF3QkgsU0FBUyxlQUFlQSxTQUFTO0FBQ2xIO0FBQ0EsU0FBU0kscUJBQXFCQyxLQUFLO0lBQ2pDLE9BQU9SLHVFQUFpQkEsQ0FBQ1EsT0FBT0MsR0FBRyxDQUFDQyxDQUFBQTtRQUNsQyxJQUFJO1lBQ0YsTUFBTVIsTUFBTSxJQUFJRSxJQUFJTTtZQUNwQiw0QkFBNEI7WUFDNUIsSUFBSVIsSUFBSUcsUUFBUSxDQUFDQyxRQUFRLENBQUMsa0JBQWtCO2dCQUMxQ0osSUFBSVMsUUFBUSxHQUFHO2dCQUNmVCxJQUFJVSxNQUFNLEdBQUc7WUFDZjtZQUNBLE9BQU9WLElBQUlXLFFBQVE7UUFDckIsRUFBRSxPQUFPQyxHQUFHO1lBQ1YsT0FBT0o7UUFDVDtJQUNGO0FBQ0Y7QUFFbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0aGlyZHdlYi1kZXYrd2FsbGV0c0AyLjQuMl9AZXRoZXJzcHJvamVjdCthYnN0cmFjdC1wcm92aWRlckA1LjcuMF9AZXRoZXJzcHJvamVjdCthYnN0cmFjdC1zaV9xM3VoajU0dncydHFjZHhvbjI0Y3ZncGxiYS9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi93YWxsZXRzL2Rpc3QvdXJsLWE0NTIxOWJkLmJyb3dzZXIuZXNtLmpzP2Y5YjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VmFsaWRDaGFpblJQQ3MgfSBmcm9tICdAdGhpcmR3ZWItZGV2L2NoYWlucyc7XG5cbmZ1bmN0aW9uIGlzVHdVcmwodXJsKSB7XG4gIGNvbnN0IGhvc3QgPSBuZXcgVVJMKHVybCkuaG9zdG5hbWU7XG4gIHJldHVybiBob3N0LmVuZHNXaXRoKFwiLnRoaXJkd2ViLmNvbVwiKSB8fCBob3N0LmVuZHNXaXRoKFwiLnRoaXJkd2ViLWRldi5jb21cIikgfHwgaG9zdCA9PT0gXCJsb2NhbGhvc3RcIiB8fCBob3N0ID09PSBcIjAuMC4wLjBcIjtcbn1cbmZ1bmN0aW9uIGdldFZhbGlkUHVibGljUlBDVXJsKGNoYWluKSB7XG4gIHJldHVybiBnZXRWYWxpZENoYWluUlBDcyhjaGFpbikubWFwKHJwYyA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocnBjKTtcbiAgICAgIC8vIHJlbW92ZSBjbGllbnQgaWQgZnJvbSB1cmxcbiAgICAgIGlmICh1cmwuaG9zdG5hbWUuZW5kc1dpdGgoXCIudGhpcmR3ZWIuY29tXCIpKSB7XG4gICAgICAgIHVybC5wYXRobmFtZSA9IFwiXCI7XG4gICAgICAgIHVybC5zZWFyY2ggPSBcIlwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBycGM7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgZ2V0VmFsaWRQdWJsaWNSUENVcmwgYXMgZywgaXNUd1VybCBhcyBpIH07XG4iXSwibmFtZXMiOlsiZ2V0VmFsaWRDaGFpblJQQ3MiLCJpc1R3VXJsIiwidXJsIiwiaG9zdCIsIlVSTCIsImhvc3RuYW1lIiwiZW5kc1dpdGgiLCJnZXRWYWxpZFB1YmxpY1JQQ1VybCIsImNoYWluIiwibWFwIiwicnBjIiwicGF0aG5hbWUiLCJzZWFyY2giLCJ0b1N0cmluZyIsImUiLCJnIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SmartWalletConnector: function() { return /* binding */ SmartWalletConnector; }\n/* harmony export */ });\n/* harmony import */ var _dist_connector_05689d68_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../dist/connector-05689d68.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/connector-05689d68.browser.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+properties@5.7.0/node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+keccak256@5.7.0/node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+abi@5.7.0/node_modules/@ethersproject/abi/lib.esm/abi-coder.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+providers@5.7.2/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+abstract-signer@5.7.0/node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+providers@5.7.2/node_modules/@ethersproject/providers/lib.esm/base-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+constants@5.7.0/node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+strings@5.7.0/node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+units@5.7.0/node_modules/@ethersproject/units/lib.esm/index.js\");\n/* harmony import */ var _dist_url_a45219bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../dist/url-a45219bd.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js\");\n/* harmony import */ var _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @account-abstraction/contracts */ \"(app-pages-browser)/./node_modules/.pnpm/@account-abstraction+contracts@0.5.0/node_modules/@account-abstraction/contracts/dist/index.js\");\n/* harmony import */ var _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _dist_defineProperty_d7c057bf_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../dist/defineProperty-d7c057bf.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/defineProperty-d7c057bf.browser.esm.js\");\n/* harmony import */ var _dist_constants_5a6f7f26_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../dist/constants-5a6f7f26.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/dist/constants-5a6f7f26.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/transactions-a0e9a480.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/sdk-712c1e7c.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @thirdweb-dev/sdk */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/index-c820b7d4.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @thirdweb-dev/chains */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+chains@0.1.64/node_modules/@thirdweb-dev/chains/dist/thirdweb-dev-chains.esm.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! eventemitter3 */ \"(app-pages-browser)/./node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\nasync function hexlifyUserOp(op) {\n    const userOp = await ethers__WEBPACK_IMPORTED_MODULE_2__.resolveProperties(op);\n    return Object.keys(userOp).map((key)=>{\n        let val = userOp[key];\n        if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n            val = ethers__WEBPACK_IMPORTED_MODULE_3__.hexValue(val);\n        }\n        return [\n            key,\n            val\n        ];\n    }).reduce((set, _ref)=>{\n        let [k, v] = _ref;\n        return {\n            ...set,\n            [k]: v\n        };\n    }, {});\n}\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n    const op = await ethers__WEBPACK_IMPORTED_MODULE_2__.resolveProperties(userOp);\n    const hashedUserOp = {\n        sender: op.sender,\n        nonce: op.nonce,\n        initCodeHash: ethers__WEBPACK_IMPORTED_MODULE_4__.keccak256(op.initCode),\n        callDataHash: ethers__WEBPACK_IMPORTED_MODULE_4__.keccak256(op.callData),\n        callGasLimit: op.callGasLimit,\n        verificationGasLimit: op.verificationGasLimit,\n        preVerificationGas: op.preVerificationGas,\n        maxFeePerGas: op.maxFeePerGas,\n        maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n        paymasterAndDataHash: ethers__WEBPACK_IMPORTED_MODULE_4__.keccak256(op.paymasterAndData)\n    };\n    const userOpType = {\n        components: [\n            {\n                type: \"address\",\n                name: \"sender\"\n            },\n            {\n                type: \"uint256\",\n                name: \"nonce\"\n            },\n            {\n                type: \"bytes32\",\n                name: \"initCodeHash\"\n            },\n            {\n                type: \"bytes32\",\n                name: \"callDataHash\"\n            },\n            {\n                type: \"uint256\",\n                name: \"callGasLimit\"\n            },\n            {\n                type: \"uint256\",\n                name: \"verificationGasLimit\"\n            },\n            {\n                type: \"uint256\",\n                name: \"preVerificationGas\"\n            },\n            {\n                type: \"uint256\",\n                name: \"maxFeePerGas\"\n            },\n            {\n                type: \"uint256\",\n                name: \"maxPriorityFeePerGas\"\n            },\n            {\n                type: \"bytes32\",\n                name: \"paymasterAndDataHash\"\n            }\n        ],\n        name: \"hashedUserOp\",\n        type: \"tuple\"\n    };\n    const encoded = ethers__WEBPACK_IMPORTED_MODULE_5__.defaultAbiCoder.encode([\n        userOpType\n    ], [\n        {\n            ...hashedUserOp\n        }\n    ]);\n    // remove leading word (total length) and trailing word (zero-length signature)\n    const userOpHash = ethers__WEBPACK_IMPORTED_MODULE_4__.keccak256(encoded);\n    const enc = ethers__WEBPACK_IMPORTED_MODULE_5__.defaultAbiCoder.encode([\n        \"bytes32\",\n        \"address\",\n        \"uint256\"\n    ], [\n        userOpHash,\n        entryPoint,\n        chainId\n    ]);\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.keccak256(enc);\n}\nconst generateRandomUint192 = ()=>{\n    const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n    const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n    const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n    const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n    const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n    const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n    return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = ()=>{\n    let hexString = generateRandomUint192().toString(16);\n    if (hexString.length % 2 !== 0) {\n        hexString = \"0\" + hexString;\n    }\n    hexString = \"0x\" + hexString;\n    return ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(ethers__WEBPACK_IMPORTED_MODULE_3__.concat([\n        hexString,\n        \"0x0000000000000000\"\n    ]));\n};\n/**\n * an API to external a UserOperation with paymaster info\n */ class PaymasterAPI {\n}\nvar pkg = {\n    name: \"@thirdweb-dev/wallets\",\n    version: \"2.4.2\",\n    main: \"dist/thirdweb-dev-wallets.cjs.js\",\n    module: \"dist/thirdweb-dev-wallets.esm.js\",\n    browser: {\n        \"./dist/thirdweb-dev-wallets.esm.js\": \"./dist/thirdweb-dev-wallets.browser.esm.js\"\n    },\n    exports: {\n        \".\": {\n            module: {\n                browser: \"./dist/thirdweb-dev-wallets.browser.esm.js\",\n                \"default\": \"./dist/thirdweb-dev-wallets.esm.js\"\n            },\n            \"default\": \"./dist/thirdweb-dev-wallets.cjs.js\"\n        },\n        \"./evm\": {\n            module: {\n                browser: \"./evm/dist/thirdweb-dev-wallets-evm.browser.esm.js\",\n                \"default\": \"./evm/dist/thirdweb-dev-wallets-evm.esm.js\"\n            },\n            \"default\": \"./evm/dist/thirdweb-dev-wallets-evm.cjs.js\"\n        },\n        \"./evm/wallets/okx\": {\n            module: {\n                browser: \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.browser.esm.js\",\n                \"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.esm.js\"\n            },\n            \"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.cjs.js\"\n        },\n        \"./evm/wallets/base\": {\n            module: {\n                browser: \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.browser.esm.js\",\n                \"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.esm.js\"\n            },\n            \"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.cjs.js\"\n        },\n        \"./evm/wallets/safe\": {\n            module: {\n                browser: \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js\",\n                \"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.esm.js\"\n            },\n            \"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.js\"\n        },\n        \"./evm/wallets/async\": {\n            module: {\n                browser: \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.browser.esm.js\",\n                \"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.esm.js\"\n            },\n            \"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.cjs.js\"\n        },\n        \"./evm/wallets/frame\": {\n            module: {\n                browser: \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.browser.esm.js\",\n                \"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.esm.js\"\n            },\n            \"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.js\"\n        },\n        \"./evm/wallets/magic\": {\n            module: {\n                browser: \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.browser.esm.js\",\n                \"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.esm.js\"\n            },\n            \"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.js\"\n        },\n        \"./evm/wallets/rabby\": {\n            module: {\n                browser: \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.browser.esm.js\",\n                \"default\": \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.esm.js\"\n            },\n            \"default\": \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.cjs.js\"\n        },\n        \"./evm/wallets/trust\": {\n            module: {\n                browser: \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js\",\n                \"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.esm.js\"\n            },\n            \"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.cjs.js\"\n        },\n        \"./evm/wallets/blocto\": {\n            module: {\n                browser: \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.browser.esm.js\",\n                \"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.esm.js\"\n            },\n            \"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.cjs.js\"\n        },\n        \"./evm/wallets/coin98\": {\n            module: {\n                browser: \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.browser.esm.js\",\n                \"default\": \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.esm.js\"\n            },\n            \"default\": \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.cjs.js\"\n        },\n        \"./evm/wallets/engine\": {\n            module: {\n                browser: \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.browser.esm.js\",\n                \"default\": \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.esm.js\"\n            },\n            \"default\": \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.cjs.js\"\n        },\n        \"./evm/wallets/ethers\": {\n            module: {\n                browser: \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.browser.esm.js\",\n                \"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.esm.js\"\n            },\n            \"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.js\"\n        },\n        \"./evm/wallets/onekey\": {\n            module: {\n                browser: \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.browser.esm.js\",\n                \"default\": \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.esm.js\"\n            },\n            \"default\": \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.cjs.js\"\n        },\n        \"./evm/wallets/signer\": {\n            module: {\n                browser: \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.browser.esm.js\",\n                \"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.esm.js\"\n            },\n            \"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.cjs.js\"\n        },\n        \"./evm/wallets/zerion\": {\n            module: {\n                browser: \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.browser.esm.js\",\n                \"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.esm.js\"\n            },\n            \"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.js\"\n        },\n        \"./evm/wallets/aws-kms\": {\n            module: {\n                browser: \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.browser.esm.js\",\n                \"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.esm.js\"\n            },\n            \"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.cjs.js\"\n        },\n        \"./evm/wallets/gcp-kms\": {\n            module: {\n                browser: \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.browser.esm.js\",\n                \"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.esm.js\"\n            },\n            \"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.cjs.js\"\n        },\n        \"./evm/wallets/phantom\": {\n            module: {\n                browser: \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.browser.esm.js\",\n                \"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.esm.js\"\n            },\n            \"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.cjs.js\"\n        },\n        \"./evm/wallets/abstract\": {\n            module: {\n                browser: \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js\",\n                \"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js\"\n            },\n            \"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.js\"\n        },\n        \"./evm/wallets/injected\": {\n            module: {\n                browser: \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js\",\n                \"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.esm.js\"\n            },\n            \"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.js\"\n        },\n        \"./evm/wallets/metamask\": {\n            module: {\n                browser: \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js\",\n                \"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.esm.js\"\n            },\n            \"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.js\"\n        },\n        \"./evm/wallets/core-wallet\": {\n            module: {\n                browser: \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.cjs.js\"\n        },\n        \"./evm/wallets/private-key\": {\n            module: {\n                browser: \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.browser.esm.js\",\n                \"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.esm.js\"\n            },\n            \"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.js\"\n        },\n        \"./evm/connectors/okx\": {\n            module: {\n                browser: \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.browser.esm.js\",\n                \"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.esm.js\"\n            },\n            \"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.cjs.js\"\n        },\n        \"./evm/wallets/local-wallet\": {\n            module: {\n                browser: \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.js\"\n        },\n        \"./evm/wallets/paper-wallet\": {\n            module: {\n                browser: \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.js\"\n        },\n        \"./evm/wallets/smart-wallet\": {\n            module: {\n                browser: \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.cjs.js\"\n        },\n        \"./evm/connectors/safe\": {\n            module: {\n                browser: \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js\",\n                \"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.esm.js\"\n            },\n            \"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.cjs.js\"\n        },\n        \"./evm/connectors/frame\": {\n            module: {\n                browser: \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js\",\n                \"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.esm.js\"\n            },\n            \"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.cjs.js\"\n        },\n        \"./evm/connectors/magic\": {\n            module: {\n                browser: \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js\",\n                \"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.esm.js\"\n            },\n            \"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.cjs.js\"\n        },\n        \"./evm/connectors/paper\": {\n            module: {\n                browser: \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js\",\n                \"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.esm.js\"\n            },\n            \"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.cjs.js\"\n        },\n        \"./evm/connectors/rabby\": {\n            module: {\n                browser: \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.browser.esm.js\",\n                \"default\": \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.esm.js\"\n            },\n            \"default\": \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.cjs.js\"\n        },\n        \"./evm/connectors/trust\": {\n            module: {\n                browser: \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js\",\n                \"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.esm.js\"\n            },\n            \"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.cjs.js\"\n        },\n        \"./evm/wallets/rainbow-wallet\": {\n            module: {\n                browser: \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.cjs.js\"\n        },\n        \"./evm/wallets/wallet-connect\": {\n            module: {\n                browser: \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js\",\n                \"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.esm.js\"\n            },\n            \"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.js\"\n        },\n        \"./evm/connectors/blocto\": {\n            module: {\n                browser: \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js\",\n                \"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.esm.js\"\n            },\n            \"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.cjs.js\"\n        },\n        \"./evm/connectors/coin98\": {\n            module: {\n                browser: \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.browser.esm.js\",\n                \"default\": \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.esm.js\"\n            },\n            \"default\": \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.cjs.js\"\n        },\n        \"./evm/connectors/onekey\": {\n            module: {\n                browser: \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.browser.esm.js\",\n                \"default\": \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.esm.js\"\n            },\n            \"default\": \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.cjs.js\"\n        },\n        \"./evm/connectors/signer\": {\n            module: {\n                browser: \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js\",\n                \"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.esm.js\"\n            },\n            \"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.cjs.js\"\n        },\n        \"./evm/connectors/zerion\": {\n            module: {\n                browser: \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.browser.esm.js\",\n                \"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.esm.js\"\n            },\n            \"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.cjs.js\"\n        },\n        \"./evm/wallets/coinbase-wallet\": {\n            module: {\n                browser: \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.js\"\n        },\n        \"./evm/wallets/embedded-wallet\": {\n            module: {\n                browser: \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.cjs.js\"\n        },\n        \"./evm/connectors/phantom\": {\n            module: {\n                browser: \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js\",\n                \"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.esm.js\"\n            },\n            \"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.cjs.js\"\n        },\n        \"./evm/connectors/rainbow\": {\n            module: {\n                browser: \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js\",\n                \"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.esm.js\"\n            },\n            \"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.cjs.js\"\n        },\n        \"./evm/connectors/injected\": {\n            module: {\n                browser: \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js\",\n                \"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.esm.js\"\n            },\n            \"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.js\"\n        },\n        \"./evm/connectors/metamask\": {\n            module: {\n                browser: \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js\",\n                \"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.esm.js\"\n            },\n            \"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.cjs.js\"\n        },\n        \"./evm/wallets/local-wallet-node\": {\n            module: {\n                browser: \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.browser.esm.js\",\n                \"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.esm.js\"\n            },\n            \"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.cjs.js\"\n        },\n        \"./evm/wallets/wallet-connect-v1\": {\n            module: {\n                browser: \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js\",\n                \"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.esm.js\"\n            },\n            \"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.js\"\n        },\n        \"./evm/wallets/crypto-defi-wallet\": {\n            module: {\n                browser: \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.cjs.js\"\n        },\n        \"./evm/wallets/aws-secrets-manager\": {\n            module: {\n                browser: \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.browser.esm.js\",\n                \"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.esm.js\"\n            },\n            \"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.cjs.js\"\n        },\n        \"./evm/connectors/core-wallet\": {\n            module: {\n                browser: \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.browser.esm.js\",\n                \"default\": \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.esm.js\"\n            },\n            \"default\": \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.cjs.js\"\n        },\n        \"./evm/connectors/local-wallet\": {\n            module: {\n                browser: \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js\",\n                \"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.esm.js\"\n            },\n            \"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.cjs.js\"\n        },\n        \"./evm/connectors/smart-wallet\": {\n            module: {\n                browser: \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js\",\n                \"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js\"\n            },\n            \"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.js\"\n        },\n        \"./evm/connectors/wallet-connect\": {\n            module: {\n                browser: \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js\",\n                \"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.esm.js\"\n            },\n            \"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.cjs.js\"\n        },\n        \"./evm/connectors/coinbase-wallet\": {\n            module: {\n                browser: \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js\",\n                \"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.esm.js\"\n            },\n            \"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.cjs.js\"\n        },\n        \"./evm/connectors/embedded-wallet\": {\n            module: {\n                browser: \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js\",\n                \"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.esm.js\"\n            },\n            \"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.cjs.js\"\n        },\n        \"./evm/wallets/token-bound-smart-wallet\": {\n            module: {\n                browser: \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.browser.esm.js\",\n                \"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.esm.js\"\n            },\n            \"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.cjs.js\"\n        },\n        \"./evm/connectors/wallet-connect-v1\": {\n            module: {\n                browser: \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js\",\n                \"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.esm.js\"\n            },\n            \"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.cjs.js\"\n        },\n        \"./evm/connectors/crypto-defi-wallet\": {\n            module: {\n                browser: \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.browser.esm.js\",\n                \"default\": \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.esm.js\"\n            },\n            \"default\": \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.cjs.js\"\n        },\n        \"./evm/connectors/token-bound-smart-wallet\": {\n            module: {\n                browser: \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js\",\n                \"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js\"\n            },\n            \"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.cjs.js\"\n        },\n        \"./evm/connectors/embedded-wallet/implementations\": {\n            module: {\n                browser: \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.browser.esm.js\",\n                \"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.esm.js\"\n            },\n            \"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.cjs.js\"\n        },\n        \"./package.json\": \"./package.json\"\n    },\n    types: \"dist/thirdweb-dev-wallets.cjs.d.ts\",\n    repository: \"https://github.com/thirdweb-dev/js/tree/main/packages/wallets\",\n    license: \"Apache-2.0\",\n    bugs: {\n        url: \"https://github.com/thirdweb-dev/js/issues\"\n    },\n    author: \"thirdweb eng <eng@thirdweb.com>\",\n    files: [\n        \"dist/\",\n        \"evm/\"\n    ],\n    preconstruct: {\n        entrypoints: [\n            \"index.ts\",\n            \"evm/index.ts\",\n            \"evm/connectors/*/index.ts\",\n            \"evm/connectors/embedded-wallet/implementations/index.ts\",\n            \"evm/wallets/**\"\n        ],\n        exports: {\n            envConditions: [\n                \"browser\"\n            ]\n        }\n    },\n    sideEffects: false,\n    dependencies: {\n        \"@account-abstraction/contracts\": \"^0.5.0\",\n        \"@blocto/sdk\": \"^0.5.4\",\n        \"@coinbase/wallet-sdk\": \"^3.7.1\",\n        \"@google-cloud/kms\": \"3.0.1\",\n        \"@magic-ext/connect\": \"^6.7.2\",\n        \"@magic-ext/oauth\": \"^7.6.2\",\n        \"@magic-sdk/provider\": \"^13.6.2\",\n        \"@metamask/eth-sig-util\": \"^4.0.0\",\n        \"@paperxyz/embedded-wallet-service-sdk\": \"^1.2.5\",\n        \"@paperxyz/sdk-common-utilities\": \"^0.1.0\",\n        \"@safe-global/safe-core-sdk\": \"^3.3.4\",\n        \"@safe-global/safe-ethers-adapters\": \"0.1.0-alpha.17\",\n        \"@safe-global/safe-ethers-lib\": \"^1.9.4\",\n        \"@thirdweb-dev/chains\": \"workspace:*\",\n        \"@thirdweb-dev/contracts-js\": \"workspace:*\",\n        \"@thirdweb-dev/crypto\": \"workspace:*\",\n        \"@thirdweb-dev/sdk\": \"workspace:*\",\n        \"@walletconnect/core\": \"^2.9.1\",\n        \"@walletconnect/ethereum-provider\": \"^2.9.1\",\n        \"@walletconnect/jsonrpc-utils\": \"^1.0.8\",\n        \"@walletconnect/modal\": \"^2.6.1\",\n        \"@walletconnect/types\": \"^2.9.1\",\n        \"@walletconnect/utils\": \"^2.10.2\",\n        \"@walletconnect/web3wallet\": \"^1.8.7\",\n        \"asn1.js\": \"5.4.1\",\n        \"bn.js\": \"5.2.0\",\n        buffer: \"^6.0.3\",\n        \"eth-provider\": \"^0.13.6\",\n        \"ethereumjs-util\": \"^7.1.3\",\n        eventemitter3: \"^5.0.1\",\n        \"key-encoder\": \"2.0.3\",\n        \"magic-sdk\": \"^13.6.2\",\n        \"web3-core\": \"1.5.2\"\n    },\n    peerDependencies: {\n        \"@aws-sdk/client-secrets-manager\": \"^3.256.0\",\n        \"@noble/ed25519\": \"^1.7.1\",\n        bs58: \"^5.0.0\",\n        ethers: \"^5.7.2\",\n        \"ethers-aws-kms-signer\": \"^1.3.2\",\n        tweetnacl: \"^1.0.3\"\n    },\n    peerDependenciesMeta: {\n        tweetnacl: {\n            optional: true\n        },\n        \"@aws-sdk/client-secrets-manager\": {\n            optional: true\n        },\n        \"ethers-aws-kms-signer\": {\n            optional: true\n        },\n        \"@noble/ed25519\": {\n            optional: true\n        },\n        bs58: {\n            optional: true\n        },\n        ethers: {\n            optional: true\n        }\n    },\n    devDependencies: {\n        \"@aws-sdk/client-secrets-manager\": \"^3.378.0\",\n        \"@babel/plugin-transform-class-properties\": \"^7.23.3\",\n        \"@babel/plugin-transform-flow-strip-types\": \"^7.23.3\",\n        \"@babel/plugin-transform-private-methods\": \"^7.23.3\",\n        \"@microsoft/api-extractor\": \"^7.36.3\",\n        \"@noble/ed25519\": \"^1.7.1\",\n        \"@nomiclabs/hardhat-ethers\": \"^2.2.3\",\n        \"@preconstruct/cli\": \"2.7.0\",\n        \"@thirdweb-dev/tsconfig\": \"workspace:*\",\n        \"@types/bn.js\": \"^5.1.1\",\n        \"@types/jest\": \"^29.5.3\",\n        abitype: \"^0.2.5\",\n        \"babel-plugin-transform-inline-environment-variables\": \"^0.4.4\",\n        bs58: \"^5.0.0\",\n        \"cross-env\": \"^7.0.3\",\n        \"eslint-config-thirdweb\": \"workspace:*\",\n        \"eslint-plugin-better-tree-shaking\": \"0.0.4\",\n        \"eslint-plugin-tsdoc\": \"^0.2.16\",\n        \"ethereum-provider\": \"^0.7.7\",\n        ethers: \"^5.7.2\",\n        \"ethers-aws-kms-signer\": \"^1.3.2\",\n        hardhat: \"^2.17.0\",\n        jest: \"^29.6.2\",\n        rimraf: \"^3.0.2\",\n        \"ts-jest\": \"^29.1.1\",\n        tweetnacl: \"^1.0.3\",\n        \"typedoc-gen\": \"workspace:*\",\n        typescript: \"^5.3.3\"\n    },\n    scripts: {\n        format: \"prettier --write 'src/**/*'\",\n        lint: \"eslint src/ && bunx publint --strict --level warning\",\n        fix: \"eslint src/ --fix\",\n        clean: \"rm -rf dist/\",\n        build: \"tsc && cross-env THIRDWEB_EWS_SDK_VERSION=$npm_package_version preconstruct build\",\n        \"preconstruct:fix\": \"preconstruct fix\",\n        push: \"yalc push\",\n        typedoc: \"node scripts/typedoc.mjs\",\n        test: \"jest\"\n    },\n    engines: {\n        node: \">=18\"\n    },\n    jest: {\n        testTimeout: 30000\n    }\n};\nconst DEBUG = false; // TODO set as public flag\nclass HttpRpcClient {\n    async validateChainId() {\n        // validate chainId is in sync with expected chainid\n        const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n        const bundlerChain = parseInt(chain);\n        if (bundlerChain !== this.chainId) {\n            throw new Error(\"bundler \".concat(this.bundlerUrl, \" is on chainId \").concat(bundlerChain, \", but provider is on chainId \").concat(this.chainId));\n        }\n    }\n    /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */ async sendUserOpToBundler(userOp1) {\n        await this.initializing;\n        const hexifiedUserOp = await hexlifyUserOp(userOp1);\n        const jsonRequestData = [\n            hexifiedUserOp,\n            this.entryPointAddress\n        ];\n        await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n        return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [\n            hexifiedUserOp,\n            this.entryPointAddress\n        ]);\n    }\n    async estimateUserOpGas(userOp1) {\n        await this.initializing;\n        const hexifiedUserOp = await hexlifyUserOp(userOp1);\n        const jsonRequestData = [\n            hexifiedUserOp,\n            this.entryPointAddress\n        ];\n        await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n        return await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [\n            hexifiedUserOp,\n            this.entryPointAddress\n        ]);\n    }\n    async printUserOperation(method, _ref) {\n        {\n            return;\n        }\n    }\n    constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey){\n        this.bundlerUrl = bundlerUrl;\n        this.entryPointAddress = entryPointAddress;\n        this.chainId = chainId;\n        const headers = {};\n        if ((0,_dist_url_a45219bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.i)(this.bundlerUrl)) {\n            const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n            if (secretKey) {\n                headers[\"x-secret-key\"] = secretKey;\n            } else if (clientId) {\n                headers[\"x-client-id\"] = clientId;\n                if (bundleId) {\n                    headers[\"x-bundle-id\"] = bundleId;\n                }\n            }\n            // Dashboard token\n            if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n                headers[\"authorization\"] = \"Bearer \".concat(globalThis.TW_AUTH_TOKEN);\n            }\n            // CLI token\n            if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n                headers[\"authorization\"] = \"Bearer \".concat(globalThis.TW_CLI_AUTH_TOKEN);\n                headers[\"x-authorize-wallet\"] = \"true\";\n            }\n            headers[\"x-sdk-version\"] = pkg.version;\n            headers[\"x-sdk-name\"] = pkg.name;\n            headers[\"x-sdk-platform\"] = bundleId ? \"react-native\" : window.bridge !== undefined ? \"webGL\" : \"browser\";\n        }\n        this.userOpJsonRpcProvider = new ethers__WEBPACK_IMPORTED_MODULE_8__.JsonRpcProvider({\n            url: this.bundlerUrl,\n            headers\n        }, {\n            name: \"Connected bundler network\",\n            chainId\n        });\n        this.initializing = this.validateChainId();\n    }\n}\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n    async getPaymasterAndData(userOp) {\n        const headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        if ((0,_dist_url_a45219bd_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.i)(this.paymasterUrl)) {\n            if (this.secretKey && this.clientId) {\n                throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n            }\n            if (this.secretKey) {\n                headers[\"x-secret-key\"] = this.secretKey;\n            } else if (this.clientId) {\n                headers[\"x-client-id\"] = this.clientId;\n                if (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis) {\n                    headers[\"x-bundle-id\"] = globalThis.APP_BUNDLE_ID;\n                }\n            }\n            // Dashboard token.\n            if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n                headers[\"authorization\"] = \"Bearer \".concat(globalThis.TW_AUTH_TOKEN);\n            }\n            // CLI token.\n            if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n                headers[\"authorization\"] = \"Bearer \".concat(globalThis.TW_CLI_AUTH_TOKEN);\n                headers[\"x-authorize-wallet\"] = \"true\";\n            }\n        }\n        // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n        const response = await fetch(this.paymasterUrl, {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n                jsonrpc: \"2.0\",\n                id: 1,\n                method: \"pm_sponsorUserOperation\",\n                params: [\n                    await hexlifyUserOp(userOp),\n                    this.entryPoint\n                ]\n            })\n        });\n        const res = await response.json();\n        if (!response.ok) {\n            const error = res.error || response.statusText;\n            const code = res.code || \"UNKNOWN\";\n            throw new Error(\"Paymaster error: \".concat(error, \"\\nStatus: \").concat(response.status, \"\\nCode: \").concat(code));\n        }\n        if (DEBUG) {\n            console.debug(\"Paymaster result:\", res);\n        }\n        if (res.result) {\n            // some paymasters return a string, some return an object with more data\n            if (typeof res.result === \"string\") {\n                return {\n                    paymasterAndData: res.result\n                };\n            } else {\n                return res.result;\n            }\n        } else {\n            var _res_error;\n            const error = ((_res_error = res.error) === null || _res_error === void 0 ? void 0 : _res_error.message) || res.error || response.statusText || \"unknown error\";\n            throw new Error(\"Paymaster error from \".concat(this.paymasterUrl, \": \").concat(error));\n        }\n    }\n    constructor(paymasterUrl, entryPoint, clientId, secretKey){\n        super();\n        this.paymasterUrl = paymasterUrl;\n        this.entryPoint = entryPoint;\n        this.clientId = clientId;\n        this.secretKey = secretKey;\n    }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey)=>new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */ class UserOperationEventListener {\n    start() {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n        // listener takes time... first query directly:\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        setTimeout(async ()=>{\n            const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n            if (res.length > 0) {\n                void this.listenerCallback(res[0]);\n            } else {\n                this.entryPoint.once(filter, this.boundLisener);\n            }\n        }, 100);\n    }\n    stop() {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async listenerCallback() {\n        for(var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++){\n            param[_key] = arguments[_key];\n        }\n        // TODO clean this up..\n        // eslint-disable-next-line prefer-rest-params\n        const event = arguments[arguments.length - 1];\n        if (!event.args) {\n            console.error(\"got event without args\", event);\n            return;\n        }\n        // TODO: can this happen? we register to event by userOpHash..\n        if (event.args.userOpHash !== this.userOpHash) {\n            var _this_nonce;\n            console.log(\"== event with wrong userOpHash: sender/nonce: event.\".concat(event.args.sender, \"@\").concat(event.args.nonce.toString(), \"!= userOp.\").concat(this.sender, \"@\").concat(parseInt((_this_nonce = this.nonce) === null || _this_nonce === void 0 ? void 0 : _this_nonce.toString())));\n            return;\n        }\n        const transactionReceipt = await event.getTransactionReceipt();\n        // before returning the receipt, update the status from the event.\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (!event.args.success) {\n            await this.extractFailureReason(transactionReceipt);\n        }\n        this.stop();\n        this.resolve(transactionReceipt);\n        this.resolved = true;\n    }\n    async extractFailureReason(receipt) {\n        receipt.status = 0;\n        const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n        if (revertReasonEvents[0]) {\n            let message = revertReasonEvents[0].args.revertReason;\n            if (message.startsWith(\"0x08c379a0\")) {\n                // Error(string)\n                message = ethers__WEBPACK_IMPORTED_MODULE_5__.defaultAbiCoder.decode([\n                    \"string\"\n                ], \"0x\" + message.substring(10)).toString();\n            }\n            this.reject(new Error(\"UserOp failed with reason: \".concat(message)));\n        }\n    }\n    constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout){\n        this.resolve = resolve;\n        this.reject = reject;\n        this.entryPoint = entryPoint;\n        this.sender = sender;\n        this.userOpHash = userOpHash;\n        this.nonce = nonce;\n        this.timeout = timeout;\n        (0,_dist_defineProperty_d7c057bf_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, \"resolved\", false);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        this.boundLisener = this.listenerCallback.bind(this);\n    }\n}\nclass ERC4337EthersSigner extends ethers__WEBPACK_IMPORTED_MODULE_10__.Signer {\n    // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n    async sendTransaction(transaction, options) {\n        var _tx_data;\n        const tx = await ethers__WEBPACK_IMPORTED_MODULE_2__.resolveProperties(transaction);\n        await this.verifyAllNecessaryFields(tx);\n        const multidimensionalNonce = randomNonce();\n        const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n            target: tx.to || \"\",\n            data: ((_tx_data = tx.data) === null || _tx_data === void 0 ? void 0 : _tx_data.toString()) || \"0x\",\n            value: tx.value,\n            gasLimit: tx.gasLimit,\n            nonce: multidimensionalNonce,\n            maxFeePerGas: tx.maxFeePerGas,\n            maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n        }, options);\n        const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n        const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n        try {\n            await this.httpRpcClient.sendUserOpToBundler(userOperation);\n        } catch (error) {\n            throw this.unwrapError(error);\n        }\n        // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n        return transactionResponse;\n    }\n    unwrapError(errorIn) {\n        try {\n            let errorMsg = \"Unknown Error\";\n            if (errorIn.error) {\n                errorMsg = \"The bundler has failed to include UserOperation in a batch: \".concat(errorIn.error);\n            } else if (errorIn.body && typeof errorIn.body === \"string\") {\n                var _errorBody_error, _errorBody_error1;\n                const errorBody = JSON.parse(errorIn.body);\n                const errorStatus = errorIn.status || \"UNKNOWN\";\n                const errorCode = (errorBody === null || errorBody === void 0 ? void 0 : errorBody.code) || \"UNKNOWN\";\n                let failedOpMessage = (errorBody === null || errorBody === void 0 ? void 0 : (_errorBody_error = errorBody.error) === null || _errorBody_error === void 0 ? void 0 : _errorBody_error.message) || (errorBody === null || errorBody === void 0 ? void 0 : (_errorBody_error1 = errorBody.error) === null || _errorBody_error1 === void 0 ? void 0 : _errorBody_error1.data) || (errorBody === null || errorBody === void 0 ? void 0 : errorBody.error) || errorIn.reason;\n                if (failedOpMessage === null || failedOpMessage === void 0 ? void 0 : failedOpMessage.includes(\"FailedOp\")) {\n                    let paymasterInfo = \"\";\n                    // TODO: better error extraction methods will be needed\n                    const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n                    if (matched) {\n                        const split = matched[1].split(\",\");\n                        paymasterInfo = \"(paymaster address: \".concat(split[1], \")\");\n                        failedOpMessage = split[2];\n                    }\n                    errorMsg = \"The bundler has failed to include UserOperation in a batch: \".concat(failedOpMessage, \" \").concat(paymasterInfo);\n                } else {\n                    errorMsg = \"RPC error: \".concat(failedOpMessage, \"\\nStatus: \").concat(errorStatus, \"\\nCode: \").concat(errorCode);\n                }\n            }\n            const error = new Error(errorMsg);\n            error.stack = errorIn.stack;\n            return error;\n        } catch (error) {}\n        return errorIn;\n    }\n    async verifyAllNecessaryFields(transactionRequest) {\n        if (!transactionRequest.to) {\n            throw new Error(\"Missing call target\");\n        }\n        if (!transactionRequest.data && !transactionRequest.value) {\n            // TBD: banning no-op UserOps seems to make sense on provider level\n            throw new Error(\"Missing call data or value\");\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    connect(provider) {\n        throw new Error(\"changing providers is not supported\");\n    }\n    async getAddress() {\n        if (!this.address) {\n            this.address = await this.erc4337provider.getSenderAccountAddress();\n        }\n        return this.address;\n    }\n    async signMessage(message) {\n        const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n        if (isNotDeployed) {\n            console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n            const tx = await this.sendTransaction({\n                to: await this.getAddress(),\n                data: \"0x\"\n            });\n            await tx.wait();\n        }\n        return await this.originalSigner.signMessage(message);\n    }\n    async signTransaction(transaction, options) {\n        var _tx_data;\n        const tx = await ethers__WEBPACK_IMPORTED_MODULE_2__.resolveProperties(transaction);\n        await this.verifyAllNecessaryFields(tx);\n        const multidimensionalNonce = randomNonce();\n        const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n            target: tx.to || \"\",\n            data: ((_tx_data = tx.data) === null || _tx_data === void 0 ? void 0 : _tx_data.toString()) || \"0x\",\n            value: tx.value,\n            gasLimit: tx.gasLimit,\n            nonce: multidimensionalNonce\n        }, options);\n        const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n        const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n        return userOpString;\n    }\n    // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n    constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI){\n        super();\n        ethers__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly(this, \"provider\", erc4337provider);\n        this.config = config;\n        this.originalSigner = originalSigner;\n        this.erc4337provider = erc4337provider;\n        this.httpRpcClient = httpRpcClient;\n        this.smartAccountAPI = smartAccountAPI;\n    }\n}\nclass ERC4337EthersProvider extends ethers__WEBPACK_IMPORTED_MODULE_11__.BaseProvider {\n    getSigner() {\n        return this.signer;\n    }\n    async perform(method, params) {\n        if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n            // TODO: do we need 'perform' method to be available at all?\n            // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n            throw new Error(\"Should not get here. Investigate.\");\n        }\n        if (method === \"estimateGas\") {\n            // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n            return ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(500000);\n        }\n        return await this.originalProvider.perform(method, params);\n    }\n    async getTransaction(transactionHash) {\n        // TODO\n        return await super.getTransaction(transactionHash);\n    }\n    async getTransactionReceipt(transactionHash) {\n        const userOpHash = await transactionHash;\n        const sender = await this.getSenderAccountAddress();\n        return await new Promise((resolve, reject)=>{\n            new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n        });\n    }\n    async getSenderAccountAddress() {\n        return await this.smartAccountAPI.getAccountAddress();\n    }\n    async waitForTransaction(transactionHash, confirmations, timeout) {\n        const sender = await this.getSenderAccountAddress();\n        return await new Promise((resolve, reject)=>{\n            const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n            listener.start();\n        });\n    }\n    // fabricate a response in a format usable by ethers users...\n    async constructUserOpTransactionResponse(userOp1) {\n        const userOp = await ethers__WEBPACK_IMPORTED_MODULE_2__.resolveProperties(userOp1);\n        const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n        const waitForUserOp = async ()=>await new Promise((resolve, reject)=>{\n                new UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\n            });\n        return {\n            hash: userOpHash,\n            confirmations: 0,\n            from: userOp.sender,\n            nonce: 0,\n            // not the real nonce, but good enough for this purpose\n            gasLimit: ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(userOp.callGasLimit),\n            // ??\n            value: ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0),\n            data: ethers__WEBPACK_IMPORTED_MODULE_3__.hexValue(userOp.callData),\n            // should extract the actual called method from this \"execFromEntryPoint()\" call\n            chainId: this.chainId,\n            wait: async (confirmations)=>{\n                const transactionReceipt = await waitForUserOp();\n                if (userOp.initCode.length !== 0) {\n                    // checking if the wallet has been deployed by the transaction; it must be if we are here\n                    await this.smartAccountAPI.checkAccountPhantom();\n                }\n                return transactionReceipt;\n            }\n        };\n    }\n    async detectNetwork() {\n        return this.originalProvider.detectNetwork();\n    }\n    constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI){\n        super({\n            name: \"ERC-4337 Custom Network\",\n            chainId\n        });\n        this.chainId = chainId;\n        this.config = config;\n        this.originalSigner = originalSigner;\n        this.originalProvider = originalProvider;\n        this.httpRpcClient = httpRpcClient;\n        this.entryPoint = entryPoint;\n        this.smartAccountAPI = smartAccountAPI;\n        this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n    }\n}\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */ function create4337Provider(config, accountApi, originalProvider, chainId) {\n    const entryPoint = _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_0__.EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n    const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n    return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */ class BaseAccountAPI {\n    /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */ /**\n   * return current account's nonce.\n   */ /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */ /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */ /**\n   * calculate the account address even before it is deployed\n   */ /**\n   * check if the contract is already deployed.\n   */ async checkAccountPhantom() {\n        if (!this.isPhantom) {\n            // already deployed. no need to check anymore.\n            return this.isPhantom;\n        }\n        const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n        if (senderAddressCode.length > 2) {\n            this.isPhantom = false;\n        }\n        return this.isPhantom;\n    }\n    /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */ async getInitCode() {\n        if (await this.checkAccountPhantom()) {\n            return await this.getAccountInitCode();\n        }\n        return \"0x\";\n    }\n    /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */ async getVerificationGasLimit() {\n        return 100000;\n    }\n    /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */ async getUserOpHash(userOp) {\n        const chainId = await this.provider.getNetwork().then((net)=>net.chainId);\n        return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n    }\n    /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */ async getAccountAddress() {\n        if (!this.senderAddress) {\n            if (this.accountAddress) {\n                this.senderAddress = this.accountAddress;\n            } else {\n                this.senderAddress = await this.getCounterFactualAddress();\n            }\n        }\n        return this.senderAddress;\n    }\n    async estimateCreationGas(initCode) {\n        if (!initCode || initCode === \"0x\") {\n            return 0;\n        }\n        const deployerAddress = initCode.substring(0, 42);\n        const deployerCallData = \"0x\" + initCode.substring(42);\n        return await this.provider.estimateGas({\n            to: deployerAddress,\n            data: deployerCallData\n        });\n    }\n    async createUnsignedUserOp(httpRpcClient, info, options) {\n        // construct the userOp without gasLimit or preVerifictaionGas\n        const initCode = await this.getInitCode();\n        var _parseNumber;\n        const value = (_parseNumber = parseNumber(info.value)) !== null && _parseNumber !== void 0 ? _parseNumber : ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0);\n        const callData = (options === null || options === void 0 ? void 0 : options.batchData) ? info.data : await this.prepareExecute(info.target, value, info.data).then((tx)=>tx.encode());\n        let { maxFeePerGas, maxPriorityFeePerGas } = info;\n        if (!maxFeePerGas || !maxPriorityFeePerGas) {\n            const feeData = await (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_12__.a)(this.provider);\n            if (!maxPriorityFeePerGas) {\n                var _feeData_maxPriorityFeePerGas;\n                maxPriorityFeePerGas = (_feeData_maxPriorityFeePerGas = feeData.maxPriorityFeePerGas) !== null && _feeData_maxPriorityFeePerGas !== void 0 ? _feeData_maxPriorityFeePerGas : undefined;\n            }\n            if (!maxFeePerGas) {\n                var _feeData_maxFeePerGas;\n                maxFeePerGas = (_feeData_maxFeePerGas = feeData.maxFeePerGas) !== null && _feeData_maxFeePerGas !== void 0 ? _feeData_maxFeePerGas : undefined;\n                const network = await this.provider.getNetwork();\n                const chainId = network.chainId;\n                if (chainId === _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_13__.Celo.chainId || chainId === _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_13__.CeloAlfajoresTestnet.chainId || chainId === _thirdweb_dev_chains__WEBPACK_IMPORTED_MODULE_13__.CeloBaklavaTestnet.chainId) {\n                    maxPriorityFeePerGas = maxFeePerGas;\n                }\n            }\n        }\n        if (!maxFeePerGas || !maxPriorityFeePerGas) {\n            throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n        }\n        const [sender, nonce] = await Promise.all([\n            this.getAccountAddress(),\n            info.nonce ? Promise.resolve(info.nonce) : this.getNonce()\n        ]);\n        const partialOp = {\n            sender,\n            nonce,\n            initCode,\n            callData,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            callGasLimit: ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(1000000),\n            verificationGasLimit: ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(1000000),\n            preVerificationGas: ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(1000000),\n            paymasterAndData: \"0x\",\n            signature: DUMMY_SIGNATURE\n        };\n        // paymaster data + maybe used for estimation as well\n        const gasless = (options === null || options === void 0 ? void 0 : options.gasless) !== undefined ? options.gasless : this.gasless;\n        if (gasless) {\n            const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n            const paymasterAndData = paymasterResult.paymasterAndData;\n            if (paymasterAndData && paymasterAndData !== \"0x\") {\n                partialOp.paymasterAndData = paymasterAndData;\n            }\n            // paymaster can have the gas limits in the response\n            if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n                partialOp.callGasLimit = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(paymasterResult.callGasLimit);\n                partialOp.verificationGasLimit = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(paymasterResult.verificationGasLimit);\n                partialOp.preVerificationGas = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(paymasterResult.preVerificationGas);\n            } else {\n                // otherwise fallback to bundler for gas limits\n                let estimates;\n                try {\n                    estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n                } catch (error) {\n                    throw this.unwrapBundlerError(error);\n                }\n                partialOp.callGasLimit = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(estimates.callGasLimit);\n                partialOp.verificationGasLimit = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(estimates.verificationGasLimit);\n                partialOp.preVerificationGas = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(estimates.preVerificationGas);\n                // need paymaster to re-sign after estimates\n                const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n                if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n                    partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n                }\n            }\n        } else {\n            // query bundler for gas limits\n            let estimates;\n            try {\n                estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n            } catch (error) {\n                throw this.unwrapBundlerError(error);\n            }\n            partialOp.callGasLimit = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(estimates.callGasLimit);\n            partialOp.verificationGasLimit = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(estimates.verificationGasLimit);\n            partialOp.preVerificationGas = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(estimates.preVerificationGas);\n        }\n        return {\n            ...partialOp,\n            signature: \"\"\n        };\n    }\n    /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */ async signUserOp(userOp) {\n        const userOpHash = await this.getUserOpHash(userOp);\n        const signature = await this.signUserOpHash(userOpHash);\n        return {\n            ...userOp,\n            signature\n        };\n    }\n    /**\n   * get the transaction that has this userOpHash mined, or null if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transactionHash this userOp was mined, or null if not found.\n   */ async getUserOpReceipt(userOpHash) {\n        let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;\n        let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;\n        const endtime = Date.now() + timeout;\n        while(Date.now() < endtime){\n            const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));\n            if (events[0]) {\n                return events[0].transactionHash;\n            }\n            await new Promise((resolve)=>setTimeout(resolve, interval));\n        }\n        return null;\n    }\n    unwrapBundlerError(error) {\n        var _error_error;\n        const message = (error === null || error === void 0 ? void 0 : (_error_error = error.error) === null || _error_error === void 0 ? void 0 : _error_error.message) || error.error || error.message || error;\n        return new Error(message);\n    }\n    // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n    /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */ constructor(params){\n        (0,_dist_defineProperty_d7c057bf_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__._)(this, \"isPhantom\", true);\n        this.provider = params.provider;\n        this.entryPointAddress = params.entryPointAddress;\n        this.accountAddress = params.accountAddress;\n        this.paymasterAPI = params.paymasterAPI;\n        this.gasless = params.gasless;\n        // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n        this.entryPointView = _account_abstraction_contracts__WEBPACK_IMPORTED_MODULE_0__.EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers__WEBPACK_IMPORTED_MODULE_14__.AddressZero);\n    }\n}\nfunction parseNumber(a) {\n    if (!a || a === \"\") {\n        return null;\n    }\n    return ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(a.toString());\n}\nclass AccountAPI extends BaseAccountAPI {\n    async getChainId() {\n        return await this.provider.getNetwork().then((n)=>n.chainId);\n    }\n    async getAccountContract() {\n        if (!this.accountContract) {\n            var _this_params_accountInfo;\n            if ((_this_params_accountInfo = this.params.accountInfo) === null || _this_params_accountInfo === void 0 ? void 0 : _this_params_accountInfo.abi) {\n                this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n            } else {\n                this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), _dist_constants_5a6f7f26_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.A);\n            }\n        }\n        return this.accountContract;\n    }\n    async getAccountInitCode() {\n        const factory = await this.getFactoryContract();\n        console.log(\"Deploying smart wallet via factory\");\n        const localSigner = await this.params.localSigner.getAddress();\n        const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n        try {\n            console.log(\"Cost to deploy smart wallet: \", (await tx.estimateGasCost()).ether, \"ETH\");\n        } catch (e) {\n            console.error(\"Cost to deploy smart wallet: unknown\", e);\n        }\n        return ethers__WEBPACK_IMPORTED_MODULE_3__.hexConcat([\n            factory.getAddress(),\n            tx.encode()\n        ]);\n    }\n    async getFactoryContract() {\n        var _this_params_factoryInfo;\n        if (this.factoryContract) {\n            return this.factoryContract;\n        }\n        if ((_this_params_factoryInfo = this.params.factoryInfo) === null || _this_params_factoryInfo === void 0 ? void 0 : _this_params_factoryInfo.abi) {\n            this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n        } else {\n            this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n        }\n        return this.factoryContract;\n    }\n    async getCounterFactualAddress() {\n        if (this.params.accountAddress) {\n            return this.params.accountAddress;\n        }\n        const factory = await this.getFactoryContract();\n        const localSigner = await this.params.localSigner.getAddress();\n        return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n    }\n    async getNonce() {\n        if (await this.checkAccountPhantom()) {\n            return ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0);\n        }\n        const accountContract = await this.getAccountContract();\n        return this.params.accountInfo.getNonce(accountContract);\n    }\n    async prepareExecute(target, value, data) {\n        const accountContract = await this.getAccountContract();\n        return this.params.accountInfo.execute(accountContract, target, value, data);\n    }\n    async prepareExecuteBatch(targets, values, datas) {\n        const accountContract = await this.getAccountContract();\n        return accountContract.prepare(\"executeBatch\", [\n            targets,\n            values,\n            datas\n        ]);\n    }\n    async signUserOpHash(userOpHash) {\n        return await this.params.localSigner.signMessage(ethers__WEBPACK_IMPORTED_MODULE_3__.arrayify(userOpHash));\n    }\n    async isAcountDeployed() {\n        return !await this.checkAccountPhantom();\n    }\n    constructor(params, originalProvider){\n        super({\n            ...params,\n            provider: originalProvider\n        });\n        this.params = params;\n        // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n        // We don't want to use the localSigner directly since it might be connected to another chain\n        // so we just use the public hardhat pkey instead\n        this.sdk = _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_16__.T.fromPrivateKey(_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_16__.L, params.chain, {\n            clientId: params.clientId,\n            secretKey: params.secretKey,\n            // @ts-expect-error expected chain type error\n            supportedChains: typeof params.chain === \"object\" ? [\n                params.chain\n            ] : undefined\n        });\n    }\n}\nclass SmartWalletConnector extends _dist_connector_05689d68_browser_esm_js__WEBPACK_IMPORTED_MODULE_17__.C {\n    async initialize(params) {\n        const config = this.config;\n        const originalProvider = (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_18__.a_)(config.chain, {\n            clientId: config.clientId,\n            secretKey: config.secretKey\n        });\n        this.chainId = (await originalProvider.getNetwork()).chainId;\n        const bundlerUrl = this.config.bundlerUrl || \"https://\".concat(this.chainId, \".bundler.thirdweb.com\");\n        const paymasterUrl = this.config.paymasterUrl || \"https://\".concat(this.chainId, \".bundler.thirdweb.com/v2\");\n        const entryPointAddress = config.entryPointAddress || _dist_constants_5a6f7f26_browser_esm_js__WEBPACK_IMPORTED_MODULE_15__.E;\n        const localSigner = await params.personalWallet.getSigner();\n        const providerConfig = {\n            chain: config.chain,\n            localSigner,\n            entryPointAddress,\n            bundlerUrl,\n            paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n            gasless: config.gasless,\n            factoryAddress: config.factoryAddress,\n            accountAddress: params.accountAddress,\n            factoryInfo: config.factoryInfo || this.defaultFactoryInfo(),\n            accountInfo: config.accountInfo || this.defaultAccountInfo(),\n            clientId: config.clientId,\n            secretKey: config.secretKey\n        };\n        this.personalWallet = params.personalWallet;\n        const accountApi = new AccountAPI(providerConfig, originalProvider);\n        this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n        this.accountApi = accountApi;\n    }\n    async connect(connectionArgs) {\n        await this.initialize(connectionArgs);\n        return await this.getAddress();\n    }\n    getProvider() {\n        if (!this.aaProvider) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        return Promise.resolve(this.aaProvider);\n    }\n    async getSigner() {\n        if (!this.aaProvider) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        return Promise.resolve(this.aaProvider.getSigner());\n    }\n    async getAddress() {\n        const signer = await this.getSigner();\n        return signer.getAddress();\n    }\n    async isConnected() {\n        try {\n            const address = await this.getAddress();\n            return !!address;\n        } catch (e) {\n            return false;\n        }\n    }\n    async disconnect() {\n        this.personalWallet = undefined;\n        this.aaProvider = undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async switchChain(chainId) {\n        const provider = await this.getProvider();\n        const currentChainId = (await provider.getNetwork()).chainId;\n        if (currentChainId !== chainId) {\n            // only throw if actually trying to switch chains\n            throw new Error(\"Not supported.\");\n        }\n    }\n    setupListeners() {\n        return Promise.resolve();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    updateChains(chains) {}\n    /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */ async hasPermissionToExecute(transaction) {\n        var _filter_;\n        const accountContract = await this.getAccountContract();\n        const signer = await this.getSigner();\n        const signerAddress = await signer.getAddress();\n        const restrictions = (_filter_ = (await accountContract.account.getAllSigners()).filter((item)=>ethers__WEBPACK_IMPORTED_MODULE_19__.getAddress(item.signer) === ethers__WEBPACK_IMPORTED_MODULE_19__.getAddress(signerAddress))[0]) === null || _filter_ === void 0 ? void 0 : _filter_.permissions;\n        if (!restrictions) {\n            return false;\n        }\n        return restrictions.approvedCallTargets.includes(transaction.getTarget());\n    }\n    /// PREPARED TRANSACTIONS\n    /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */ async send(transaction, options) {\n        const signer = await this.getSigner();\n        return signer.sendTransaction({\n            to: transaction.getTarget(),\n            data: transaction.encode(),\n            value: await transaction.getValue()\n        }, options);\n    }\n    /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */ async execute(transaction, options) {\n        const tx = await this.send(transaction, options);\n        const receipt = await tx.wait();\n        return {\n            receipt\n        };\n    }\n    async sendBatch(transactions, options) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const signer = await this.getSigner();\n        const { tx, batchData } = await this.prepareBatchTx(transactions);\n        return await signer.sendTransaction({\n            to: await signer.getAddress(),\n            data: tx.encode(),\n            value: 0\n        }, {\n            ...options,\n            batchData\n        });\n    }\n    /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */ async executeBatch(transactions, options) {\n        const tx = await this.sendBatch(transactions, options);\n        const receipt = await tx.wait();\n        return {\n            receipt\n        };\n    }\n    /// RAW TRANSACTIONS\n    async sendRaw(transaction, options) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const signer = await this.getSigner();\n        return signer.sendTransaction(transaction, options);\n    }\n    async executeRaw(transaction, options) {\n        const tx = await this.sendRaw(transaction, options);\n        const receipt = await tx.wait();\n        return {\n            receipt\n        };\n    }\n    async sendBatchRaw(transactions, options) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const signer = await this.getSigner();\n        const batch = await this.prepareBatchRaw(transactions);\n        return signer.sendTransaction({\n            to: await signer.getAddress(),\n            data: batch.tx.encode(),\n            value: 0\n        }, {\n            ...options,\n            batchData: batch.batchData // batched tx flag\n        });\n    }\n    async executeBatchRaw(transactions, options) {\n        const tx = await this.sendBatchRaw(transactions, options);\n        const receipt = await tx.wait();\n        return {\n            receipt\n        };\n    }\n    /// ESTIMATION\n    async estimate(transaction, options) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        return this.estimateTx({\n            target: transaction.getTarget(),\n            data: transaction.encode(),\n            value: await transaction.getValue(),\n            gasLimit: await transaction.getOverrides().gasLimit,\n            maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n            maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n            nonce: await transaction.getOverrides().nonce\n        }, options);\n    }\n    async estimateRaw(transaction, options) {\n        var _tx_data;\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const tx = await ethers__WEBPACK_IMPORTED_MODULE_2__.resolveProperties(transaction);\n        return this.estimateTx({\n            target: tx.to || ethers__WEBPACK_IMPORTED_MODULE_14__.AddressZero,\n            data: ((_tx_data = tx.data) === null || _tx_data === void 0 ? void 0 : _tx_data.toString()) || \"\",\n            value: tx.value || ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0),\n            gasLimit: tx.gasLimit,\n            maxFeePerGas: tx.maxFeePerGas,\n            maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n            nonce: tx.nonce\n        }, options);\n    }\n    async estimateBatch(transactions, options) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const { tx, batchData } = await this.prepareBatchTx(transactions);\n        return this.estimateTx({\n            target: tx.getTarget(),\n            data: tx.encode(),\n            value: await tx.getValue(),\n            gasLimit: await tx.getOverrides().gasLimit,\n            maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n            maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n            nonce: await tx.getOverrides().nonce\n        }, {\n            ...options,\n            batchData\n        });\n    }\n    async estimateBatchRaw(transactions, options) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const { tx, batchData } = await this.prepareBatchRaw(transactions);\n        return this.estimateTx({\n            target: tx.getTarget(),\n            data: tx.encode(),\n            value: await tx.getValue(),\n            gasLimit: await tx.getOverrides().gasLimit,\n            maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n            maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n            nonce: await tx.getOverrides().nonce\n        }, {\n            ...options,\n            batchData\n        });\n    }\n    //// DEPLOYMENT\n    /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */ async deploy(options) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const signer = await this.getSigner();\n        const tx = await signer.sendTransaction({\n            to: await signer.getAddress(),\n            data: \"0x\"\n        }, {\n            ...options,\n            batchData: {\n                targets: [],\n                data: [],\n                values: []\n            } // batched tx flag to avoid hitting the Router fallback method\n        });\n        const receipt = await tx.wait();\n        return {\n            receipt\n        };\n    }\n    /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */ async isDeployed() {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        return await this.accountApi.isAcountDeployed();\n    }\n    async deployIfNeeded(options) {\n        const isDeployed = await this.isDeployed();\n        if (!isDeployed) {\n            await this.deploy(options);\n        }\n    }\n    //// PERMISSIONS\n    async grantPermissions(target, permissions) {\n        await this.deployIfNeeded();\n        const accountContract = await this.getAccountContract();\n        return accountContract.account.grantPermissions(target, permissions);\n    }\n    async revokePermissions(target) {\n        await this.deployIfNeeded();\n        const accountContract = await this.getAccountContract();\n        return accountContract.account.revokeAccess(target);\n    }\n    async addAdmin(target) {\n        await this.deployIfNeeded();\n        const accountContract = await this.getAccountContract();\n        return accountContract.account.grantAdminPermissions(target);\n    }\n    async removeAdmin(target) {\n        await this.deployIfNeeded();\n        const accountContract = await this.getAccountContract();\n        return accountContract.account.revokeAdminPermissions(target);\n    }\n    async getAllActiveSigners() {\n        const isDeployed = await this.isDeployed();\n        if (isDeployed) {\n            const accountContract = await this.getAccountContract();\n            return accountContract.account.getAllAdminsAndSigners();\n        } else {\n            var _this_personalWallet;\n            const personalWallet = await ((_this_personalWallet = this.personalWallet) === null || _this_personalWallet === void 0 ? void 0 : _this_personalWallet.getSigner());\n            if (!personalWallet) {\n                throw new Error(\"Personal wallet not connected\");\n            }\n            return [\n                {\n                    isAdmin: true,\n                    signer: await personalWallet.getAddress(),\n                    permissions: {\n                        startDate: new Date(0),\n                        expirationDate: new Date(0),\n                        nativeTokenLimitPerTransaction: ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0),\n                        approvedCallTargets: []\n                    }\n                }\n            ];\n        }\n    }\n    /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */ async getAccountContract() {\n        var _this_config_accountInfo;\n        const isDeployed = await this.isDeployed();\n        if (!isDeployed) {\n            throw new Error(\"Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.\");\n        }\n        // getting a new instance everytime\n        // to avoid caching issues pre/post deployment\n        const sdk = _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_16__.T.fromSigner(await this.getSigner(), this.config.chain, {\n            clientId: this.config.clientId,\n            secretKey: this.config.secretKey\n        });\n        if ((_this_config_accountInfo = this.config.accountInfo) === null || _this_config_accountInfo === void 0 ? void 0 : _this_config_accountInfo.abi) {\n            return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n        } else {\n            return sdk.getContract(await this.getAddress());\n        }\n    }\n    /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */ async getFactoryContract() {\n        var _this_config_factoryInfo;\n        const sdk = _thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_16__.T.fromSigner(await this.getSigner(), this.config.chain, {\n            clientId: this.config.clientId,\n            secretKey: this.config.secretKey\n        });\n        if ((_this_config_factoryInfo = this.config.factoryInfo) === null || _this_config_factoryInfo === void 0 ? void 0 : _this_config_factoryInfo.abi) {\n            return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n        }\n        return sdk.getContract(this.config.factoryAddress);\n    }\n    defaultFactoryInfo() {\n        return {\n            createAccount: async (factory, owner)=>{\n                return factory.prepare(\"createAccount\", [\n                    owner,\n                    ethers__WEBPACK_IMPORTED_MODULE_20__.toUtf8Bytes(\"\")\n                ]);\n            },\n            getAccountAddress: async (factory, owner)=>{\n                return await factory.call(\"getAddress\", [\n                    owner,\n                    ethers__WEBPACK_IMPORTED_MODULE_20__.toUtf8Bytes(\"\")\n                ]);\n            }\n        };\n    }\n    defaultAccountInfo() {\n        return {\n            execute: async (account, target, value, data)=>{\n                return account.prepare(\"execute\", [\n                    target,\n                    value,\n                    data\n                ]);\n            },\n            getNonce: async (account)=>{\n                return account.call(\"getNonce\", []);\n            }\n        };\n    }\n    /// PRIVATE METHODS\n    async estimateTx(tx, options) {\n        if (!this.accountApi || !this.aaProvider) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        let deployGasLimit = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0);\n        const [provider, isDeployed] = await Promise.all([\n            this.getProvider(),\n            this.isDeployed()\n        ]);\n        if (!isDeployed) {\n            deployGasLimit = await this.estimateDeploymentGasLimit();\n        }\n        const [userOp, gasPrice] = await Promise.all([\n            this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options),\n            (0,_thirdweb_dev_sdk__WEBPACK_IMPORTED_MODULE_12__.b)(provider)\n        ]);\n        const resolved = await ethers__WEBPACK_IMPORTED_MODULE_2__.resolveProperties(userOp);\n        const transactionGasLimit = ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(resolved.callGasLimit);\n        const transactionCost = transactionGasLimit.mul(gasPrice);\n        const deployCost = deployGasLimit.mul(gasPrice);\n        const totalCost = deployCost.add(transactionCost);\n        return {\n            ether: ethers__WEBPACK_IMPORTED_MODULE_21__.formatEther(totalCost),\n            wei: totalCost,\n            details: {\n                deployGasLimit,\n                transactionGasLimit,\n                gasPrice,\n                transactionCost,\n                deployCost,\n                totalCost\n            }\n        };\n    }\n    async estimateDeploymentGasLimit() {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const initCode = await this.accountApi.getInitCode();\n        const [initGas, verificationGasLimit] = await Promise.all([\n            this.accountApi.estimateCreationGas(initCode),\n            this.accountApi.getVerificationGasLimit()\n        ]);\n        return ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(verificationGasLimit).add(initGas);\n    }\n    async prepareBatchRaw(transactions) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const resolvedTxs = await Promise.all(transactions.map((transaction)=>ethers__WEBPACK_IMPORTED_MODULE_2__.resolveProperties(transaction)));\n        const targets = resolvedTxs.map((tx)=>tx.to || ethers__WEBPACK_IMPORTED_MODULE_14__.AddressZero);\n        const data = resolvedTxs.map((tx)=>tx.data || \"0x\");\n        const values = resolvedTxs.map((tx)=>tx.value || ethers__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0));\n        return {\n            tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n            batchData: {\n                targets,\n                data,\n                values\n            }\n        };\n    }\n    async prepareBatchTx(transactions) {\n        if (!this.accountApi) {\n            throw new Error(\"Personal wallet not connected\");\n        }\n        const targets = transactions.map((tx)=>tx.getTarget());\n        const data = transactions.map((tx)=>tx.encode());\n        const values = await Promise.all(transactions.map((tx)=>tx.getValue()));\n        return {\n            tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n            batchData: {\n                targets,\n                data,\n                values\n            }\n        };\n    }\n    constructor(config){\n        super();\n        this.config = config;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+wallets@2.4.2_@ethersproject+abstract-provider@5.7.0_@ethersproject+abstract-si_q3uhj54vw2tqcdxon24cvgplba/node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js\n"));

/***/ })

}]);