"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_thirdweb-dev_sdk_4_0_27_ethers_5_7_2_typescript_5_0_2_no-95cbb8"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/split-dd11fa3f.browser.esm.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/split-dd11fa3f.browser.esm.js ***!
  \*****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Split: function() { return /* binding */ Split; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/@ethersproject+contracts@5.7.0/node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var _fetchCurrencyValue_5031b794_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fetchCurrencyValue-5031b794.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-5031b794.browser.esm.js\");\n/* harmony import */ var _index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-c820b7d4.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/index-c820b7d4.browser.esm.js\");\n/* harmony import */ var _transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transactions-a0e9a480.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/transactions-a0e9a480.browser.esm.js\");\n/* harmony import */ var _contract_appuri_a2734267_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./contract-appuri-a2734267.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/contract-appuri-a2734267.browser.esm.js\");\n/* harmony import */ var _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./contract-interceptor-d7b164a7.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js\");\n/* harmony import */ var _contract_roles_275dcf7c_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./contract-roles-275dcf7c.browser.esm.js */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/contract-roles-275dcf7c.browser.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tiny-invariant */ \"(app-pages-browser)/./node_modules/.pnpm/tiny-invariant@1.3.1/node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"(app-pages-browser)/./node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"(app-pages-browser)/./node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */ // TODO create extension wrappers for this\nclass Split {\n    /**\n   * @internal\n   */ get chainId() {\n        return this._chainId;\n    }\n    onNetworkUpdated(network) {\n        this.contractWrapper.updateSignerOrProvider(network);\n    }\n    getAddress() {\n        return this.contractWrapper.address;\n    }\n    /** ******************************\n   * READ FUNCTIONS\n   *******************************/ /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */ async getAllRecipients() {\n        const recipients = [];\n        let index = ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(0);\n        const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n        while(index.lt(totalRecipients)){\n            try {\n                const recipientAddress = await this.contractWrapper.read(\"payee\", [\n                    index\n                ]);\n                recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n                index = index.add(1);\n            } catch (err) {\n                // The only way we know how to detect that we've found all recipients\n                // is if we get an error when trying to get the next recipient.\n                if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n                    break;\n                } else {\n                    throw err;\n                }\n            }\n        }\n        return recipients;\n    }\n    /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */ async balanceOfAllRecipients() {\n        const recipients = await this.getAllRecipients();\n        const balances = {};\n        for (const recipient of recipients){\n            balances[recipient.address] = await this.balanceOf(recipient.address);\n        }\n        return balances;\n    }\n    /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */ async balanceOfTokenAllRecipients(tokenAddress) {\n        const [resolvedToken, recipients] = await Promise.all([\n            (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(tokenAddress),\n            this.getAllRecipients()\n        ]);\n        const balances = {};\n        for (const recipient of recipients){\n            balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n        }\n        return balances;\n    }\n    /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */ async balanceOf(address) {\n        const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([\n            (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(address),\n            this.contractWrapper.getProvider().getBalance(this.getAddress()),\n            this.contractWrapper.read(\"totalReleased\", [])\n        ]);\n        const totalReceived = walletBalance.add(totalReleased);\n        return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [\n            resolvedAddress\n        ]));\n    }\n    /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */ async balanceOfToken(walletAddress, tokenAddress) {\n        const [resolvedToken, resolvedWallet] = await Promise.all([\n            (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(tokenAddress),\n            (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(walletAddress)\n        ]);\n        const ERC20Abi = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+contracts-js@1.3.16_ethers@5.7.2/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\", 19))).default;\n        const erc20 = new ethers__WEBPACK_IMPORTED_MODULE_6__.Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n        const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([\n            erc20.balanceOf(this.getAddress()),\n            this.contractWrapper.read(\"totalReleased\", [\n                resolvedToken\n            ]),\n            this.contractWrapper.read(\"released\", [\n                resolvedToken,\n                resolvedWallet\n            ])\n        ]);\n        const totalReceived = walletBalance.add(totalReleased);\n        const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n        return await (0,_fetchCurrencyValue_5031b794_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a)(this.contractWrapper.getProvider(), resolvedToken, value);\n    }\n    /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */ async getRecipientSplitPercentage(address) {\n        const [resolvedAddress, totalShares, walletsShares] = await Promise.all([\n            (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(address),\n            this.contractWrapper.read(\"totalShares\", []),\n            this.contractWrapper.read(\"shares\", [\n                address\n            ])\n        ]);\n        // We convert to basis points to avoid floating point loss of precision\n        return {\n            address: resolvedAddress,\n            splitPercentage: walletsShares.mul(ethers__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n        };\n    }\n    /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/ async _pendingPayment(address, totalReceived, alreadyReleased) {\n        const [resolvedAddress, totalShares] = await Promise.all([\n            (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(address),\n            this.contractWrapper.read(\"totalShares\", [])\n        ]);\n        const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [\n            resolvedAddress\n        ]));\n        const totalRoyaltyAvailable = addressReceived.div(totalShares);\n        return totalRoyaltyAvailable.sub(alreadyReleased);\n    }\n    /**\n   * @internal\n   */ async prepare(method, args, overrides) {\n        return _transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n            contractWrapper: this.contractWrapper,\n            method,\n            args,\n            overrides\n        });\n    }\n    /**\n   * @internal\n   */ async call(functionName, args, overrides) {\n        return this.contractWrapper.call(functionName, args, overrides);\n    }\n    constructor(network, address, storage){\n        /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/ /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */ this.withdraw = /* @__PURE__ */ (0,_transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d)(async (walletAddress)=>{\n            return _transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n                contractWrapper: this.contractWrapper,\n                method: \"release(address)\",\n                args: [\n                    await (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(walletAddress)\n                ]\n            });\n        });\n        /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */ this.withdrawToken = /* @__PURE__ */ (0,_transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d)(async (walletAddress, tokenAddress)=>{\n            return _transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n                contractWrapper: this.contractWrapper,\n                method: \"release(address,address)\",\n                args: await Promise.all([\n                    (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(tokenAddress),\n                    (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(walletAddress)\n                ])\n            });\n        });\n        /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */ this.distribute = /* @__PURE__ */ (0,_transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d)(async ()=>{\n            return _transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n                contractWrapper: this.contractWrapper,\n                method: \"distribute()\",\n                args: []\n            });\n        });\n        /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */ this.distributeToken = /* @__PURE__ */ (0,_transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d)(async (tokenAddress)=>{\n            return _transactions_a0e9a480_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.T.fromContractWrapper({\n                contractWrapper: this.contractWrapper,\n                method: \"distribute(address)\",\n                args: [\n                    await (0,_index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.aL)(tokenAddress)\n                ]\n            });\n        });\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        let abi = arguments.length > 4 ? arguments[4] : undefined;\n        let chainId = arguments.length > 5 ? arguments[5] : undefined;\n        let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.cq(network, address, abi, options, storage);\n        this._chainId = chainId;\n        this.abi = _index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.bj.parse(abi || []);\n        this.contractWrapper = contractWrapper;\n        this.storage = storage;\n        this.metadata = new _contract_appuri_a2734267_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.C(this.contractWrapper, _index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.c5, this.storage);\n        this.app = new _contract_appuri_a2734267_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.b(this.contractWrapper, this.metadata, this.storage);\n        this.roles = new _contract_roles_275dcf7c_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.C(this.contractWrapper, Split.contractRoles);\n        this.encoder = new _fetchCurrencyValue_5031b794_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.C(this.contractWrapper);\n        this.estimator = new _contract_appuri_a2734267_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.G(this.contractWrapper);\n        this.events = new _contract_appuri_a2734267_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a(this.contractWrapper);\n        this.interceptor = new _contract_interceptor_d7b164a7_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.C(this.contractWrapper);\n    }\n}\nSplit.contractRoles = _index_c820b7d4_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__.dF;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@thirdweb-dev+sdk@4.0.27_ethers@5.7.2_typescript@5.0.2/node_modules/@thirdweb-dev/sdk/dist/split-dd11fa3f.browser.esm.js\n"));

/***/ })

}]);