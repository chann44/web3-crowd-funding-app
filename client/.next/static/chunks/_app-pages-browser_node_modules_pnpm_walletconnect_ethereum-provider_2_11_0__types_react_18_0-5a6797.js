"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_walletconnect_ethereum-provider_2_11_0__types_react_18_0-5a6797"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/@walletconnect+ethereum-provider@2.11.0_@types+react@18.0.0_react@18.0.0/node_modules/@walletconnect/ethereum-provider/dist/index.es.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+ethereum-provider@2.11.0_@types+react@18.0.0_react@18.0.0/node_modules/@walletconnect/ethereum-provider/dist/index.es.js ***!
  \********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumProvider: function() { return /* binding */ G; },\n/* harmony export */   OPTIONAL_EVENTS: function() { return /* binding */ _; },\n/* harmony export */   OPTIONAL_METHODS: function() { return /* binding */ E; },\n/* harmony export */   REQUIRED_EVENTS: function() { return /* binding */ m; },\n/* harmony export */   REQUIRED_METHODS: function() { return /* binding */ u; },\n/* harmony export */   \"default\": function() { return /* binding */ v; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+utils@2.11.0/node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+universal-provider@2.11.0/node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\nconst P = \"wc\", S = \"ethereum_provider\", $ = \"\".concat(P, \"@2:\").concat(S, \":\"), j = \"https://rpc.walletconnect.com/v1/\", u = [\n    \"eth_sendTransaction\",\n    \"personal_sign\"\n], E = [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\"\n], m = [\n    \"chainChanged\",\n    \"accountsChanged\"\n], _ = [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n];\nvar N = Object.defineProperty, q = Object.defineProperties, D = Object.getOwnPropertyDescriptors, y = Object.getOwnPropertySymbols, U = Object.prototype.hasOwnProperty, Q = Object.prototype.propertyIsEnumerable, O = (a, t, s)=>t in a ? N(a, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : a[t] = s, p = (a, t)=>{\n    for(var s in t || (t = {}))U.call(t, s) && O(a, s, t[s]);\n    if (y) for (var s of y(t))Q.call(t, s) && O(a, s, t[s]);\n    return a;\n}, M = (a, t)=>q(a, D(t));\nfunction g(a) {\n    return Number(a[0].split(\":\")[1]);\n}\nfunction f(a) {\n    return \"0x\".concat(a.toString(16));\n}\nfunction L(a) {\n    const { chains: t, optionalChains: s, methods: i, optionalMethods: n, events: e, optionalEvents: h, rpcMap: c } = a;\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(t)) throw new Error(\"Invalid chains\");\n    const o = {\n        chains: t,\n        methods: i || u,\n        events: e || m,\n        rpcMap: p({}, t.length ? {\n            [g(t)]: c[g(t)]\n        } : {})\n    }, r = e === null || e === void 0 ? void 0 : e.filter((l)=>!m.includes(l)), d = i === null || i === void 0 ? void 0 : i.filter((l)=>!u.includes(l));\n    if (!s && !h && !n && !(r != null && r.length) && !(d != null && d.length)) return {\n        required: t.length ? o : void 0\n    };\n    const C = (r === null || r === void 0 ? void 0 : r.length) && (d === null || d === void 0 ? void 0 : d.length) || !s, I = {\n        chains: [\n            ...new Set(C ? o.chains.concat(s || []) : s)\n        ],\n        methods: [\n            ...new Set(o.methods.concat(n != null && n.length ? n : E))\n        ],\n        events: [\n            ...new Set(o.events.concat(h != null && h.length ? h : _))\n        ],\n        rpcMap: c\n    };\n    return {\n        required: t.length ? o : void 0,\n        optional: s.length ? I : void 0\n    };\n}\n_c = L;\nclass v {\n    static async init(t) {\n        const s = new v;\n        return await s.initialize(t), s;\n    }\n    async request(t) {\n        return await this.signer.request(t, this.formatChainId(this.chainId));\n    }\n    sendAsync(t, s) {\n        this.signer.sendAsync(t, s, this.formatChainId(this.chainId));\n    }\n    get connected() {\n        return this.signer.client ? this.signer.client.core.relayer.connected : !1;\n    }\n    get connecting() {\n        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;\n    }\n    async enable() {\n        return this.session || await this.connect(), await this.request({\n            method: \"eth_requestAccounts\"\n        });\n    }\n    async connect(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts(t);\n        const { required: s, optional: i } = L(this.rpc);\n        try {\n            const n = await new Promise(async (h, c)=>{\n                var o;\n                this.rpc.showQrModal && ((o = this.modal) == null || o.subscribeModal((r)=>{\n                    !r.open && !this.signer.session && (this.signer.abortPairingAttempt(), c(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.connect(M(p({\n                    namespaces: p({}, s && {\n                        [this.namespace]: s\n                    })\n                }, i && {\n                    optionalNamespaces: {\n                        [this.namespace]: i\n                    }\n                }), {\n                    pairingTopic: t === null || t === void 0 ? void 0 : t.pairingTopic\n                })).then((r)=>{\n                    h(r);\n                }).catch((r)=>{\n                    c(new Error(r.message));\n                });\n            });\n            if (!n) return;\n            const e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(n.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : e), this.setAccounts(e), this.events.emit(\"connect\", {\n                chainId: f(this.chainId)\n            });\n        } catch (n) {\n            throw this.signer.logger.error(n), n;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async disconnect() {\n        this.session && await this.signer.disconnect(), this.reset();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    get session() {\n        return this.signer.session;\n    }\n    registerEventListeners() {\n        this.signer.on(\"session_event\", (t)=>{\n            const { params: s } = t, { event: i } = s;\n            i.name === \"accountsChanged\" ? (this.accounts = this.parseAccounts(i.data), this.events.emit(\"accountsChanged\", this.accounts)) : i.name === \"chainChanged\" ? this.setChainId(this.formatChainId(i.data)) : this.events.emit(i.name, i.data), this.events.emit(\"session_event\", t);\n        }), this.signer.on(\"chainChanged\", (t)=>{\n            const s = parseInt(t);\n            this.chainId = s, this.events.emit(\"chainChanged\", f(this.chainId)), this.persist();\n        }), this.signer.on(\"session_update\", (t)=>{\n            this.events.emit(\"session_update\", t);\n        }), this.signer.on(\"session_delete\", (t)=>{\n            this.reset(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", M(p({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic,\n                name: \"USER_DISCONNECTED\"\n            }));\n        }), this.signer.on(\"display_uri\", (t)=>{\n            var s, i;\n            this.rpc.showQrModal && ((s = this.modal) == null || s.closeModal(), (i = this.modal) == null || i.openModal({\n                uri: t\n            })), this.events.emit(\"display_uri\", t);\n        });\n    }\n    switchEthereumChain(t) {\n        this.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: t.toString(16)\n                }\n            ]\n        });\n    }\n    isCompatibleChainId(t) {\n        return typeof t == \"string\" ? t.startsWith(\"\".concat(this.namespace, \":\")) : !1;\n    }\n    formatChainId(t) {\n        return \"\".concat(this.namespace, \":\").concat(t);\n    }\n    parseChainId(t) {\n        return Number(t.split(\":\")[1]);\n    }\n    setChainIds(t) {\n        const s = t.filter((i)=>this.isCompatibleChainId(i)).map((i)=>this.parseChainId(i));\n        s.length && (this.chainId = s[0], this.events.emit(\"chainChanged\", f(this.chainId)), this.persist());\n    }\n    setChainId(t) {\n        if (this.isCompatibleChainId(t)) {\n            const s = this.parseChainId(t);\n            this.chainId = s, this.switchEthereumChain(s);\n        }\n    }\n    parseAccountId(t) {\n        const [s, i, n] = t.split(\":\");\n        return {\n            chainId: \"\".concat(s, \":\").concat(i),\n            address: n\n        };\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((s)=>this.parseChainId(this.parseAccountId(s).chainId) === this.chainId).map((s)=>this.parseAccountId(s).address), this.events.emit(\"accountsChanged\", this.accounts);\n    }\n    getRpcConfig(t) {\n        var s, i;\n        const n = (s = t === null || t === void 0 ? void 0 : t.chains) != null ? s : [], e = (i = t === null || t === void 0 ? void 0 : t.optionalChains) != null ? i : [], h = n.concat(e);\n        if (!h.length) throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n        const c = n.length ? (t === null || t === void 0 ? void 0 : t.methods) || u : [], o = n.length ? (t === null || t === void 0 ? void 0 : t.events) || m : [], r = (t === null || t === void 0 ? void 0 : t.optionalMethods) || [], d = (t === null || t === void 0 ? void 0 : t.optionalEvents) || [], C = (t === null || t === void 0 ? void 0 : t.rpcMap) || this.buildRpcMap(h, t.projectId), I = (t === null || t === void 0 ? void 0 : t.qrModalOptions) || void 0;\n        return {\n            chains: n === null || n === void 0 ? void 0 : n.map((l)=>this.formatChainId(l)),\n            optionalChains: e.map((l)=>this.formatChainId(l)),\n            methods: c,\n            events: o,\n            optionalMethods: r,\n            optionalEvents: d,\n            rpcMap: C,\n            showQrModal: !!(t != null && t.showQrModal),\n            qrModalOptions: I,\n            projectId: t.projectId,\n            metadata: t.metadata\n        };\n    }\n    buildRpcMap(t, s) {\n        const i = {};\n        return t.forEach((n)=>{\n            i[n] = this.getRpcUrl(n, s);\n        }), i;\n    }\n    async initialize(t) {\n        if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? g(this.rpc.chains) : g(this.rpc.optionalChains), this.signer = await _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__.UniversalProvider.init({\n            projectId: this.rpc.projectId,\n            metadata: this.rpc.metadata,\n            disableProviderPing: t.disableProviderPing,\n            relayUrl: t.relayUrl,\n            storageOptions: t.storageOptions\n        }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {\n            let s;\n            try {\n                const { WalletConnectModal: i } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_walletconnect_modal_2_6_2__types_react_18_0_0_react_18_0-724c95\").then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+modal@2.6.2_@types+react@18.0.0_react@18.0.0/node_modules/@walletconnect/modal/dist/index.js\"));\n                s = i;\n            } catch (e) {\n                throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n            }\n            if (s) try {\n                this.modal = new s(p({\n                    projectId: this.rpc.projectId\n                }, this.rpc.qrModalOptions));\n            } catch (i) {\n                throw this.signer.logger.error(i), new Error(\"Could not generate WalletConnectModal Instance\");\n            }\n        }\n    }\n    loadConnectOpts(t) {\n        if (!t) return;\n        const { chains: s, optionalChains: i, rpcMap: n } = t;\n        s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(s) && (this.rpc.chains = s.map((e)=>this.formatChainId(e)), s.forEach((e)=>{\n            this.rpc.rpcMap[e] = (n === null || n === void 0 ? void 0 : n[e]) || this.getRpcUrl(e);\n        })), i && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(i) && (this.rpc.optionalChains = [], this.rpc.optionalChains = i === null || i === void 0 ? void 0 : i.map((e)=>this.formatChainId(e)), i.forEach((e)=>{\n            this.rpc.rpcMap[e] = (n === null || n === void 0 ? void 0 : n[e]) || this.getRpcUrl(e);\n        }));\n    }\n    getRpcUrl(t, s) {\n        var i;\n        return ((i = this.rpc.rpcMap) == null ? void 0 : i[t]) || \"\".concat(j, \"?chainId=eip155:\").concat(t, \"&projectId=\").concat(s || this.rpc.projectId);\n    }\n    async loadPersistedSession() {\n        if (!this.session) return;\n        const t = await this.signer.client.core.storage.getItem(\"\".concat(this.STORAGE_KEY, \"/chainId\")), s = this.session.namespaces[\"\".concat(this.namespace, \":\").concat(t)] ? this.session.namespaces[\"\".concat(this.namespace, \":\").concat(t)] : this.session.namespaces[this.namespace];\n        this.setChainIds(t ? [\n            this.formatChainId(t)\n        ] : s === null || s === void 0 ? void 0 : s.accounts), this.setAccounts(s === null || s === void 0 ? void 0 : s.accounts);\n    }\n    reset() {\n        this.chainId = 1, this.accounts = [];\n    }\n    persist() {\n        this.session && this.signer.client.core.storage.setItem(\"\".concat(this.STORAGE_KEY, \"/chainId\"), this.chainId);\n    }\n    parseAccounts(t) {\n        return typeof t == \"string\" || t instanceof String ? [\n            this.parseAccount(t)\n        ] : t.map((s)=>this.parseAccount(s));\n    }\n    constructor(){\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.namespace = \"eip155\", this.accounts = [], this.chainId = 1, this.STORAGE_KEY = $, this.on = (t, s)=>(this.events.on(t, s), this), this.once = (t, s)=>(this.events.once(t, s), this), this.removeListener = (t, s)=>(this.events.removeListener(t, s), this), this.off = (t, s)=>(this.events.off(t, s), this), this.parseAccount = (t)=>this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t, this.signer = {}, this.rpc = {};\n    }\n}\nconst G = v;\n //# sourceMappingURL=index.es.js.map\nvar _c;\n$RefreshReg$(_c, \"L\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2FsbGV0Y29ubmVjdCtldGhlcmV1bS1wcm92aWRlckAyLjExLjBfQHR5cGVzK3JlYWN0QDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2V0aGVyZXVtLXByb3ZpZGVyL2Rpc3QvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFzQztBQUFvRztBQUFzRTtBQUFBLE1BQU1VLElBQUUsTUFBS0MsSUFBRSxxQkFBb0JDLElBQUUsR0FBVUQsT0FBUEQsR0FBRSxPQUFPLE9BQUZDLEdBQUUsTUFBR0UsSUFBRSxxQ0FBb0NDLElBQUU7SUFBQztJQUFzQjtDQUFnQixFQUFDQyxJQUFFO0lBQUM7SUFBZTtJQUFzQjtJQUF5QjtJQUFXO0lBQXNCO0lBQW9CO0lBQXVCO0lBQXVCO0lBQXNCO0lBQWdCO0lBQTZCO0lBQTBCO0lBQXdCO0lBQTRCO0lBQTRCO0lBQW9CO0NBQW9CLEVBQUNDLElBQUU7SUFBQztJQUFlO0NBQWtCLEVBQUNDLElBQUU7SUFBQztJQUFlO0lBQWtCO0lBQVU7SUFBYTtDQUFVO0FBQUMsSUFBSUMsSUFBRUMsT0FBT0MsY0FBYyxFQUFDQyxJQUFFRixPQUFPRyxnQkFBZ0IsRUFBQ0MsSUFBRUosT0FBT0sseUJBQXlCLEVBQUNDLElBQUVOLE9BQU9PLHFCQUFxQixFQUFDQyxJQUFFUixPQUFPUyxTQUFTLENBQUNDLGNBQWMsRUFBQ0MsSUFBRVgsT0FBT1MsU0FBUyxDQUFDRyxvQkFBb0IsRUFBQ0MsSUFBRSxDQUFDQyxHQUFFQyxHQUFFQyxJQUFJRCxLQUFLRCxJQUFFZixFQUFFZSxHQUFFQyxHQUFFO1FBQUNFLFlBQVcsQ0FBQztRQUFFQyxjQUFhLENBQUM7UUFBRUMsVUFBUyxDQUFDO1FBQUVDLE9BQU1KO0lBQUMsS0FBR0YsQ0FBQyxDQUFDQyxFQUFFLEdBQUNDLEdBQUVLLElBQUUsQ0FBQ1AsR0FBRUM7SUFBSyxJ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cy8ucG5wbS9Ad2FsbGV0Y29ubmVjdCtldGhlcmV1bS1wcm92aWRlckAyLjExLjBfQHR5cGVzK3JlYWN0QDE4LjAuMF9yZWFjdEAxOC4wLjAvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2V0aGVyZXVtLXByb3ZpZGVyL2Rpc3QvaW5kZXguZXMuanM/ODI2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIGJ9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e2dldEFjY291bnRzRnJvbU5hbWVzcGFjZXMgYXMgQSxnZXRTZGtFcnJvciBhcyBSLGlzVmFsaWRBcnJheSBhcyB3fWZyb21cIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7aW1wb3J0e1VuaXZlcnNhbFByb3ZpZGVyIGFzIFR9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdW5pdmVyc2FsLXByb3ZpZGVyXCI7Y29uc3QgUD1cIndjXCIsUz1cImV0aGVyZXVtX3Byb3ZpZGVyXCIsJD1gJHtQfUAyOiR7U306YCxqPVwiaHR0cHM6Ly9ycGMud2FsbGV0Y29ubmVjdC5jb20vdjEvXCIsdT1bXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsXCJwZXJzb25hbF9zaWduXCJdLEU9W1wiZXRoX2FjY291bnRzXCIsXCJldGhfcmVxdWVzdEFjY291bnRzXCIsXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsXCJldGhfc2lnblwiLFwiZXRoX3NpZ25UcmFuc2FjdGlvblwiLFwiZXRoX3NpZ25UeXBlZERhdGFcIixcImV0aF9zaWduVHlwZWREYXRhX3YzXCIsXCJldGhfc2lnblR5cGVkRGF0YV92NFwiLFwiZXRoX3NlbmRUcmFuc2FjdGlvblwiLFwicGVyc29uYWxfc2lnblwiLFwid2FsbGV0X3N3aXRjaEV0aGVyZXVtQ2hhaW5cIixcIndhbGxldF9hZGRFdGhlcmV1bUNoYWluXCIsXCJ3YWxsZXRfZ2V0UGVybWlzc2lvbnNcIixcIndhbGxldF9yZXF1ZXN0UGVybWlzc2lvbnNcIixcIndhbGxldF9yZWdpc3Rlck9uYm9hcmRpbmdcIixcIndhbGxldF93YXRjaEFzc2V0XCIsXCJ3YWxsZXRfc2NhblFSQ29kZVwiXSxtPVtcImNoYWluQ2hhbmdlZFwiLFwiYWNjb3VudHNDaGFuZ2VkXCJdLF89W1wiY2hhaW5DaGFuZ2VkXCIsXCJhY2NvdW50c0NoYW5nZWRcIixcIm1lc3NhZ2VcIixcImRpc2Nvbm5lY3RcIixcImNvbm5lY3RcIl07dmFyIE49T2JqZWN0LmRlZmluZVByb3BlcnR5LHE9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMsRD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyx5PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsVT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFE9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxPPShhLHQscyk9PnQgaW4gYT9OKGEsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6c30pOmFbdF09cyxwPShhLHQpPT57Zm9yKHZhciBzIGluIHR8fCh0PXt9KSlVLmNhbGwodCxzKSYmTyhhLHMsdFtzXSk7aWYoeSlmb3IodmFyIHMgb2YgeSh0KSlRLmNhbGwodCxzKSYmTyhhLHMsdFtzXSk7cmV0dXJuIGF9LE09KGEsdCk9PnEoYSxEKHQpKTtmdW5jdGlvbiBnKGEpe3JldHVybiBOdW1iZXIoYVswXS5zcGxpdChcIjpcIilbMV0pfWZ1bmN0aW9uIGYoYSl7cmV0dXJuYDB4JHthLnRvU3RyaW5nKDE2KX1gfWZ1bmN0aW9uIEwoYSl7Y29uc3R7Y2hhaW5zOnQsb3B0aW9uYWxDaGFpbnM6cyxtZXRob2RzOmksb3B0aW9uYWxNZXRob2RzOm4sZXZlbnRzOmUsb3B0aW9uYWxFdmVudHM6aCxycGNNYXA6Y309YTtpZighdyh0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYWluc1wiKTtjb25zdCBvPXtjaGFpbnM6dCxtZXRob2RzOml8fHUsZXZlbnRzOmV8fG0scnBjTWFwOnAoe30sdC5sZW5ndGg/e1tnKHQpXTpjW2codCldfTp7fSl9LHI9ZT8uZmlsdGVyKGw9PiFtLmluY2x1ZGVzKGwpKSxkPWk/LmZpbHRlcihsPT4hdS5pbmNsdWRlcyhsKSk7aWYoIXMmJiFoJiYhbiYmIShyIT1udWxsJiZyLmxlbmd0aCkmJiEoZCE9bnVsbCYmZC5sZW5ndGgpKXJldHVybntyZXF1aXJlZDp0Lmxlbmd0aD9vOnZvaWQgMH07Y29uc3QgQz1yPy5sZW5ndGgmJmQ/Lmxlbmd0aHx8IXMsST17Y2hhaW5zOlsuLi5uZXcgU2V0KEM/by5jaGFpbnMuY29uY2F0KHN8fFtdKTpzKV0sbWV0aG9kczpbLi4ubmV3IFNldChvLm1ldGhvZHMuY29uY2F0KG4hPW51bGwmJm4ubGVuZ3RoP246RSkpXSxldmVudHM6Wy4uLm5ldyBTZXQoby5ldmVudHMuY29uY2F0KGghPW51bGwmJmgubGVuZ3RoP2g6XykpXSxycGNNYXA6Y307cmV0dXJue3JlcXVpcmVkOnQubGVuZ3RoP286dm9pZCAwLG9wdGlvbmFsOnMubGVuZ3RoP0k6dm9pZCAwfX1jbGFzcyB2e2NvbnN0cnVjdG9yKCl7dGhpcy5ldmVudHM9bmV3IGIsdGhpcy5uYW1lc3BhY2U9XCJlaXAxNTVcIix0aGlzLmFjY291bnRzPVtdLHRoaXMuY2hhaW5JZD0xLHRoaXMuU1RPUkFHRV9LRVk9JCx0aGlzLm9uPSh0LHMpPT4odGhpcy5ldmVudHMub24odCxzKSx0aGlzKSx0aGlzLm9uY2U9KHQscyk9Pih0aGlzLmV2ZW50cy5vbmNlKHQscyksdGhpcyksdGhpcy5yZW1vdmVMaXN0ZW5lcj0odCxzKT0+KHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKHQscyksdGhpcyksdGhpcy5vZmY9KHQscyk9Pih0aGlzLmV2ZW50cy5vZmYodCxzKSx0aGlzKSx0aGlzLnBhcnNlQWNjb3VudD10PT50aGlzLmlzQ29tcGF0aWJsZUNoYWluSWQodCk/dGhpcy5wYXJzZUFjY291bnRJZCh0KS5hZGRyZXNzOnQsdGhpcy5zaWduZXI9e30sdGhpcy5ycGM9e319c3RhdGljIGFzeW5jIGluaXQodCl7Y29uc3Qgcz1uZXcgdjtyZXR1cm4gYXdhaXQgcy5pbml0aWFsaXplKHQpLHN9YXN5bmMgcmVxdWVzdCh0KXtyZXR1cm4gYXdhaXQgdGhpcy5zaWduZXIucmVxdWVzdCh0LHRoaXMuZm9ybWF0Q2hhaW5JZCh0aGlzLmNoYWluSWQpKX1zZW5kQXN5bmModCxzKXt0aGlzLnNpZ25lci5zZW5kQXN5bmModCxzLHRoaXMuZm9ybWF0Q2hhaW5JZCh0aGlzLmNoYWluSWQpKX1nZXQgY29ubmVjdGVkKCl7cmV0dXJuIHRoaXMuc2lnbmVyLmNsaWVudD90aGlzLnNpZ25lci5jbGllbnQuY29yZS5yZWxheWVyLmNvbm5lY3RlZDohMX1nZXQgY29ubmVjdGluZygpe3JldHVybiB0aGlzLnNpZ25lci5jbGllbnQ/dGhpcy5zaWduZXIuY2xpZW50LmNvcmUucmVsYXllci5jb25uZWN0aW5nOiExfWFzeW5jIGVuYWJsZSgpe3JldHVybiB0aGlzLnNlc3Npb258fGF3YWl0IHRoaXMuY29ubmVjdCgpLGF3YWl0IHRoaXMucmVxdWVzdCh7bWV0aG9kOlwiZXRoX3JlcXVlc3RBY2NvdW50c1wifSl9YXN5bmMgY29ubmVjdCh0KXtpZighdGhpcy5zaWduZXIuY2xpZW50KXRocm93IG5ldyBFcnJvcihcIlByb3ZpZGVyIG5vdCBpbml0aWFsaXplZC4gQ2FsbCBpbml0KCkgZmlyc3RcIik7dGhpcy5sb2FkQ29ubmVjdE9wdHModCk7Y29uc3R7cmVxdWlyZWQ6cyxvcHRpb25hbDppfT1MKHRoaXMucnBjKTt0cnl7Y29uc3Qgbj1hd2FpdCBuZXcgUHJvbWlzZShhc3luYyhoLGMpPT57dmFyIG87dGhpcy5ycGMuc2hvd1FyTW9kYWwmJigobz10aGlzLm1vZGFsKT09bnVsbHx8by5zdWJzY3JpYmVNb2RhbChyPT57IXIub3BlbiYmIXRoaXMuc2lnbmVyLnNlc3Npb24mJih0aGlzLnNpZ25lci5hYm9ydFBhaXJpbmdBdHRlbXB0KCksYyhuZXcgRXJyb3IoXCJDb25uZWN0aW9uIHJlcXVlc3QgcmVzZXQuIFBsZWFzZSB0cnkgYWdhaW4uXCIpKSl9KSksYXdhaXQgdGhpcy5zaWduZXIuY29ubmVjdChNKHAoe25hbWVzcGFjZXM6cCh7fSxzJiZ7W3RoaXMubmFtZXNwYWNlXTpzfSl9LGkmJntvcHRpb25hbE5hbWVzcGFjZXM6e1t0aGlzLm5hbWVzcGFjZV06aX19KSx7cGFpcmluZ1RvcGljOnQ/LnBhaXJpbmdUb3BpY30pKS50aGVuKHI9PntoKHIpfSkuY2F0Y2gocj0+e2MobmV3IEVycm9yKHIubWVzc2FnZSkpfSl9KTtpZighbilyZXR1cm47Y29uc3QgZT1BKG4ubmFtZXNwYWNlcyxbdGhpcy5uYW1lc3BhY2VdKTt0aGlzLnNldENoYWluSWRzKHRoaXMucnBjLmNoYWlucy5sZW5ndGg/dGhpcy5ycGMuY2hhaW5zOmUpLHRoaXMuc2V0QWNjb3VudHMoZSksdGhpcy5ldmVudHMuZW1pdChcImNvbm5lY3RcIix7Y2hhaW5JZDpmKHRoaXMuY2hhaW5JZCl9KX1jYXRjaChuKXt0aHJvdyB0aGlzLnNpZ25lci5sb2dnZXIuZXJyb3Iobiksbn1maW5hbGx5e3RoaXMubW9kYWwmJnRoaXMubW9kYWwuY2xvc2VNb2RhbCgpfX1hc3luYyBkaXNjb25uZWN0KCl7dGhpcy5zZXNzaW9uJiZhd2FpdCB0aGlzLnNpZ25lci5kaXNjb25uZWN0KCksdGhpcy5yZXNldCgpfWdldCBpc1dhbGxldENvbm5lY3QoKXtyZXR1cm4hMH1nZXQgc2Vzc2lvbigpe3JldHVybiB0aGlzLnNpZ25lci5zZXNzaW9ufXJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKXt0aGlzLnNpZ25lci5vbihcInNlc3Npb25fZXZlbnRcIix0PT57Y29uc3R7cGFyYW1zOnN9PXQse2V2ZW50Oml9PXM7aS5uYW1lPT09XCJhY2NvdW50c0NoYW5nZWRcIj8odGhpcy5hY2NvdW50cz10aGlzLnBhcnNlQWNjb3VudHMoaS5kYXRhKSx0aGlzLmV2ZW50cy5lbWl0KFwiYWNjb3VudHNDaGFuZ2VkXCIsdGhpcy5hY2NvdW50cykpOmkubmFtZT09PVwiY2hhaW5DaGFuZ2VkXCI/dGhpcy5zZXRDaGFpbklkKHRoaXMuZm9ybWF0Q2hhaW5JZChpLmRhdGEpKTp0aGlzLmV2ZW50cy5lbWl0KGkubmFtZSxpLmRhdGEpLHRoaXMuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX2V2ZW50XCIsdCl9KSx0aGlzLnNpZ25lci5vbihcImNoYWluQ2hhbmdlZFwiLHQ9Pntjb25zdCBzPXBhcnNlSW50KHQpO3RoaXMuY2hhaW5JZD1zLHRoaXMuZXZlbnRzLmVtaXQoXCJjaGFpbkNoYW5nZWRcIixmKHRoaXMuY2hhaW5JZCkpLHRoaXMucGVyc2lzdCgpfSksdGhpcy5zaWduZXIub24oXCJzZXNzaW9uX3VwZGF0ZVwiLHQ9Pnt0aGlzLmV2ZW50cy5lbWl0KFwic2Vzc2lvbl91cGRhdGVcIix0KX0pLHRoaXMuc2lnbmVyLm9uKFwic2Vzc2lvbl9kZWxldGVcIix0PT57dGhpcy5yZXNldCgpLHRoaXMuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX2RlbGV0ZVwiLHQpLHRoaXMuZXZlbnRzLmVtaXQoXCJkaXNjb25uZWN0XCIsTShwKHt9LFIoXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSkse2RhdGE6dC50b3BpYyxuYW1lOlwiVVNFUl9ESVNDT05ORUNURURcIn0pKX0pLHRoaXMuc2lnbmVyLm9uKFwiZGlzcGxheV91cmlcIix0PT57dmFyIHMsaTt0aGlzLnJwYy5zaG93UXJNb2RhbCYmKChzPXRoaXMubW9kYWwpPT1udWxsfHxzLmNsb3NlTW9kYWwoKSwoaT10aGlzLm1vZGFsKT09bnVsbHx8aS5vcGVuTW9kYWwoe3VyaTp0fSkpLHRoaXMuZXZlbnRzLmVtaXQoXCJkaXNwbGF5X3VyaVwiLHQpfSl9c3dpdGNoRXRoZXJldW1DaGFpbih0KXt0aGlzLnJlcXVlc3Qoe21ldGhvZDpcIndhbGxldF9zd2l0Y2hFdGhlcmV1bUNoYWluXCIscGFyYW1zOlt7Y2hhaW5JZDp0LnRvU3RyaW5nKDE2KX1dfSl9aXNDb21wYXRpYmxlQ2hhaW5JZCh0KXtyZXR1cm4gdHlwZW9mIHQ9PVwic3RyaW5nXCI/dC5zdGFydHNXaXRoKGAke3RoaXMubmFtZXNwYWNlfTpgKTohMX1mb3JtYXRDaGFpbklkKHQpe3JldHVybmAke3RoaXMubmFtZXNwYWNlfToke3R9YH1wYXJzZUNoYWluSWQodCl7cmV0dXJuIE51bWJlcih0LnNwbGl0KFwiOlwiKVsxXSl9c2V0Q2hhaW5JZHModCl7Y29uc3Qgcz10LmZpbHRlcihpPT50aGlzLmlzQ29tcGF0aWJsZUNoYWluSWQoaSkpLm1hcChpPT50aGlzLnBhcnNlQ2hhaW5JZChpKSk7cy5sZW5ndGgmJih0aGlzLmNoYWluSWQ9c1swXSx0aGlzLmV2ZW50cy5lbWl0KFwiY2hhaW5DaGFuZ2VkXCIsZih0aGlzLmNoYWluSWQpKSx0aGlzLnBlcnNpc3QoKSl9c2V0Q2hhaW5JZCh0KXtpZih0aGlzLmlzQ29tcGF0aWJsZUNoYWluSWQodCkpe2NvbnN0IHM9dGhpcy5wYXJzZUNoYWluSWQodCk7dGhpcy5jaGFpbklkPXMsdGhpcy5zd2l0Y2hFdGhlcmV1bUNoYWluKHMpfX1wYXJzZUFjY291bnRJZCh0KXtjb25zdFtzLGksbl09dC5zcGxpdChcIjpcIik7cmV0dXJue2NoYWluSWQ6YCR7c306JHtpfWAsYWRkcmVzczpufX1zZXRBY2NvdW50cyh0KXt0aGlzLmFjY291bnRzPXQuZmlsdGVyKHM9PnRoaXMucGFyc2VDaGFpbklkKHRoaXMucGFyc2VBY2NvdW50SWQocykuY2hhaW5JZCk9PT10aGlzLmNoYWluSWQpLm1hcChzPT50aGlzLnBhcnNlQWNjb3VudElkKHMpLmFkZHJlc3MpLHRoaXMuZXZlbnRzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIix0aGlzLmFjY291bnRzKX1nZXRScGNDb25maWcodCl7dmFyIHMsaTtjb25zdCBuPShzPXQ/LmNoYWlucykhPW51bGw/czpbXSxlPShpPXQ/Lm9wdGlvbmFsQ2hhaW5zKSE9bnVsbD9pOltdLGg9bi5jb25jYXQoZSk7aWYoIWgubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk5vIGNoYWlucyBzcGVjaWZpZWQgaW4gZWl0aGVyIGBjaGFpbnNgIG9yIGBvcHRpb25hbENoYWluc2BcIik7Y29uc3QgYz1uLmxlbmd0aD90Py5tZXRob2RzfHx1OltdLG89bi5sZW5ndGg/dD8uZXZlbnRzfHxtOltdLHI9dD8ub3B0aW9uYWxNZXRob2RzfHxbXSxkPXQ/Lm9wdGlvbmFsRXZlbnRzfHxbXSxDPXQ/LnJwY01hcHx8dGhpcy5idWlsZFJwY01hcChoLHQucHJvamVjdElkKSxJPXQ/LnFyTW9kYWxPcHRpb25zfHx2b2lkIDA7cmV0dXJue2NoYWluczpuPy5tYXAobD0+dGhpcy5mb3JtYXRDaGFpbklkKGwpKSxvcHRpb25hbENoYWluczplLm1hcChsPT50aGlzLmZvcm1hdENoYWluSWQobCkpLG1ldGhvZHM6YyxldmVudHM6byxvcHRpb25hbE1ldGhvZHM6cixvcHRpb25hbEV2ZW50czpkLHJwY01hcDpDLHNob3dRck1vZGFsOiEhKHQhPW51bGwmJnQuc2hvd1FyTW9kYWwpLHFyTW9kYWxPcHRpb25zOkkscHJvamVjdElkOnQucHJvamVjdElkLG1ldGFkYXRhOnQubWV0YWRhdGF9fWJ1aWxkUnBjTWFwKHQscyl7Y29uc3QgaT17fTtyZXR1cm4gdC5mb3JFYWNoKG49PntpW25dPXRoaXMuZ2V0UnBjVXJsKG4scyl9KSxpfWFzeW5jIGluaXRpYWxpemUodCl7aWYodGhpcy5ycGM9dGhpcy5nZXRScGNDb25maWcodCksdGhpcy5jaGFpbklkPXRoaXMucnBjLmNoYWlucy5sZW5ndGg/Zyh0aGlzLnJwYy5jaGFpbnMpOmcodGhpcy5ycGMub3B0aW9uYWxDaGFpbnMpLHRoaXMuc2lnbmVyPWF3YWl0IFQuaW5pdCh7cHJvamVjdElkOnRoaXMucnBjLnByb2plY3RJZCxtZXRhZGF0YTp0aGlzLnJwYy5tZXRhZGF0YSxkaXNhYmxlUHJvdmlkZXJQaW5nOnQuZGlzYWJsZVByb3ZpZGVyUGluZyxyZWxheVVybDp0LnJlbGF5VXJsLHN0b3JhZ2VPcHRpb25zOnQuc3RvcmFnZU9wdGlvbnN9KSx0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKSxhd2FpdCB0aGlzLmxvYWRQZXJzaXN0ZWRTZXNzaW9uKCksdGhpcy5ycGMuc2hvd1FyTW9kYWwpe2xldCBzO3RyeXtjb25zdHtXYWxsZXRDb25uZWN0TW9kYWw6aX09YXdhaXQgaW1wb3J0KFwiQHdhbGxldGNvbm5lY3QvbW9kYWxcIik7cz1pfWNhdGNoe3Rocm93IG5ldyBFcnJvcihcIlRvIHVzZSBRUiBtb2RhbCwgcGxlYXNlIGluc3RhbGwgQHdhbGxldGNvbm5lY3QvbW9kYWwgcGFja2FnZVwiKX1pZihzKXRyeXt0aGlzLm1vZGFsPW5ldyBzKHAoe3Byb2plY3RJZDp0aGlzLnJwYy5wcm9qZWN0SWR9LHRoaXMucnBjLnFyTW9kYWxPcHRpb25zKSl9Y2F0Y2goaSl7dGhyb3cgdGhpcy5zaWduZXIubG9nZ2VyLmVycm9yKGkpLG5ldyBFcnJvcihcIkNvdWxkIG5vdCBnZW5lcmF0ZSBXYWxsZXRDb25uZWN0TW9kYWwgSW5zdGFuY2VcIil9fX1sb2FkQ29ubmVjdE9wdHModCl7aWYoIXQpcmV0dXJuO2NvbnN0e2NoYWluczpzLG9wdGlvbmFsQ2hhaW5zOmkscnBjTWFwOm59PXQ7cyYmdyhzKSYmKHRoaXMucnBjLmNoYWlucz1zLm1hcChlPT50aGlzLmZvcm1hdENoYWluSWQoZSkpLHMuZm9yRWFjaChlPT57dGhpcy5ycGMucnBjTWFwW2VdPW4/LltlXXx8dGhpcy5nZXRScGNVcmwoZSl9KSksaSYmdyhpKSYmKHRoaXMucnBjLm9wdGlvbmFsQ2hhaW5zPVtdLHRoaXMucnBjLm9wdGlvbmFsQ2hhaW5zPWk/Lm1hcChlPT50aGlzLmZvcm1hdENoYWluSWQoZSkpLGkuZm9yRWFjaChlPT57dGhpcy5ycGMucnBjTWFwW2VdPW4/LltlXXx8dGhpcy5nZXRScGNVcmwoZSl9KSl9Z2V0UnBjVXJsKHQscyl7dmFyIGk7cmV0dXJuKChpPXRoaXMucnBjLnJwY01hcCk9PW51bGw/dm9pZCAwOmlbdF0pfHxgJHtqfT9jaGFpbklkPWVpcDE1NToke3R9JnByb2plY3RJZD0ke3N8fHRoaXMucnBjLnByb2plY3RJZH1gfWFzeW5jIGxvYWRQZXJzaXN0ZWRTZXNzaW9uKCl7aWYoIXRoaXMuc2Vzc2lvbilyZXR1cm47Y29uc3QgdD1hd2FpdCB0aGlzLnNpZ25lci5jbGllbnQuY29yZS5zdG9yYWdlLmdldEl0ZW0oYCR7dGhpcy5TVE9SQUdFX0tFWX0vY2hhaW5JZGApLHM9dGhpcy5zZXNzaW9uLm5hbWVzcGFjZXNbYCR7dGhpcy5uYW1lc3BhY2V9OiR7dH1gXT90aGlzLnNlc3Npb24ubmFtZXNwYWNlc1tgJHt0aGlzLm5hbWVzcGFjZX06JHt0fWBdOnRoaXMuc2Vzc2lvbi5uYW1lc3BhY2VzW3RoaXMubmFtZXNwYWNlXTt0aGlzLnNldENoYWluSWRzKHQ/W3RoaXMuZm9ybWF0Q2hhaW5JZCh0KV06cz8uYWNjb3VudHMpLHRoaXMuc2V0QWNjb3VudHMocz8uYWNjb3VudHMpfXJlc2V0KCl7dGhpcy5jaGFpbklkPTEsdGhpcy5hY2NvdW50cz1bXX1wZXJzaXN0KCl7dGhpcy5zZXNzaW9uJiZ0aGlzLnNpZ25lci5jbGllbnQuY29yZS5zdG9yYWdlLnNldEl0ZW0oYCR7dGhpcy5TVE9SQUdFX0tFWX0vY2hhaW5JZGAsdGhpcy5jaGFpbklkKX1wYXJzZUFjY291bnRzKHQpe3JldHVybiB0eXBlb2YgdD09XCJzdHJpbmdcInx8dCBpbnN0YW5jZW9mIFN0cmluZz9bdGhpcy5wYXJzZUFjY291bnQodCldOnQubWFwKHM9PnRoaXMucGFyc2VBY2NvdW50KHMpKX19Y29uc3QgRz12O2V4cG9ydHtHIGFzIEV0aGVyZXVtUHJvdmlkZXIsXyBhcyBPUFRJT05BTF9FVkVOVFMsRSBhcyBPUFRJT05BTF9NRVRIT0RTLG0gYXMgUkVRVUlSRURfRVZFTlRTLHUgYXMgUkVRVUlSRURfTUVUSE9EUyx2IGFzIGRlZmF1bHR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwiYiIsImdldEFjY291bnRzRnJvbU5hbWVzcGFjZXMiLCJBIiwiZ2V0U2RrRXJyb3IiLCJSIiwiaXNWYWxpZEFycmF5IiwidyIsIlVuaXZlcnNhbFByb3ZpZGVyIiwiVCIsIlAiLCJTIiwiJCIsImoiLCJ1IiwiRSIsIm0iLCJfIiwiTiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicSIsImRlZmluZVByb3BlcnRpZXMiLCJEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJVIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJRIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJPIiwiYSIsInQiLCJzIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJwIiwiY2FsbCIsIk0iLCJnIiwiTnVtYmVyIiwic3BsaXQiLCJmIiwidG9TdHJpbmciLCJMIiwiY2hhaW5zIiwib3B0aW9uYWxDaGFpbnMiLCJtZXRob2RzIiwiaSIsIm9wdGlvbmFsTWV0aG9kcyIsIm4iLCJldmVudHMiLCJlIiwib3B0aW9uYWxFdmVudHMiLCJoIiwicnBjTWFwIiwiYyIsIkVycm9yIiwibyIsImxlbmd0aCIsInIiLCJmaWx0ZXIiLCJsIiwiaW5jbHVkZXMiLCJkIiwicmVxdWlyZWQiLCJDIiwiSSIsIlNldCIsImNvbmNhdCIsIm9wdGlvbmFsIiwidiIsImluaXQiLCJpbml0aWFsaXplIiwicmVxdWVzdCIsInNpZ25lciIsImZvcm1hdENoYWluSWQiLCJjaGFpbklkIiwic2VuZEFzeW5jIiwiY29ubmVjdGVkIiwiY2xpZW50IiwiY29yZSIsInJlbGF5ZXIiLCJjb25uZWN0aW5nIiwiZW5hYmxlIiwic2Vzc2lvbiIsImNvbm5lY3QiLCJtZXRob2QiLCJsb2FkQ29ubmVjdE9wdHMiLCJycGMiLCJQcm9taXNlIiwic2hvd1FyTW9kYWwiLCJtb2RhbCIsInN1YnNjcmliZU1vZGFsIiwib3BlbiIsImFib3J0UGFpcmluZ0F0dGVtcHQiLCJuYW1lc3BhY2VzIiwibmFtZXNwYWNlIiwib3B0aW9uYWxOYW1lc3BhY2VzIiwicGFpcmluZ1RvcGljIiwidGhlbiIsImNhdGNoIiwibWVzc2FnZSIsInNldENoYWluSWRzIiwic2V0QWNjb3VudHMiLCJlbWl0IiwibG9nZ2VyIiwiZXJyb3IiLCJjbG9zZU1vZGFsIiwiZGlzY29ubmVjdCIsInJlc2V0IiwiaXNXYWxsZXRDb25uZWN0IiwicmVnaXN0ZXJFdmVudExpc3RlbmVycyIsIm9uIiwicGFyYW1zIiwiZXZlbnQiLCJuYW1lIiwiYWNjb3VudHMiLCJwYXJzZUFjY291bnRzIiwiZGF0YSIsInNldENoYWluSWQiLCJwYXJzZUludCIsInBlcnNpc3QiLCJ0b3BpYyIsIm9wZW5Nb2RhbCIsInVyaSIsInN3aXRjaEV0aGVyZXVtQ2hhaW4iLCJpc0NvbXBhdGlibGVDaGFpbklkIiwic3RhcnRzV2l0aCIsInBhcnNlQ2hhaW5JZCIsIm1hcCIsInBhcnNlQWNjb3VudElkIiwiYWRkcmVzcyIsImdldFJwY0NvbmZpZyIsImJ1aWxkUnBjTWFwIiwicHJvamVjdElkIiwicXJNb2RhbE9wdGlvbnMiLCJtZXRhZGF0YSIsImZvckVhY2giLCJnZXRScGNVcmwiLCJkaXNhYmxlUHJvdmlkZXJQaW5nIiwicmVsYXlVcmwiLCJzdG9yYWdlT3B0aW9ucyIsImxvYWRQZXJzaXN0ZWRTZXNzaW9uIiwiV2FsbGV0Q29ubmVjdE1vZGFsIiwic3RvcmFnZSIsImdldEl0ZW0iLCJTVE9SQUdFX0tFWSIsInNldEl0ZW0iLCJTdHJpbmciLCJwYXJzZUFjY291bnQiLCJjb25zdHJ1Y3RvciIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsIm9mZiIsIkciLCJFdGhlcmV1bVByb3ZpZGVyIiwiT1BUSU9OQUxfRVZFTlRTIiwiT1BUSU9OQUxfTUVUSE9EUyIsIlJFUVVJUkVEX0VWRU5UUyIsIlJFUVVJUkVEX01FVEhPRFMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@walletconnect+ethereum-provider@2.11.0_@types+react@18.0.0_react@18.0.0/node_modules/@walletconnect/ethereum-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/http.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/http.js ***!
  \**********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: function() { return /* binding */ HttpConnection; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"(app-pages-browser)/./node_modules/.pnpm/cross-fetch@3.1.8/node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+safe-json@1.0.2/node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-utils@1.0.8/node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\nconst DEFAULT_HTTP_HEADERS = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n};\nconst DEFAULT_HTTP_METHOD = \"POST\";\nconst DEFAULT_FETCH_OPTS = {\n    headers: DEFAULT_HTTP_HEADERS,\n    method: DEFAULT_HTTP_METHOD\n};\nconst EVENT_EMITTER_MAX_LISTENERS_DEFAULT = 10;\nclass HttpConnection {\n    get connected() {\n        return this.isAvailable;\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async open() {\n        let url = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        await this.register(url);\n    }\n    async close() {\n        if (!this.isAvailable) {\n            throw new Error(\"Connection already closed\");\n        }\n        this.onClose();\n    }\n    async send(payload, context) {\n        if (!this.isAvailable) {\n            await this.register();\n        }\n        try {\n            const body = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)(payload);\n            const res = await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(this.url, Object.assign(Object.assign({}, DEFAULT_FETCH_OPTS), {\n                body\n            }));\n            const data = await res.json();\n            this.onPayload({\n                data\n            });\n        } catch (e) {\n            this.onError(payload.id, e);\n        }\n    }\n    async register() {\n        let url = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(url)) {\n            throw new Error(\"Provided URL is not compatible with HTTP connection: \".concat(url));\n        }\n        if (this.registering) {\n            const currentMaxListeners = this.events.getMaxListeners();\n            if (this.events.listenerCount(\"register_error\") >= currentMaxListeners || this.events.listenerCount(\"open\") >= currentMaxListeners) {\n                this.events.setMaxListeners(currentMaxListeners + 1);\n            }\n            return new Promise((resolve, reject)=>{\n                this.events.once(\"register_error\", (error)=>{\n                    this.resetMaxListeners();\n                    reject(error);\n                });\n                this.events.once(\"open\", ()=>{\n                    this.resetMaxListeners();\n                    if (typeof this.isAvailable === \"undefined\") {\n                        return reject(new Error(\"HTTP connection is missing or invalid\"));\n                    }\n                    resolve();\n                });\n            });\n        }\n        this.url = url;\n        this.registering = true;\n        try {\n            if (!this.disableProviderPing) {\n                const body = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)({\n                    id: 1,\n                    jsonrpc: \"2.0\",\n                    method: \"test\",\n                    params: []\n                });\n                await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(url, Object.assign(Object.assign({}, DEFAULT_FETCH_OPTS), {\n                    body\n                }));\n            }\n            this.onOpen();\n        } catch (e) {\n            const error = this.parseError(e);\n            this.events.emit(\"register_error\", error);\n            this.onClose();\n            throw error;\n        }\n    }\n    onOpen() {\n        this.isAvailable = true;\n        this.registering = false;\n        this.events.emit(\"open\");\n    }\n    onClose() {\n        this.isAvailable = false;\n        this.registering = false;\n        this.events.emit(\"close\");\n    }\n    onPayload(e) {\n        if (typeof e.data === \"undefined\") return;\n        const payload = typeof e.data === \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(e.data) : e.data;\n        this.events.emit(\"payload\", payload);\n    }\n    onError(id, e) {\n        const error = this.parseError(e);\n        const message = error.message || error.toString();\n        const payload = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(id, message);\n        this.events.emit(\"payload\", payload);\n    }\n    parseError(e) {\n        let url = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.url;\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.parseConnectionError)(e, url, \"HTTP\");\n    }\n    resetMaxListeners() {\n        if (this.events.getMaxListeners() > EVENT_EMITTER_MAX_LISTENERS_DEFAULT) {\n            this.events.setMaxListeners(EVENT_EMITTER_MAX_LISTENERS_DEFAULT);\n        }\n    }\n    constructor(url, disableProviderPing = false){\n        this.url = url;\n        this.disableProviderPing = disableProviderPing;\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n        this.isAvailable = false;\n        this.registering = false;\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(url)) {\n            throw new Error(\"Provided URL is not compatible with HTTP connection: \".concat(url));\n        }\n        this.url = url;\n        this.disableProviderPing = disableProviderPing;\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (HttpConnection); //# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/http.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js":
/*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js ***!
  \***********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: function() { return /* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_0__.HttpConnection; }\n/* harmony export */ });\n/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./http */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/http.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_http__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2FsbGV0Y29ubmVjdCtqc29ucnBjLWh0dHAtY29ubmVjdGlvbkAxLjAuNy9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1odHRwLWNvbm5lY3Rpb24vZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFDYjtBQUN2QiwrREFBZUEsNkNBQWNBLEVBQUMsQ0FDOUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2FsbGV0Y29ubmVjdCtqc29ucnBjLWh0dHAtY29ubmVjdGlvbkAxLjAuNy9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1odHRwLWNvbm5lY3Rpb24vZGlzdC9lc20vaW5kZXguanM/YzZiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSHR0cENvbm5lY3Rpb24gZnJvbSBcIi4vaHR0cFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaHR0cFwiO1xuZXhwb3J0IGRlZmF1bHQgSHR0cENvbm5lY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiSHR0cENvbm5lY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/@walletconnect+universal-provider@2.11.0/node_modules/@walletconnect/universal-provider/dist/index.es.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@walletconnect+universal-provider@2.11.0/node_modules/@walletconnect/universal-provider/dist/index.es.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UniversalProvider: function() { return /* binding */ hv; },\n/* harmony export */   \"default\": function() { return /* binding */ lr; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+sign-client@2.11.0/node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+utils@2.11.0/node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+logger@2.0.1/node_modules/@walletconnect/logger/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-http-connection@1.0.7/node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-provider@1.0.13/node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/.pnpm/@walletconnect+jsonrpc-utils@1.0.8/node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst Ia = \"error\", Wg = \"wss://relay.walletconnect.com\", Fg = \"wc\", Mg = \"universal_provider\", xa = \"\".concat(Fg, \"@2:\").concat(Mg, \":\"), qg = \"https://rpc.walletconnect.com/v1/\", Vn = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n};\nvar ge = typeof globalThis < \"u\" ? globalThis :  true ? window : 0, Ui = {\n    exports: {}\n}; /**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ \n(function(C, u) {\n    (function() {\n        var i, d = \"4.17.21\", P = 200, O = \"Unsupported core-js use. Try https://npms.io/search?q=ponyfill.\", $ = \"Expected a function\", En = \"Invalid `variable` option passed into `_.template`\", zt = \"__lodash_hash_undefined__\", pr = 500, It = \"__lodash_placeholder__\", Ln = 1, Fn = 2, xt = 4, Et = 1, ve = 2, vn = 1, ct = 2, qi = 4, Dn = 8, yt = 16, Hn = 32, St = 64, Mn = 128, Kt = 256, dr = 512, La = 30, Da = \"...\", Ha = 800, Na = 16, Bi = 1, $a = 2, Ua = 3, ht = 1 / 0, kn = 9007199254740991, Wa = 17976931348623157e292, _e = 0 / 0, Nn = 4294967295, Fa = Nn - 1, Ma = Nn >>> 1, qa = [\n            [\n                \"ary\",\n                Mn\n            ],\n            [\n                \"bind\",\n                vn\n            ],\n            [\n                \"bindKey\",\n                ct\n            ],\n            [\n                \"curry\",\n                Dn\n            ],\n            [\n                \"curryRight\",\n                yt\n            ],\n            [\n                \"flip\",\n                dr\n            ],\n            [\n                \"partial\",\n                Hn\n            ],\n            [\n                \"partialRight\",\n                St\n            ],\n            [\n                \"rearg\",\n                Kt\n            ]\n        ], Ot = \"[object Arguments]\", me = \"[object Array]\", Ba = \"[object AsyncFunction]\", Yt = \"[object Boolean]\", Zt = \"[object Date]\", Ga = \"[object DOMException]\", we = \"[object Error]\", Pe = \"[object Function]\", Gi = \"[object GeneratorFunction]\", yn = \"[object Map]\", Jt = \"[object Number]\", za = \"[object Null]\", qn = \"[object Object]\", zi = \"[object Promise]\", Ka = \"[object Proxy]\", Xt = \"[object RegExp]\", Sn = \"[object Set]\", Qt = \"[object String]\", Ae = \"[object Symbol]\", Ya = \"[object Undefined]\", Vt = \"[object WeakMap]\", Za = \"[object WeakSet]\", kt = \"[object ArrayBuffer]\", Rt = \"[object DataView]\", gr = \"[object Float32Array]\", vr = \"[object Float64Array]\", _r = \"[object Int8Array]\", mr = \"[object Int16Array]\", wr = \"[object Int32Array]\", Pr = \"[object Uint8Array]\", Ar = \"[object Uint8ClampedArray]\", Cr = \"[object Uint16Array]\", Ir = \"[object Uint32Array]\", Ja = /\\b__p \\+= '';/g, Xa = /\\b(__p \\+=) '' \\+/g, Qa = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g, Ki = /&(?:amp|lt|gt|quot|#39);/g, Yi = /[&<>\"']/g, Va = RegExp(Ki.source), ka = RegExp(Yi.source), ja = /<%-([\\s\\S]+?)%>/g, no = /<%([\\s\\S]+?)%>/g, Zi = /<%=([\\s\\S]+?)%>/g, to = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, eo = /^\\w*$/, ro = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, xr = /[\\\\^$.*+?()[\\]{}|]/g, io = RegExp(xr.source), Er = /^\\s+/, so = /\\s/, uo = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/, ao = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/, oo = /,? & /, fo = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g, co = /[()=,{}\\[\\]\\/\\s]/, ho = /\\\\(\\\\)?/g, lo = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g, Ji = /\\w*$/, po = /^[-+]0x[0-9a-f]+$/i, go = /^0b[01]+$/i, vo = /^\\[object .+?Constructor\\]$/, _o = /^0o[0-7]+$/i, mo = /^(?:0|[1-9]\\d*)$/, wo = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g, Ce = /($^)/, Po = /['\\n\\r\\u2028\\u2029\\\\]/g, Ie = \"\\ud800-\\udfff\", Ao = \"\\\\u0300-\\\\u036f\", Co = \"\\\\ufe20-\\\\ufe2f\", Io = \"\\\\u20d0-\\\\u20ff\", Xi = Ao + Co + Io, Qi = \"\\\\u2700-\\\\u27bf\", Vi = \"a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff\", xo = \"\\\\xac\\\\xb1\\\\xd7\\\\xf7\", Eo = \"\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\", yo = \"\\\\u2000-\\\\u206f\", So = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\", ki = \"A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\", ji = \"\\\\ufe0e\\\\ufe0f\", ns = xo + Eo + yo + So, yr = \"['’]\", Oo = \"[\" + Ie + \"]\", ts = \"[\" + ns + \"]\", xe = \"[\" + Xi + \"]\", es = \"\\\\d+\", Ro = \"[\" + Qi + \"]\", rs = \"[\" + Vi + \"]\", is = \"[^\" + Ie + ns + es + Qi + Vi + ki + \"]\", Sr = \"\\ud83c[\\udffb-\\udfff]\", bo = \"(?:\" + xe + \"|\" + Sr + \")\", ss = \"[^\" + Ie + \"]\", Or = \"(?:\\ud83c[\\udde6-\\uddff]){2}\", Rr = \"[\\ud800-\\udbff][\\udc00-\\udfff]\", bt = \"[\" + ki + \"]\", us = \"\\\\u200d\", as = \"(?:\" + rs + \"|\" + is + \")\", To = \"(?:\" + bt + \"|\" + is + \")\", os = \"(?:\" + yr + \"(?:d|ll|m|re|s|t|ve))?\", fs = \"(?:\" + yr + \"(?:D|LL|M|RE|S|T|VE))?\", cs = bo + \"?\", hs = \"[\" + ji + \"]?\", Lo = \"(?:\" + us + \"(?:\" + [\n            ss,\n            Or,\n            Rr\n        ].join(\"|\") + \")\" + hs + cs + \")*\", Do = \"\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])\", Ho = \"\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])\", ls = hs + cs + Lo, No = \"(?:\" + [\n            Ro,\n            Or,\n            Rr\n        ].join(\"|\") + \")\" + ls, $o = \"(?:\" + [\n            ss + xe + \"?\",\n            xe,\n            Or,\n            Rr,\n            Oo\n        ].join(\"|\") + \")\", Uo = RegExp(yr, \"g\"), Wo = RegExp(xe, \"g\"), br = RegExp(Sr + \"(?=\" + Sr + \")|\" + $o + ls, \"g\"), Fo = RegExp([\n            bt + \"?\" + rs + \"+\" + os + \"(?=\" + [\n                ts,\n                bt,\n                \"$\"\n            ].join(\"|\") + \")\",\n            To + \"+\" + fs + \"(?=\" + [\n                ts,\n                bt + as,\n                \"$\"\n            ].join(\"|\") + \")\",\n            bt + \"?\" + as + \"+\" + os,\n            bt + \"+\" + fs,\n            Ho,\n            Do,\n            es,\n            No\n        ].join(\"|\"), \"g\"), Mo = RegExp(\"[\" + us + Ie + Xi + ji + \"]\"), qo = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, Bo = [\n            \"Array\",\n            \"Buffer\",\n            \"DataView\",\n            \"Date\",\n            \"Error\",\n            \"Float32Array\",\n            \"Float64Array\",\n            \"Function\",\n            \"Int8Array\",\n            \"Int16Array\",\n            \"Int32Array\",\n            \"Map\",\n            \"Math\",\n            \"Object\",\n            \"Promise\",\n            \"RegExp\",\n            \"Set\",\n            \"String\",\n            \"Symbol\",\n            \"TypeError\",\n            \"Uint8Array\",\n            \"Uint8ClampedArray\",\n            \"Uint16Array\",\n            \"Uint32Array\",\n            \"WeakMap\",\n            \"_\",\n            \"clearTimeout\",\n            \"isFinite\",\n            \"parseInt\",\n            \"setTimeout\"\n        ], Go = -1, B = {};\n        B[gr] = B[vr] = B[_r] = B[mr] = B[wr] = B[Pr] = B[Ar] = B[Cr] = B[Ir] = !0, B[Ot] = B[me] = B[kt] = B[Yt] = B[Rt] = B[Zt] = B[we] = B[Pe] = B[yn] = B[Jt] = B[qn] = B[Xt] = B[Sn] = B[Qt] = B[Vt] = !1;\n        var q = {};\n        q[Ot] = q[me] = q[kt] = q[Rt] = q[Yt] = q[Zt] = q[gr] = q[vr] = q[_r] = q[mr] = q[wr] = q[yn] = q[Jt] = q[qn] = q[Xt] = q[Sn] = q[Qt] = q[Ae] = q[Pr] = q[Ar] = q[Cr] = q[Ir] = !0, q[we] = q[Pe] = q[Vt] = !1;\n        var zo = {\n            À: \"A\",\n            Á: \"A\",\n            Â: \"A\",\n            Ã: \"A\",\n            Ä: \"A\",\n            Å: \"A\",\n            à: \"a\",\n            á: \"a\",\n            â: \"a\",\n            ã: \"a\",\n            ä: \"a\",\n            å: \"a\",\n            Ç: \"C\",\n            ç: \"c\",\n            Ð: \"D\",\n            ð: \"d\",\n            È: \"E\",\n            É: \"E\",\n            Ê: \"E\",\n            Ë: \"E\",\n            è: \"e\",\n            é: \"e\",\n            ê: \"e\",\n            ë: \"e\",\n            Ì: \"I\",\n            Í: \"I\",\n            Î: \"I\",\n            Ï: \"I\",\n            ì: \"i\",\n            í: \"i\",\n            î: \"i\",\n            ï: \"i\",\n            Ñ: \"N\",\n            ñ: \"n\",\n            Ò: \"O\",\n            Ó: \"O\",\n            Ô: \"O\",\n            Õ: \"O\",\n            Ö: \"O\",\n            Ø: \"O\",\n            ò: \"o\",\n            ó: \"o\",\n            ô: \"o\",\n            õ: \"o\",\n            ö: \"o\",\n            ø: \"o\",\n            Ù: \"U\",\n            Ú: \"U\",\n            Û: \"U\",\n            Ü: \"U\",\n            ù: \"u\",\n            ú: \"u\",\n            û: \"u\",\n            ü: \"u\",\n            Ý: \"Y\",\n            ý: \"y\",\n            ÿ: \"y\",\n            Æ: \"Ae\",\n            æ: \"ae\",\n            Þ: \"Th\",\n            þ: \"th\",\n            ß: \"ss\",\n            Ā: \"A\",\n            Ă: \"A\",\n            Ą: \"A\",\n            ā: \"a\",\n            ă: \"a\",\n            ą: \"a\",\n            Ć: \"C\",\n            Ĉ: \"C\",\n            Ċ: \"C\",\n            Č: \"C\",\n            ć: \"c\",\n            ĉ: \"c\",\n            ċ: \"c\",\n            č: \"c\",\n            Ď: \"D\",\n            Đ: \"D\",\n            ď: \"d\",\n            đ: \"d\",\n            Ē: \"E\",\n            Ĕ: \"E\",\n            Ė: \"E\",\n            Ę: \"E\",\n            Ě: \"E\",\n            ē: \"e\",\n            ĕ: \"e\",\n            ė: \"e\",\n            ę: \"e\",\n            ě: \"e\",\n            Ĝ: \"G\",\n            Ğ: \"G\",\n            Ġ: \"G\",\n            Ģ: \"G\",\n            ĝ: \"g\",\n            ğ: \"g\",\n            ġ: \"g\",\n            ģ: \"g\",\n            Ĥ: \"H\",\n            Ħ: \"H\",\n            ĥ: \"h\",\n            ħ: \"h\",\n            Ĩ: \"I\",\n            Ī: \"I\",\n            Ĭ: \"I\",\n            Į: \"I\",\n            İ: \"I\",\n            ĩ: \"i\",\n            ī: \"i\",\n            ĭ: \"i\",\n            į: \"i\",\n            ı: \"i\",\n            Ĵ: \"J\",\n            ĵ: \"j\",\n            Ķ: \"K\",\n            ķ: \"k\",\n            ĸ: \"k\",\n            Ĺ: \"L\",\n            Ļ: \"L\",\n            Ľ: \"L\",\n            Ŀ: \"L\",\n            Ł: \"L\",\n            ĺ: \"l\",\n            ļ: \"l\",\n            ľ: \"l\",\n            ŀ: \"l\",\n            ł: \"l\",\n            Ń: \"N\",\n            Ņ: \"N\",\n            Ň: \"N\",\n            Ŋ: \"N\",\n            ń: \"n\",\n            ņ: \"n\",\n            ň: \"n\",\n            ŋ: \"n\",\n            Ō: \"O\",\n            Ŏ: \"O\",\n            Ő: \"O\",\n            ō: \"o\",\n            ŏ: \"o\",\n            ő: \"o\",\n            Ŕ: \"R\",\n            Ŗ: \"R\",\n            Ř: \"R\",\n            ŕ: \"r\",\n            ŗ: \"r\",\n            ř: \"r\",\n            Ś: \"S\",\n            Ŝ: \"S\",\n            Ş: \"S\",\n            Š: \"S\",\n            ś: \"s\",\n            ŝ: \"s\",\n            ş: \"s\",\n            š: \"s\",\n            Ţ: \"T\",\n            Ť: \"T\",\n            Ŧ: \"T\",\n            ţ: \"t\",\n            ť: \"t\",\n            ŧ: \"t\",\n            Ũ: \"U\",\n            Ū: \"U\",\n            Ŭ: \"U\",\n            Ů: \"U\",\n            Ű: \"U\",\n            Ų: \"U\",\n            ũ: \"u\",\n            ū: \"u\",\n            ŭ: \"u\",\n            ů: \"u\",\n            ű: \"u\",\n            ų: \"u\",\n            Ŵ: \"W\",\n            ŵ: \"w\",\n            Ŷ: \"Y\",\n            ŷ: \"y\",\n            Ÿ: \"Y\",\n            Ź: \"Z\",\n            Ż: \"Z\",\n            Ž: \"Z\",\n            ź: \"z\",\n            ż: \"z\",\n            ž: \"z\",\n            Ĳ: \"IJ\",\n            ĳ: \"ij\",\n            Œ: \"Oe\",\n            œ: \"oe\",\n            ŉ: \"'n\",\n            ſ: \"s\"\n        }, Ko = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\"\n        }, Yo = {\n            \"&amp;\": \"&\",\n            \"&lt;\": \"<\",\n            \"&gt;\": \">\",\n            \"&quot;\": '\"',\n            \"&#39;\": \"'\"\n        }, Zo = {\n            \"\\\\\": \"\\\\\",\n            \"'\": \"'\",\n            \"\\n\": \"n\",\n            \"\\r\": \"r\",\n            \"\\u2028\": \"u2028\",\n            \"\\u2029\": \"u2029\"\n        }, Jo = parseFloat, Xo = parseInt, ps = typeof ge == \"object\" && ge && ge.Object === Object && ge, Qo = typeof self == \"object\" && self && self.Object === Object && self, k = ps || Qo || Function(\"return this\")(), Tr = u && !u.nodeType && u, lt = Tr && !0 && C && !C.nodeType && C, ds = lt && lt.exports === Tr, Lr = ds && ps.process, _n = function() {\n            try {\n                var h = lt && lt.require && lt.require(\"util\").types;\n                return h || Lr && Lr.binding && Lr.binding(\"util\");\n            } catch (e) {}\n        }(), gs = _n && _n.isArrayBuffer, vs = _n && _n.isDate, _s = _n && _n.isMap, ms = _n && _n.isRegExp, ws = _n && _n.isSet, Ps = _n && _n.isTypedArray;\n        function cn(h, g, p) {\n            switch(p.length){\n                case 0:\n                    return h.call(g);\n                case 1:\n                    return h.call(g, p[0]);\n                case 2:\n                    return h.call(g, p[0], p[1]);\n                case 3:\n                    return h.call(g, p[0], p[1], p[2]);\n            }\n            return h.apply(g, p);\n        }\n        function Vo(h, g, p, A) {\n            for(var S = -1, U = h == null ? 0 : h.length; ++S < U;){\n                var X = h[S];\n                g(A, X, p(X), h);\n            }\n            return A;\n        }\n        function mn(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length; ++p < A && g(h[p], p, h) !== !1;);\n            return h;\n        }\n        function ko(h, g) {\n            for(var p = h == null ? 0 : h.length; p-- && g(h[p], p, h) !== !1;);\n            return h;\n        }\n        function As(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length; ++p < A;)if (!g(h[p], p, h)) return !1;\n            return !0;\n        }\n        function jn(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length, S = 0, U = []; ++p < A;){\n                var X = h[p];\n                g(X, p, h) && (U[S++] = X);\n            }\n            return U;\n        }\n        function Ee(h, g) {\n            var p = h == null ? 0 : h.length;\n            return !!p && Tt(h, g, 0) > -1;\n        }\n        function Dr(h, g, p) {\n            for(var A = -1, S = h == null ? 0 : h.length; ++A < S;)if (p(g, h[A])) return !0;\n            return !1;\n        }\n        function G(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length, S = Array(A); ++p < A;)S[p] = g(h[p], p, h);\n            return S;\n        }\n        function nt(h, g) {\n            for(var p = -1, A = g.length, S = h.length; ++p < A;)h[S + p] = g[p];\n            return h;\n        }\n        function Hr(h, g, p, A) {\n            var S = -1, U = h == null ? 0 : h.length;\n            for(A && U && (p = h[++S]); ++S < U;)p = g(p, h[S], S, h);\n            return p;\n        }\n        function jo(h, g, p, A) {\n            var S = h == null ? 0 : h.length;\n            for(A && S && (p = h[--S]); S--;)p = g(p, h[S], S, h);\n            return p;\n        }\n        function Nr(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length; ++p < A;)if (g(h[p], p, h)) return !0;\n            return !1;\n        }\n        var nf = $r(\"length\");\n        function tf(h) {\n            return h.split(\"\");\n        }\n        function ef(h) {\n            return h.match(fo) || [];\n        }\n        function Cs(h, g, p) {\n            var A;\n            return p(h, function(S, U, X) {\n                if (g(S, U, X)) return A = U, !1;\n            }), A;\n        }\n        function ye(h, g, p, A) {\n            for(var S = h.length, U = p + (A ? 1 : -1); A ? U-- : ++U < S;)if (g(h[U], U, h)) return U;\n            return -1;\n        }\n        function Tt(h, g, p) {\n            return g === g ? gf(h, g, p) : ye(h, Is, p);\n        }\n        function rf(h, g, p, A) {\n            for(var S = p - 1, U = h.length; ++S < U;)if (A(h[S], g)) return S;\n            return -1;\n        }\n        function Is(h) {\n            return h !== h;\n        }\n        function xs(h, g) {\n            var p = h == null ? 0 : h.length;\n            return p ? Wr(h, g) / p : _e;\n        }\n        function $r(h) {\n            return function(g) {\n                return g == null ? i : g[h];\n            };\n        }\n        function Ur(h) {\n            return function(g) {\n                return h == null ? i : h[g];\n            };\n        }\n        function Es(h, g, p, A, S) {\n            return S(h, function(U, X, M) {\n                p = A ? (A = !1, U) : g(p, U, X, M);\n            }), p;\n        }\n        function sf(h, g) {\n            var p = h.length;\n            for(h.sort(g); p--;)h[p] = h[p].value;\n            return h;\n        }\n        function Wr(h, g) {\n            for(var p, A = -1, S = h.length; ++A < S;){\n                var U = g(h[A]);\n                U !== i && (p = p === i ? U : p + U);\n            }\n            return p;\n        }\n        function Fr(h, g) {\n            for(var p = -1, A = Array(h); ++p < h;)A[p] = g(p);\n            return A;\n        }\n        function uf(h, g) {\n            return G(g, function(p) {\n                return [\n                    p,\n                    h[p]\n                ];\n            });\n        }\n        function ys(h) {\n            return h && h.slice(0, bs(h) + 1).replace(Er, \"\");\n        }\n        function hn(h) {\n            return function(g) {\n                return h(g);\n            };\n        }\n        function Mr(h, g) {\n            return G(g, function(p) {\n                return h[p];\n            });\n        }\n        function jt(h, g) {\n            return h.has(g);\n        }\n        function Ss(h, g) {\n            for(var p = -1, A = h.length; ++p < A && Tt(g, h[p], 0) > -1;);\n            return p;\n        }\n        function Os(h, g) {\n            for(var p = h.length; p-- && Tt(g, h[p], 0) > -1;);\n            return p;\n        }\n        function af(h, g) {\n            for(var p = h.length, A = 0; p--;)h[p] === g && ++A;\n            return A;\n        }\n        var of = Ur(zo), ff = Ur(Ko);\n        function cf(h) {\n            return \"\\\\\" + Zo[h];\n        }\n        function hf(h, g) {\n            return h == null ? i : h[g];\n        }\n        function Lt(h) {\n            return Mo.test(h);\n        }\n        function lf(h) {\n            return qo.test(h);\n        }\n        function pf(h) {\n            for(var g, p = []; !(g = h.next()).done;)p.push(g.value);\n            return p;\n        }\n        function qr(h) {\n            var g = -1, p = Array(h.size);\n            return h.forEach(function(A, S) {\n                p[++g] = [\n                    S,\n                    A\n                ];\n            }), p;\n        }\n        function Rs(h, g) {\n            return function(p) {\n                return h(g(p));\n            };\n        }\n        function tt(h, g) {\n            for(var p = -1, A = h.length, S = 0, U = []; ++p < A;){\n                var X = h[p];\n                (X === g || X === It) && (h[p] = It, U[S++] = p);\n            }\n            return U;\n        }\n        function Se(h) {\n            var g = -1, p = Array(h.size);\n            return h.forEach(function(A) {\n                p[++g] = A;\n            }), p;\n        }\n        function df(h) {\n            var g = -1, p = Array(h.size);\n            return h.forEach(function(A) {\n                p[++g] = [\n                    A,\n                    A\n                ];\n            }), p;\n        }\n        function gf(h, g, p) {\n            for(var A = p - 1, S = h.length; ++A < S;)if (h[A] === g) return A;\n            return -1;\n        }\n        function vf(h, g, p) {\n            for(var A = p + 1; A--;)if (h[A] === g) return A;\n            return A;\n        }\n        function Dt(h) {\n            return Lt(h) ? mf(h) : nf(h);\n        }\n        function On(h) {\n            return Lt(h) ? wf(h) : tf(h);\n        }\n        function bs(h) {\n            for(var g = h.length; g-- && so.test(h.charAt(g)););\n            return g;\n        }\n        var _f = Ur(Yo);\n        function mf(h) {\n            for(var g = br.lastIndex = 0; br.test(h);)++g;\n            return g;\n        }\n        function wf(h) {\n            return h.match(br) || [];\n        }\n        function Pf(h) {\n            return h.match(Fo) || [];\n        }\n        var Af = function h(g) {\n            g = g == null ? k : Ht.defaults(k.Object(), g, Ht.pick(k, Bo));\n            var p = g.Array, A = g.Date, S = g.Error, U = g.Function, X = g.Math, M = g.Object, Br = g.RegExp, Cf = g.String, wn = g.TypeError, Oe = p.prototype, If = U.prototype, Nt = M.prototype, Re = g[\"__core-js_shared__\"], be = If.toString, F = Nt.hasOwnProperty, xf = 0, Ts = function() {\n                var n = /[^.]+$/.exec(Re && Re.keys && Re.keys.IE_PROTO || \"\");\n                return n ? \"Symbol(src)_1.\" + n : \"\";\n            }(), Te = Nt.toString, Ef = be.call(M), yf = k._, Sf = Br(\"^\" + be.call(F).replace(xr, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"), Le = ds ? g.Buffer : i, et = g.Symbol, De = g.Uint8Array, Ls = Le ? Le.allocUnsafe : i, He = Rs(M.getPrototypeOf, M), Ds = M.create, Hs = Nt.propertyIsEnumerable, Ne = Oe.splice, Ns = et ? et.isConcatSpreadable : i, ne = et ? et.iterator : i, pt = et ? et.toStringTag : i, $e = function() {\n                try {\n                    var n = mt(M, \"defineProperty\");\n                    return n({}, \"\", {}), n;\n                } catch (e) {}\n            }(), Of = g.clearTimeout !== k.clearTimeout && g.clearTimeout, Rf = A && A.now !== k.Date.now && A.now, bf = g.setTimeout !== k.setTimeout && g.setTimeout, Ue = X.ceil, We = X.floor, Gr = M.getOwnPropertySymbols, Tf = Le ? Le.isBuffer : i, $s = g.isFinite, Lf = Oe.join, Df = Rs(M.keys, M), Q = X.max, nn = X.min, Hf = A.now, Nf = g.parseInt, Us = X.random, $f = Oe.reverse, zr = mt(g, \"DataView\"), te = mt(g, \"Map\"), Kr = mt(g, \"Promise\"), $t = mt(g, \"Set\"), ee = mt(g, \"WeakMap\"), re = mt(M, \"create\"), Fe = ee && new ee, Ut = {}, Uf = wt(zr), Wf = wt(te), Ff = wt(Kr), Mf = wt($t), qf = wt(ee), Me = et ? et.prototype : i, ie = Me ? Me.valueOf : i, Ws = Me ? Me.toString : i;\n            function a(n) {\n                if (Y(n) && !R(n) && !(n instanceof H)) {\n                    if (n instanceof Pn) return n;\n                    if (F.call(n, \"__wrapped__\")) return Fu(n);\n                }\n                return new Pn(n);\n            }\n            var Wt = function() {\n                function n() {}\n                return function(t) {\n                    if (!K(t)) return {};\n                    if (Ds) return Ds(t);\n                    n.prototype = t;\n                    var e = new n;\n                    return n.prototype = i, e;\n                };\n            }();\n            function qe() {}\n            function Pn(n, t) {\n                this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = i;\n            }\n            a.templateSettings = {\n                escape: ja,\n                evaluate: no,\n                interpolate: Zi,\n                variable: \"\",\n                imports: {\n                    _: a\n                }\n            }, a.prototype = qe.prototype, a.prototype.constructor = a, Pn.prototype = Wt(qe.prototype), Pn.prototype.constructor = Pn;\n            function H(n) {\n                this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Nn, this.__views__ = [];\n            }\n            function Bf() {\n                var n = new H(this.__wrapped__);\n                return n.__actions__ = un(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = un(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = un(this.__views__), n;\n            }\n            function Gf() {\n                if (this.__filtered__) {\n                    var n = new H(this);\n                    n.__dir__ = -1, n.__filtered__ = !0;\n                } else n = this.clone(), n.__dir__ *= -1;\n                return n;\n            }\n            function zf() {\n                var n = this.__wrapped__.value(), t = this.__dir__, e = R(n), r = t < 0, s = e ? n.length : 0, o = eh(0, s, this.__views__), f = o.start, c = o.end, l = c - f, v = r ? c : f - 1, _ = this.__iteratees__, m = _.length, w = 0, I = nn(l, this.__takeCount__);\n                if (!e || !r && s == l && I == l) return ou(n, this.__actions__);\n                var E = [];\n                n: for(; l-- && w < I;){\n                    v += t;\n                    for(var T = -1, y = n[v]; ++T < m;){\n                        var D = _[T], N = D.iteratee, dn = D.type, sn = N(y);\n                        if (dn == $a) y = sn;\n                        else if (!sn) {\n                            if (dn == Bi) continue n;\n                            break n;\n                        }\n                    }\n                    E[w++] = y;\n                }\n                return E;\n            }\n            H.prototype = Wt(qe.prototype), H.prototype.constructor = H;\n            function dt(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function Kf() {\n                this.__data__ = re ? re(null) : {}, this.size = 0;\n            }\n            function Yf(n) {\n                var t = this.has(n) && delete this.__data__[n];\n                return this.size -= t ? 1 : 0, t;\n            }\n            function Zf(n) {\n                var t = this.__data__;\n                if (re) {\n                    var e = t[n];\n                    return e === zt ? i : e;\n                }\n                return F.call(t, n) ? t[n] : i;\n            }\n            function Jf(n) {\n                var t = this.__data__;\n                return re ? t[n] !== i : F.call(t, n);\n            }\n            function Xf(n, t) {\n                var e = this.__data__;\n                return this.size += this.has(n) ? 0 : 1, e[n] = re && t === i ? zt : t, this;\n            }\n            dt.prototype.clear = Kf, dt.prototype.delete = Yf, dt.prototype.get = Zf, dt.prototype.has = Jf, dt.prototype.set = Xf;\n            function Bn(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function Qf() {\n                this.__data__ = [], this.size = 0;\n            }\n            function Vf(n) {\n                var t = this.__data__, e = Be(t, n);\n                if (e < 0) return !1;\n                var r = t.length - 1;\n                return e == r ? t.pop() : Ne.call(t, e, 1), --this.size, !0;\n            }\n            function kf(n) {\n                var t = this.__data__, e = Be(t, n);\n                return e < 0 ? i : t[e][1];\n            }\n            function jf(n) {\n                return Be(this.__data__, n) > -1;\n            }\n            function nc(n, t) {\n                var e = this.__data__, r = Be(e, n);\n                return r < 0 ? (++this.size, e.push([\n                    n,\n                    t\n                ])) : e[r][1] = t, this;\n            }\n            Bn.prototype.clear = Qf, Bn.prototype.delete = Vf, Bn.prototype.get = kf, Bn.prototype.has = jf, Bn.prototype.set = nc;\n            function Gn(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function tc() {\n                this.size = 0, this.__data__ = {\n                    hash: new dt,\n                    map: new (te || Bn),\n                    string: new dt\n                };\n            }\n            function ec(n) {\n                var t = nr(this, n).delete(n);\n                return this.size -= t ? 1 : 0, t;\n            }\n            function rc(n) {\n                return nr(this, n).get(n);\n            }\n            function ic(n) {\n                return nr(this, n).has(n);\n            }\n            function sc(n, t) {\n                var e = nr(this, n), r = e.size;\n                return e.set(n, t), this.size += e.size == r ? 0 : 1, this;\n            }\n            Gn.prototype.clear = tc, Gn.prototype.delete = ec, Gn.prototype.get = rc, Gn.prototype.has = ic, Gn.prototype.set = sc;\n            function gt(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.__data__ = new Gn; ++t < e;)this.add(n[t]);\n            }\n            function uc(n) {\n                return this.__data__.set(n, zt), this;\n            }\n            function ac(n) {\n                return this.__data__.has(n);\n            }\n            gt.prototype.add = gt.prototype.push = uc, gt.prototype.has = ac;\n            function Rn(n) {\n                var t = this.__data__ = new Bn(n);\n                this.size = t.size;\n            }\n            function oc() {\n                this.__data__ = new Bn, this.size = 0;\n            }\n            function fc(n) {\n                var t = this.__data__, e = t.delete(n);\n                return this.size = t.size, e;\n            }\n            function cc(n) {\n                return this.__data__.get(n);\n            }\n            function hc(n) {\n                return this.__data__.has(n);\n            }\n            function lc(n, t) {\n                var e = this.__data__;\n                if (e instanceof Bn) {\n                    var r = e.__data__;\n                    if (!te || r.length < P - 1) return r.push([\n                        n,\n                        t\n                    ]), this.size = ++e.size, this;\n                    e = this.__data__ = new Gn(r);\n                }\n                return e.set(n, t), this.size = e.size, this;\n            }\n            Rn.prototype.clear = oc, Rn.prototype.delete = fc, Rn.prototype.get = cc, Rn.prototype.has = hc, Rn.prototype.set = lc;\n            function Fs(n, t) {\n                var e = R(n), r = !e && Pt(n), s = !e && !r && at(n), o = !e && !r && !s && Bt(n), f = e || r || s || o, c = f ? Fr(n.length, Cf) : [], l = c.length;\n                for(var v in n)(t || F.call(n, v)) && !(f && (v == \"length\" || s && (v == \"offset\" || v == \"parent\") || o && (v == \"buffer\" || v == \"byteLength\" || v == \"byteOffset\") || Zn(v, l))) && c.push(v);\n                return c;\n            }\n            function Ms(n) {\n                var t = n.length;\n                return t ? n[ei(0, t - 1)] : i;\n            }\n            function pc(n, t) {\n                return tr(un(n), vt(t, 0, n.length));\n            }\n            function dc(n) {\n                return tr(un(n));\n            }\n            function Yr(n, t, e) {\n                (e !== i && !bn(n[t], e) || e === i && !(t in n)) && zn(n, t, e);\n            }\n            function se(n, t, e) {\n                var r = n[t];\n                (!(F.call(n, t) && bn(r, e)) || e === i && !(t in n)) && zn(n, t, e);\n            }\n            function Be(n, t) {\n                for(var e = n.length; e--;)if (bn(n[e][0], t)) return e;\n                return -1;\n            }\n            function gc(n, t, e, r) {\n                return rt(n, function(s, o, f) {\n                    t(r, s, e(s), f);\n                }), r;\n            }\n            function qs(n, t) {\n                return n && Un(t, V(t), n);\n            }\n            function vc(n, t) {\n                return n && Un(t, on(t), n);\n            }\n            function zn(n, t, e) {\n                t == \"__proto__\" && $e ? $e(n, t, {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: e,\n                    writable: !0\n                }) : n[t] = e;\n            }\n            function Zr(n, t) {\n                for(var e = -1, r = t.length, s = p(r), o = n == null; ++e < r;)s[e] = o ? i : Si(n, t[e]);\n                return s;\n            }\n            function vt(n, t, e) {\n                return n === n && (e !== i && (n = n <= e ? n : e), t !== i && (n = n >= t ? n : t)), n;\n            }\n            function An(n, t, e, r, s, o) {\n                var f, c = t & Ln, l = t & Fn, v = t & xt;\n                if (e && (f = s ? e(n, r, s, o) : e(n)), f !== i) return f;\n                if (!K(n)) return n;\n                var _ = R(n);\n                if (_) {\n                    if (f = ih(n), !c) return un(n, f);\n                } else {\n                    var m = tn(n), w = m == Pe || m == Gi;\n                    if (at(n)) return hu(n, c);\n                    if (m == qn || m == Ot || w && !s) {\n                        if (f = l || w ? {} : bu(n), !c) return l ? Zc(n, vc(f, n)) : Yc(n, qs(f, n));\n                    } else {\n                        if (!q[m]) return s ? n : {};\n                        f = sh(n, m, c);\n                    }\n                }\n                o || (o = new Rn);\n                var I = o.get(n);\n                if (I) return I;\n                o.set(n, f), sa(n) ? n.forEach(function(y) {\n                    f.add(An(y, t, e, y, n, o));\n                }) : ra(n) && n.forEach(function(y, D) {\n                    f.set(D, An(y, t, e, D, n, o));\n                });\n                var E = v ? l ? pi : li : l ? on : V, T = _ ? i : E(n);\n                return mn(T || n, function(y, D) {\n                    T && (D = y, y = n[D]), se(f, D, An(y, t, e, D, n, o));\n                }), f;\n            }\n            function _c(n) {\n                var t = V(n);\n                return function(e) {\n                    return Bs(e, n, t);\n                };\n            }\n            function Bs(n, t, e) {\n                var r = e.length;\n                if (n == null) return !r;\n                for(n = M(n); r--;){\n                    var s = e[r], o = t[s], f = n[s];\n                    if (f === i && !(s in n) || !o(f)) return !1;\n                }\n                return !0;\n            }\n            function Gs(n, t, e) {\n                if (typeof n != \"function\") throw new wn($);\n                return le(function() {\n                    n.apply(i, e);\n                }, t);\n            }\n            function ue(n, t, e, r) {\n                var s = -1, o = Ee, f = !0, c = n.length, l = [], v = t.length;\n                if (!c) return l;\n                e && (t = G(t, hn(e))), r ? (o = Dr, f = !1) : t.length >= P && (o = jt, f = !1, t = new gt(t));\n                n: for(; ++s < c;){\n                    var _ = n[s], m = e == null ? _ : e(_);\n                    if (_ = r || _ !== 0 ? _ : 0, f && m === m) {\n                        for(var w = v; w--;)if (t[w] === m) continue n;\n                        l.push(_);\n                    } else o(t, m, r) || l.push(_);\n                }\n                return l;\n            }\n            var rt = vu($n), zs = vu(Xr, !0);\n            function mc(n, t) {\n                var e = !0;\n                return rt(n, function(r, s, o) {\n                    return e = !!t(r, s, o), e;\n                }), e;\n            }\n            function Ge(n, t, e) {\n                for(var r = -1, s = n.length; ++r < s;){\n                    var o = n[r], f = t(o);\n                    if (f != null && (c === i ? f === f && !pn(f) : e(f, c))) var c = f, l = o;\n                }\n                return l;\n            }\n            function wc(n, t, e, r) {\n                var s = n.length;\n                for(e = b(e), e < 0 && (e = -e > s ? 0 : s + e), r = r === i || r > s ? s : b(r), r < 0 && (r += s), r = e > r ? 0 : aa(r); e < r;)n[e++] = t;\n                return n;\n            }\n            function Ks(n, t) {\n                var e = [];\n                return rt(n, function(r, s, o) {\n                    t(r, s, o) && e.push(r);\n                }), e;\n            }\n            function j(n, t, e, r, s) {\n                var o = -1, f = n.length;\n                for(e || (e = ah), s || (s = []); ++o < f;){\n                    var c = n[o];\n                    t > 0 && e(c) ? t > 1 ? j(c, t - 1, e, r, s) : nt(s, c) : r || (s[s.length] = c);\n                }\n                return s;\n            }\n            var Jr = _u(), Ys = _u(!0);\n            function $n(n, t) {\n                return n && Jr(n, t, V);\n            }\n            function Xr(n, t) {\n                return n && Ys(n, t, V);\n            }\n            function ze(n, t) {\n                return jn(t, function(e) {\n                    return Jn(n[e]);\n                });\n            }\n            function _t(n, t) {\n                t = st(t, n);\n                for(var e = 0, r = t.length; n != null && e < r;)n = n[Wn(t[e++])];\n                return e && e == r ? n : i;\n            }\n            function Zs(n, t, e) {\n                var r = t(n);\n                return R(n) ? r : nt(r, e(n));\n            }\n            function en(n) {\n                return n == null ? n === i ? Ya : za : pt && pt in M(n) ? th(n) : dh(n);\n            }\n            function Qr(n, t) {\n                return n > t;\n            }\n            function Pc(n, t) {\n                return n != null && F.call(n, t);\n            }\n            function Ac(n, t) {\n                return n != null && t in M(n);\n            }\n            function Cc(n, t, e) {\n                return n >= nn(t, e) && n < Q(t, e);\n            }\n            function Vr(n, t, e) {\n                for(var r = e ? Dr : Ee, s = n[0].length, o = n.length, f = o, c = p(o), l = 1 / 0, v = []; f--;){\n                    var _ = n[f];\n                    f && t && (_ = G(_, hn(t))), l = nn(_.length, l), c[f] = !e && (t || s >= 120 && _.length >= 120) ? new gt(f && _) : i;\n                }\n                _ = n[0];\n                var m = -1, w = c[0];\n                n: for(; ++m < s && v.length < l;){\n                    var I = _[m], E = t ? t(I) : I;\n                    if (I = e || I !== 0 ? I : 0, !(w ? jt(w, E) : r(v, E, e))) {\n                        for(f = o; --f;){\n                            var T = c[f];\n                            if (!(T ? jt(T, E) : r(n[f], E, e))) continue n;\n                        }\n                        w && w.push(E), v.push(I);\n                    }\n                }\n                return v;\n            }\n            function Ic(n, t, e, r) {\n                return $n(n, function(s, o, f) {\n                    t(r, e(s), o, f);\n                }), r;\n            }\n            function ae(n, t, e) {\n                t = st(t, n), n = Hu(n, t);\n                var r = n == null ? n : n[Wn(In(t))];\n                return r == null ? i : cn(r, n, e);\n            }\n            function Js(n) {\n                return Y(n) && en(n) == Ot;\n            }\n            function xc(n) {\n                return Y(n) && en(n) == kt;\n            }\n            function Ec(n) {\n                return Y(n) && en(n) == Zt;\n            }\n            function oe(n, t, e, r, s) {\n                return n === t ? !0 : n == null || t == null || !Y(n) && !Y(t) ? n !== n && t !== t : yc(n, t, e, r, oe, s);\n            }\n            function yc(n, t, e, r, s, o) {\n                var f = R(n), c = R(t), l = f ? me : tn(n), v = c ? me : tn(t);\n                l = l == Ot ? qn : l, v = v == Ot ? qn : v;\n                var _ = l == qn, m = v == qn, w = l == v;\n                if (w && at(n)) {\n                    if (!at(t)) return !1;\n                    f = !0, _ = !1;\n                }\n                if (w && !_) return o || (o = new Rn), f || Bt(n) ? Su(n, t, e, r, s, o) : jc(n, t, l, e, r, s, o);\n                if (!(e & Et)) {\n                    var I = _ && F.call(n, \"__wrapped__\"), E = m && F.call(t, \"__wrapped__\");\n                    if (I || E) {\n                        var T = I ? n.value() : n, y = E ? t.value() : t;\n                        return o || (o = new Rn), s(T, y, e, r, o);\n                    }\n                }\n                return w ? (o || (o = new Rn), nh(n, t, e, r, s, o)) : !1;\n            }\n            function Sc(n) {\n                return Y(n) && tn(n) == yn;\n            }\n            function kr(n, t, e, r) {\n                var s = e.length, o = s, f = !r;\n                if (n == null) return !o;\n                for(n = M(n); s--;){\n                    var c = e[s];\n                    if (f && c[2] ? c[1] !== n[c[0]] : !(c[0] in n)) return !1;\n                }\n                for(; ++s < o;){\n                    c = e[s];\n                    var l = c[0], v = n[l], _ = c[1];\n                    if (f && c[2]) {\n                        if (v === i && !(l in n)) return !1;\n                    } else {\n                        var m = new Rn;\n                        if (r) var w = r(v, _, l, n, t, m);\n                        if (!(w === i ? oe(_, v, Et | ve, r, m) : w)) return !1;\n                    }\n                }\n                return !0;\n            }\n            function Xs(n) {\n                if (!K(n) || fh(n)) return !1;\n                var t = Jn(n) ? Sf : vo;\n                return t.test(wt(n));\n            }\n            function Oc(n) {\n                return Y(n) && en(n) == Xt;\n            }\n            function Rc(n) {\n                return Y(n) && tn(n) == Sn;\n            }\n            function bc(n) {\n                return Y(n) && ar(n.length) && !!B[en(n)];\n            }\n            function Qs(n) {\n                return typeof n == \"function\" ? n : n == null ? fn : typeof n == \"object\" ? R(n) ? js(n[0], n[1]) : ks(n) : ma(n);\n            }\n            function jr(n) {\n                if (!he(n)) return Df(n);\n                var t = [];\n                for(var e in M(n))F.call(n, e) && e != \"constructor\" && t.push(e);\n                return t;\n            }\n            function Tc(n) {\n                if (!K(n)) return ph(n);\n                var t = he(n), e = [];\n                for(var r in n)r == \"constructor\" && (t || !F.call(n, r)) || e.push(r);\n                return e;\n            }\n            function ni(n, t) {\n                return n < t;\n            }\n            function Vs(n, t) {\n                var e = -1, r = an(n) ? p(n.length) : [];\n                return rt(n, function(s, o, f) {\n                    r[++e] = t(s, o, f);\n                }), r;\n            }\n            function ks(n) {\n                var t = gi(n);\n                return t.length == 1 && t[0][2] ? Lu(t[0][0], t[0][1]) : function(e) {\n                    return e === n || kr(e, n, t);\n                };\n            }\n            function js(n, t) {\n                return _i(n) && Tu(t) ? Lu(Wn(n), t) : function(e) {\n                    var r = Si(e, n);\n                    return r === i && r === t ? Oi(e, n) : oe(t, r, Et | ve);\n                };\n            }\n            function Ke(n, t, e, r, s) {\n                n !== t && Jr(t, function(o, f) {\n                    if (s || (s = new Rn), K(o)) Lc(n, t, f, e, Ke, r, s);\n                    else {\n                        var c = r ? r(wi(n, f), o, f + \"\", n, t, s) : i;\n                        c === i && (c = o), Yr(n, f, c);\n                    }\n                }, on);\n            }\n            function Lc(n, t, e, r, s, o, f) {\n                var c = wi(n, e), l = wi(t, e), v = f.get(l);\n                if (v) {\n                    Yr(n, e, v);\n                    return;\n                }\n                var _ = o ? o(c, l, e + \"\", n, t, f) : i, m = _ === i;\n                if (m) {\n                    var w = R(l), I = !w && at(l), E = !w && !I && Bt(l);\n                    _ = l, w || I || E ? R(c) ? _ = c : Z(c) ? _ = un(c) : I ? (m = !1, _ = hu(l, !0)) : E ? (m = !1, _ = lu(l, !0)) : _ = [] : pe(l) || Pt(l) ? (_ = c, Pt(c) ? _ = oa(c) : (!K(c) || Jn(c)) && (_ = bu(l))) : m = !1;\n                }\n                m && (f.set(l, _), s(_, l, r, o, f), f.delete(l)), Yr(n, e, _);\n            }\n            function nu(n, t) {\n                var e = n.length;\n                if (e) return t += t < 0 ? e : 0, Zn(t, e) ? n[t] : i;\n            }\n            function tu(n, t, e) {\n                t.length ? t = G(t, function(o) {\n                    return R(o) ? function(f) {\n                        return _t(f, o.length === 1 ? o[0] : o);\n                    } : o;\n                }) : t = [\n                    fn\n                ];\n                var r = -1;\n                t = G(t, hn(x()));\n                var s = Vs(n, function(o, f, c) {\n                    var l = G(t, function(v) {\n                        return v(o);\n                    });\n                    return {\n                        criteria: l,\n                        index: ++r,\n                        value: o\n                    };\n                });\n                return sf(s, function(o, f) {\n                    return Kc(o, f, e);\n                });\n            }\n            function Dc(n, t) {\n                return eu(n, t, function(e, r) {\n                    return Oi(n, r);\n                });\n            }\n            function eu(n, t, e) {\n                for(var r = -1, s = t.length, o = {}; ++r < s;){\n                    var f = t[r], c = _t(n, f);\n                    e(c, f) && fe(o, st(f, n), c);\n                }\n                return o;\n            }\n            function Hc(n) {\n                return function(t) {\n                    return _t(t, n);\n                };\n            }\n            function ti(n, t, e, r) {\n                var s = r ? rf : Tt, o = -1, f = t.length, c = n;\n                for(n === t && (t = un(t)), e && (c = G(n, hn(e))); ++o < f;)for(var l = 0, v = t[o], _ = e ? e(v) : v; (l = s(c, _, l, r)) > -1;)c !== n && Ne.call(c, l, 1), Ne.call(n, l, 1);\n                return n;\n            }\n            function ru(n, t) {\n                for(var e = n ? t.length : 0, r = e - 1; e--;){\n                    var s = t[e];\n                    if (e == r || s !== o) {\n                        var o = s;\n                        Zn(s) ? Ne.call(n, s, 1) : si(n, s);\n                    }\n                }\n                return n;\n            }\n            function ei(n, t) {\n                return n + We(Us() * (t - n + 1));\n            }\n            function Nc(n, t, e, r) {\n                for(var s = -1, o = Q(Ue((t - n) / (e || 1)), 0), f = p(o); o--;)f[r ? o : ++s] = n, n += e;\n                return f;\n            }\n            function ri(n, t) {\n                var e = \"\";\n                if (!n || t < 1 || t > kn) return e;\n                do t % 2 && (e += n), t = We(t / 2), t && (n += n);\n                while (t);\n                return e;\n            }\n            function L(n, t) {\n                return Pi(Du(n, t, fn), n + \"\");\n            }\n            function $c(n) {\n                return Ms(Gt(n));\n            }\n            function Uc(n, t) {\n                var e = Gt(n);\n                return tr(e, vt(t, 0, e.length));\n            }\n            function fe(n, t, e, r) {\n                if (!K(n)) return n;\n                t = st(t, n);\n                for(var s = -1, o = t.length, f = o - 1, c = n; c != null && ++s < o;){\n                    var l = Wn(t[s]), v = e;\n                    if (l === \"__proto__\" || l === \"constructor\" || l === \"prototype\") return n;\n                    if (s != f) {\n                        var _ = c[l];\n                        v = r ? r(_, l, c) : i, v === i && (v = K(_) ? _ : Zn(t[s + 1]) ? [] : {});\n                    }\n                    se(c, l, v), c = c[l];\n                }\n                return n;\n            }\n            var iu = Fe ? function(n, t) {\n                return Fe.set(n, t), n;\n            } : fn, Wc = $e ? function(n, t) {\n                return $e(n, \"toString\", {\n                    configurable: !0,\n                    enumerable: !1,\n                    value: bi(t),\n                    writable: !0\n                });\n            } : fn;\n            function Fc(n) {\n                return tr(Gt(n));\n            }\n            function Cn(n, t, e) {\n                var r = -1, s = n.length;\n                t < 0 && (t = -t > s ? 0 : s + t), e = e > s ? s : e, e < 0 && (e += s), s = t > e ? 0 : e - t >>> 0, t >>>= 0;\n                for(var o = p(s); ++r < s;)o[r] = n[r + t];\n                return o;\n            }\n            function Mc(n, t) {\n                var e;\n                return rt(n, function(r, s, o) {\n                    return e = t(r, s, o), !e;\n                }), !!e;\n            }\n            function Ye(n, t, e) {\n                var r = 0, s = n == null ? r : n.length;\n                if (typeof t == \"number\" && t === t && s <= Ma) {\n                    for(; r < s;){\n                        var o = r + s >>> 1, f = n[o];\n                        f !== null && !pn(f) && (e ? f <= t : f < t) ? r = o + 1 : s = o;\n                    }\n                    return s;\n                }\n                return ii(n, t, fn, e);\n            }\n            function ii(n, t, e, r) {\n                var s = 0, o = n == null ? 0 : n.length;\n                if (o === 0) return 0;\n                t = e(t);\n                for(var f = t !== t, c = t === null, l = pn(t), v = t === i; s < o;){\n                    var _ = We((s + o) / 2), m = e(n[_]), w = m !== i, I = m === null, E = m === m, T = pn(m);\n                    if (f) var y = r || E;\n                    else v ? y = E && (r || w) : c ? y = E && w && (r || !I) : l ? y = E && w && !I && (r || !T) : I || T ? y = !1 : y = r ? m <= t : m < t;\n                    y ? s = _ + 1 : o = _;\n                }\n                return nn(o, Fa);\n            }\n            function su(n, t) {\n                for(var e = -1, r = n.length, s = 0, o = []; ++e < r;){\n                    var f = n[e], c = t ? t(f) : f;\n                    if (!e || !bn(c, l)) {\n                        var l = c;\n                        o[s++] = f === 0 ? 0 : f;\n                    }\n                }\n                return o;\n            }\n            function uu(n) {\n                return typeof n == \"number\" ? n : pn(n) ? _e : +n;\n            }\n            function ln(n) {\n                if (typeof n == \"string\") return n;\n                if (R(n)) return G(n, ln) + \"\";\n                if (pn(n)) return Ws ? Ws.call(n) : \"\";\n                var t = n + \"\";\n                return t == \"0\" && 1 / n == -ht ? \"-0\" : t;\n            }\n            function it(n, t, e) {\n                var r = -1, s = Ee, o = n.length, f = !0, c = [], l = c;\n                if (e) f = !1, s = Dr;\n                else if (o >= P) {\n                    var v = t ? null : Vc(n);\n                    if (v) return Se(v);\n                    f = !1, s = jt, l = new gt;\n                } else l = t ? [] : c;\n                n: for(; ++r < o;){\n                    var _ = n[r], m = t ? t(_) : _;\n                    if (_ = e || _ !== 0 ? _ : 0, f && m === m) {\n                        for(var w = l.length; w--;)if (l[w] === m) continue n;\n                        t && l.push(m), c.push(_);\n                    } else s(l, m, e) || (l !== c && l.push(m), c.push(_));\n                }\n                return c;\n            }\n            function si(n, t) {\n                return t = st(t, n), n = Hu(n, t), n == null || delete n[Wn(In(t))];\n            }\n            function au(n, t, e, r) {\n                return fe(n, t, e(_t(n, t)), r);\n            }\n            function Ze(n, t, e, r) {\n                for(var s = n.length, o = r ? s : -1; (r ? o-- : ++o < s) && t(n[o], o, n););\n                return e ? Cn(n, r ? 0 : o, r ? o + 1 : s) : Cn(n, r ? o + 1 : 0, r ? s : o);\n            }\n            function ou(n, t) {\n                var e = n;\n                return e instanceof H && (e = e.value()), Hr(t, function(r, s) {\n                    return s.func.apply(s.thisArg, nt([\n                        r\n                    ], s.args));\n                }, e);\n            }\n            function ui(n, t, e) {\n                var r = n.length;\n                if (r < 2) return r ? it(n[0]) : [];\n                for(var s = -1, o = p(r); ++s < r;)for(var f = n[s], c = -1; ++c < r;)c != s && (o[s] = ue(o[s] || f, n[c], t, e));\n                return it(j(o, 1), t, e);\n            }\n            function fu(n, t, e) {\n                for(var r = -1, s = n.length, o = t.length, f = {}; ++r < s;){\n                    var c = r < o ? t[r] : i;\n                    e(f, n[r], c);\n                }\n                return f;\n            }\n            function ai(n) {\n                return Z(n) ? n : [];\n            }\n            function oi(n) {\n                return typeof n == \"function\" ? n : fn;\n            }\n            function st(n, t) {\n                return R(n) ? n : _i(n, t) ? [\n                    n\n                ] : Wu(W(n));\n            }\n            var qc = L;\n            function ut(n, t, e) {\n                var r = n.length;\n                return e = e === i ? r : e, !t && e >= r ? n : Cn(n, t, e);\n            }\n            var cu = Of || function(n) {\n                return k.clearTimeout(n);\n            };\n            function hu(n, t) {\n                if (t) return n.slice();\n                var e = n.length, r = Ls ? Ls(e) : new n.constructor(e);\n                return n.copy(r), r;\n            }\n            function fi(n) {\n                var t = new n.constructor(n.byteLength);\n                return new De(t).set(new De(n)), t;\n            }\n            function Bc(n, t) {\n                var e = t ? fi(n.buffer) : n.buffer;\n                return new n.constructor(e, n.byteOffset, n.byteLength);\n            }\n            function Gc(n) {\n                var t = new n.constructor(n.source, Ji.exec(n));\n                return t.lastIndex = n.lastIndex, t;\n            }\n            function zc(n) {\n                return ie ? M(ie.call(n)) : {};\n            }\n            function lu(n, t) {\n                var e = t ? fi(n.buffer) : n.buffer;\n                return new n.constructor(e, n.byteOffset, n.length);\n            }\n            function pu(n, t) {\n                if (n !== t) {\n                    var e = n !== i, r = n === null, s = n === n, o = pn(n), f = t !== i, c = t === null, l = t === t, v = pn(t);\n                    if (!c && !v && !o && n > t || o && f && l && !c && !v || r && f && l || !e && l || !s) return 1;\n                    if (!r && !o && !v && n < t || v && e && s && !r && !o || c && e && s || !f && s || !l) return -1;\n                }\n                return 0;\n            }\n            function Kc(n, t, e) {\n                for(var r = -1, s = n.criteria, o = t.criteria, f = s.length, c = e.length; ++r < f;){\n                    var l = pu(s[r], o[r]);\n                    if (l) {\n                        if (r >= c) return l;\n                        var v = e[r];\n                        return l * (v == \"desc\" ? -1 : 1);\n                    }\n                }\n                return n.index - t.index;\n            }\n            function du(n, t, e, r) {\n                for(var s = -1, o = n.length, f = e.length, c = -1, l = t.length, v = Q(o - f, 0), _ = p(l + v), m = !r; ++c < l;)_[c] = t[c];\n                for(; ++s < f;)(m || s < o) && (_[e[s]] = n[s]);\n                for(; v--;)_[c++] = n[s++];\n                return _;\n            }\n            function gu(n, t, e, r) {\n                for(var s = -1, o = n.length, f = -1, c = e.length, l = -1, v = t.length, _ = Q(o - c, 0), m = p(_ + v), w = !r; ++s < _;)m[s] = n[s];\n                for(var I = s; ++l < v;)m[I + l] = t[l];\n                for(; ++f < c;)(w || s < o) && (m[I + e[f]] = n[s++]);\n                return m;\n            }\n            function un(n, t) {\n                var e = -1, r = n.length;\n                for(t || (t = p(r)); ++e < r;)t[e] = n[e];\n                return t;\n            }\n            function Un(n, t, e, r) {\n                var s = !e;\n                e || (e = {});\n                for(var o = -1, f = t.length; ++o < f;){\n                    var c = t[o], l = r ? r(e[c], n[c], c, e, n) : i;\n                    l === i && (l = n[c]), s ? zn(e, c, l) : se(e, c, l);\n                }\n                return e;\n            }\n            function Yc(n, t) {\n                return Un(n, vi(n), t);\n            }\n            function Zc(n, t) {\n                return Un(n, Ou(n), t);\n            }\n            function Je(n, t) {\n                return function(e, r) {\n                    var s = R(e) ? Vo : gc, o = t ? t() : {};\n                    return s(e, n, x(r, 2), o);\n                };\n            }\n            function Ft(n) {\n                return L(function(t, e) {\n                    var r = -1, s = e.length, o = s > 1 ? e[s - 1] : i, f = s > 2 ? e[2] : i;\n                    for(o = n.length > 3 && typeof o == \"function\" ? (s--, o) : i, f && rn(e[0], e[1], f) && (o = s < 3 ? i : o, s = 1), t = M(t); ++r < s;){\n                        var c = e[r];\n                        c && n(t, c, r, o);\n                    }\n                    return t;\n                });\n            }\n            function vu(n, t) {\n                return function(e, r) {\n                    if (e == null) return e;\n                    if (!an(e)) return n(e, r);\n                    for(var s = e.length, o = t ? s : -1, f = M(e); (t ? o-- : ++o < s) && r(f[o], o, f) !== !1;);\n                    return e;\n                };\n            }\n            function _u(n) {\n                return function(t, e, r) {\n                    for(var s = -1, o = M(t), f = r(t), c = f.length; c--;){\n                        var l = f[n ? c : ++s];\n                        if (e(o[l], l, o) === !1) break;\n                    }\n                    return t;\n                };\n            }\n            function Jc(n, t, e) {\n                var r = t & vn, s = ce(n);\n                function o() {\n                    var f = this && this !== k && this instanceof o ? s : n;\n                    return f.apply(r ? e : this, arguments);\n                }\n                return o;\n            }\n            function mu(n) {\n                return function(t) {\n                    t = W(t);\n                    var e = Lt(t) ? On(t) : i, r = e ? e[0] : t.charAt(0), s = e ? ut(e, 1).join(\"\") : t.slice(1);\n                    return r[n]() + s;\n                };\n            }\n            function Mt(n) {\n                return function(t) {\n                    return Hr(va(ga(t).replace(Uo, \"\")), n, \"\");\n                };\n            }\n            function ce(n) {\n                return function() {\n                    var t = arguments;\n                    switch(t.length){\n                        case 0:\n                            return new n;\n                        case 1:\n                            return new n(t[0]);\n                        case 2:\n                            return new n(t[0], t[1]);\n                        case 3:\n                            return new n(t[0], t[1], t[2]);\n                        case 4:\n                            return new n(t[0], t[1], t[2], t[3]);\n                        case 5:\n                            return new n(t[0], t[1], t[2], t[3], t[4]);\n                        case 6:\n                            return new n(t[0], t[1], t[2], t[3], t[4], t[5]);\n                        case 7:\n                            return new n(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);\n                    }\n                    var e = Wt(n.prototype), r = n.apply(e, t);\n                    return K(r) ? r : e;\n                };\n            }\n            function Xc(n, t, e) {\n                var r = ce(n);\n                function s() {\n                    for(var o = arguments.length, f = p(o), c = o, l = qt(s); c--;)f[c] = arguments[c];\n                    var v = o < 3 && f[0] !== l && f[o - 1] !== l ? [] : tt(f, l);\n                    if (o -= v.length, o < e) return Iu(n, t, Xe, s.placeholder, i, f, v, i, i, e - o);\n                    var _ = this && this !== k && this instanceof s ? r : n;\n                    return cn(_, this, f);\n                }\n                return s;\n            }\n            function wu(n) {\n                return function(t, e, r) {\n                    var s = M(t);\n                    if (!an(t)) {\n                        var o = x(e, 3);\n                        t = V(t), e = function(c) {\n                            return o(s[c], c, s);\n                        };\n                    }\n                    var f = n(t, e, r);\n                    return f > -1 ? s[o ? t[f] : f] : i;\n                };\n            }\n            function Pu(n) {\n                return Yn(function(t) {\n                    var e = t.length, r = e, s = Pn.prototype.thru;\n                    for(n && t.reverse(); r--;){\n                        var o = t[r];\n                        if (typeof o != \"function\") throw new wn($);\n                        if (s && !f && je(o) == \"wrapper\") var f = new Pn([], !0);\n                    }\n                    for(r = f ? r : e; ++r < e;){\n                        o = t[r];\n                        var c = je(o), l = c == \"wrapper\" ? di(o) : i;\n                        l && mi(l[0]) && l[1] == (Mn | Dn | Hn | Kt) && !l[4].length && l[9] == 1 ? f = f[je(l[0])].apply(f, l[3]) : f = o.length == 1 && mi(o) ? f[c]() : f.thru(o);\n                    }\n                    return function() {\n                        var v = arguments, _ = v[0];\n                        if (f && v.length == 1 && R(_)) return f.plant(_).value();\n                        for(var m = 0, w = e ? t[m].apply(this, v) : _; ++m < e;)w = t[m].call(this, w);\n                        return w;\n                    };\n                });\n            }\n            function Xe(n, t, e, r, s, o, f, c, l, v) {\n                var _ = t & Mn, m = t & vn, w = t & ct, I = t & (Dn | yt), E = t & dr, T = w ? i : ce(n);\n                function y() {\n                    for(var D = arguments.length, N = p(D), dn = D; dn--;)N[dn] = arguments[dn];\n                    if (I) var sn = qt(y), gn = af(N, sn);\n                    if (r && (N = du(N, r, s, I)), o && (N = gu(N, o, f, I)), D -= gn, I && D < v) {\n                        var J = tt(N, sn);\n                        return Iu(n, t, Xe, y.placeholder, e, N, J, c, l, v - D);\n                    }\n                    var Tn = m ? e : this, Qn = w ? Tn[n] : n;\n                    return D = N.length, c ? N = gh(N, c) : E && D > 1 && N.reverse(), _ && l < D && (N.length = l), this && this !== k && this instanceof y && (Qn = T || ce(Qn)), Qn.apply(Tn, N);\n                }\n                return y;\n            }\n            function Au(n, t) {\n                return function(e, r) {\n                    return Ic(e, n, t(r), {});\n                };\n            }\n            function Qe(n, t) {\n                return function(e, r) {\n                    var s;\n                    if (e === i && r === i) return t;\n                    if (e !== i && (s = e), r !== i) {\n                        if (s === i) return r;\n                        typeof e == \"string\" || typeof r == \"string\" ? (e = ln(e), r = ln(r)) : (e = uu(e), r = uu(r)), s = n(e, r);\n                    }\n                    return s;\n                };\n            }\n            function ci(n) {\n                return Yn(function(t) {\n                    return t = G(t, hn(x())), L(function(e) {\n                        var r = this;\n                        return n(t, function(s) {\n                            return cn(s, r, e);\n                        });\n                    });\n                });\n            }\n            function Ve(n, t) {\n                t = t === i ? \" \" : ln(t);\n                var e = t.length;\n                if (e < 2) return e ? ri(t, n) : t;\n                var r = ri(t, Ue(n / Dt(t)));\n                return Lt(t) ? ut(On(r), 0, n).join(\"\") : r.slice(0, n);\n            }\n            function Qc(n, t, e, r) {\n                var s = t & vn, o = ce(n);\n                function f() {\n                    for(var c = -1, l = arguments.length, v = -1, _ = r.length, m = p(_ + l), w = this && this !== k && this instanceof f ? o : n; ++v < _;)m[v] = r[v];\n                    for(; l--;)m[v++] = arguments[++c];\n                    return cn(w, s ? e : this, m);\n                }\n                return f;\n            }\n            function Cu(n) {\n                return function(t, e, r) {\n                    return r && typeof r != \"number\" && rn(t, e, r) && (e = r = i), t = Xn(t), e === i ? (e = t, t = 0) : e = Xn(e), r = r === i ? t < e ? 1 : -1 : Xn(r), Nc(t, e, r, n);\n                };\n            }\n            function ke(n) {\n                return function(t, e) {\n                    return typeof t == \"string\" && typeof e == \"string\" || (t = xn(t), e = xn(e)), n(t, e);\n                };\n            }\n            function Iu(n, t, e, r, s, o, f, c, l, v) {\n                var _ = t & Dn, m = _ ? f : i, w = _ ? i : f, I = _ ? o : i, E = _ ? i : o;\n                t |= _ ? Hn : St, t &= ~(_ ? St : Hn), t & qi || (t &= ~(vn | ct));\n                var T = [\n                    n,\n                    t,\n                    s,\n                    I,\n                    m,\n                    E,\n                    w,\n                    c,\n                    l,\n                    v\n                ], y = e.apply(i, T);\n                return mi(n) && Nu(y, T), y.placeholder = r, $u(y, n, t);\n            }\n            function hi(n) {\n                var t = X[n];\n                return function(e, r) {\n                    if (e = xn(e), r = r == null ? 0 : nn(b(r), 292), r && $s(e)) {\n                        var s = (W(e) + \"e\").split(\"e\"), o = t(s[0] + \"e\" + (+s[1] + r));\n                        return s = (W(o) + \"e\").split(\"e\"), +(s[0] + \"e\" + (+s[1] - r));\n                    }\n                    return t(e);\n                };\n            }\n            var Vc = $t && 1 / Se(new $t([\n                ,\n                -0\n            ]))[1] == ht ? function(n) {\n                return new $t(n);\n            } : Di;\n            function xu(n) {\n                return function(t) {\n                    var e = tn(t);\n                    return e == yn ? qr(t) : e == Sn ? df(t) : uf(t, n(t));\n                };\n            }\n            function Kn(n, t, e, r, s, o, f, c) {\n                var l = t & ct;\n                if (!l && typeof n != \"function\") throw new wn($);\n                var v = r ? r.length : 0;\n                if (v || (t &= ~(Hn | St), r = s = i), f = f === i ? f : Q(b(f), 0), c = c === i ? c : b(c), v -= s ? s.length : 0, t & St) {\n                    var _ = r, m = s;\n                    r = s = i;\n                }\n                var w = l ? i : di(n), I = [\n                    n,\n                    t,\n                    e,\n                    r,\n                    s,\n                    _,\n                    m,\n                    o,\n                    f,\n                    c\n                ];\n                if (w && lh(I, w), n = I[0], t = I[1], e = I[2], r = I[3], s = I[4], c = I[9] = I[9] === i ? l ? 0 : n.length : Q(I[9] - v, 0), !c && t & (Dn | yt) && (t &= ~(Dn | yt)), !t || t == vn) var E = Jc(n, t, e);\n                else t == Dn || t == yt ? E = Xc(n, t, c) : (t == Hn || t == (vn | Hn)) && !s.length ? E = Qc(n, t, e, r) : E = Xe.apply(i, I);\n                var T = w ? iu : Nu;\n                return $u(T(E, I), n, t);\n            }\n            function Eu(n, t, e, r) {\n                return n === i || bn(n, Nt[e]) && !F.call(r, e) ? t : n;\n            }\n            function yu(n, t, e, r, s, o) {\n                return K(n) && K(t) && (o.set(t, n), Ke(n, t, i, yu, o), o.delete(t)), n;\n            }\n            function kc(n) {\n                return pe(n) ? i : n;\n            }\n            function Su(n, t, e, r, s, o) {\n                var f = e & Et, c = n.length, l = t.length;\n                if (c != l && !(f && l > c)) return !1;\n                var v = o.get(n), _ = o.get(t);\n                if (v && _) return v == t && _ == n;\n                var m = -1, w = !0, I = e & ve ? new gt : i;\n                for(o.set(n, t), o.set(t, n); ++m < c;){\n                    var E = n[m], T = t[m];\n                    if (r) var y = f ? r(T, E, m, t, n, o) : r(E, T, m, n, t, o);\n                    if (y !== i) {\n                        if (y) continue;\n                        w = !1;\n                        break;\n                    }\n                    if (I) {\n                        if (!Nr(t, function(D, N) {\n                            if (!jt(I, N) && (E === D || s(E, D, e, r, o))) return I.push(N);\n                        })) {\n                            w = !1;\n                            break;\n                        }\n                    } else if (!(E === T || s(E, T, e, r, o))) {\n                        w = !1;\n                        break;\n                    }\n                }\n                return o.delete(n), o.delete(t), w;\n            }\n            function jc(n, t, e, r, s, o, f) {\n                switch(e){\n                    case Rt:\n                        if (n.byteLength != t.byteLength || n.byteOffset != t.byteOffset) return !1;\n                        n = n.buffer, t = t.buffer;\n                    case kt:\n                        return !(n.byteLength != t.byteLength || !o(new De(n), new De(t)));\n                    case Yt:\n                    case Zt:\n                    case Jt:\n                        return bn(+n, +t);\n                    case we:\n                        return n.name == t.name && n.message == t.message;\n                    case Xt:\n                    case Qt:\n                        return n == t + \"\";\n                    case yn:\n                        var c = qr;\n                    case Sn:\n                        var l = r & Et;\n                        if (c || (c = Se), n.size != t.size && !l) return !1;\n                        var v = f.get(n);\n                        if (v) return v == t;\n                        r |= ve, f.set(n, t);\n                        var _ = Su(c(n), c(t), r, s, o, f);\n                        return f.delete(n), _;\n                    case Ae:\n                        if (ie) return ie.call(n) == ie.call(t);\n                }\n                return !1;\n            }\n            function nh(n, t, e, r, s, o) {\n                var f = e & Et, c = li(n), l = c.length, v = li(t), _ = v.length;\n                if (l != _ && !f) return !1;\n                for(var m = l; m--;){\n                    var w = c[m];\n                    if (!(f ? w in t : F.call(t, w))) return !1;\n                }\n                var I = o.get(n), E = o.get(t);\n                if (I && E) return I == t && E == n;\n                var T = !0;\n                o.set(n, t), o.set(t, n);\n                for(var y = f; ++m < l;){\n                    w = c[m];\n                    var D = n[w], N = t[w];\n                    if (r) var dn = f ? r(N, D, w, t, n, o) : r(D, N, w, n, t, o);\n                    if (!(dn === i ? D === N || s(D, N, e, r, o) : dn)) {\n                        T = !1;\n                        break;\n                    }\n                    y || (y = w == \"constructor\");\n                }\n                if (T && !y) {\n                    var sn = n.constructor, gn = t.constructor;\n                    sn != gn && \"constructor\" in n && \"constructor\" in t && !(typeof sn == \"function\" && sn instanceof sn && typeof gn == \"function\" && gn instanceof gn) && (T = !1);\n                }\n                return o.delete(n), o.delete(t), T;\n            }\n            function Yn(n) {\n                return Pi(Du(n, i, Bu), n + \"\");\n            }\n            function li(n) {\n                return Zs(n, V, vi);\n            }\n            function pi(n) {\n                return Zs(n, on, Ou);\n            }\n            var di = Fe ? function(n) {\n                return Fe.get(n);\n            } : Di;\n            function je(n) {\n                for(var t = n.name + \"\", e = Ut[t], r = F.call(Ut, t) ? e.length : 0; r--;){\n                    var s = e[r], o = s.func;\n                    if (o == null || o == n) return s.name;\n                }\n                return t;\n            }\n            function qt(n) {\n                var t = F.call(a, \"placeholder\") ? a : n;\n                return t.placeholder;\n            }\n            function x() {\n                var n = a.iteratee || Ti;\n                return n = n === Ti ? Qs : n, arguments.length ? n(arguments[0], arguments[1]) : n;\n            }\n            function nr(n, t) {\n                var e = n.__data__;\n                return oh(t) ? e[typeof t == \"string\" ? \"string\" : \"hash\"] : e.map;\n            }\n            function gi(n) {\n                for(var t = V(n), e = t.length; e--;){\n                    var r = t[e], s = n[r];\n                    t[e] = [\n                        r,\n                        s,\n                        Tu(s)\n                    ];\n                }\n                return t;\n            }\n            function mt(n, t) {\n                var e = hf(n, t);\n                return Xs(e) ? e : i;\n            }\n            function th(n) {\n                var t = F.call(n, pt), e = n[pt];\n                try {\n                    n[pt] = i;\n                    var r = !0;\n                } catch (e) {}\n                var s = Te.call(n);\n                return r && (t ? n[pt] = e : delete n[pt]), s;\n            }\n            var vi = Gr ? function(n) {\n                return n == null ? [] : (n = M(n), jn(Gr(n), function(t) {\n                    return Hs.call(n, t);\n                }));\n            } : Hi, Ou = Gr ? function(n) {\n                for(var t = []; n;)nt(t, vi(n)), n = He(n);\n                return t;\n            } : Hi, tn = en;\n            (zr && tn(new zr(new ArrayBuffer(1))) != Rt || te && tn(new te) != yn || Kr && tn(Kr.resolve()) != zi || $t && tn(new $t) != Sn || ee && tn(new ee) != Vt) && (tn = function(n) {\n                var t = en(n), e = t == qn ? n.constructor : i, r = e ? wt(e) : \"\";\n                if (r) switch(r){\n                    case Uf:\n                        return Rt;\n                    case Wf:\n                        return yn;\n                    case Ff:\n                        return zi;\n                    case Mf:\n                        return Sn;\n                    case qf:\n                        return Vt;\n                }\n                return t;\n            });\n            function eh(n, t, e) {\n                for(var r = -1, s = e.length; ++r < s;){\n                    var o = e[r], f = o.size;\n                    switch(o.type){\n                        case \"drop\":\n                            n += f;\n                            break;\n                        case \"dropRight\":\n                            t -= f;\n                            break;\n                        case \"take\":\n                            t = nn(t, n + f);\n                            break;\n                        case \"takeRight\":\n                            n = Q(n, t - f);\n                            break;\n                    }\n                }\n                return {\n                    start: n,\n                    end: t\n                };\n            }\n            function rh(n) {\n                var t = n.match(ao);\n                return t ? t[1].split(oo) : [];\n            }\n            function Ru(n, t, e) {\n                t = st(t, n);\n                for(var r = -1, s = t.length, o = !1; ++r < s;){\n                    var f = Wn(t[r]);\n                    if (!(o = n != null && e(n, f))) break;\n                    n = n[f];\n                }\n                return o || ++r != s ? o : (s = n == null ? 0 : n.length, !!s && ar(s) && Zn(f, s) && (R(n) || Pt(n)));\n            }\n            function ih(n) {\n                var t = n.length, e = new n.constructor(t);\n                return t && typeof n[0] == \"string\" && F.call(n, \"index\") && (e.index = n.index, e.input = n.input), e;\n            }\n            function bu(n) {\n                return typeof n.constructor == \"function\" && !he(n) ? Wt(He(n)) : {};\n            }\n            function sh(n, t, e) {\n                var r = n.constructor;\n                switch(t){\n                    case kt:\n                        return fi(n);\n                    case Yt:\n                    case Zt:\n                        return new r(+n);\n                    case Rt:\n                        return Bc(n, e);\n                    case gr:\n                    case vr:\n                    case _r:\n                    case mr:\n                    case wr:\n                    case Pr:\n                    case Ar:\n                    case Cr:\n                    case Ir:\n                        return lu(n, e);\n                    case yn:\n                        return new r;\n                    case Jt:\n                    case Qt:\n                        return new r(n);\n                    case Xt:\n                        return Gc(n);\n                    case Sn:\n                        return new r;\n                    case Ae:\n                        return zc(n);\n                }\n            }\n            function uh(n, t) {\n                var e = t.length;\n                if (!e) return n;\n                var r = e - 1;\n                return t[r] = (e > 1 ? \"& \" : \"\") + t[r], t = t.join(e > 2 ? \", \" : \" \"), n.replace(uo, \"{\\n/* [wrapped with \" + t + \"] */\\n\");\n            }\n            function ah(n) {\n                return R(n) || Pt(n) || !!(Ns && n && n[Ns]);\n            }\n            function Zn(n, t) {\n                var e = typeof n;\n                return t = t !== null && t !== void 0 ? t : kn, !!t && (e == \"number\" || e != \"symbol\" && mo.test(n)) && n > -1 && n % 1 == 0 && n < t;\n            }\n            function rn(n, t, e) {\n                if (!K(e)) return !1;\n                var r = typeof t;\n                return (r == \"number\" ? an(e) && Zn(t, e.length) : r == \"string\" && t in e) ? bn(e[t], n) : !1;\n            }\n            function _i(n, t) {\n                if (R(n)) return !1;\n                var e = typeof n;\n                return e == \"number\" || e == \"symbol\" || e == \"boolean\" || n == null || pn(n) ? !0 : eo.test(n) || !to.test(n) || t != null && n in M(t);\n            }\n            function oh(n) {\n                var t = typeof n;\n                return t == \"string\" || t == \"number\" || t == \"symbol\" || t == \"boolean\" ? n !== \"__proto__\" : n === null;\n            }\n            function mi(n) {\n                var t = je(n), e = a[t];\n                if (typeof e != \"function\" || !(t in H.prototype)) return !1;\n                if (n === e) return !0;\n                var r = di(e);\n                return !!r && n === r[0];\n            }\n            function fh(n) {\n                return !!Ts && Ts in n;\n            }\n            var ch = Re ? Jn : Ni;\n            function he(n) {\n                var t = n && n.constructor, e = typeof t == \"function\" && t.prototype || Nt;\n                return n === e;\n            }\n            function Tu(n) {\n                return n === n && !K(n);\n            }\n            function Lu(n, t) {\n                return function(e) {\n                    return e == null ? !1 : e[n] === t && (t !== i || n in M(e));\n                };\n            }\n            function hh(n) {\n                var t = sr(n, function(r) {\n                    return e.size === pr && e.clear(), r;\n                }), e = t.cache;\n                return t;\n            }\n            function lh(n, t) {\n                var e = n[1], r = t[1], s = e | r, o = s < (vn | ct | Mn), f = r == Mn && e == Dn || r == Mn && e == Kt && n[7].length <= t[8] || r == (Mn | Kt) && t[7].length <= t[8] && e == Dn;\n                if (!(o || f)) return n;\n                r & vn && (n[2] = t[2], s |= e & vn ? 0 : qi);\n                var c = t[3];\n                if (c) {\n                    var l = n[3];\n                    n[3] = l ? du(l, c, t[4]) : c, n[4] = l ? tt(n[3], It) : t[4];\n                }\n                return c = t[5], c && (l = n[5], n[5] = l ? gu(l, c, t[6]) : c, n[6] = l ? tt(n[5], It) : t[6]), c = t[7], c && (n[7] = c), r & Mn && (n[8] = n[8] == null ? t[8] : nn(n[8], t[8])), n[9] == null && (n[9] = t[9]), n[0] = t[0], n[1] = s, n;\n            }\n            function ph(n) {\n                var t = [];\n                if (n != null) for(var e in M(n))t.push(e);\n                return t;\n            }\n            function dh(n) {\n                return Te.call(n);\n            }\n            function Du(n, t, e) {\n                return t = Q(t === i ? n.length - 1 : t, 0), function() {\n                    for(var r = arguments, s = -1, o = Q(r.length - t, 0), f = p(o); ++s < o;)f[s] = r[t + s];\n                    s = -1;\n                    for(var c = p(t + 1); ++s < t;)c[s] = r[s];\n                    return c[t] = e(f), cn(n, this, c);\n                };\n            }\n            function Hu(n, t) {\n                return t.length < 2 ? n : _t(n, Cn(t, 0, -1));\n            }\n            function gh(n, t) {\n                for(var e = n.length, r = nn(t.length, e), s = un(n); r--;){\n                    var o = t[r];\n                    n[r] = Zn(o, e) ? s[o] : i;\n                }\n                return n;\n            }\n            function wi(n, t) {\n                if (!(t === \"constructor\" && typeof n[t] == \"function\") && t != \"__proto__\") return n[t];\n            }\n            var Nu = Uu(iu), le = bf || function(n, t) {\n                return k.setTimeout(n, t);\n            }, Pi = Uu(Wc);\n            function $u(n, t, e) {\n                var r = t + \"\";\n                return Pi(n, uh(r, vh(rh(r), e)));\n            }\n            function Uu(n) {\n                var t = 0, e = 0;\n                return function() {\n                    var r = Hf(), s = Na - (r - e);\n                    if (e = r, s > 0) {\n                        if (++t >= Ha) return arguments[0];\n                    } else t = 0;\n                    return n.apply(i, arguments);\n                };\n            }\n            function tr(n, t) {\n                var e = -1, r = n.length, s = r - 1;\n                for(t = t === i ? r : t; ++e < t;){\n                    var o = ei(e, s), f = n[o];\n                    n[o] = n[e], n[e] = f;\n                }\n                return n.length = t, n;\n            }\n            var Wu = hh(function(n) {\n                var t = [];\n                return n.charCodeAt(0) === 46 && t.push(\"\"), n.replace(ro, function(e, r, s, o) {\n                    t.push(s ? o.replace(ho, \"$1\") : r || e);\n                }), t;\n            });\n            function Wn(n) {\n                if (typeof n == \"string\" || pn(n)) return n;\n                var t = n + \"\";\n                return t == \"0\" && 1 / n == -ht ? \"-0\" : t;\n            }\n            function wt(n) {\n                if (n != null) {\n                    try {\n                        return be.call(n);\n                    } catch (e) {}\n                    try {\n                        return n + \"\";\n                    } catch (e) {}\n                }\n                return \"\";\n            }\n            function vh(n, t) {\n                return mn(qa, function(e) {\n                    var r = \"_.\" + e[0];\n                    t & e[1] && !Ee(n, r) && n.push(r);\n                }), n.sort();\n            }\n            function Fu(n) {\n                if (n instanceof H) return n.clone();\n                var t = new Pn(n.__wrapped__, n.__chain__);\n                return t.__actions__ = un(n.__actions__), t.__index__ = n.__index__, t.__values__ = n.__values__, t;\n            }\n            function _h(n, t, e) {\n                (e ? rn(n, t, e) : t === i) ? t = 1 : t = Q(b(t), 0);\n                var r = n == null ? 0 : n.length;\n                if (!r || t < 1) return [];\n                for(var s = 0, o = 0, f = p(Ue(r / t)); s < r;)f[o++] = Cn(n, s, s += t);\n                return f;\n            }\n            function mh(n) {\n                for(var t = -1, e = n == null ? 0 : n.length, r = 0, s = []; ++t < e;){\n                    var o = n[t];\n                    o && (s[r++] = o);\n                }\n                return s;\n            }\n            function wh() {\n                var n = arguments.length;\n                if (!n) return [];\n                for(var t = p(n - 1), e = arguments[0], r = n; r--;)t[r - 1] = arguments[r];\n                return nt(R(e) ? un(e) : [\n                    e\n                ], j(t, 1));\n            }\n            var Ph = L(function(n, t) {\n                return Z(n) ? ue(n, j(t, 1, Z, !0)) : [];\n            }), Ah = L(function(n, t) {\n                var e = In(t);\n                return Z(e) && (e = i), Z(n) ? ue(n, j(t, 1, Z, !0), x(e, 2)) : [];\n            }), Ch = L(function(n, t) {\n                var e = In(t);\n                return Z(e) && (e = i), Z(n) ? ue(n, j(t, 1, Z, !0), i, e) : [];\n            });\n            function Ih(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : b(t), Cn(n, t < 0 ? 0 : t, r)) : [];\n            }\n            function xh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : b(t), t = r - t, Cn(n, 0, t < 0 ? 0 : t)) : [];\n            }\n            function Eh(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !0, !0) : [];\n            }\n            function yh(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !0) : [];\n            }\n            function Sh(n, t, e, r) {\n                var s = n == null ? 0 : n.length;\n                return s ? (e && typeof e != \"number\" && rn(n, t, e) && (e = 0, r = s), wc(n, t, e, r)) : [];\n            }\n            function Mu(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = e == null ? 0 : b(e);\n                return s < 0 && (s = Q(r + s, 0)), ye(n, x(t, 3), s);\n            }\n            function qu(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = r - 1;\n                return e !== i && (s = b(e), s = e < 0 ? Q(r + s, 0) : nn(s, r - 1)), ye(n, x(t, 3), s, !0);\n            }\n            function Bu(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? j(n, 1) : [];\n            }\n            function Oh(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? j(n, ht) : [];\n            }\n            function Rh(n, t) {\n                var e = n == null ? 0 : n.length;\n                return e ? (t = t === i ? 1 : b(t), j(n, t)) : [];\n            }\n            function bh(n) {\n                for(var t = -1, e = n == null ? 0 : n.length, r = {}; ++t < e;){\n                    var s = n[t];\n                    r[s[0]] = s[1];\n                }\n                return r;\n            }\n            function Gu(n) {\n                return n && n.length ? n[0] : i;\n            }\n            function Th(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = e == null ? 0 : b(e);\n                return s < 0 && (s = Q(r + s, 0)), Tt(n, t, s);\n            }\n            function Lh(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? Cn(n, 0, -1) : [];\n            }\n            var Dh = L(function(n) {\n                var t = G(n, ai);\n                return t.length && t[0] === n[0] ? Vr(t) : [];\n            }), Hh = L(function(n) {\n                var t = In(n), e = G(n, ai);\n                return t === In(e) ? t = i : e.pop(), e.length && e[0] === n[0] ? Vr(e, x(t, 2)) : [];\n            }), Nh = L(function(n) {\n                var t = In(n), e = G(n, ai);\n                return t = typeof t == \"function\" ? t : i, t && e.pop(), e.length && e[0] === n[0] ? Vr(e, i, t) : [];\n            });\n            function $h(n, t) {\n                return n == null ? \"\" : Lf.call(n, t);\n            }\n            function In(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? n[t - 1] : i;\n            }\n            function Uh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = r;\n                return e !== i && (s = b(e), s = s < 0 ? Q(r + s, 0) : nn(s, r - 1)), t === t ? vf(n, t, s) : ye(n, Is, s, !0);\n            }\n            function Wh(n, t) {\n                return n && n.length ? nu(n, b(t)) : i;\n            }\n            var Fh = L(zu);\n            function zu(n, t) {\n                return n && n.length && t && t.length ? ti(n, t) : n;\n            }\n            function Mh(n, t, e) {\n                return n && n.length && t && t.length ? ti(n, t, x(e, 2)) : n;\n            }\n            function qh(n, t, e) {\n                return n && n.length && t && t.length ? ti(n, t, i, e) : n;\n            }\n            var Bh = Yn(function(n, t) {\n                var e = n == null ? 0 : n.length, r = Zr(n, t);\n                return ru(n, G(t, function(s) {\n                    return Zn(s, e) ? +s : s;\n                }).sort(pu)), r;\n            });\n            function Gh(n, t) {\n                var e = [];\n                if (!(n && n.length)) return e;\n                var r = -1, s = [], o = n.length;\n                for(t = x(t, 3); ++r < o;){\n                    var f = n[r];\n                    t(f, r, n) && (e.push(f), s.push(r));\n                }\n                return ru(n, s), e;\n            }\n            function Ai(n) {\n                return n == null ? n : $f.call(n);\n            }\n            function zh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (e && typeof e != \"number\" && rn(n, t, e) ? (t = 0, e = r) : (t = t == null ? 0 : b(t), e = e === i ? r : b(e)), Cn(n, t, e)) : [];\n            }\n            function Kh(n, t) {\n                return Ye(n, t);\n            }\n            function Yh(n, t, e) {\n                return ii(n, t, x(e, 2));\n            }\n            function Zh(n, t) {\n                var e = n == null ? 0 : n.length;\n                if (e) {\n                    var r = Ye(n, t);\n                    if (r < e && bn(n[r], t)) return r;\n                }\n                return -1;\n            }\n            function Jh(n, t) {\n                return Ye(n, t, !0);\n            }\n            function Xh(n, t, e) {\n                return ii(n, t, x(e, 2), !0);\n            }\n            function Qh(n, t) {\n                var e = n == null ? 0 : n.length;\n                if (e) {\n                    var r = Ye(n, t, !0) - 1;\n                    if (bn(n[r], t)) return r;\n                }\n                return -1;\n            }\n            function Vh(n) {\n                return n && n.length ? su(n) : [];\n            }\n            function kh(n, t) {\n                return n && n.length ? su(n, x(t, 2)) : [];\n            }\n            function jh(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? Cn(n, 1, t) : [];\n            }\n            function nl(n, t, e) {\n                return n && n.length ? (t = e || t === i ? 1 : b(t), Cn(n, 0, t < 0 ? 0 : t)) : [];\n            }\n            function tl(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : b(t), t = r - t, Cn(n, t < 0 ? 0 : t, r)) : [];\n            }\n            function el(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !1, !0) : [];\n            }\n            function rl(n, t) {\n                return n && n.length ? Ze(n, x(t, 3)) : [];\n            }\n            var il = L(function(n) {\n                return it(j(n, 1, Z, !0));\n            }), sl = L(function(n) {\n                var t = In(n);\n                return Z(t) && (t = i), it(j(n, 1, Z, !0), x(t, 2));\n            }), ul = L(function(n) {\n                var t = In(n);\n                return t = typeof t == \"function\" ? t : i, it(j(n, 1, Z, !0), i, t);\n            });\n            function al(n) {\n                return n && n.length ? it(n) : [];\n            }\n            function ol(n, t) {\n                return n && n.length ? it(n, x(t, 2)) : [];\n            }\n            function fl(n, t) {\n                return t = typeof t == \"function\" ? t : i, n && n.length ? it(n, i, t) : [];\n            }\n            function Ci(n) {\n                if (!(n && n.length)) return [];\n                var t = 0;\n                return n = jn(n, function(e) {\n                    if (Z(e)) return t = Q(e.length, t), !0;\n                }), Fr(t, function(e) {\n                    return G(n, $r(e));\n                });\n            }\n            function Ku(n, t) {\n                if (!(n && n.length)) return [];\n                var e = Ci(n);\n                return t == null ? e : G(e, function(r) {\n                    return cn(t, i, r);\n                });\n            }\n            var cl = L(function(n, t) {\n                return Z(n) ? ue(n, t) : [];\n            }), hl = L(function(n) {\n                return ui(jn(n, Z));\n            }), ll = L(function(n) {\n                var t = In(n);\n                return Z(t) && (t = i), ui(jn(n, Z), x(t, 2));\n            }), pl = L(function(n) {\n                var t = In(n);\n                return t = typeof t == \"function\" ? t : i, ui(jn(n, Z), i, t);\n            }), dl = L(Ci);\n            function gl(n, t) {\n                return fu(n || [], t || [], se);\n            }\n            function vl(n, t) {\n                return fu(n || [], t || [], fe);\n            }\n            var _l = L(function(n) {\n                var t = n.length, e = t > 1 ? n[t - 1] : i;\n                return e = typeof e == \"function\" ? (n.pop(), e) : i, Ku(n, e);\n            });\n            function Yu(n) {\n                var t = a(n);\n                return t.__chain__ = !0, t;\n            }\n            function ml(n, t) {\n                return t(n), n;\n            }\n            function er(n, t) {\n                return t(n);\n            }\n            var wl = Yn(function(n) {\n                var t = n.length, e = t ? n[0] : 0, r = this.__wrapped__, s = function(o) {\n                    return Zr(o, n);\n                };\n                return t > 1 || this.__actions__.length || !(r instanceof H) || !Zn(e) ? this.thru(s) : (r = r.slice(e, +e + (t ? 1 : 0)), r.__actions__.push({\n                    func: er,\n                    args: [\n                        s\n                    ],\n                    thisArg: i\n                }), new Pn(r, this.__chain__).thru(function(o) {\n                    return t && !o.length && o.push(i), o;\n                }));\n            });\n            function Pl() {\n                return Yu(this);\n            }\n            function Al() {\n                return new Pn(this.value(), this.__chain__);\n            }\n            function Cl() {\n                this.__values__ === i && (this.__values__ = ua(this.value()));\n                var n = this.__index__ >= this.__values__.length, t = n ? i : this.__values__[this.__index__++];\n                return {\n                    done: n,\n                    value: t\n                };\n            }\n            function Il() {\n                return this;\n            }\n            function xl(n) {\n                for(var t, e = this; e instanceof qe;){\n                    var r = Fu(e);\n                    r.__index__ = 0, r.__values__ = i, t ? s.__wrapped__ = r : t = r;\n                    var s = r;\n                    e = e.__wrapped__;\n                }\n                return s.__wrapped__ = n, t;\n            }\n            function El() {\n                var n = this.__wrapped__;\n                if (n instanceof H) {\n                    var t = n;\n                    return this.__actions__.length && (t = new H(this)), t = t.reverse(), t.__actions__.push({\n                        func: er,\n                        args: [\n                            Ai\n                        ],\n                        thisArg: i\n                    }), new Pn(t, this.__chain__);\n                }\n                return this.thru(Ai);\n            }\n            function yl() {\n                return ou(this.__wrapped__, this.__actions__);\n            }\n            var Sl = Je(function(n, t, e) {\n                F.call(n, e) ? ++n[e] : zn(n, e, 1);\n            });\n            function Ol(n, t, e) {\n                var r = R(n) ? As : mc;\n                return e && rn(n, t, e) && (t = i), r(n, x(t, 3));\n            }\n            function Rl(n, t) {\n                var e = R(n) ? jn : Ks;\n                return e(n, x(t, 3));\n            }\n            var bl = wu(Mu), Tl = wu(qu);\n            function Ll(n, t) {\n                return j(rr(n, t), 1);\n            }\n            function Dl(n, t) {\n                return j(rr(n, t), ht);\n            }\n            function Hl(n, t, e) {\n                return e = e === i ? 1 : b(e), j(rr(n, t), e);\n            }\n            function Zu(n, t) {\n                var e = R(n) ? mn : rt;\n                return e(n, x(t, 3));\n            }\n            function Ju(n, t) {\n                var e = R(n) ? ko : zs;\n                return e(n, x(t, 3));\n            }\n            var Nl = Je(function(n, t, e) {\n                F.call(n, e) ? n[e].push(t) : zn(n, e, [\n                    t\n                ]);\n            });\n            function $l(n, t, e, r) {\n                n = an(n) ? n : Gt(n), e = e && !r ? b(e) : 0;\n                var s = n.length;\n                return e < 0 && (e = Q(s + e, 0)), or(n) ? e <= s && n.indexOf(t, e) > -1 : !!s && Tt(n, t, e) > -1;\n            }\n            var Ul = L(function(n, t, e) {\n                var r = -1, s = typeof t == \"function\", o = an(n) ? p(n.length) : [];\n                return rt(n, function(f) {\n                    o[++r] = s ? cn(t, f, e) : ae(f, t, e);\n                }), o;\n            }), Wl = Je(function(n, t, e) {\n                zn(n, e, t);\n            });\n            function rr(n, t) {\n                var e = R(n) ? G : Vs;\n                return e(n, x(t, 3));\n            }\n            function Fl(n, t, e, r) {\n                return n == null ? [] : (R(t) || (t = t == null ? [] : [\n                    t\n                ]), e = r ? i : e, R(e) || (e = e == null ? [] : [\n                    e\n                ]), tu(n, t, e));\n            }\n            var Ml = Je(function(n, t, e) {\n                n[e ? 0 : 1].push(t);\n            }, function() {\n                return [\n                    [],\n                    []\n                ];\n            });\n            function ql(n, t, e) {\n                var r = R(n) ? Hr : Es, s = arguments.length < 3;\n                return r(n, x(t, 4), e, s, rt);\n            }\n            function Bl(n, t, e) {\n                var r = R(n) ? jo : Es, s = arguments.length < 3;\n                return r(n, x(t, 4), e, s, zs);\n            }\n            function Gl(n, t) {\n                var e = R(n) ? jn : Ks;\n                return e(n, ur(x(t, 3)));\n            }\n            function zl(n) {\n                var t = R(n) ? Ms : $c;\n                return t(n);\n            }\n            function Kl(n, t, e) {\n                (e ? rn(n, t, e) : t === i) ? t = 1 : t = b(t);\n                var r = R(n) ? pc : Uc;\n                return r(n, t);\n            }\n            function Yl(n) {\n                var t = R(n) ? dc : Fc;\n                return t(n);\n            }\n            function Zl(n) {\n                if (n == null) return 0;\n                if (an(n)) return or(n) ? Dt(n) : n.length;\n                var t = tn(n);\n                return t == yn || t == Sn ? n.size : jr(n).length;\n            }\n            function Jl(n, t, e) {\n                var r = R(n) ? Nr : Mc;\n                return e && rn(n, t, e) && (t = i), r(n, x(t, 3));\n            }\n            var Xl = L(function(n, t) {\n                if (n == null) return [];\n                var e = t.length;\n                return e > 1 && rn(n, t[0], t[1]) ? t = [] : e > 2 && rn(t[0], t[1], t[2]) && (t = [\n                    t[0]\n                ]), tu(n, j(t, 1), []);\n            }), ir = Rf || function() {\n                return k.Date.now();\n            };\n            function Ql(n, t) {\n                if (typeof t != \"function\") throw new wn($);\n                return n = b(n), function() {\n                    if (--n < 1) return t.apply(this, arguments);\n                };\n            }\n            function Xu(n, t, e) {\n                return t = e ? i : t, t = n && t == null ? n.length : t, Kn(n, Mn, i, i, i, i, t);\n            }\n            function Qu(n, t) {\n                var e;\n                if (typeof t != \"function\") throw new wn($);\n                return n = b(n), function() {\n                    return --n > 0 && (e = t.apply(this, arguments)), n <= 1 && (t = i), e;\n                };\n            }\n            var Ii = L(function(n, t, e) {\n                var r = vn;\n                if (e.length) {\n                    var s = tt(e, qt(Ii));\n                    r |= Hn;\n                }\n                return Kn(n, r, t, e, s);\n            }), Vu = L(function(n, t, e) {\n                var r = vn | ct;\n                if (e.length) {\n                    var s = tt(e, qt(Vu));\n                    r |= Hn;\n                }\n                return Kn(t, r, n, e, s);\n            });\n            function ku(n, t, e) {\n                t = e ? i : t;\n                var r = Kn(n, Dn, i, i, i, i, i, t);\n                return r.placeholder = ku.placeholder, r;\n            }\n            function ju(n, t, e) {\n                t = e ? i : t;\n                var r = Kn(n, yt, i, i, i, i, i, t);\n                return r.placeholder = ju.placeholder, r;\n            }\n            function na(n, t, e) {\n                var r, s, o, f, c, l, v = 0, _ = !1, m = !1, w = !0;\n                if (typeof n != \"function\") throw new wn($);\n                t = xn(t) || 0, K(e) && (_ = !!e.leading, m = \"maxWait\" in e, o = m ? Q(xn(e.maxWait) || 0, t) : o, w = \"trailing\" in e ? !!e.trailing : w);\n                function I(J) {\n                    var Tn = r, Qn = s;\n                    return r = s = i, v = J, f = n.apply(Qn, Tn), f;\n                }\n                function E(J) {\n                    return v = J, c = le(D, t), _ ? I(J) : f;\n                }\n                function T(J) {\n                    var Tn = J - l, Qn = J - v, wa = t - Tn;\n                    return m ? nn(wa, o - Qn) : wa;\n                }\n                function y(J) {\n                    var Tn = J - l, Qn = J - v;\n                    return l === i || Tn >= t || Tn < 0 || m && Qn >= o;\n                }\n                function D() {\n                    var J = ir();\n                    if (y(J)) return N(J);\n                    c = le(D, T(J));\n                }\n                function N(J) {\n                    return c = i, w && r ? I(J) : (r = s = i, f);\n                }\n                function dn() {\n                    c !== i && cu(c), v = 0, r = l = s = c = i;\n                }\n                function sn() {\n                    return c === i ? f : N(ir());\n                }\n                function gn() {\n                    var J = ir(), Tn = y(J);\n                    if (r = arguments, s = this, l = J, Tn) {\n                        if (c === i) return E(l);\n                        if (m) return cu(c), c = le(D, t), I(l);\n                    }\n                    return c === i && (c = le(D, t)), f;\n                }\n                return gn.cancel = dn, gn.flush = sn, gn;\n            }\n            var Vl = L(function(n, t) {\n                return Gs(n, 1, t);\n            }), kl = L(function(n, t, e) {\n                return Gs(n, xn(t) || 0, e);\n            });\n            function jl(n) {\n                return Kn(n, dr);\n            }\n            function sr(n, t) {\n                if (typeof n != \"function\" || t != null && typeof t != \"function\") throw new wn($);\n                var e = function() {\n                    var r = arguments, s = t ? t.apply(this, r) : r[0], o = e.cache;\n                    if (o.has(s)) return o.get(s);\n                    var f = n.apply(this, r);\n                    return e.cache = o.set(s, f) || o, f;\n                };\n                return e.cache = new (sr.Cache || Gn), e;\n            }\n            sr.Cache = Gn;\n            function ur(n) {\n                if (typeof n != \"function\") throw new wn($);\n                return function() {\n                    var t = arguments;\n                    switch(t.length){\n                        case 0:\n                            return !n.call(this);\n                        case 1:\n                            return !n.call(this, t[0]);\n                        case 2:\n                            return !n.call(this, t[0], t[1]);\n                        case 3:\n                            return !n.call(this, t[0], t[1], t[2]);\n                    }\n                    return !n.apply(this, t);\n                };\n            }\n            function np(n) {\n                return Qu(2, n);\n            }\n            var tp = qc(function(n, t) {\n                t = t.length == 1 && R(t[0]) ? G(t[0], hn(x())) : G(j(t, 1), hn(x()));\n                var e = t.length;\n                return L(function(r) {\n                    for(var s = -1, o = nn(r.length, e); ++s < o;)r[s] = t[s].call(this, r[s]);\n                    return cn(n, this, r);\n                });\n            }), xi = L(function(n, t) {\n                var e = tt(t, qt(xi));\n                return Kn(n, Hn, i, t, e);\n            }), ta = L(function(n, t) {\n                var e = tt(t, qt(ta));\n                return Kn(n, St, i, t, e);\n            }), ep = Yn(function(n, t) {\n                return Kn(n, Kt, i, i, i, t);\n            });\n            function rp(n, t) {\n                if (typeof n != \"function\") throw new wn($);\n                return t = t === i ? t : b(t), L(n, t);\n            }\n            function ip(n, t) {\n                if (typeof n != \"function\") throw new wn($);\n                return t = t == null ? 0 : Q(b(t), 0), L(function(e) {\n                    var r = e[t], s = ut(e, 0, t);\n                    return r && nt(s, r), cn(n, this, s);\n                });\n            }\n            function sp(n, t, e) {\n                var r = !0, s = !0;\n                if (typeof n != \"function\") throw new wn($);\n                return K(e) && (r = \"leading\" in e ? !!e.leading : r, s = \"trailing\" in e ? !!e.trailing : s), na(n, t, {\n                    leading: r,\n                    maxWait: t,\n                    trailing: s\n                });\n            }\n            function up(n) {\n                return Xu(n, 1);\n            }\n            function ap(n, t) {\n                return xi(oi(t), n);\n            }\n            function op() {\n                if (!arguments.length) return [];\n                var n = arguments[0];\n                return R(n) ? n : [\n                    n\n                ];\n            }\n            function fp(n) {\n                return An(n, xt);\n            }\n            function cp(n, t) {\n                return t = typeof t == \"function\" ? t : i, An(n, xt, t);\n            }\n            function hp(n) {\n                return An(n, Ln | xt);\n            }\n            function lp(n, t) {\n                return t = typeof t == \"function\" ? t : i, An(n, Ln | xt, t);\n            }\n            function pp(n, t) {\n                return t == null || Bs(n, t, V(t));\n            }\n            function bn(n, t) {\n                return n === t || n !== n && t !== t;\n            }\n            var dp = ke(Qr), gp = ke(function(n, t) {\n                return n >= t;\n            }), Pt = Js(function() {\n                return arguments;\n            }()) ? Js : function(n) {\n                return Y(n) && F.call(n, \"callee\") && !Hs.call(n, \"callee\");\n            }, R = p.isArray, vp = gs ? hn(gs) : xc;\n            function an(n) {\n                return n != null && ar(n.length) && !Jn(n);\n            }\n            function Z(n) {\n                return Y(n) && an(n);\n            }\n            function _p(n) {\n                return n === !0 || n === !1 || Y(n) && en(n) == Yt;\n            }\n            var at = Tf || Ni, mp = vs ? hn(vs) : Ec;\n            function wp(n) {\n                return Y(n) && n.nodeType === 1 && !pe(n);\n            }\n            function Pp(n) {\n                if (n == null) return !0;\n                if (an(n) && (R(n) || typeof n == \"string\" || typeof n.splice == \"function\" || at(n) || Bt(n) || Pt(n))) return !n.length;\n                var t = tn(n);\n                if (t == yn || t == Sn) return !n.size;\n                if (he(n)) return !jr(n).length;\n                for(var e in n)if (F.call(n, e)) return !1;\n                return !0;\n            }\n            function Ap(n, t) {\n                return oe(n, t);\n            }\n            function Cp(n, t, e) {\n                e = typeof e == \"function\" ? e : i;\n                var r = e ? e(n, t) : i;\n                return r === i ? oe(n, t, i, e) : !!r;\n            }\n            function Ei(n) {\n                if (!Y(n)) return !1;\n                var t = en(n);\n                return t == we || t == Ga || typeof n.message == \"string\" && typeof n.name == \"string\" && !pe(n);\n            }\n            function Ip(n) {\n                return typeof n == \"number\" && $s(n);\n            }\n            function Jn(n) {\n                if (!K(n)) return !1;\n                var t = en(n);\n                return t == Pe || t == Gi || t == Ba || t == Ka;\n            }\n            function ea(n) {\n                return typeof n == \"number\" && n == b(n);\n            }\n            function ar(n) {\n                return typeof n == \"number\" && n > -1 && n % 1 == 0 && n <= kn;\n            }\n            function K(n) {\n                var t = typeof n;\n                return n != null && (t == \"object\" || t == \"function\");\n            }\n            function Y(n) {\n                return n != null && typeof n == \"object\";\n            }\n            var ra = _s ? hn(_s) : Sc;\n            function xp(n, t) {\n                return n === t || kr(n, t, gi(t));\n            }\n            function Ep(n, t, e) {\n                return e = typeof e == \"function\" ? e : i, kr(n, t, gi(t), e);\n            }\n            function yp(n) {\n                return ia(n) && n != +n;\n            }\n            function Sp(n) {\n                if (ch(n)) throw new S(O);\n                return Xs(n);\n            }\n            function Op(n) {\n                return n === null;\n            }\n            function Rp(n) {\n                return n == null;\n            }\n            function ia(n) {\n                return typeof n == \"number\" || Y(n) && en(n) == Jt;\n            }\n            function pe(n) {\n                if (!Y(n) || en(n) != qn) return !1;\n                var t = He(n);\n                if (t === null) return !0;\n                var e = F.call(t, \"constructor\") && t.constructor;\n                return typeof e == \"function\" && e instanceof e && be.call(e) == Ef;\n            }\n            var yi = ms ? hn(ms) : Oc;\n            function bp(n) {\n                return ea(n) && n >= -kn && n <= kn;\n            }\n            var sa = ws ? hn(ws) : Rc;\n            function or(n) {\n                return typeof n == \"string\" || !R(n) && Y(n) && en(n) == Qt;\n            }\n            function pn(n) {\n                return typeof n == \"symbol\" || Y(n) && en(n) == Ae;\n            }\n            var Bt = Ps ? hn(Ps) : bc;\n            function Tp(n) {\n                return n === i;\n            }\n            function Lp(n) {\n                return Y(n) && tn(n) == Vt;\n            }\n            function Dp(n) {\n                return Y(n) && en(n) == Za;\n            }\n            var Hp = ke(ni), Np = ke(function(n, t) {\n                return n <= t;\n            });\n            function ua(n) {\n                if (!n) return [];\n                if (an(n)) return or(n) ? On(n) : un(n);\n                if (ne && n[ne]) return pf(n[ne]());\n                var t = tn(n), e = t == yn ? qr : t == Sn ? Se : Gt;\n                return e(n);\n            }\n            function Xn(n) {\n                if (!n) return n === 0 ? n : 0;\n                if (n = xn(n), n === ht || n === -ht) {\n                    var t = n < 0 ? -1 : 1;\n                    return t * Wa;\n                }\n                return n === n ? n : 0;\n            }\n            function b(n) {\n                var t = Xn(n), e = t % 1;\n                return t === t ? e ? t - e : t : 0;\n            }\n            function aa(n) {\n                return n ? vt(b(n), 0, Nn) : 0;\n            }\n            function xn(n) {\n                if (typeof n == \"number\") return n;\n                if (pn(n)) return _e;\n                if (K(n)) {\n                    var t = typeof n.valueOf == \"function\" ? n.valueOf() : n;\n                    n = K(t) ? t + \"\" : t;\n                }\n                if (typeof n != \"string\") return n === 0 ? n : +n;\n                n = ys(n);\n                var e = go.test(n);\n                return e || _o.test(n) ? Xo(n.slice(2), e ? 2 : 8) : po.test(n) ? _e : +n;\n            }\n            function oa(n) {\n                return Un(n, on(n));\n            }\n            function $p(n) {\n                return n ? vt(b(n), -kn, kn) : n === 0 ? n : 0;\n            }\n            function W(n) {\n                return n == null ? \"\" : ln(n);\n            }\n            var Up = Ft(function(n, t) {\n                if (he(t) || an(t)) {\n                    Un(t, V(t), n);\n                    return;\n                }\n                for(var e in t)F.call(t, e) && se(n, e, t[e]);\n            }), fa = Ft(function(n, t) {\n                Un(t, on(t), n);\n            }), fr = Ft(function(n, t, e, r) {\n                Un(t, on(t), n, r);\n            }), Wp = Ft(function(n, t, e, r) {\n                Un(t, V(t), n, r);\n            }), Fp = Yn(Zr);\n            function Mp(n, t) {\n                var e = Wt(n);\n                return t == null ? e : qs(e, t);\n            }\n            var qp = L(function(n, t) {\n                n = M(n);\n                var e = -1, r = t.length, s = r > 2 ? t[2] : i;\n                for(s && rn(t[0], t[1], s) && (r = 1); ++e < r;)for(var o = t[e], f = on(o), c = -1, l = f.length; ++c < l;){\n                    var v = f[c], _ = n[v];\n                    (_ === i || bn(_, Nt[v]) && !F.call(n, v)) && (n[v] = o[v]);\n                }\n                return n;\n            }), Bp = L(function(n) {\n                return n.push(i, yu), cn(ca, i, n);\n            });\n            function Gp(n, t) {\n                return Cs(n, x(t, 3), $n);\n            }\n            function zp(n, t) {\n                return Cs(n, x(t, 3), Xr);\n            }\n            function Kp(n, t) {\n                return n == null ? n : Jr(n, x(t, 3), on);\n            }\n            function Yp(n, t) {\n                return n == null ? n : Ys(n, x(t, 3), on);\n            }\n            function Zp(n, t) {\n                return n && $n(n, x(t, 3));\n            }\n            function Jp(n, t) {\n                return n && Xr(n, x(t, 3));\n            }\n            function Xp(n) {\n                return n == null ? [] : ze(n, V(n));\n            }\n            function Qp(n) {\n                return n == null ? [] : ze(n, on(n));\n            }\n            function Si(n, t, e) {\n                var r = n == null ? i : _t(n, t);\n                return r === i ? e : r;\n            }\n            function Vp(n, t) {\n                return n != null && Ru(n, t, Pc);\n            }\n            function Oi(n, t) {\n                return n != null && Ru(n, t, Ac);\n            }\n            var kp = Au(function(n, t, e) {\n                t != null && typeof t.toString != \"function\" && (t = Te.call(t)), n[t] = e;\n            }, bi(fn)), jp = Au(function(n, t, e) {\n                t != null && typeof t.toString != \"function\" && (t = Te.call(t)), F.call(n, t) ? n[t].push(e) : n[t] = [\n                    e\n                ];\n            }, x), nd = L(ae);\n            function V(n) {\n                return an(n) ? Fs(n) : jr(n);\n            }\n            function on(n) {\n                return an(n) ? Fs(n, !0) : Tc(n);\n            }\n            function td(n, t) {\n                var e = {};\n                return t = x(t, 3), $n(n, function(r, s, o) {\n                    zn(e, t(r, s, o), r);\n                }), e;\n            }\n            function ed(n, t) {\n                var e = {};\n                return t = x(t, 3), $n(n, function(r, s, o) {\n                    zn(e, s, t(r, s, o));\n                }), e;\n            }\n            var rd = Ft(function(n, t, e) {\n                Ke(n, t, e);\n            }), ca = Ft(function(n, t, e, r) {\n                Ke(n, t, e, r);\n            }), id = Yn(function(n, t) {\n                var e = {};\n                if (n == null) return e;\n                var r = !1;\n                t = G(t, function(o) {\n                    return o = st(o, n), r || (r = o.length > 1), o;\n                }), Un(n, pi(n), e), r && (e = An(e, Ln | Fn | xt, kc));\n                for(var s = t.length; s--;)si(e, t[s]);\n                return e;\n            });\n            function sd(n, t) {\n                return ha(n, ur(x(t)));\n            }\n            var ud = Yn(function(n, t) {\n                return n == null ? {} : Dc(n, t);\n            });\n            function ha(n, t) {\n                if (n == null) return {};\n                var e = G(pi(n), function(r) {\n                    return [\n                        r\n                    ];\n                });\n                return t = x(t), eu(n, e, function(r, s) {\n                    return t(r, s[0]);\n                });\n            }\n            function ad(n, t, e) {\n                t = st(t, n);\n                var r = -1, s = t.length;\n                for(s || (s = 1, n = i); ++r < s;){\n                    var o = n == null ? i : n[Wn(t[r])];\n                    o === i && (r = s, o = e), n = Jn(o) ? o.call(n) : o;\n                }\n                return n;\n            }\n            function od(n, t, e) {\n                return n == null ? n : fe(n, t, e);\n            }\n            function fd(n, t, e, r) {\n                return r = typeof r == \"function\" ? r : i, n == null ? n : fe(n, t, e, r);\n            }\n            var la = xu(V), pa = xu(on);\n            function cd(n, t, e) {\n                var r = R(n), s = r || at(n) || Bt(n);\n                if (t = x(t, 4), e == null) {\n                    var o = n && n.constructor;\n                    s ? e = r ? new o : [] : K(n) ? e = Jn(o) ? Wt(He(n)) : {} : e = {};\n                }\n                return (s ? mn : $n)(n, function(f, c, l) {\n                    return t(e, f, c, l);\n                }), e;\n            }\n            function hd(n, t) {\n                return n == null ? !0 : si(n, t);\n            }\n            function ld(n, t, e) {\n                return n == null ? n : au(n, t, oi(e));\n            }\n            function pd(n, t, e, r) {\n                return r = typeof r == \"function\" ? r : i, n == null ? n : au(n, t, oi(e), r);\n            }\n            function Gt(n) {\n                return n == null ? [] : Mr(n, V(n));\n            }\n            function dd(n) {\n                return n == null ? [] : Mr(n, on(n));\n            }\n            function gd(n, t, e) {\n                return e === i && (e = t, t = i), e !== i && (e = xn(e), e = e === e ? e : 0), t !== i && (t = xn(t), t = t === t ? t : 0), vt(xn(n), t, e);\n            }\n            function vd(n, t, e) {\n                return t = Xn(t), e === i ? (e = t, t = 0) : e = Xn(e), n = xn(n), Cc(n, t, e);\n            }\n            function _d(n, t, e) {\n                if (e && typeof e != \"boolean\" && rn(n, t, e) && (t = e = i), e === i && (typeof t == \"boolean\" ? (e = t, t = i) : typeof n == \"boolean\" && (e = n, n = i)), n === i && t === i ? (n = 0, t = 1) : (n = Xn(n), t === i ? (t = n, n = 0) : t = Xn(t)), n > t) {\n                    var r = n;\n                    n = t, t = r;\n                }\n                if (e || n % 1 || t % 1) {\n                    var s = Us();\n                    return nn(n + s * (t - n + Jo(\"1e-\" + ((s + \"\").length - 1))), t);\n                }\n                return ei(n, t);\n            }\n            var md = Mt(function(n, t, e) {\n                return t = t.toLowerCase(), n + (e ? da(t) : t);\n            });\n            function da(n) {\n                return Ri(W(n).toLowerCase());\n            }\n            function ga(n) {\n                return n = W(n), n && n.replace(wo, of).replace(Wo, \"\");\n            }\n            function wd(n, t, e) {\n                n = W(n), t = ln(t);\n                var r = n.length;\n                e = e === i ? r : vt(b(e), 0, r);\n                var s = e;\n                return e -= t.length, e >= 0 && n.slice(e, s) == t;\n            }\n            function Pd(n) {\n                return n = W(n), n && ka.test(n) ? n.replace(Yi, ff) : n;\n            }\n            function Ad(n) {\n                return n = W(n), n && io.test(n) ? n.replace(xr, \"\\\\$&\") : n;\n            }\n            var Cd = Mt(function(n, t, e) {\n                return n + (e ? \"-\" : \"\") + t.toLowerCase();\n            }), Id = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + t.toLowerCase();\n            }), xd = mu(\"toLowerCase\");\n            function Ed(n, t, e) {\n                n = W(n), t = b(t);\n                var r = t ? Dt(n) : 0;\n                if (!t || r >= t) return n;\n                var s = (t - r) / 2;\n                return Ve(We(s), e) + n + Ve(Ue(s), e);\n            }\n            function yd(n, t, e) {\n                n = W(n), t = b(t);\n                var r = t ? Dt(n) : 0;\n                return t && r < t ? n + Ve(t - r, e) : n;\n            }\n            function Sd(n, t, e) {\n                n = W(n), t = b(t);\n                var r = t ? Dt(n) : 0;\n                return t && r < t ? Ve(t - r, e) + n : n;\n            }\n            function Od(n, t, e) {\n                return e || t == null ? t = 0 : t && (t = +t), Nf(W(n).replace(Er, \"\"), t || 0);\n            }\n            function Rd(n, t, e) {\n                return (e ? rn(n, t, e) : t === i) ? t = 1 : t = b(t), ri(W(n), t);\n            }\n            function bd() {\n                var n = arguments, t = W(n[0]);\n                return n.length < 3 ? t : t.replace(n[1], n[2]);\n            }\n            var Td = Mt(function(n, t, e) {\n                return n + (e ? \"_\" : \"\") + t.toLowerCase();\n            });\n            function Ld(n, t, e) {\n                return e && typeof e != \"number\" && rn(n, t, e) && (t = e = i), e = e === i ? Nn : e >>> 0, e ? (n = W(n), n && (typeof t == \"string\" || t != null && !yi(t)) && (t = ln(t), !t && Lt(n)) ? ut(On(n), 0, e) : n.split(t, e)) : [];\n            }\n            var Dd = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + Ri(t);\n            });\n            function Hd(n, t, e) {\n                return n = W(n), e = e == null ? 0 : vt(b(e), 0, n.length), t = ln(t), n.slice(e, e + t.length) == t;\n            }\n            function Nd(n, t, e) {\n                var r = a.templateSettings;\n                e && rn(n, t, e) && (t = i), n = W(n), t = fr({}, t, r, Eu);\n                var s = fr({}, t.imports, r.imports, Eu), o = V(s), f = Mr(s, o), c, l, v = 0, _ = t.interpolate || Ce, m = \"__p += '\", w = Br((t.escape || Ce).source + \"|\" + _.source + \"|\" + (_ === Zi ? lo : Ce).source + \"|\" + (t.evaluate || Ce).source + \"|$\", \"g\"), I = \"//# sourceURL=\" + (F.call(t, \"sourceURL\") ? (t.sourceURL + \"\").replace(/\\s/g, \" \") : \"lodash.templateSources[\" + ++Go + \"]\") + \"\\n\";\n                n.replace(w, function(y, D, N, dn, sn, gn) {\n                    return N || (N = dn), m += n.slice(v, gn).replace(Po, cf), D && (c = !0, m += \"' +\\n__e(\" + D + \") +\\n'\"), sn && (l = !0, m += \"';\\n\" + sn + \";\\n__p += '\"), N && (m += \"' +\\n((__t = (\" + N + \")) == null ? '' : __t) +\\n'\"), v = gn + y.length, y;\n                }), m += \"';\\n\";\n                var E = F.call(t, \"variable\") && t.variable;\n                if (!E) m = \"with (obj) {\\n\" + m + \"\\n}\\n\";\n                else if (co.test(E)) throw new S(En);\n                m = (l ? m.replace(Ja, \"\") : m).replace(Xa, \"$1\").replace(Qa, \"$1;\"), m = \"function(\" + (E || \"obj\") + \") {\\n\" + (E ? \"\" : \"obj || (obj = {});\\n\") + \"var __t, __p = ''\" + (c ? \", __e = _.escape\" : \"\") + (l ? \", __j = Array.prototype.join;\\nfunction print() { __p += __j.call(arguments, '') }\\n\" : \";\\n\") + m + \"return __p\\n}\";\n                var T = _a(function() {\n                    return U(o, I + \"return \" + m).apply(i, f);\n                });\n                if (T.source = m, Ei(T)) throw T;\n                return T;\n            }\n            function $d(n) {\n                return W(n).toLowerCase();\n            }\n            function Ud(n) {\n                return W(n).toUpperCase();\n            }\n            function Wd(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return ys(n);\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = On(t), o = Ss(r, s), f = Os(r, s) + 1;\n                return ut(r, o, f).join(\"\");\n            }\n            function Fd(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return n.slice(0, bs(n) + 1);\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = Os(r, On(t)) + 1;\n                return ut(r, 0, s).join(\"\");\n            }\n            function Md(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return n.replace(Er, \"\");\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = Ss(r, On(t));\n                return ut(r, s).join(\"\");\n            }\n            function qd(n, t) {\n                var e = La, r = Da;\n                if (K(t)) {\n                    var s = \"separator\" in t ? t.separator : s;\n                    e = \"length\" in t ? b(t.length) : e, r = \"omission\" in t ? ln(t.omission) : r;\n                }\n                n = W(n);\n                var o = n.length;\n                if (Lt(n)) {\n                    var f = On(n);\n                    o = f.length;\n                }\n                if (e >= o) return n;\n                var c = e - Dt(r);\n                if (c < 1) return r;\n                var l = f ? ut(f, 0, c).join(\"\") : n.slice(0, c);\n                if (s === i) return l + r;\n                if (f && (c += l.length - c), yi(s)) {\n                    if (n.slice(c).search(s)) {\n                        var v, _ = l;\n                        for(s.global || (s = Br(s.source, W(Ji.exec(s)) + \"g\")), s.lastIndex = 0; v = s.exec(_);)var m = v.index;\n                        l = l.slice(0, m === i ? c : m);\n                    }\n                } else if (n.indexOf(ln(s), c) != c) {\n                    var w = l.lastIndexOf(s);\n                    w > -1 && (l = l.slice(0, w));\n                }\n                return l + r;\n            }\n            function Bd(n) {\n                return n = W(n), n && Va.test(n) ? n.replace(Ki, _f) : n;\n            }\n            var Gd = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + t.toUpperCase();\n            }), Ri = mu(\"toUpperCase\");\n            function va(n, t, e) {\n                return n = W(n), t = e ? i : t, t === i ? lf(n) ? Pf(n) : ef(n) : n.match(t) || [];\n            }\n            var _a = L(function(n, t) {\n                try {\n                    return cn(n, i, t);\n                } catch (e) {\n                    return Ei(e) ? e : new S(e);\n                }\n            }), zd = Yn(function(n, t) {\n                return mn(t, function(e) {\n                    e = Wn(e), zn(n, e, Ii(n[e], n));\n                }), n;\n            });\n            function Kd(n) {\n                var t = n == null ? 0 : n.length, e = x();\n                return n = t ? G(n, function(r) {\n                    if (typeof r[1] != \"function\") throw new wn($);\n                    return [\n                        e(r[0]),\n                        r[1]\n                    ];\n                }) : [], L(function(r) {\n                    for(var s = -1; ++s < t;){\n                        var o = n[s];\n                        if (cn(o[0], this, r)) return cn(o[1], this, r);\n                    }\n                });\n            }\n            function Yd(n) {\n                return _c(An(n, Ln));\n            }\n            function bi(n) {\n                return function() {\n                    return n;\n                };\n            }\n            function Zd(n, t) {\n                return n == null || n !== n ? t : n;\n            }\n            var Jd = Pu(), Xd = Pu(!0);\n            function fn(n) {\n                return n;\n            }\n            function Ti(n) {\n                return Qs(typeof n == \"function\" ? n : An(n, Ln));\n            }\n            function Qd(n) {\n                return ks(An(n, Ln));\n            }\n            function Vd(n, t) {\n                return js(n, An(t, Ln));\n            }\n            var kd = L(function(n, t) {\n                return function(e) {\n                    return ae(e, n, t);\n                };\n            }), jd = L(function(n, t) {\n                return function(e) {\n                    return ae(n, e, t);\n                };\n            });\n            function Li(n, t, e) {\n                var r = V(t), s = ze(t, r);\n                e == null && !(K(t) && (s.length || !r.length)) && (e = t, t = n, n = this, s = ze(t, V(t)));\n                var o = !(K(e) && \"chain\" in e) || !!e.chain, f = Jn(n);\n                return mn(s, function(c) {\n                    var l = t[c];\n                    n[c] = l, f && (n.prototype[c] = function() {\n                        var v = this.__chain__;\n                        if (o || v) {\n                            var _ = n(this.__wrapped__), m = _.__actions__ = un(this.__actions__);\n                            return m.push({\n                                func: l,\n                                args: arguments,\n                                thisArg: n\n                            }), _.__chain__ = v, _;\n                        }\n                        return l.apply(n, nt([\n                            this.value()\n                        ], arguments));\n                    });\n                }), n;\n            }\n            function ng() {\n                return k._ === this && (k._ = yf), this;\n            }\n            function Di() {}\n            function tg(n) {\n                return n = b(n), L(function(t) {\n                    return nu(t, n);\n                });\n            }\n            var eg = ci(G), rg = ci(As), ig = ci(Nr);\n            function ma(n) {\n                return _i(n) ? $r(Wn(n)) : Hc(n);\n            }\n            function sg(n) {\n                return function(t) {\n                    return n == null ? i : _t(n, t);\n                };\n            }\n            var ug = Cu(), ag = Cu(!0);\n            function Hi() {\n                return [];\n            }\n            function Ni() {\n                return !1;\n            }\n            function og() {\n                return {};\n            }\n            function fg() {\n                return \"\";\n            }\n            function cg() {\n                return !0;\n            }\n            function hg(n, t) {\n                if (n = b(n), n < 1 || n > kn) return [];\n                var e = Nn, r = nn(n, Nn);\n                t = x(t), n -= Nn;\n                for(var s = Fr(r, t); ++e < n;)t(e);\n                return s;\n            }\n            function lg(n) {\n                return R(n) ? G(n, Wn) : pn(n) ? [\n                    n\n                ] : un(Wu(W(n)));\n            }\n            function pg(n) {\n                var t = ++xf;\n                return W(n) + t;\n            }\n            var dg = Qe(function(n, t) {\n                return n + t;\n            }, 0), gg = hi(\"ceil\"), vg = Qe(function(n, t) {\n                return n / t;\n            }, 1), _g = hi(\"floor\");\n            function mg(n) {\n                return n && n.length ? Ge(n, fn, Qr) : i;\n            }\n            function wg(n, t) {\n                return n && n.length ? Ge(n, x(t, 2), Qr) : i;\n            }\n            function Pg(n) {\n                return xs(n, fn);\n            }\n            function Ag(n, t) {\n                return xs(n, x(t, 2));\n            }\n            function Cg(n) {\n                return n && n.length ? Ge(n, fn, ni) : i;\n            }\n            function Ig(n, t) {\n                return n && n.length ? Ge(n, x(t, 2), ni) : i;\n            }\n            var xg = Qe(function(n, t) {\n                return n * t;\n            }, 1), Eg = hi(\"round\"), yg = Qe(function(n, t) {\n                return n - t;\n            }, 0);\n            function Sg(n) {\n                return n && n.length ? Wr(n, fn) : 0;\n            }\n            function Og(n, t) {\n                return n && n.length ? Wr(n, x(t, 2)) : 0;\n            }\n            return a.after = Ql, a.ary = Xu, a.assign = Up, a.assignIn = fa, a.assignInWith = fr, a.assignWith = Wp, a.at = Fp, a.before = Qu, a.bind = Ii, a.bindAll = zd, a.bindKey = Vu, a.castArray = op, a.chain = Yu, a.chunk = _h, a.compact = mh, a.concat = wh, a.cond = Kd, a.conforms = Yd, a.constant = bi, a.countBy = Sl, a.create = Mp, a.curry = ku, a.curryRight = ju, a.debounce = na, a.defaults = qp, a.defaultsDeep = Bp, a.defer = Vl, a.delay = kl, a.difference = Ph, a.differenceBy = Ah, a.differenceWith = Ch, a.drop = Ih, a.dropRight = xh, a.dropRightWhile = Eh, a.dropWhile = yh, a.fill = Sh, a.filter = Rl, a.flatMap = Ll, a.flatMapDeep = Dl, a.flatMapDepth = Hl, a.flatten = Bu, a.flattenDeep = Oh, a.flattenDepth = Rh, a.flip = jl, a.flow = Jd, a.flowRight = Xd, a.fromPairs = bh, a.functions = Xp, a.functionsIn = Qp, a.groupBy = Nl, a.initial = Lh, a.intersection = Dh, a.intersectionBy = Hh, a.intersectionWith = Nh, a.invert = kp, a.invertBy = jp, a.invokeMap = Ul, a.iteratee = Ti, a.keyBy = Wl, a.keys = V, a.keysIn = on, a.map = rr, a.mapKeys = td, a.mapValues = ed, a.matches = Qd, a.matchesProperty = Vd, a.memoize = sr, a.merge = rd, a.mergeWith = ca, a.method = kd, a.methodOf = jd, a.mixin = Li, a.negate = ur, a.nthArg = tg, a.omit = id, a.omitBy = sd, a.once = np, a.orderBy = Fl, a.over = eg, a.overArgs = tp, a.overEvery = rg, a.overSome = ig, a.partial = xi, a.partialRight = ta, a.partition = Ml, a.pick = ud, a.pickBy = ha, a.property = ma, a.propertyOf = sg, a.pull = Fh, a.pullAll = zu, a.pullAllBy = Mh, a.pullAllWith = qh, a.pullAt = Bh, a.range = ug, a.rangeRight = ag, a.rearg = ep, a.reject = Gl, a.remove = Gh, a.rest = rp, a.reverse = Ai, a.sampleSize = Kl, a.set = od, a.setWith = fd, a.shuffle = Yl, a.slice = zh, a.sortBy = Xl, a.sortedUniq = Vh, a.sortedUniqBy = kh, a.split = Ld, a.spread = ip, a.tail = jh, a.take = nl, a.takeRight = tl, a.takeRightWhile = el, a.takeWhile = rl, a.tap = ml, a.throttle = sp, a.thru = er, a.toArray = ua, a.toPairs = la, a.toPairsIn = pa, a.toPath = lg, a.toPlainObject = oa, a.transform = cd, a.unary = up, a.union = il, a.unionBy = sl, a.unionWith = ul, a.uniq = al, a.uniqBy = ol, a.uniqWith = fl, a.unset = hd, a.unzip = Ci, a.unzipWith = Ku, a.update = ld, a.updateWith = pd, a.values = Gt, a.valuesIn = dd, a.without = cl, a.words = va, a.wrap = ap, a.xor = hl, a.xorBy = ll, a.xorWith = pl, a.zip = dl, a.zipObject = gl, a.zipObjectDeep = vl, a.zipWith = _l, a.entries = la, a.entriesIn = pa, a.extend = fa, a.extendWith = fr, Li(a, a), a.add = dg, a.attempt = _a, a.camelCase = md, a.capitalize = da, a.ceil = gg, a.clamp = gd, a.clone = fp, a.cloneDeep = hp, a.cloneDeepWith = lp, a.cloneWith = cp, a.conformsTo = pp, a.deburr = ga, a.defaultTo = Zd, a.divide = vg, a.endsWith = wd, a.eq = bn, a.escape = Pd, a.escapeRegExp = Ad, a.every = Ol, a.find = bl, a.findIndex = Mu, a.findKey = Gp, a.findLast = Tl, a.findLastIndex = qu, a.findLastKey = zp, a.floor = _g, a.forEach = Zu, a.forEachRight = Ju, a.forIn = Kp, a.forInRight = Yp, a.forOwn = Zp, a.forOwnRight = Jp, a.get = Si, a.gt = dp, a.gte = gp, a.has = Vp, a.hasIn = Oi, a.head = Gu, a.identity = fn, a.includes = $l, a.indexOf = Th, a.inRange = vd, a.invoke = nd, a.isArguments = Pt, a.isArray = R, a.isArrayBuffer = vp, a.isArrayLike = an, a.isArrayLikeObject = Z, a.isBoolean = _p, a.isBuffer = at, a.isDate = mp, a.isElement = wp, a.isEmpty = Pp, a.isEqual = Ap, a.isEqualWith = Cp, a.isError = Ei, a.isFinite = Ip, a.isFunction = Jn, a.isInteger = ea, a.isLength = ar, a.isMap = ra, a.isMatch = xp, a.isMatchWith = Ep, a.isNaN = yp, a.isNative = Sp, a.isNil = Rp, a.isNull = Op, a.isNumber = ia, a.isObject = K, a.isObjectLike = Y, a.isPlainObject = pe, a.isRegExp = yi, a.isSafeInteger = bp, a.isSet = sa, a.isString = or, a.isSymbol = pn, a.isTypedArray = Bt, a.isUndefined = Tp, a.isWeakMap = Lp, a.isWeakSet = Dp, a.join = $h, a.kebabCase = Cd, a.last = In, a.lastIndexOf = Uh, a.lowerCase = Id, a.lowerFirst = xd, a.lt = Hp, a.lte = Np, a.max = mg, a.maxBy = wg, a.mean = Pg, a.meanBy = Ag, a.min = Cg, a.minBy = Ig, a.stubArray = Hi, a.stubFalse = Ni, a.stubObject = og, a.stubString = fg, a.stubTrue = cg, a.multiply = xg, a.nth = Wh, a.noConflict = ng, a.noop = Di, a.now = ir, a.pad = Ed, a.padEnd = yd, a.padStart = Sd, a.parseInt = Od, a.random = _d, a.reduce = ql, a.reduceRight = Bl, a.repeat = Rd, a.replace = bd, a.result = ad, a.round = Eg, a.runInContext = h, a.sample = zl, a.size = Zl, a.snakeCase = Td, a.some = Jl, a.sortedIndex = Kh, a.sortedIndexBy = Yh, a.sortedIndexOf = Zh, a.sortedLastIndex = Jh, a.sortedLastIndexBy = Xh, a.sortedLastIndexOf = Qh, a.startCase = Dd, a.startsWith = Hd, a.subtract = yg, a.sum = Sg, a.sumBy = Og, a.template = Nd, a.times = hg, a.toFinite = Xn, a.toInteger = b, a.toLength = aa, a.toLower = $d, a.toNumber = xn, a.toSafeInteger = $p, a.toString = W, a.toUpper = Ud, a.trim = Wd, a.trimEnd = Fd, a.trimStart = Md, a.truncate = qd, a.unescape = Bd, a.uniqueId = pg, a.upperCase = Gd, a.upperFirst = Ri, a.each = Zu, a.eachRight = Ju, a.first = Gu, Li(a, function() {\n                var n = {};\n                return $n(a, function(t, e) {\n                    F.call(a.prototype, e) || (n[e] = t);\n                }), n;\n            }(), {\n                chain: !1\n            }), a.VERSION = d, mn([\n                \"bind\",\n                \"bindKey\",\n                \"curry\",\n                \"curryRight\",\n                \"partial\",\n                \"partialRight\"\n            ], function(n) {\n                a[n].placeholder = a;\n            }), mn([\n                \"drop\",\n                \"take\"\n            ], function(n, t) {\n                H.prototype[n] = function(e) {\n                    e = e === i ? 1 : Q(b(e), 0);\n                    var r = this.__filtered__ && !t ? new H(this) : this.clone();\n                    return r.__filtered__ ? r.__takeCount__ = nn(e, r.__takeCount__) : r.__views__.push({\n                        size: nn(e, Nn),\n                        type: n + (r.__dir__ < 0 ? \"Right\" : \"\")\n                    }), r;\n                }, H.prototype[n + \"Right\"] = function(e) {\n                    return this.reverse()[n](e).reverse();\n                };\n            }), mn([\n                \"filter\",\n                \"map\",\n                \"takeWhile\"\n            ], function(n, t) {\n                var e = t + 1, r = e == Bi || e == Ua;\n                H.prototype[n] = function(s) {\n                    var o = this.clone();\n                    return o.__iteratees__.push({\n                        iteratee: x(s, 3),\n                        type: e\n                    }), o.__filtered__ = o.__filtered__ || r, o;\n                };\n            }), mn([\n                \"head\",\n                \"last\"\n            ], function(n, t) {\n                var e = \"take\" + (t ? \"Right\" : \"\");\n                H.prototype[n] = function() {\n                    return this[e](1).value()[0];\n                };\n            }), mn([\n                \"initial\",\n                \"tail\"\n            ], function(n, t) {\n                var e = \"drop\" + (t ? \"\" : \"Right\");\n                H.prototype[n] = function() {\n                    return this.__filtered__ ? new H(this) : this[e](1);\n                };\n            }), H.prototype.compact = function() {\n                return this.filter(fn);\n            }, H.prototype.find = function(n) {\n                return this.filter(n).head();\n            }, H.prototype.findLast = function(n) {\n                return this.reverse().find(n);\n            }, H.prototype.invokeMap = L(function(n, t) {\n                return typeof n == \"function\" ? new H(this) : this.map(function(e) {\n                    return ae(e, n, t);\n                });\n            }), H.prototype.reject = function(n) {\n                return this.filter(ur(x(n)));\n            }, H.prototype.slice = function(n, t) {\n                n = b(n);\n                var e = this;\n                return e.__filtered__ && (n > 0 || t < 0) ? new H(e) : (n < 0 ? e = e.takeRight(-n) : n && (e = e.drop(n)), t !== i && (t = b(t), e = t < 0 ? e.dropRight(-t) : e.take(t - n)), e);\n            }, H.prototype.takeRightWhile = function(n) {\n                return this.reverse().takeWhile(n).reverse();\n            }, H.prototype.toArray = function() {\n                return this.take(Nn);\n            }, $n(H.prototype, function(n, t) {\n                var e = /^(?:filter|find|map|reject)|While$/.test(t), r = /^(?:head|last)$/.test(t), s = a[r ? \"take\" + (t == \"last\" ? \"Right\" : \"\") : t], o = r || /^find/.test(t);\n                s && (a.prototype[t] = function() {\n                    var f = this.__wrapped__, c = r ? [\n                        1\n                    ] : arguments, l = f instanceof H, v = c[0], _ = l || R(f), m = function(D) {\n                        var N = s.apply(a, nt([\n                            D\n                        ], c));\n                        return r && w ? N[0] : N;\n                    };\n                    _ && e && typeof v == \"function\" && v.length != 1 && (l = _ = !1);\n                    var w = this.__chain__, I = !!this.__actions__.length, E = o && !w, T = l && !I;\n                    if (!o && _) {\n                        f = T ? f : new H(this);\n                        var y = n.apply(f, c);\n                        return y.__actions__.push({\n                            func: er,\n                            args: [\n                                m\n                            ],\n                            thisArg: i\n                        }), new Pn(y, w);\n                    }\n                    return E && T ? n.apply(this, c) : (y = this.thru(m), E ? r ? y.value()[0] : y.value() : y);\n                });\n            }), mn([\n                \"pop\",\n                \"push\",\n                \"shift\",\n                \"sort\",\n                \"splice\",\n                \"unshift\"\n            ], function(n) {\n                var t = Oe[n], e = /^(?:push|sort|unshift)$/.test(n) ? \"tap\" : \"thru\", r = /^(?:pop|shift)$/.test(n);\n                a.prototype[n] = function() {\n                    var s = arguments;\n                    if (r && !this.__chain__) {\n                        var o = this.value();\n                        return t.apply(R(o) ? o : [], s);\n                    }\n                    return this[e](function(f) {\n                        return t.apply(R(f) ? f : [], s);\n                    });\n                };\n            }), $n(H.prototype, function(n, t) {\n                var e = a[t];\n                if (e) {\n                    var r = e.name + \"\";\n                    F.call(Ut, r) || (Ut[r] = []), Ut[r].push({\n                        name: t,\n                        func: e\n                    });\n                }\n            }), Ut[Xe(i, ct).name] = [\n                {\n                    name: \"wrapper\",\n                    func: i\n                }\n            ], H.prototype.clone = Bf, H.prototype.reverse = Gf, H.prototype.value = zf, a.prototype.at = wl, a.prototype.chain = Pl, a.prototype.commit = Al, a.prototype.next = Cl, a.prototype.plant = xl, a.prototype.reverse = El, a.prototype.toJSON = a.prototype.valueOf = a.prototype.value = yl, a.prototype.first = a.prototype.head, ne && (a.prototype[ne] = Il), a;\n        }, Ht = Af();\n        lt ? ((lt.exports = Ht)._ = Ht, Tr._ = Ht) : k._ = Ht;\n    }).call(ge);\n})(Ui, Ui.exports);\nvar Bg = Object.defineProperty, Gg = Object.defineProperties, zg = Object.getOwnPropertyDescriptors, Ea = Object.getOwnPropertySymbols, Kg = Object.prototype.hasOwnProperty, Yg = Object.prototype.propertyIsEnumerable, ya = (C, u, i)=>u in C ? Bg(C, u, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : C[u] = i, cr = (C, u)=>{\n    for(var i in u || (u = {}))Kg.call(u, i) && ya(C, i, u[i]);\n    if (Ea) for (var i of Ea(u))Yg.call(u, i) && ya(C, i, u[i]);\n    return C;\n}, Zg = (C, u)=>Gg(C, zg(u));\nfunction ft(C, u, i) {\n    var d;\n    const P = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(C);\n    return ((d = u.rpcMap) == null ? void 0 : d[P.reference]) || \"\".concat(qg, \"?chainId=\").concat(P.namespace, \":\").concat(P.reference, \"&projectId=\").concat(i);\n}\nfunction Ct(C) {\n    return C.includes(\":\") ? C.split(\":\")[1] : C;\n}\n_c = Ct;\nfunction Sa(C) {\n    return C.map((u)=>\"\".concat(u.split(\":\")[0], \":\").concat(u.split(\":\")[1]));\n}\n_c1 = Sa;\nfunction Jg(C, u) {\n    const i = Object.keys(u.namespaces).filter((P)=>P.includes(C));\n    if (!i.length) return [];\n    const d = [];\n    return i.forEach((P)=>{\n        const O = u.namespaces[P].accounts;\n        d.push(...O);\n    }), d;\n}\n_c2 = Jg;\nfunction Xg() {\n    let C = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, u = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const i = Oa(C), d = Oa(u);\n    return Ui.exports.merge(i, d);\n}\n_c3 = Xg;\nfunction Oa(C) {\n    var u, i, d, P;\n    const O = {};\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(C)) return O;\n    for (const [$, En] of Object.entries(C)){\n        const zt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)($) ? [\n            $\n        ] : En.chains, pr = En.methods || [], It = En.events || [], Ln = En.rpcMap || {}, Fn = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)($);\n        O[Fn] = Zg(cr(cr({}, O[Fn]), En), {\n            chains: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(zt, (u = O[Fn]) == null ? void 0 : u.chains),\n            methods: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(pr, (i = O[Fn]) == null ? void 0 : i.methods),\n            events: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(It, (d = O[Fn]) == null ? void 0 : d.events),\n            rpcMap: cr(cr({}, Ln), (P = O[Fn]) == null ? void 0 : P.rpcMap)\n        });\n    }\n    return O;\n}\n_c4 = Oa;\nfunction Qg(C) {\n    return C.includes(\":\") ? C.split(\":\")[2] : C;\n}\n_c5 = Qg;\nfunction Vg(C) {\n    const u = {};\n    for (const [i, d] of Object.entries(C)){\n        const P = d.methods || [], O = d.events || [], $ = d.accounts || [], En = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(i) ? [\n            i\n        ] : d.chains ? d.chains : Sa(d.accounts);\n        u[i] = {\n            chains: En,\n            methods: P,\n            events: O,\n            accounts: $\n        };\n    }\n    return u;\n}\n_c6 = Vg;\nfunction Wi(C) {\n    return typeof C == \"number\" ? C : C.includes(\"0x\") ? parseInt(C, 16) : C.includes(\":\") ? Number(C.split(\":\")[1]) : Number(C);\n}\n_c7 = Wi;\nconst Ra = {}, z = (C)=>Ra[C], Fi = (C, u)=>{\n    Ra[C] = u;\n};\nclass kg {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const P = Ct(i);\n            u[P] = this.createHttpProvider(P, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"polkadot\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass jg {\n    async request(u) {\n        switch(u.request.method){\n            case \"eth_requestAccounts\":\n                return this.getAccounts();\n            case \"eth_accounts\":\n                return this.getAccounts();\n            case \"wallet_switchEthereumChain\":\n                return await this.handleSwitchChain(u);\n            case \"eth_chainId\":\n                return parseInt(this.getDefaultChain());\n        }\n        return this.namespace.methods.includes(u.request.method) ? await this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(parseInt(u), i), this.chainId = parseInt(u), this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId.toString();\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(\"\".concat(this.name, \":\").concat(u), this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__.HttpConnection(d, z(\"disableProviderPing\")));\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const P = parseInt(Ct(i));\n            u[P] = this.createHttpProvider(P, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    getHttpProvider() {\n        const u = this.chainId, i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    async handleSwitchChain(u) {\n        var i, d;\n        let P = u.request.params ? (i = u.request.params[0]) == null ? void 0 : i.chainId : \"0x0\";\n        P = P.startsWith(\"0x\") ? P : \"0x\".concat(P);\n        const O = parseInt(P, 16);\n        if (this.isChainApproved(O)) this.setDefaultChain(\"\".concat(O));\n        else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n            topic: u.topic,\n            request: {\n                method: u.request.method,\n                params: [\n                    {\n                        chainId: P\n                    }\n                ]\n            },\n            chainId: (d = this.namespace.chains) == null ? void 0 : d[0]\n        }), this.setDefaultChain(\"\".concat(O));\n        else throw new Error(\"Failed to switch to chain 'eip155:\".concat(O, \"'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.\"));\n        return null;\n    }\n    isChainApproved(u) {\n        return this.namespace.chains.includes(\"\".concat(this.name, \":\").concat(u));\n    }\n    constructor(u){\n        this.name = \"eip155\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n    }\n}\nclass nv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const P = Ct(i);\n            u[P] = this.createHttpProvider(P, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"solana\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass tv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const P = Ct(i);\n            u[P] = this.createHttpProvider(P, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"cosmos\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass ev {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            const d = this.getCardanoRPCUrl(i), P = Ct(i);\n            u[P] = this.createHttpProvider(P, d);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    getCardanoRPCUrl(u) {\n        const i = this.namespace.rpcMap;\n        if (i) return i[u];\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || this.getCardanoRPCUrl(u);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"cip34\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass rv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const P = Ct(i);\n            u[P] = this.createHttpProvider(P, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"elrond\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass iv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const P = Ct(i);\n            u[P] = this.createHttpProvider(P, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"multiversx\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass sv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        if (this.chainId = u, !this.httpProviders[u]) {\n            const d = i || ft(\"\".concat(this.name, \":\").concat(u), this.namespace);\n            if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n            this.setHttpProvider(u, d);\n        }\n        this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            u[i] = this.createHttpProvider(i, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace);\n        return typeof d > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"near\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar uv = Object.defineProperty, av = Object.defineProperties, ov = Object.getOwnPropertyDescriptors, ba = Object.getOwnPropertySymbols, fv = Object.prototype.hasOwnProperty, cv = Object.prototype.propertyIsEnumerable, Ta = (C, u, i)=>u in C ? uv(C, u, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : C[u] = i, hr = (C, u)=>{\n    for(var i in u || (u = {}))fv.call(u, i) && Ta(C, i, u[i]);\n    if (ba) for (var i of ba(u))cv.call(u, i) && Ta(C, i, u[i]);\n    return C;\n}, Mi = (C, u)=>av(C, ov(u));\nclass lr {\n    static async init(u) {\n        const i = new lr(u);\n        return await i.initialize(), i;\n    }\n    async request(u, i) {\n        const [d, P] = this.validateChain(i);\n        if (!this.session) throw new Error(\"Please call connect() before request()\");\n        return await this.getProvider(d).request({\n            request: hr({}, u),\n            chainId: \"\".concat(d, \":\").concat(P),\n            topic: this.session.topic\n        });\n    }\n    sendAsync(u, i, d) {\n        const P = new Date().getTime();\n        this.request(u, d).then((O)=>i(null, (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_4__.formatJsonRpcResult)(P, O))).catch((O)=>i(O, void 0));\n    }\n    async enable() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        return this.session || await this.connect({\n            namespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties\n        }), await this.requestAccounts();\n    }\n    async disconnect() {\n        var u;\n        if (!this.session) throw new Error(\"Please call connect() before enable()\");\n        await this.client.disconnect({\n            topic: (u = this.session) == null ? void 0 : u.topic,\n            reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n        }), await this.cleanup();\n    }\n    async connect(u) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (this.setNamespaces(u), await this.cleanupPendingPairings(), !u.skipPairing) return await this.pair(u.pairingTopic);\n    }\n    on(u, i) {\n        this.events.on(u, i);\n    }\n    once(u, i) {\n        this.events.once(u, i);\n    }\n    removeListener(u, i) {\n        this.events.removeListener(u, i);\n    }\n    off(u, i) {\n        this.events.off(u, i);\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    async pair(u) {\n        this.shouldAbortPairingAttempt = !1;\n        let i = 0;\n        do {\n            if (this.shouldAbortPairingAttempt) throw new Error(\"Pairing aborted\");\n            if (i >= this.maxPairingAttempts) throw new Error(\"Max auto pairing attempts reached\");\n            const { uri: d, approval: P } = await this.client.connect({\n                pairingTopic: u,\n                requiredNamespaces: this.namespaces,\n                optionalNamespaces: this.optionalNamespaces,\n                sessionProperties: this.sessionProperties\n            });\n            d && (this.uri = d, this.events.emit(\"display_uri\", d)), await P().then((O)=>{\n                this.session = O, this.namespaces || (this.namespaces = Vg(O.namespaces), this.persist(\"namespaces\", this.namespaces));\n            }).catch((O)=>{\n                if (O.message !== _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__.PROPOSAL_EXPIRY_MESSAGE) throw O;\n                i++;\n            });\n        }while (!this.session);\n        return this.onConnect(), this.session;\n    }\n    setDefaultChain(u, i) {\n        try {\n            if (!this.session) return;\n            const [d, P] = this.validateChain(u);\n            this.getProvider(d).setDefaultChain(P, i);\n        } catch (d) {\n            if (!/Please call connect/.test(d.message)) throw d;\n        }\n    }\n    async cleanupPendingPairings() {\n        let u = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this.logger.info(\"Cleaning up inactive pairings...\");\n        const i = this.client.pairing.getAll();\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(i)) {\n            for (const d of i)u.deletePairings ? this.client.core.expirer.set(d.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(d.topic);\n            this.logger.info(\"Inactive pairings cleared: \".concat(i.length));\n        }\n    }\n    abortPairingAttempt() {\n        this.shouldAbortPairingAttempt = !0;\n    }\n    async checkStorage() {\n        if (this.namespaces = await this.getFromStore(\"namespaces\"), this.optionalNamespaces = await this.getFromStore(\"optionalNamespaces\") || {}, this.client.session.length) {\n            const u = this.client.session.keys.length - 1;\n            this.session = this.client.session.get(this.client.session.keys[u]), this.createProviders();\n        }\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n    }\n    async createClient() {\n        this.client = this.providerOpts.client || await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__[\"default\"].init({\n            logger: this.providerOpts.logger || Ia,\n            relayUrl: this.providerOpts.relayUrl || Wg,\n            projectId: this.providerOpts.projectId,\n            metadata: this.providerOpts.metadata,\n            storageOptions: this.providerOpts.storageOptions,\n            storage: this.providerOpts.storage,\n            name: this.providerOpts.name\n        }), this.logger.trace(\"SignClient Initialized\");\n    }\n    createProviders() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n        const u = [\n            ...new Set(Object.keys(this.session.namespaces).map((i)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(i)))\n        ];\n        Fi(\"client\", this.client), Fi(\"events\", this.events), Fi(\"disableProviderPing\", this.disableProviderPing), u.forEach((i)=>{\n            if (!this.session) return;\n            const d = Jg(i, this.session), P = Sa(d), O = Xg(this.namespaces, this.optionalNamespaces), $ = Mi(hr({}, O[i]), {\n                accounts: d,\n                chains: P\n            });\n            switch(i){\n                case \"eip155\":\n                    this.rpcProviders[i] = new jg({\n                        namespace: $\n                    });\n                    break;\n                case \"solana\":\n                    this.rpcProviders[i] = new nv({\n                        namespace: $\n                    });\n                    break;\n                case \"cosmos\":\n                    this.rpcProviders[i] = new tv({\n                        namespace: $\n                    });\n                    break;\n                case \"polkadot\":\n                    this.rpcProviders[i] = new kg({\n                        namespace: $\n                    });\n                    break;\n                case \"cip34\":\n                    this.rpcProviders[i] = new ev({\n                        namespace: $\n                    });\n                    break;\n                case \"elrond\":\n                    this.rpcProviders[i] = new rv({\n                        namespace: $\n                    });\n                    break;\n                case \"multiversx\":\n                    this.rpcProviders[i] = new iv({\n                        namespace: $\n                    });\n                    break;\n                case \"near\":\n                    this.rpcProviders[i] = new sv({\n                        namespace: $\n                    });\n                    break;\n            }\n        });\n    }\n    registerEventListeners() {\n        if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n        this.client.on(\"session_ping\", (u)=>{\n            this.events.emit(\"session_ping\", u);\n        }), this.client.on(\"session_event\", (u)=>{\n            const { params: i } = u, { event: d } = i;\n            if (d.name === \"accountsChanged\") {\n                const P = d.data;\n                P && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(P) && this.events.emit(\"accountsChanged\", P.map(Qg));\n            } else if (d.name === \"chainChanged\") {\n                const P = i.chainId, O = i.event.data, $ = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(P), En = Wi(P) !== Wi(O) ? \"\".concat($, \":\").concat(Wi(O)) : P;\n                this.onChainChanged(En);\n            } else this.events.emit(d.name, d.data);\n            this.events.emit(\"session_event\", u);\n        }), this.client.on(\"session_update\", (param)=>{\n            let { topic: u, params: i } = param;\n            var d;\n            const { namespaces: P } = i, O = (d = this.client) == null ? void 0 : d.session.get(u);\n            this.session = Mi(hr({}, O), {\n                namespaces: P\n            }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n                topic: u,\n                params: i\n            });\n        }), this.client.on(\"session_delete\", async (u)=>{\n            await this.cleanup(), this.events.emit(\"session_delete\", u), this.events.emit(\"disconnect\", Mi(hr({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: u.topic\n            }));\n        }), this.on(Vn.DEFAULT_CHAIN_CHANGED, (u)=>{\n            this.onChainChanged(u, !0);\n        });\n    }\n    getProvider(u) {\n        if (!this.rpcProviders[u]) throw new Error(\"Provider not found: \".concat(u));\n        return this.rpcProviders[u];\n    }\n    onSessionUpdate() {\n        Object.keys(this.rpcProviders).forEach((u)=>{\n            var i;\n            this.getProvider(u).updateNamespace((i = this.session) == null ? void 0 : i.namespaces[u]);\n        });\n    }\n    setNamespaces(u) {\n        const { namespaces: i, optionalNamespaces: d, sessionProperties: P } = u;\n        i && Object.keys(i).length && (this.namespaces = i), d && Object.keys(d).length && (this.optionalNamespaces = d), this.sessionProperties = P, this.persist(\"namespaces\", i), this.persist(\"optionalNamespaces\", d);\n    }\n    validateChain(u) {\n        const [i, d] = (u === null || u === void 0 ? void 0 : u.split(\":\")) || [\n            \"\",\n            \"\"\n        ];\n        if (!this.namespaces || !Object.keys(this.namespaces).length) return [\n            i,\n            d\n        ];\n        if (i && !Object.keys(this.namespaces || {}).map(($)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)($)).includes(i)) throw new Error(\"Namespace '\".concat(i, \"' is not configured. Please call connect() first with namespace config.\"));\n        if (i && d) return [\n            i,\n            d\n        ];\n        const P = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(Object.keys(this.namespaces)[0]), O = this.rpcProviders[P].getDefaultChain();\n        return [\n            P,\n            O\n        ];\n    }\n    async requestAccounts() {\n        const [u] = this.validateChain();\n        return await this.getProvider(u).requestAccounts();\n    }\n    onChainChanged(u) {\n        let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n        var d;\n        if (!this.namespaces) return;\n        const [P, O] = this.validateChain(u);\n        i || this.getProvider(P).setDefaultChain(O), ((d = this.namespaces[P]) != null ? d : this.namespaces[\"\".concat(P, \":\").concat(O)]).defaultChain = O, this.persist(\"namespaces\", this.namespaces), this.events.emit(\"chainChanged\", O);\n    }\n    onConnect() {\n        this.createProviders(), this.events.emit(\"connect\", {\n            session: this.session\n        });\n    }\n    async cleanup() {\n        this.session = void 0, this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, this.persist(\"namespaces\", void 0), this.persist(\"optionalNamespaces\", void 0), this.persist(\"sessionProperties\", void 0), await this.cleanupPendingPairings({\n            deletePairings: !0\n        });\n    }\n    persist(u, i) {\n        this.client.core.storage.setItem(\"\".concat(xa, \"/\").concat(u), i);\n    }\n    async getFromStore(u) {\n        return await this.client.core.storage.getItem(\"\".concat(xa, \"/\").concat(u));\n    }\n    constructor(u){\n        this.events = new (events__WEBPACK_IMPORTED_MODULE_3___default()), this.rpcProviders = {}, this.shouldAbortPairingAttempt = !1, this.maxPairingAttempts = 10, this.disableProviderPing = !1, this.providerOpts = u, this.logger = typeof (u === null || u === void 0 ? void 0 : u.logger) < \"u\" && typeof (u === null || u === void 0 ? void 0 : u.logger) != \"string\" ? u.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: (u === null || u === void 0 ? void 0 : u.logger) || Ia\n        })), this.disableProviderPing = (u === null || u === void 0 ? void 0 : u.disableProviderPing) || !1;\n    }\n}\nconst hv = lr;\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Ct\");\n$RefreshReg$(_c1, \"Sa\");\n$RefreshReg$(_c2, \"Jg\");\n$RefreshReg$(_c3, \"Xg\");\n$RefreshReg$(_c4, \"Oa\");\n$RefreshReg$(_c5, \"Qg\");\n$RefreshReg$(_c6, \"Vg\");\n$RefreshReg$(_c7, \"Wi\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/@walletconnect+universal-provider@2.11.0/node_modules/@walletconnect/universal-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/cross-fetch@3.1.8/node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/cross-fetch@3.1.8/node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar global = typeof self !== \"undefined\" ? self : void 0;\nvar __self__ = function() {\n    function F() {\n        this.fetch = false;\n        this.DOMException = global.DOMException;\n    }\n    F.prototype = global;\n    return new F();\n}();\n(function(self1) {\n    var irrelevant = function(exports1) {\n        var support = {\n            searchParams: \"URLSearchParams\" in self1,\n            iterable: \"Symbol\" in self1 && \"iterator\" in Symbol,\n            blob: \"FileReader\" in self1 && \"Blob\" in self1 && function() {\n                try {\n                    new Blob();\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }(),\n            formData: \"FormData\" in self1,\n            arrayBuffer: \"ArrayBuffer\" in self1\n        };\n        function isDataView(obj) {\n            return obj && DataView.prototype.isPrototypeOf(obj);\n        }\n        if (support.arrayBuffer) {\n            var viewClasses = [\n                \"[object Int8Array]\",\n                \"[object Uint8Array]\",\n                \"[object Uint8ClampedArray]\",\n                \"[object Int16Array]\",\n                \"[object Uint16Array]\",\n                \"[object Int32Array]\",\n                \"[object Uint32Array]\",\n                \"[object Float32Array]\",\n                \"[object Float64Array]\"\n            ];\n            var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n            };\n        }\n        function normalizeName(name) {\n            if (typeof name !== \"string\") {\n                name = String(name);\n            }\n            if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n                throw new TypeError(\"Invalid character in header field name\");\n            }\n            return name.toLowerCase();\n        }\n        function normalizeValue(value) {\n            if (typeof value !== \"string\") {\n                value = String(value);\n            }\n            return value;\n        }\n        // Build a destructive iterator for the value list\n        function iteratorFor(items) {\n            var iterator = {\n                next: function() {\n                    var value = items.shift();\n                    return {\n                        done: value === undefined,\n                        value: value\n                    };\n                }\n            };\n            if (support.iterable) {\n                iterator[Symbol.iterator] = function() {\n                    return iterator;\n                };\n            }\n            return iterator;\n        }\n        function Headers(headers) {\n            this.map = {};\n            if (headers instanceof Headers) {\n                headers.forEach(function(value, name) {\n                    this.append(name, value);\n                }, this);\n            } else if (Array.isArray(headers)) {\n                headers.forEach(function(header) {\n                    this.append(header[0], header[1]);\n                }, this);\n            } else if (headers) {\n                Object.getOwnPropertyNames(headers).forEach(function(name) {\n                    this.append(name, headers[name]);\n                }, this);\n            }\n        }\n        Headers.prototype.append = function(name, value) {\n            name = normalizeName(name);\n            value = normalizeValue(value);\n            var oldValue = this.map[name];\n            this.map[name] = oldValue ? oldValue + \", \" + value : value;\n        };\n        Headers.prototype[\"delete\"] = function(name) {\n            delete this.map[normalizeName(name)];\n        };\n        Headers.prototype.get = function(name) {\n            name = normalizeName(name);\n            return this.has(name) ? this.map[name] : null;\n        };\n        Headers.prototype.has = function(name) {\n            return this.map.hasOwnProperty(normalizeName(name));\n        };\n        Headers.prototype.set = function(name, value) {\n            this.map[normalizeName(name)] = normalizeValue(value);\n        };\n        Headers.prototype.forEach = function(callback, thisArg) {\n            for(var name in this.map){\n                if (this.map.hasOwnProperty(name)) {\n                    callback.call(thisArg, this.map[name], name, this);\n                }\n            }\n        };\n        Headers.prototype.keys = function() {\n            var items = [];\n            this.forEach(function(value, name) {\n                items.push(name);\n            });\n            return iteratorFor(items);\n        };\n        Headers.prototype.values = function() {\n            var items = [];\n            this.forEach(function(value) {\n                items.push(value);\n            });\n            return iteratorFor(items);\n        };\n        Headers.prototype.entries = function() {\n            var items = [];\n            this.forEach(function(value, name) {\n                items.push([\n                    name,\n                    value\n                ]);\n            });\n            return iteratorFor(items);\n        };\n        if (support.iterable) {\n            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n        }\n        function consumed(body) {\n            if (body.bodyUsed) {\n                return Promise.reject(new TypeError(\"Already read\"));\n            }\n            body.bodyUsed = true;\n        }\n        function fileReaderReady(reader) {\n            return new Promise(function(resolve, reject) {\n                reader.onload = function() {\n                    resolve(reader.result);\n                };\n                reader.onerror = function() {\n                    reject(reader.error);\n                };\n            });\n        }\n        function readBlobAsArrayBuffer(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsArrayBuffer(blob);\n            return promise;\n        }\n        function readBlobAsText(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsText(blob);\n            return promise;\n        }\n        function readArrayBufferAsText(buf) {\n            var view = new Uint8Array(buf);\n            var chars = new Array(view.length);\n            for(var i = 0; i < view.length; i++){\n                chars[i] = String.fromCharCode(view[i]);\n            }\n            return chars.join(\"\");\n        }\n        function bufferClone(buf) {\n            if (buf.slice) {\n                return buf.slice(0);\n            } else {\n                var view = new Uint8Array(buf.byteLength);\n                view.set(new Uint8Array(buf));\n                return view.buffer;\n            }\n        }\n        function Body() {\n            this.bodyUsed = false;\n            this._initBody = function(body) {\n                this._bodyInit = body;\n                if (!body) {\n                    this._bodyText = \"\";\n                } else if (typeof body === \"string\") {\n                    this._bodyText = body;\n                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n                    this._bodyBlob = body;\n                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n                    this._bodyFormData = body;\n                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                    this._bodyText = body.toString();\n                } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n                    this._bodyArrayBuffer = bufferClone(body.buffer);\n                    // IE 10-11 can't handle a DataView body.\n                    this._bodyInit = new Blob([\n                        this._bodyArrayBuffer\n                    ]);\n                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n                    this._bodyArrayBuffer = bufferClone(body);\n                } else {\n                    this._bodyText = body = Object.prototype.toString.call(body);\n                }\n                if (!this.headers.get(\"content-type\")) {\n                    if (typeof body === \"string\") {\n                        this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n                    } else if (this._bodyBlob && this._bodyBlob.type) {\n                        this.headers.set(\"content-type\", this._bodyBlob.type);\n                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                        this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n                    }\n                }\n            };\n            if (support.blob) {\n                this.blob = function() {\n                    var rejected = consumed(this);\n                    if (rejected) {\n                        return rejected;\n                    }\n                    if (this._bodyBlob) {\n                        return Promise.resolve(this._bodyBlob);\n                    } else if (this._bodyArrayBuffer) {\n                        return Promise.resolve(new Blob([\n                            this._bodyArrayBuffer\n                        ]));\n                    } else if (this._bodyFormData) {\n                        throw new Error(\"could not read FormData body as blob\");\n                    } else {\n                        return Promise.resolve(new Blob([\n                            this._bodyText\n                        ]));\n                    }\n                };\n                this.arrayBuffer = function() {\n                    if (this._bodyArrayBuffer) {\n                        return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n                    } else {\n                        return this.blob().then(readBlobAsArrayBuffer);\n                    }\n                };\n            }\n            this.text = function() {\n                var rejected = consumed(this);\n                if (rejected) {\n                    return rejected;\n                }\n                if (this._bodyBlob) {\n                    return readBlobAsText(this._bodyBlob);\n                } else if (this._bodyArrayBuffer) {\n                    return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n                } else if (this._bodyFormData) {\n                    throw new Error(\"could not read FormData body as text\");\n                } else {\n                    return Promise.resolve(this._bodyText);\n                }\n            };\n            if (support.formData) {\n                this.formData = function() {\n                    return this.text().then(decode);\n                };\n            }\n            this.json = function() {\n                return this.text().then(JSON.parse);\n            };\n            return this;\n        }\n        // HTTP methods whose capitalization should be normalized\n        var methods = [\n            \"DELETE\",\n            \"GET\",\n            \"HEAD\",\n            \"OPTIONS\",\n            \"POST\",\n            \"PUT\"\n        ];\n        function normalizeMethod(method) {\n            var upcased = method.toUpperCase();\n            return methods.indexOf(upcased) > -1 ? upcased : method;\n        }\n        function Request(input, options) {\n            options = options || {};\n            var body = options.body;\n            if (input instanceof Request) {\n                if (input.bodyUsed) {\n                    throw new TypeError(\"Already read\");\n                }\n                this.url = input.url;\n                this.credentials = input.credentials;\n                if (!options.headers) {\n                    this.headers = new Headers(input.headers);\n                }\n                this.method = input.method;\n                this.mode = input.mode;\n                this.signal = input.signal;\n                if (!body && input._bodyInit != null) {\n                    body = input._bodyInit;\n                    input.bodyUsed = true;\n                }\n            } else {\n                this.url = String(input);\n            }\n            this.credentials = options.credentials || this.credentials || \"same-origin\";\n            if (options.headers || !this.headers) {\n                this.headers = new Headers(options.headers);\n            }\n            this.method = normalizeMethod(options.method || this.method || \"GET\");\n            this.mode = options.mode || this.mode || null;\n            this.signal = options.signal || this.signal;\n            this.referrer = null;\n            if ((this.method === \"GET\" || this.method === \"HEAD\") && body) {\n                throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n            }\n            this._initBody(body);\n        }\n        Request.prototype.clone = function() {\n            return new Request(this, {\n                body: this._bodyInit\n            });\n        };\n        function decode(body) {\n            var form = new FormData();\n            body.trim().split(\"&\").forEach(function(bytes) {\n                if (bytes) {\n                    var split = bytes.split(\"=\");\n                    var name = split.shift().replace(/\\+/g, \" \");\n                    var value = split.join(\"=\").replace(/\\+/g, \" \");\n                    form.append(decodeURIComponent(name), decodeURIComponent(value));\n                }\n            });\n            return form;\n        }\n        function parseHeaders(rawHeaders) {\n            var headers = new Headers();\n            // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n            // https://tools.ietf.org/html/rfc7230#section-3.2\n            var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, \" \");\n            preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n                var parts = line.split(\":\");\n                var key = parts.shift().trim();\n                if (key) {\n                    var value = parts.join(\":\").trim();\n                    headers.append(key, value);\n                }\n            });\n            return headers;\n        }\n        Body.call(Request.prototype);\n        function Response(bodyInit, options) {\n            if (!options) {\n                options = {};\n            }\n            this.type = \"default\";\n            this.status = options.status === undefined ? 200 : options.status;\n            this.ok = this.status >= 200 && this.status < 300;\n            this.statusText = \"statusText\" in options ? options.statusText : \"OK\";\n            this.headers = new Headers(options.headers);\n            this.url = options.url || \"\";\n            this._initBody(bodyInit);\n        }\n        Body.call(Response.prototype);\n        Response.prototype.clone = function() {\n            return new Response(this._bodyInit, {\n                status: this.status,\n                statusText: this.statusText,\n                headers: new Headers(this.headers),\n                url: this.url\n            });\n        };\n        Response.error = function() {\n            var response = new Response(null, {\n                status: 0,\n                statusText: \"\"\n            });\n            response.type = \"error\";\n            return response;\n        };\n        var redirectStatuses = [\n            301,\n            302,\n            303,\n            307,\n            308\n        ];\n        Response.redirect = function(url, status) {\n            if (redirectStatuses.indexOf(status) === -1) {\n                throw new RangeError(\"Invalid status code\");\n            }\n            return new Response(null, {\n                status: status,\n                headers: {\n                    location: url\n                }\n            });\n        };\n        exports1.DOMException = self1.DOMException;\n        try {\n            new exports1.DOMException();\n        } catch (err) {\n            exports1.DOMException = function(message, name) {\n                this.message = message;\n                this.name = name;\n                var error = Error(message);\n                this.stack = error.stack;\n            };\n            exports1.DOMException.prototype = Object.create(Error.prototype);\n            exports1.DOMException.prototype.constructor = exports1.DOMException;\n        }\n        function fetch(input, init) {\n            return new Promise(function(resolve, reject) {\n                var request = new Request(input, init);\n                if (request.signal && request.signal.aborted) {\n                    return reject(new exports1.DOMException(\"Aborted\", \"AbortError\"));\n                }\n                var xhr = new XMLHttpRequest();\n                function abortXhr() {\n                    xhr.abort();\n                }\n                xhr.onload = function() {\n                    var options = {\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        headers: parseHeaders(xhr.getAllResponseHeaders() || \"\")\n                    };\n                    options.url = \"responseURL\" in xhr ? xhr.responseURL : options.headers.get(\"X-Request-URL\");\n                    var body = \"response\" in xhr ? xhr.response : xhr.responseText;\n                    resolve(new Response(body, options));\n                };\n                xhr.onerror = function() {\n                    reject(new TypeError(\"Network request failed\"));\n                };\n                xhr.ontimeout = function() {\n                    reject(new TypeError(\"Network request failed\"));\n                };\n                xhr.onabort = function() {\n                    reject(new exports1.DOMException(\"Aborted\", \"AbortError\"));\n                };\n                xhr.open(request.method, request.url, true);\n                if (request.credentials === \"include\") {\n                    xhr.withCredentials = true;\n                } else if (request.credentials === \"omit\") {\n                    xhr.withCredentials = false;\n                }\n                if (\"responseType\" in xhr && support.blob) {\n                    xhr.responseType = \"blob\";\n                }\n                request.headers.forEach(function(value, name) {\n                    xhr.setRequestHeader(name, value);\n                });\n                if (request.signal) {\n                    request.signal.addEventListener(\"abort\", abortXhr);\n                    xhr.onreadystatechange = function() {\n                        // DONE (success or failure)\n                        if (xhr.readyState === 4) {\n                            request.signal.removeEventListener(\"abort\", abortXhr);\n                        }\n                    };\n                }\n                xhr.send(typeof request._bodyInit === \"undefined\" ? null : request._bodyInit);\n            });\n        }\n        fetch.polyfill = true;\n        if (!self1.fetch) {\n            self1.fetch = fetch;\n            self1.Headers = Headers;\n            self1.Request = Request;\n            self1.Response = Response;\n        }\n        exports1.Headers = Headers;\n        exports1.Request = Request;\n        exports1.Response = Response;\n        exports1.fetch = fetch;\n        Object.defineProperty(exports1, \"__esModule\", {\n            value: true\n        });\n        return exports1;\n    }({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\n;\nexports[\"default\"] = ctx.fetch // For TypeScript consumers without esModuleInterop.\n;\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\n;\nexports.Headers = ctx.Headers;\nexports.Request = ctx.Request;\nexports.Response = ctx.Response;\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9jcm9zcy1mZXRjaEAzLjEuOC9ub2RlX21vZHVsZXMvY3Jvc3MtZmV0Y2gvZGlzdC9icm93c2VyLXBvbnlmaWxsLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxTQUFTLE9BQU9DLFNBQVMsY0FBY0EsT0FBTztBQUNsRCxJQUFJQyxXQUFXO0lBQ2YsU0FBU0M7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsWUFBWSxHQUFHTCxPQUFPSyxZQUFZO0lBQ3ZDO0lBQ0FGLEVBQUVHLFNBQVMsR0FBR047SUFDZCxPQUFPLElBQUlHO0FBQ1g7QUFDQyxVQUFTRixLQUFJO0lBRWQsSUFBSU0sYUFBYSxTQUFXQyxRQUFPO1FBRWpDLElBQUlDLFVBQVU7WUFDWkMsY0FBYyxxQkFBcUJUO1lBQ25DVSxVQUFVLFlBQVlWLFNBQVEsY0FBY1c7WUFDNUNDLE1BQ0UsZ0JBQWdCWixTQUNoQixVQUFVQSxTQUNWO2dCQUNFLElBQUk7b0JBQ0YsSUFBSWE7b0JBQ0osT0FBTztnQkFDVCxFQUFFLE9BQU9DLEdBQUc7b0JBQ1YsT0FBTztnQkFDVDtZQUNGO1lBQ0ZDLFVBQVUsY0FBY2Y7WUFDeEJnQixhQUFhLGlCQUFpQmhCO1FBQ2hDO1FBRUEsU0FBU2lCLFdBQVdDLEdBQUc7WUFDckIsT0FBT0EsT0FBT0MsU0FBU2QsU0FBUyxDQUFDZSxhQUFhLENBQUNGO1FBQ2pEO1FBRUEsSUFBSVYsUUFBUVEsV0FBVyxFQUFFO1lBQ3ZCLElBQUlLLGNBQWM7Z0JBQ2hCO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0Q7WUFFRCxJQUFJQyxvQkFDRkMsWUFBWUMsTUFBTSxJQUNsQixTQUFTTixHQUFHO2dCQUNWLE9BQU9BLE9BQU9HLFlBQVlJLE9BQU8sQ0FBQ0MsT0FBT3JCLFNBQVMsQ0FBQ3NCLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDVixRQUFRLENB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QUFLLEdBQUdBO1FBRWhCdUIsT0FBT3NKLGNBQWMsQ0FBQ3pLLFVBQVMsY0FBYztZQUFFNkIsT0FBTztRQUFLO1FBRTNELE9BQU83QjtJQUVULEVBQUcsQ0FBQztBQUNKLEdBQUdOO0FBQ0hBLFNBQVNFLEtBQUssQ0FBQzhLLFFBQVEsR0FBRztBQUMxQixtREFBbUQ7QUFDbkQsT0FBT2hMLFNBQVNFLEtBQUssQ0FBQzRLLFFBQVE7QUFDOUIsb0ZBQW9GO0FBQ3BGLDhDQUE4QztBQUM5QyxJQUFJRyxNQUFNakwsVUFBVSx1REFBdUQ7QUFDM0VNLFVBQVUySyxJQUFJL0ssS0FBSyxDQUFDLDZDQUE2Qzs7QUFDakVJLGtCQUFlLEdBQUcySyxJQUFJL0ssS0FBSyxDQUFDLG9EQUFvRDs7QUFDaEZJLGFBQWEsR0FBRzJLLElBQUkvSyxLQUFLLENBQUMsK0NBQStDOztBQUN6RUksZUFBZSxHQUFHMkssSUFBSXRJLE9BQU87QUFDN0JyQyxlQUFlLEdBQUcySyxJQUFJNUQsT0FBTztBQUM3Qi9HLGdCQUFnQixHQUFHMkssSUFBSXZDLFFBQVE7QUFDL0J5QyxPQUFPN0ssT0FBTyxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3MtZmV0Y2hAMy4xLjgvbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3QvYnJvd3Nlci1wb255ZmlsbC5qcz80MjUwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcztcbnZhciBfX3NlbGZfXyA9IChmdW5jdGlvbiAoKSB7XG5mdW5jdGlvbiBGKCkge1xudGhpcy5mZXRjaCA9IGZhbHNlO1xudGhpcy5ET01FeGNlcHRpb24gPSBnbG9iYWwuRE9NRXhjZXB0aW9uXG59XG5GLnByb3RvdHlwZSA9IGdsb2JhbDtcbnJldHVybiBuZXcgRigpO1xufSkoKTtcbihmdW5jdGlvbihzZWxmKSB7XG5cbnZhciBpcnJlbGV2YW50ID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6XG4gICAgICAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJlxuICAgICAgJ0Jsb2InIGluIHNlbGYgJiZcbiAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBuZXcgQmxvYigpO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfTtcblxuICBmdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdO1xuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9O1xuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXTtcbiAgICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGl0ZW1zLnB1c2gobmFtZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xuICAgICAgfTtcbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpO1xuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcik7XG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYik7XG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aCk7XG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKTtcbiAgICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHk7XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcik7XG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keTtcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmw7XG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHM7XG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kO1xuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZTtcbiAgICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsO1xuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXQ7XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpO1xuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJztcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKTtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGw7XG4gICAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbDtcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbDtcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSk7XG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxuICB9O1xuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICBib2R5XG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoJyYnKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKTtcbiAgICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKTtcbiAgICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6Jyk7XG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKCk7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKCk7XG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBoZWFkZXJzXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnO1xuICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzO1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDA7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snO1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJztcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdCk7XG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKTtcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9O1xuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSk7XG4gICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcic7XG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH07XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdO1xuXG4gIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG4gIH07XG5cbiAgZXhwb3J0cy5ET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvbjtcbiAgdHJ5IHtcbiAgICBuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXhwb3J0cy5ET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrO1xuICAgIH07XG4gICAgZXhwb3J0cy5ET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGV4cG9ydHMuRE9NRXhjZXB0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgICAgfVxuXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfTtcbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKTtcbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocik7XG5cbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdCk7XG4gICAgfSlcbiAgfVxuXG4gIGZldGNoLnBvbHlmaWxsID0gdHJ1ZTtcblxuICBpZiAoIXNlbGYuZmV0Y2gpIHtcbiAgICBzZWxmLmZldGNoID0gZmV0Y2g7XG4gICAgc2VsZi5IZWFkZXJzID0gSGVhZGVycztcbiAgICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0O1xuICAgIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgfVxuXG4gIGV4cG9ydHMuSGVhZGVycyA9IEhlYWRlcnM7XG4gIGV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG4gIGV4cG9ydHMuUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgZXhwb3J0cy5mZXRjaCA9IGZldGNoO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0pKHt9KTtcbn0pKF9fc2VsZl9fKTtcbl9fc2VsZl9fLmZldGNoLnBvbnlmaWxsID0gdHJ1ZTtcbi8vIFJlbW92ZSBcInBvbHlmaWxsXCIgcHJvcGVydHkgYWRkZWQgYnkgd2hhdHdnLWZldGNoXG5kZWxldGUgX19zZWxmX18uZmV0Y2gucG9seWZpbGw7XG4vLyBDaG9vc2UgYmV0d2VlbiBuYXRpdmUgaW1wbGVtZW50YXRpb24gKGdsb2JhbCkgb3IgY3VzdG9tIGltcGxlbWVudGF0aW9uIChfX3NlbGZfXylcbi8vIHZhciBjdHggPSBnbG9iYWwuZmV0Y2ggPyBnbG9iYWwgOiBfX3NlbGZfXztcbnZhciBjdHggPSBfX3NlbGZfXzsgLy8gdGhpcyBsaW5lIGRpc2FibGUgc2VydmljZSB3b3JrZXIgc3VwcG9ydCB0ZW1wb3JhcmlseVxuZXhwb3J0cyA9IGN0eC5mZXRjaCAvLyBUbyBlbmFibGU6IGltcG9ydCBmZXRjaCBmcm9tICdjcm9zcy1mZXRjaCdcbmV4cG9ydHMuZGVmYXVsdCA9IGN0eC5mZXRjaCAvLyBGb3IgVHlwZVNjcmlwdCBjb25zdW1lcnMgd2l0aG91dCBlc01vZHVsZUludGVyb3AuXG5leHBvcnRzLmZldGNoID0gY3R4LmZldGNoIC8vIFRvIGVuYWJsZTogaW1wb3J0IHtmZXRjaH0gZnJvbSAnY3Jvc3MtZmV0Y2gnXG5leHBvcnRzLkhlYWRlcnMgPSBjdHguSGVhZGVyc1xuZXhwb3J0cy5SZXF1ZXN0ID0gY3R4LlJlcXVlc3RcbmV4cG9ydHMuUmVzcG9uc2UgPSBjdHguUmVzcG9uc2Vcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1xuIl0sIm5hbWVzIjpbImdsb2JhbCIsInNlbGYiLCJfX3NlbGZfXyIsIkYiLCJmZXRjaCIsIkRPTUV4Y2VwdGlvbiIsInByb3RvdHlwZSIsImlycmVsZXZhbnQiLCJleHBvcnRzIiwic3VwcG9ydCIsInNlYXJjaFBhcmFtcyIsIml0ZXJhYmxlIiwiU3ltYm9sIiwiYmxvYiIsIkJsb2IiLCJlIiwiZm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsImlzRGF0YVZpZXciLCJvYmoiLCJEYXRhVmlldyIsImlzUHJvdG90eXBlT2YiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpbmRleE9mIiwiT2JqZWN0IiwidG9TdHJpbmciLCJjYWxsIiwibm9ybWFsaXplTmFtZSIsIm5hbWUiLCJTdHJpbmciLCJ0ZXN0IiwiVHlwZUVycm9yIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVWYWx1ZSIsInZhbHVlIiwiaXRlcmF0b3JGb3IiLCJpdGVtcyIsIml0ZXJhdG9yIiwibmV4dCIsInNoaWZ0IiwiZG9uZSIsInVuZGVmaW5lZCIsIkhlYWRlcnMiLCJoZWFkZXJzIiwibWFwIiwiZm9yRWFjaCIsImFwcGVuZCIsIkFycmF5IiwiaXNBcnJheSIsImhlYWRlciIsImdldE93blByb3BlcnR5TmFtZXMiLCJvbGRWYWx1ZSIsImdldCIsImhhcyIsImhhc093blByb3BlcnR5Iiwic2V0IiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwia2V5cyIsInB1c2giLCJ2YWx1ZXMiLCJlbnRyaWVzIiwiY29uc3VtZWQiLCJib2R5IiwiYm9keVVzZWQiLCJQcm9taXNlIiwicmVqZWN0IiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVzb2x2ZSIsIm9ubG9hZCIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsIkZpbGVSZWFkZXIiLCJwcm9taXNlIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJyZWFkQmxvYkFzVGV4dCIsInJlYWRBc1RleHQiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJidWYiLCJ2aWV3IiwiVWludDhBcnJheSIsImNoYXJzIiwibGVuZ3RoIiwiaSIsImZyb21DaGFyQ29kZSIsImpvaW4iLCJidWZmZXJDbG9uZSIsInNsaWNlIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJfYm9keUJsb2IiLCJGb3JtRGF0YSIsIl9ib2R5Rm9ybURhdGEiLCJVUkxTZWFyY2hQYXJhbXMiLCJfYm9keUFycmF5QnVmZmVyIiwidHlwZSIsInJlamVjdGVkIiwiRXJyb3IiLCJ0aGVuIiwidGV4dCIsImRlY29kZSIsImpzb24iLCJKU09OIiwicGFyc2UiLCJtZXRob2RzIiwibm9ybWFsaXplTWV0aG9kIiwibWV0aG9kIiwidXBjYXNlZCIsInRvVXBwZXJDYXNlIiwiUmVxdWVzdCIsImlucHV0Iiwib3B0aW9ucyIsInVybCIsImNyZWRlbnRpYWxzIiwibW9kZSIsInNpZ25hbCIsInJlZmVycmVyIiwiY2xvbmUiLCJmb3JtIiwidHJpbSIsInNwbGl0IiwiYnl0ZXMiLCJyZXBsYWNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VIZWFkZXJzIiwicmF3SGVhZGVycyIsInByZVByb2Nlc3NlZEhlYWRlcnMiLCJsaW5lIiwicGFydHMiLCJrZXkiLCJSZXNwb25zZSIsImJvZHlJbml0Iiwic3RhdHVzIiwib2siLCJzdGF0dXNUZXh0IiwicmVzcG9uc2UiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwibG9jYXRpb24iLCJlcnIiLCJtZXNzYWdlIiwic3RhY2siLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImluaXQiLCJyZXF1ZXN0IiwiYWJvcnRlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiYWJvcnRYaHIiLCJhYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0Iiwib250aW1lb3V0Iiwib25hYm9ydCIsIm9wZW4iLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2VuZCIsInBvbHlmaWxsIiwiZGVmaW5lUHJvcGVydHkiLCJwb255ZmlsbCIsImN0eCIsImRlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/cross-fetch@3.1.8/node_modules/cross-fetch/dist/browser-ponyfill.js\n"));

/***/ })

}]);